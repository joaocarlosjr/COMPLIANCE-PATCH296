create or replace package body csf_own.pk_gera_arq_efd is

-------------------------------------------------------------------------------------------------------
-- Especificação do pacote de procedimentos de criação do arquivo do sped fiscal 
-------------------------------------------------------------------------------------------------------

--| Procedimento que inicia as matriz de dados
procedure pkb_inicia_dados
is
   --
begin
--
-- BLOCO 0: ABERTURA, IDENTIFICAÇÃO E REFERÊNCIAS
--
--| REGISTRO 0000: ABERTURA DO ARQUIVO DIGITAL E IDENTIFICAÇÃO DA ENTIDADE
   vt_tab_reg_0000.delete;
   vt_tab_reg_0001.delete;
   vt_tab_reg_0002.delete;
   vt_tab_reg_0005.delete;
   vt_tab_reg_0015.delete;
   vt_tab_reg_0100.delete;
   vt_tab_reg_0150.delete;
   vt_bi_tab_reg_0175.delete;
   vt_tab_reg_0190.delete;
   vt_tab_reg_0200.delete;
   vt_bi_tab_reg_0205.delete;
   vt_bi_tab_reg_0206.delete;
   vt_bi_tab_reg_0220.delete;
   vt_tab_reg_0300.delete;
   vt_bi_tab_reg_0305.delete;
   vt_tab_reg_0400.delete;
   vt_tab_reg_0450.delete;
   vt_tab_reg_0460.delete;
   vt_tab_reg_0500.delete;
   vt_tab_reg_0600.delete;
   vt_tab_reg_0990.delete;
--


-- BLOCO B: APURAÇÃO DO ISS (SEFAZ DF)
  vt_tab_reg_b001.delete;
  vt_tab_reg_b020.delete;
  vt_bi_tab_reg_b025.delete;
  vt_tab_reg_b420.delete;
  vt_tab_reg_b440.delete;
  vt_tab_reg_b460.delete;
  vt_tab_reg_b470.delete;
  vt_tab_reg_b990.delete;

-- BLOCO C: DOCUMENTOS FISCAIS I - MERCADORIAS (ICMS/IPI)
--
--| REGISTRO C001: ABERTURA DO BLOCO C
   vt_tab_reg_c001.delete;
   vt_tab_reg_c100.delete;
   vt_tab_reg_c101.delete;
   vt_bi_tab_reg_c105.delete;
   vt_bi_tab_reg_c110.delete;
   vt_tri_tab_reg_c111.delete;
   vt_tri_tab_reg_c112.delete;
   vt_tri_tab_reg_c113.delete;
   vt_tri_tab_reg_c114.delete;
   vt_tri_tab_reg_c115.delete;
   vt_tri_tab_reg_c116.delete;
   vt_bi_tab_reg_c120.delete;
   vt_bi_tab_reg_c130.delete;
   vt_bi_tab_reg_c140.delete;
   vt_tri_tab_reg_c141.delete;
   vt_bi_tab_reg_c160.delete;
   vt_bi_tab_reg_c165.delete;
   vt_bi_tab_reg_c170.delete;
   vt_tri_tab_reg_c171.delete;
   vt_tri_tab_reg_c172.delete;
   vt_tri_tab_reg_c173.delete;
   vt_tri_tab_reg_c174.delete;
   vt_tri_tab_reg_c175.delete;
   vt_tri_tab_reg_c176.delete;
   vt_tri_tab_reg_c177.delete;
   vt_tri_tab_reg_c178.delete;
   vt_tri_tab_reg_c179.delete;
   vt_bi_tab_reg_c190.delete;
   vt_tri_tab_reg_c191.delete;
   vt_bi_tab_reg_c195.delete;
   vt_tri_tab_reg_c197.delete;
   vt_tab_reg_c300.delete;
   vt_bi_tab_reg_c310.delete;
   vt_bi_tab_reg_c320.delete;
   vt_tri_tab_reg_c321.delete;
   vt_tab_reg_c350.delete;
   vt_bi_tab_reg_c370.delete;
   vt_bi_tab_reg_c390.delete;
   vt_tab_reg_c400.delete;
   vt_bi_tab_reg_c405.delete;
   vt_tri_tab_reg_c410.delete;
   vt_tri_tab_reg_c420.delete;
   vt_tetra_tab_reg_c425.delete;
   vt_tri_tab_reg_c460.delete;
   vt_tetra_tab_reg_c470.delete;
   vt_tri_tab_reg_c490.delete;
   vt_tab_reg_c495.delete;
   vt_tab_reg_c500.delete;
   vt_bi_tab_reg_c510.delete;
   vt_bi_tab_reg_c590.delete;
   vt_tri_tab_reg_c591.delete;
   vt_bi_tab_reg_c595.delete;
   vt_tri_tab_reg_c597.delete;
   vt_tab_reg_c600.delete;
   vt_bi_tab_reg_c601.delete;
   vt_bi_tab_reg_c610.delete;
   vt_bi_tab_reg_c690.delete;
   vt_tab_reg_c700.delete;
   vt_bi_tab_reg_c790.delete;
   vt_tri_tab_reg_c791.delete;
   vt_tab_reg_c800.delete;
   vt_bi_tab_reg_c850.delete;
   vt_tab_reg_c860.delete;
   vt_bi_tab_reg_c890.delete;
   vt_tab_reg_c990.delete;
--
-- BLOCO D: DOCUMENTOS FISCAIS II - SERVIÇOS (ICMS).
--
--| REGISTRO D001: ABERTURA DO BLOCO D
   vt_tab_reg_d001.delete;
   vt_tab_reg_d100.delete;
   vt_bi_tab_reg_d110.delete;
   vt_tri_tab_reg_d120.delete;
   vt_bi_tab_reg_d130.delete;
   vt_bi_tab_reg_d140.delete;
   vt_bi_tab_reg_d150.delete;
   vt_bi_tab_reg_d160.delete;
   vt_tri_tab_reg_d161.delete;
   vt_tri_tab_reg_d162.delete;
   vt_bi_tab_reg_d170.delete;
   vt_bi_tab_reg_d180.delete;
   vt_bi_tab_reg_d190.delete;
   vt_bi_tab_reg_d195.delete;
   vt_tri_tab_reg_d197.delete;
   vt_tab_reg_d300.delete;
   vt_bi_tab_reg_d301.delete;
   vt_bi_tab_reg_d310.delete;
   vt_tab_reg_d350.delete;
   vt_bi_tab_reg_d355.delete;
   vt_tri_tab_reg_d360.delete;
   vt_tri_tab_reg_d365.delete;
   vt_tetra_tab_reg_d370.delete;
   vt_tri_tab_reg_d390.delete;
   vt_tab_reg_d400.delete;
   vt_bi_tab_reg_d410.delete;
   vt_tri_tab_reg_d411.delete;
   vt_bi_tab_reg_d420.delete;
   vt_tab_reg_d500.delete;
   vt_bi_tab_reg_d510.delete;
   vt_bi_tab_reg_d530.delete;
   vt_bi_tab_reg_d590.delete;
   vt_tab_reg_d600.delete;
   vt_bi_tab_reg_d610.delete;
   vt_bi_tab_reg_d690.delete;
   vt_tab_reg_d695.delete;
   vt_bi_tab_reg_d696.delete;
   vt_tri_tab_reg_d697.delete;
   vt_tab_reg_d990.delete;
--
-- BLOCO E: APURAÇÃO DO ICMS E DO IPI
--
--| REGISTRO E001: ABERTURA DO BLOCO E
   vt_tab_reg_e001.delete;
   vt_tab_reg_e100.delete;
   vt_tab_reg_e110.delete;
   vt_bi_tab_reg_e111.delete;
   vt_tri_tab_reg_e112.delete;
   vt_tri_tab_reg_e113.delete;
   vt_bi_tab_reg_e115.delete;
   vt_bi_tab_reg_e116.delete;
   vt_tab_reg_e200.delete;
   vt_tab_reg_e210.delete;
   vt_bi_tab_reg_e220.delete;
   vt_tri_tab_reg_e230.delete;
   vt_tri_tab_reg_e240.delete;
   vt_bi_tab_reg_e250.delete;
   --
   vt_tab_reg_e300.delete;
   vt_tab_reg_e310.delete;
   vt_bi_tab_reg_e311.delete;
   vt_tri_tab_reg_e312.delete;
   vt_tri_tab_reg_e313.delete;
   vt_bi_tab_reg_e316.delete;
   --
   vt_tab_reg_e500.delete;
   vt_bi_tab_reg_e510.delete;
   vt_tab_reg_e520.delete;
   vt_bi_tab_reg_e530.delete;
   vt_tri_tab_reg_e531.delete;
   vt_tab_reg_e990.delete;
--
-- BLOCO G - CONTROLE DO CRÉDITO DE ICMS DO ATIVO PERMANENTE - CIAP - modelos -C- e -D-
--
   vt_tab_reg_g001.delete;
   vt_tab_reg_g110.delete;
   vt_bi_tab_reg_g125.delete;
   vt_tri_tab_reg_g126.delete;
   vt_tri_tab_reg_g130.delete;
   vt_tetra_tab_reg_g140.delete;
   vt_tab_reg_g990.delete;
--
-- BLOCO H: INVENTÁRIO FÍSICO
--
--| REGISTRO H001: ABERTURA DO BLOCO H
   vt_tab_reg_h001.delete;
   vt_tab_reg_h005.delete;
   vt_bi_tab_reg_h010.delete;
   vt_tri_tab_reg_h020.delete;
   vt_tab_reg_h990.delete;
--
-- BLOCO K: CONTROLE DA PRODUÇÃO E DO ESTOQUE
--
   vt_tab_reg_k001.delete;
   vt_tab_reg_k100.delete;
   vt_bi_tab_reg_k200.delete;
   vt_bi_tab_reg_k210.delete;
   vt_tri_tab_reg_k215.delete;
   vt_bi_tab_reg_k220.delete;
   vt_bi_tab_reg_k230.delete;
   vt_tri_tab_reg_k235.delete;
   vt_bi_tab_reg_k250.delete;
   vt_tri_tab_reg_k255.delete;
   vt_bi_tab_reg_k260.delete;
   vt_tri_tab_reg_k265.delete;
   vt_bi_tab_reg_k270.delete;
   vt_tri_tab_reg_k275.delete;
   vt_bi_tab_reg_k280.delete;
   vt_tab_reg_k990.delete;
--
-- BLOCO 1: OUTRAS INFORMAÇÕES
--
--| REGISTRO 1001: ABERTURA DO BLOCO 1
   vt_tab_reg_1001.delete;
   vt_tab_reg_1010.delete;
   vt_tab_reg_1100.delete;
   vt_bi_tab_reg_1105.delete;
   vt_tri_tab_reg_1110.delete;
   vt_tab_reg_1200.delete;
   vt_bi_tab_reg_1210.delete;
   vt_tab_reg_1300.delete;
   vt_bi_tab_reg_1310.delete;
   vt_tri_tab_reg_1320.delete;
   vt_tab_reg_1350.delete;
   vt_bi_tab_reg_1360.delete;
   vt_bi_tab_reg_1370.delete;
   vt_tab_reg_1390.delete;
   vt_bi_tab_reg_1391.delete;
   vt_tab_reg_1400.delete;
   vt_tab_reg_1500.delete;
   vt_bi_tab_reg_1510.delete;
   vt_tab_reg_1600.delete;
   vt_tab_reg_1700.delete;
   vt_bi_tab_reg_1710.delete;
   vt_tab_reg_1800.delete;
   vt_tab_reg_1900.delete;
   vt_tab_reg_1910.delete;
   vt_tab_reg_1920.delete;
   vt_bi_tab_reg_1921.delete;
   vt_tri_tab_reg_1922.delete;
   vt_tri_tab_reg_1923.delete;
   vt_bi_tab_reg_1925.delete;
   vt_bi_tab_reg_1926.delete;
   vt_tab_reg_1960.delete;
   vt_tab_reg_1970.delete;
   vt_bi_tab_reg_1975.delete;
   vt_tab_reg_1980.delete;
   vt_tab_reg_1990.delete;
--
-- BLOCO 9: CONTROLE E ENCERRAMENTO DO ARQUIVO DIGITAL
--
--| REGISTRO 9001: ABERTURA DO BLOCO 9
   vt_tab_reg_9001.delete;
   vt_tab_reg_9900.delete;
   vt_tab_reg_9990.delete;
   vt_tab_reg_9999.delete;
   --
   vt_estr_arq_efd.delete;
   --
end pkb_inicia_dados;

-------------------------------------------------------------------------------------------------------

-- Função verifica se o documento é de Antecipação de Credito de ICMS
function fkg_antecipacao_credito_icms( en_notafiscal_id   in   nota_fiscal.id%type ) 
         return number
is

   vn_antecipacao_credito_icms  number := 0;

begin
   -- Antecipação de credito de ICMS 
   select 1
     into vn_antecipacao_credito_icms
     from nota_fiscal           nf
        , nota_fiscal_total     nt
        , mod_fiscal            mf
        , sit_docto             sd  
        , item_nota_fiscal      it
        , cfop                  cf        
        , imp_itemnf            ii
        , tipo_imposto          ti
        , nfinfor_fiscal        ni
        , inf_prov_docto_fiscal ip    
    where nf.id                    = en_notafiscal_id 
      and mf.id                    = nf.modfiscal_id
      and mf.cod_mod               = '55' 
      and sd.id                    = nf.sitdocto_id
      and sd.cd                    = '08' -- Documento Fiscal emitido com base em Regime Especial ou Norma Específica
      and nt.notafiscal_id         = nf.id
      and nvl(nt.vl_total_nf,0)    = 0   
      and it.notafiscal_id         = nf.id
      and nvl(it.vl_item_bruto,0)  = 0   
      and cf.id                    = it.cfop_id
      and cf.cd                   in (1949, 2949, 3949)        
      and ii.itemnf_id             = it.id
      and ii.dm_tipo               = 0 -- 0-Imposto / 1-retenção      
      and nvl(ii.vl_base_calc,0)   > 0 -- Valor da base de credito de ICMS maior que zero
      and nvl(ii.vl_imp_trib,0)    > 0 -- Valor de tributação de ICMS maior que zero
      and ti.id                    = ii.tipoimp_id   
      and ti.cd                    = 1 -- ICMS  
      and ni.notafiscal_id         = nf.id
      and ip.nfinforfisc_id        = ni.id;    
   --
   return vn_antecipacao_credito_icms;
   --   
exception
   when no_data_found then
      return 0;  
   when others then
      return 0;   
end fkg_antecipacao_credito_icms;

-------------------------------------------------------------------------------------------------------

-- Função formata o valor na mascara deseja pelo usuário
function fkg_formata_num ( en_num in number
                         , ev_mascara in varchar2
                         )
         return varchar2
is
   --
begin
   --
   if trim(ev_mascara) is not null then
      --
      return rtrim(ltrim(to_char(en_num, ev_mascara)));
      --
   else
      --
      return null;
      --
   end if;
   --
exception
   when others then
      return null;
end fkg_formata_num;

-------------------------------------------------------------------------------------------------------

-- Procedimento inicia os valores das váriaveis globais
procedure pkb_inicia_param ( en_aberturaefd_id in abertura_efd.id%type )
is
   --
   vn_fase  number := 0;
   --
begin
   --
   vn_fase := 1;
   --
   gt_row_abertura_efd := null;
   --
   vn_fase := 2;
   --
   select efd.*
     into gt_row_abertura_efd
     from abertura_efd efd
    where efd.id = en_aberturaefd_id;
   --
exception
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_inicia_param fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => en_aberturaefd_id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end pkb_inicia_param;

-------------------------------------------------------------------------------------------------------

-- Procedimento grava as informações da estrutura do arquivo do SPED Fiscal
procedure pkb_grava_estr_arq_efd
is
   --
   vn_fase  number := 0;
   PRAGMA   AUTONOMOUS_TRANSACTION;
   --
begin
   --
   vn_fase := 1;
   --
   if nvl(vt_estr_arq_efd.count,0) > 0 then
      --
      vn_fase := 2;
      --
      forAll i in 1 .. vt_estr_arq_efd.count
         insert into estr_arq_efd values vt_estr_arq_efd(i);
      --
      vn_fase := 3;
      --
      commit;
      --
   end if;
   --
exception
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_grava_estr_arq_efd fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end pkb_grava_estr_arq_efd;

-------------------------------------------------------------------------------------------------------

-- Procedimento que armazena a estrutura do arquivo da EFD em um array
procedure pkb_armaz_estr_arq_efd ( ev_reg_blc   in registro_efd.cod%type
                                 , el_conteudo  in estr_arq_efd.conteudo%type )
is
   --
   vn_fase    number := 0;
   vn_indice  number := 0;
   --
begin
   --
   vn_fase := 1;
   --
   if ev_reg_blc is not null and el_conteudo is not null then
      --
      vn_fase := 2;
      --
      vn_indice := nvl(vt_estr_arq_efd.count,0) + 1;
      --
      vn_fase := 3;
      --
      select estrarqefd_seq.nextval
        into vt_estr_arq_efd(vn_indice).id
        from dual;
      --
      vn_fase := 4;
      --
      vt_estr_arq_efd(vn_indice).aberturaefd_id := gt_row_abertura_efd.id;
      vt_estr_arq_efd(vn_indice).registroefd_id := pk_csf_efd.fkg_registro_efd_id( ev_cod => ev_reg_blc );
      vt_estr_arq_efd(vn_indice).sequencia      := vn_indice;
      vt_estr_arq_efd(vn_indice).conteudo       := el_conteudo || FINAL_DE_LINHA;
      gv_registro := vt_estr_arq_efd(vn_indice).registroefd_id;
      --
   end if;
   --
exception
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_armaz_estr_arq_efd fase(' || vn_fase || ' registro:'||gv_registro||' ): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end pkb_armaz_estr_arq_efd;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro 0000
function fkg_qtde_linha_reg_0000
         return number
is
   --
   vn_fase  number := 0;
   vn_qtde  number := 0;
   --
begin
   --
   vn_fase := 1;
   vn_qtde := nvl(vt_tab_reg_0000.count,0);
   vn_fase := 2;
   --
   return vn_qtde;
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_0000 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_0000;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro 0001
function fkg_qtde_linha_reg_0001
         return number
is
   --
   vn_fase  number := 0;
   vn_qtde  number := 0;
   --
begin
   --
   vn_fase := 1;
   vn_qtde := nvl(vt_tab_reg_0001.count,0);
   vn_fase := 2;
   --
   return vn_qtde;
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_0001 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_0001;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro 0002
function fkg_qtde_linha_reg_0002
         return number
is
   --
   vn_fase  number := 0;
   vn_qtde  number := 0;
   i        pls_integer;
   --
begin
   --
   vn_fase := 1;
   --
   if TO_DATE(gt_row_abertura_efd.dt_ini,'DD/MM/RRRR') >= TO_DATE('01/01/2020','DD/MM/RRRR') and gt_row_abertura_efd.dm_ind_ativ <> 1  then --Para o indicador ¿outros¿ não deve ser gerado o registro 0002 do Sped.
   --
   vn_qtde := nvl(vt_tab_reg_0002.count,0);
   --
   else
   vn_qtde := 0;
   end if;
   --
   vn_fase := 2;
   --
   return vn_qtde;
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_0002 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_0002;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro 0005
function fkg_qtde_linha_reg_0005
         return number
is
   --
   vn_fase  number := 0;
   vn_qtde  number := 0;
   --
begin
   --
   vn_fase := 1;
   vn_qtde := nvl(vt_tab_reg_0005.count,0);
   vn_fase := 2;
   --
   return vn_qtde;
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_0005 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_0005;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro 0015
function fkg_qtde_linha_reg_0015
         return number
is
   --
   vn_fase  number := 0;
   vn_qtde  number := 0;
   --
begin
   --
   vn_fase := 1;
   vn_qtde := nvl(vt_tab_reg_0015.count,0);
   vn_fase := 2;
   --
   return vn_qtde;
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_0015 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_0015;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro 0100
function fkg_qtde_linha_reg_0100
         return number
is
   --
   vn_fase  number := 0;
   vn_qtde  number := 0;
   --
begin
   --
   vn_fase := 1;
   vn_qtde := nvl(vt_tab_reg_0100.count,0);
   vn_fase := 2;
   --
   return vn_qtde;
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_0100 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_0100;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro 0150
function fkg_qtde_linha_reg_0150
         return number
is
   --
   vn_fase  number := 0;
   vn_qtde  number := 0;
   --
begin
   --
   vn_fase := 1;
   vn_qtde := nvl(vt_tab_reg_0150.count,0);
   vn_fase := 2;
   --
   return vn_qtde;
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_0150 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_0150;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro 0175
function fkg_qtde_linha_reg_0175
         return number
is
   --
   vn_fase       number := 0;
   vn_qtde       number := 0;
   vn_indice     pls_integer := 0;
   vn_indice_bi  pls_integer := 0;
   --
begin
   --
   vn_fase   := 1;
   vn_indice := nvl(vt_bi_tab_reg_0175.first,0);
   vn_qtde   := 0;
   vn_fase   := 2;
   --
   loop
      --
      vn_fase := 3;
      --
      if nvl(vn_indice,0) = 0 then
         exit;
      end if;
      --
      vn_fase := 4;
      --
      vn_indice_bi := nvl(vt_bi_tab_reg_0175(vn_indice).first,0);
      --
      vn_fase := 5;
      --
      loop
         --
         vn_fase := 6;
         --
         if nvl(vn_indice_bi,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 7;
         --
         vn_qtde := nvl(vn_qtde,0) + 1;
         --
         vn_fase := 8;
         --
         if vn_indice_bi = vt_bi_tab_reg_0175(vn_indice).last then
            exit;
         else
            vn_indice_bi := vt_bi_tab_reg_0175(vn_indice).next(vn_indice_bi);
         end if;
         --
      end loop;
      --
      vn_fase := 9;
      --
      if vn_indice = vt_bi_tab_reg_0175.last then
         exit;
      else
         vn_indice := vt_bi_tab_reg_0175.next(vn_indice);
      end if;
      --
   end loop;
   --
   vn_fase := 10;
   --
   return nvl(vn_qtde,0);
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_0175 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_0175;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro 0190
function fkg_qtde_linha_reg_0190
         return number
is
   --
   vn_fase  number := 0;
   vn_qtde  number := 0;
   --
begin
   --
   vn_fase := 1;
   vn_qtde := nvl(vt_tab_reg_0190.count,0);
   vn_fase := 2;
   --
   return vn_qtde;
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_0190 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_0190;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro 0200
function fkg_qtde_linha_reg_0200
         return number
is
   --
   vn_fase  number := 0;
   vn_qtde  number := 0;
   --
begin
   --
   vn_fase := 1;
   vn_qtde := nvl(vt_tab_reg_0200.count,0);
   vn_fase := 2;
   --
   return vn_qtde;
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_0200 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_0200;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro 0205
function fkg_qtde_linha_reg_0205
         return number
is
   --
   vn_fase       number := 0;
   vn_qtde       number := 0;
   vn_indice     pls_integer := 0;
   vn_indice_bi  pls_integer := 0;
   --
begin
   --
   vn_fase   := 1;
   vn_indice := nvl(vt_bi_tab_reg_0205.first,0);
   vn_qtde   := 0;
   vn_fase   := 2;
   --
   loop
      --
      vn_fase := 3;
      --
      if nvl(vn_indice,0) = 0 then
         exit;
      end if;
      --
      vn_fase := 4;
      --
      vn_indice_bi := nvl(vt_bi_tab_reg_0205(vn_indice).first,0);
      --
      vn_fase := 5;
      --
      loop
         --
         vn_fase := 6;
         --
         if nvl(vn_indice_bi,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 7;
         --
         vn_qtde := nvl(vn_qtde,0) + 1;
         --
         vn_fase := 8;
         --
         if vn_indice_bi = vt_bi_tab_reg_0205(vn_indice).last then
            exit;
         else
            vn_indice_bi := vt_bi_tab_reg_0205(vn_indice).next(vn_indice_bi);
         end if;
         --
      end loop;
      --
      vn_fase := 9;
      --
      if vn_indice = vt_bi_tab_reg_0205.last then
         exit;
      else
         vn_indice := vt_bi_tab_reg_0205.next(vn_indice);
      end if;
      --
   end loop;
   --
   vn_fase := 10;
   --
   return nvl(vn_qtde,0);
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_0205 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_0205;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro 0206
function fkg_qtde_linha_reg_0206
         return number
is
   --
   vn_fase       number := 0;
   vn_qtde       number := 0;
   vn_indice     pls_integer := 0;
   vn_indice_bi  pls_integer := 0;
   --
begin
   --
   vn_fase   := 1;
   vn_indice := nvl(vt_bi_tab_reg_0206.first,0);
   vn_qtde   := 0;
   vn_fase   := 2;
   --
   loop
      --
      vn_fase := 3;
      --
      if nvl(vn_indice,0) = 0 then
         exit;
      end if;
      --
      vn_fase := 4;
      --
      vn_indice_bi := nvl(vt_bi_tab_reg_0206(vn_indice).first,0);
      --
      vn_fase := 5;
      --
      loop
         --
         vn_fase := 6;
         --
         if nvl(vn_indice_bi,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 7;
         --
         vn_qtde := nvl(vn_qtde,0) + 1;
         --
         vn_fase := 8;
         --
         if vn_indice_bi = vt_bi_tab_reg_0206(vn_indice).last then
            exit;
         else
            vn_indice_bi := vt_bi_tab_reg_0206(vn_indice).next(vn_indice_bi);
         end if;
         --
      end loop;
      --
      vn_fase := 9;
      --
      if vn_indice = vt_bi_tab_reg_0206.last then
         exit;
      else
         vn_indice := vt_bi_tab_reg_0206.next(vn_indice);
      end if;
      --
   end loop;
   --
   vn_fase := 10;
   --
   return nvl(vn_qtde,0);
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_0206 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_0206;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro 0210
function fkg_qtde_linha_reg_0210
         return number
is
   --
   vn_fase       number := 0;
   vn_qtde       number := 0;
   vn_indice     pls_integer := 0;
   vn_indice_bi  pls_integer := 0;
   --
begin
   --
   vn_fase   := 1;
   vn_indice := nvl(vt_bi_tab_reg_0210.first,0);
   vn_qtde   := 0;
   vn_fase   := 2;
   --
   loop
      --
      vn_fase := 3;
      --
      if nvl(vn_indice,0) = 0 then
         exit;
      end if;
      --
      vn_fase := 4;
      --
      vn_indice_bi := nvl(vt_bi_tab_reg_0210(vn_indice).first,0);
      --
      vn_fase := 5;
      --
      loop
         --
         vn_fase := 6;
         --
         if nvl(vn_indice_bi,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 7;
         --
         vn_qtde := nvl(vn_qtde,0) + 1;
         --
         vn_fase := 8;
         --
         if vn_indice_bi = vt_bi_tab_reg_0210(vn_indice).last then
            exit;
         else
            vn_indice_bi := vt_bi_tab_reg_0210(vn_indice).next(vn_indice_bi);
         end if;
         --
      end loop;
      --
      vn_fase := 9;
      --
      if vn_indice = vt_bi_tab_reg_0210.last then
         exit;
      else
         vn_indice := vt_bi_tab_reg_0210.next(vn_indice);
      end if;
      --
   end loop;
   --
   vn_fase := 10;
   --
   return nvl(vn_qtde,0);
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_0210 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id => vn_loggenerico_id
                                          , ev_mensagem       => gv_mensagem_log
                                          , ev_resumo         => null
                                          , en_tipo_log       => erro_de_sistema
                                          , en_referencia_id  => gt_row_abertura_efd.id
                                          , ev_obj_referencia => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_0210;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro 0220
function fkg_qtde_linha_reg_0220
         return number
is
   --
   vn_fase       number := 0;
   vn_qtde       number := 0;
   vn_indice     pls_integer := 0;
   vn_indice_bi  pls_integer := 0;
   --
begin
   --
   vn_fase   := 1;
   vn_indice := nvl(vt_bi_tab_reg_0220.first,0);
   vn_qtde   := 0;
   vn_fase   := 2;
   --
   loop
      --
      vn_fase := 3;
      --
      if nvl(vn_indice,0) = 0 then
         exit;
      end if;
      --
      vn_fase := 4;
      --
      vn_indice_bi := nvl(vt_bi_tab_reg_0220(vn_indice).first,0);
      --
      vn_fase := 5;
      --
      loop
         --
         vn_fase := 6;
         --
         if nvl(vn_indice_bi,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 7;
         --
         vn_qtde := nvl(vn_qtde,0) + 1;
         --
         vn_fase := 8;
         --
         if vn_indice_bi = vt_bi_tab_reg_0220(vn_indice).last then
            exit;
         else
            vn_indice_bi := vt_bi_tab_reg_0220(vn_indice).next(vn_indice_bi);
         end if;
         --
      end loop;
      --
      vn_fase := 9;
      --
      if vn_indice = vt_bi_tab_reg_0220.last then
         exit;
      else
         vn_indice := vt_bi_tab_reg_0220.next(vn_indice);
      end if;
      --
   end loop;
   --
   vn_fase := 10;
   --
   return nvl(vn_qtde,0);
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_0220 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_0220;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro 0300
function fkg_qtde_linha_reg_0300
         return number
is
   --
   vn_fase  number := 0;
   vn_qtde  number := 0;
   --
begin
   --
   vn_fase := 1;
   vn_qtde := nvl(vt_tab_reg_0300.count,0);
   vn_fase := 2;
   --
   return vn_qtde;
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_0300 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_0300;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro 0305
function fkg_qtde_linha_reg_0305
         return number
is
   --
   vn_fase       number := 0;
   vn_qtde       number := 0;
   vn_indice     pls_integer := 0;
   vn_indice_bi  pls_integer := 0;
   --
begin
   --
   vn_fase   := 1;
   vn_indice := nvl(vt_bi_tab_reg_0305.first,0);
   vn_qtde   := 0;
   vn_fase   := 2;
   --
   loop
      --
      vn_fase := 3;
      --
      if nvl(vn_indice,0) = 0 then
         exit;
      end if;
      --
      vn_fase := 4;
      --
      vn_indice_bi := nvl(vt_bi_tab_reg_0305(vn_indice).first,0);
      --
      vn_fase := 5;
      --
      loop
         --
         vn_fase := 6;
         --
         if nvl(vn_indice_bi,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 7;
         --
         vn_qtde := nvl(vn_qtde,0) + 1;
         --
         vn_fase := 8;
         --
         if vn_indice_bi = vt_bi_tab_reg_0305(vn_indice).last then
            exit;
         else
            vn_indice_bi := vt_bi_tab_reg_0305(vn_indice).next(vn_indice_bi);
         end if;
         --
      end loop;
      --
      vn_fase := 9;
      --
      if vn_indice = vt_bi_tab_reg_0305.last then
         exit;
      else
         vn_indice := vt_bi_tab_reg_0305.next(vn_indice);
      end if;
      --
   end loop;
   --
   vn_fase := 10;
   --
   return nvl(vn_qtde,0);
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_0305 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_0305;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro 0400
function fkg_qtde_linha_reg_0400
         return number
is
   --
   vn_fase  number := 0;
   vn_qtde  number := 0;
   --
begin
   --
   vn_fase := 1;
   vn_qtde := nvl(vt_tab_reg_0400.count,0);
   vn_fase := 2;
   --
   return vn_qtde;
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_0400 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_0400;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro 0450
function fkg_qtde_linha_reg_0450
         return number
is
   --
   vn_fase  number := 0;
   vn_qtde  number := 0;
   --
begin
   --
   vn_fase := 1;
   vn_qtde := nvl(vt_tab_reg_0450.count,0);
   vn_fase := 2;
   --
   return vn_qtde;
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_0450 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_0450;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro 0460
function fkg_qtde_linha_reg_0460
         return number
is
   --
   vn_fase  number := 0;
   vn_qtde  number := 0;
   --
begin
   --
   vn_fase := 1;
   vn_qtde := nvl(vt_tab_reg_0460.count,0);
   vn_fase := 2;
   --
   return vn_qtde;
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_0460 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_0460;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro 0500
function fkg_qtde_linha_reg_0500
         return number
is
   --
   vn_fase  number := 0;
   vn_qtde  number := 0;
   --
begin
   --
   vn_fase := 1;
   vn_qtde := nvl(vt_tab_reg_0500.count,0);
   vn_fase := 2;
   --
   return vn_qtde;
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_0500 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_0500;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro 0600
function fkg_qtde_linha_reg_0600
         return number
is
   --
   vn_fase  number := 0;
   vn_qtde  number := 0;
   --
begin
   --
   vn_fase := 1;
   vn_qtde := nvl(vt_tab_reg_0600.count,0);
   vn_fase := 2;
   --
   return vn_qtde;
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_0600 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_0600;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro 0990
function fkg_qtde_linha_reg_0990
         return number
is
   --
   vn_fase  number := 0;
   vn_qtde  number := 0;
   --
begin
   --
   vn_fase := 1;
   vn_qtde := nvl(vt_tab_reg_0990.count,0);
   vn_fase := 2;
   --
   return vn_qtde;
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_0990 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_0990;

-------------------------------------------------------------------------------------------------------
-- Função retorna a quantidade de linhas do registro b001
function fkg_qtde_linha_reg_b001
         return number
is
   --
   vn_fase  number := 0;
   vn_qtde  number := 0;
   --
begin
   --
   vn_fase := 1;
   vn_qtde := nvl(vt_tab_reg_b001.count,0);
   vn_fase := 2;
   --
   return vn_qtde;
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_b001 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_b001;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro b020    
function fkg_qtde_linha_reg_b020
         return number
is
   --
   vn_fase  number := 0;
   vn_qtde  number := 0;
   --
begin
   --
   vn_fase := 1;
   vn_qtde := nvl(vt_tab_reg_b020.count,0);
   vn_fase := 2;
   --
   return vn_qtde;
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_b020 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_b020;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro b025
function fkg_qtde_linha_reg_b025
         return number
is
   --
   vn_fase       number := 0;
   vn_qtde       number := 0;
   vn_indice     pls_integer := 0;
   vn_indice_bi  pls_integer := 0;
   --
begin
   --
   vn_fase   := 1;
   vn_indice := nvl(vt_bi_tab_reg_b025.first,0);
   vn_qtde   := 0;
   vn_fase   := 2;
   --
   loop
      --
      vn_fase := 3;
      --
      if nvl(vn_indice,0) = 0 then
         exit;
      end if;
      --
      vn_fase := 4;
      --
      vn_indice_bi := nvl(vt_bi_tab_reg_b025(vn_indice).first,0);
      --
      vn_fase := 5;
      --
      loop
         --
         vn_fase := 6;
         --
         if nvl(vn_indice_bi,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 7;
         --
         vn_qtde := nvl(vn_qtde,0) + 1;
         --
         vn_fase := 8;
         --
         if vn_indice_bi = vt_bi_tab_reg_b025(vn_indice).last then
            exit;
         else
            vn_indice_bi := vt_bi_tab_reg_b025(vn_indice).next(vn_indice_bi);
         end if;
         --
      end loop;
      --
      vn_fase := 9;
      --
      if vn_indice = vt_bi_tab_reg_b025.last then
         exit;
      else
         vn_indice := vt_bi_tab_reg_b025.next(vn_indice);
      end if;
      --
   end loop;
   --
   vn_fase := 10;
   --
   return nvl(vn_qtde,0);
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_b025 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_b025;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro b420
function fkg_qtde_linha_reg_b420
         return number
is
   --
   vn_fase  number := 0;
   vn_qtde  number := 0;
   --
begin
   --
   vn_fase := 1;
   vn_qtde := nvl(vt_tab_reg_b420.count,0);
   vn_fase := 2;
   --
   return vn_qtde;
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_b420 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_b420;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro b440
function fkg_qtde_linha_reg_b440
         return number
is
   --
   vn_fase  number := 0;
   vn_qtde  number := 0;
   --
begin
   --
   vn_fase := 1;
   vn_qtde := nvl(vt_tab_reg_b440.count,0);
   vn_fase := 2;
   --
   return vn_qtde;
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_b440 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_b440;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro b460
function fkg_qtde_linha_reg_b460
         return number
is
   --
   vn_fase  number := 0;
   vn_qtde  number := 0;
   --
begin
   --
   vn_fase := 1;
   vn_qtde := nvl(vt_tab_reg_b460.count,0);
   vn_fase := 2;
   --
   return vn_qtde;
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_b460 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_b460;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro b470
function fkg_qtde_linha_reg_b470
         return number
is
   --
   vn_fase  number := 0;
   vn_qtde  number := 0;
   --
begin
   --
   vn_fase := 1;
   vn_qtde := nvl(vt_tab_reg_b470.count,0);
   vn_fase := 2;
   --
   return vn_qtde;
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_b470 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_b470;

-------------------------------------------------------------------------------------------------------
-- Função retorna a quantidade de linhas do registro b990
function fkg_qtde_linha_reg_b990
         return number
is
   --
   vn_fase  number := 0;
   vn_qtde  number := 0;
   --
begin
   --
   vn_fase := 1;
   vn_qtde := nvl(vt_tab_reg_b990.count,0);
   vn_fase := 2;
   --
   return vn_qtde;
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_b990 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_b990;
-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro c001
function fkg_qtde_linha_reg_c001
         return number
is
   --
   vn_fase  number := 0;
   vn_qtde  number := 0;
   --
begin
   --
   vn_fase := 1;
   vn_qtde := nvl(vt_tab_reg_c001.count,0);
   vn_fase := 2;
   --
   return vn_qtde;
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_c001 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_c001;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro c100
function fkg_qtde_linha_reg_c100
         return number
is
   --
   vn_fase  number := 0;
   vn_qtde  number := 0;
   --
begin
   --
   vn_fase := 1;
   vn_qtde := nvl(vt_tab_reg_c100.count,0);
   vn_fase := 2;
   --
   return vn_qtde;
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_c100 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_c100;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro c101
function fkg_qtde_linha_reg_c101
         return number
is
   --
   vn_fase  number := 0;
   vn_qtde  number := 0;
   --
begin
   --
   vn_fase := 1;
   vn_qtde := nvl(vt_tab_reg_c101.count,0);
   vn_fase := 2;
   --
   return vn_qtde;
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_c101 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_c101;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro c105
function fkg_qtde_linha_reg_c105
         return number
is
   --
   vn_fase       number := 0;
   vn_qtde       number := 0;
   vn_indice     pls_integer := 0;
   vn_indice_bi  pls_integer := 0;
   --
begin
   --
   vn_fase   := 1;
   vn_indice := nvl(vt_bi_tab_reg_c105.first,0);
   vn_qtde   := 0;
   vn_fase   := 2;
   --
   loop
      --
      vn_fase := 3;
      --
      if nvl(vn_indice,0) = 0 then
         exit;
      end if;
      --
      vn_fase := 4;
      --
      vn_indice_bi := nvl(vt_bi_tab_reg_c105(vn_indice).first,0);
      --
      vn_fase := 5;
      --
      loop
         --
         vn_fase := 6;
         --
         if nvl(vn_indice_bi,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 7;
         --
         vn_qtde := nvl(vn_qtde,0) + 1;
         --
         vn_fase := 8;
         --
         if vn_indice_bi = vt_bi_tab_reg_c105(vn_indice).last then
            exit;
         else
            vn_indice_bi := vt_bi_tab_reg_c105(vn_indice).next(vn_indice_bi);
         end if;
         --
      end loop;
      --
      vn_fase := 9;
      --
      if vn_indice = vt_bi_tab_reg_c105.last then
         exit;
      else
         vn_indice := vt_bi_tab_reg_c105.next(vn_indice);
      end if;
      --
   end loop;
   --
   vn_fase := 10;
   --
   return nvl(vn_qtde,0);
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_c105 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_c105;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro c110
function fkg_qtde_linha_reg_c110
         return number
is
   --
   vn_fase       number := 0;
   vn_qtde       number := 0;
   vn_indice     pls_integer := 0;
   vn_indice_bi  pls_integer := 0;
   --
begin
   --
   vn_fase   := 1;
   vn_indice := nvl(vt_bi_tab_reg_c110.first,0);
   vn_qtde   := 0;
   vn_fase   := 2;
   --
   loop
      --
      vn_fase := 3;
      --
      if nvl(vn_indice,0) = 0 then
         exit;
      end if;
      --
      vn_fase := 4;
      --
      vn_indice_bi := nvl(vt_bi_tab_reg_c110(vn_indice).first,0);
      --
      vn_fase := 5;
      --
      loop
         --
         vn_fase := 6;
         --
         if nvl(vn_indice_bi,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 7;
         --
         vn_qtde := nvl(vn_qtde,0) + 1;
         --
         vn_fase := 8;
         --
         if vn_indice_bi = vt_bi_tab_reg_c110(vn_indice).last then
            exit;
         else
            vn_indice_bi := vt_bi_tab_reg_c110(vn_indice).next(vn_indice_bi);
         end if;
         --
      end loop;
      --
      vn_fase := 9;
      --
      if vn_indice = vt_bi_tab_reg_c110.last then
         exit;
      else
         vn_indice := vt_bi_tab_reg_c110.next(vn_indice);
      end if;
      --
   end loop;
   --
   vn_fase := 10;
   --
   return nvl(vn_qtde,0);
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_c110 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_c110;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro c111
function fkg_qtde_linha_reg_c111
         return number
is
   --
   vn_fase       number := 0;
   vn_qtde       number := 0;
   vn_indice     pls_integer := 0;
   vn_indice_bi  pls_integer := 0;
   vn_indice_tri pls_integer := 0;
   --
begin
   --
   vn_fase   := 1;
   vn_indice := nvl(vt_tri_tab_reg_c111.first,0);
   vn_qtde   := 0;
   vn_fase   := 2;
   --
   loop
      --
      vn_fase := 3;
      --
      if nvl(vn_indice,0) = 0 then
         exit;
      end if;
      --
      vn_fase := 4;
      --
      vn_indice_bi := nvl(vt_tri_tab_reg_c111(vn_indice).first,0);
      --
      vn_fase := 5;
      --
      loop
         --
         vn_fase := 6;
         --
         if nvl(vn_indice_bi,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 7;
         --
         vn_indice_tri := nvl(vt_tri_tab_reg_c111(vn_indice)(vn_indice_bi).first,0);
         --
         vn_fase := 8;
         --
         loop
            --
            vn_fase := 9;
            --
            if nvl(vn_indice_tri,0) = 0 then
               exit;
            end if;
            --
            vn_fase := 10;
            --
            vn_qtde := nvl(vn_qtde,0) + 1;
            --
            vn_fase := 11;
            --
            if vn_indice_tri = vt_tri_tab_reg_c111(vn_indice)(vn_indice_bi).last then
               exit;
            else
               vn_indice_tri := vt_tri_tab_reg_c111(vn_indice)(vn_indice_bi).next(vn_indice_tri);
            end if;
            --
         end loop;
         --
         vn_fase := 12;
         --
         if vn_indice_bi = vt_tri_tab_reg_c111(vn_indice).last then
            exit;
         else
            vn_indice_bi := vt_tri_tab_reg_c111(vn_indice).next(vn_indice_bi);
         end if;
         --
      end loop;
      --
      vn_fase := 13;
      --
      if vn_indice = vt_tri_tab_reg_c111.last then
         exit;
      else
         vn_indice := vt_tri_tab_reg_c111.next(vn_indice);
      end if;
      --
   end loop;
   --
   vn_fase := 14;
   --
   return nvl(vn_qtde,0);
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_c111 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_c111;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro c112
function fkg_qtde_linha_reg_c112
         return number
is
   --
   vn_fase       number := 0;
   vn_qtde       number := 0;
   vn_indice     pls_integer := 0;
   vn_indice_bi  pls_integer := 0;
   vn_indice_tri pls_integer := 0;
   --
begin
   --
   vn_fase   := 1;
   vn_indice := nvl(vt_tri_tab_reg_c112.first,0);
   vn_qtde   := 0;
   vn_fase   := 2;
   --
   loop
      --
      vn_fase := 3;
      --
      if nvl(vn_indice,0) = 0 then
         exit;
      end if;
      --
      vn_fase := 4;
      --
      vn_indice_bi := nvl(vt_tri_tab_reg_c112(vn_indice).first,0);
      --
      vn_fase := 5;
      --
      loop
         --
         vn_fase := 6;
         --
         if nvl(vn_indice_bi,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 7;
         --
         vn_indice_tri := nvl(vt_tri_tab_reg_c112(vn_indice)(vn_indice_bi).first,0);
         --
         vn_fase := 8;
         --
         loop
            --
            vn_fase := 9;
            --
            if nvl(vn_indice_tri,0) = 0 then
               exit;
            end if;
            --
            vn_fase := 10;
            --
            vn_qtde := nvl(vn_qtde,0) + 1;
            --
            vn_fase := 11;
            --
            if vn_indice_tri = vt_tri_tab_reg_c112(vn_indice)(vn_indice_bi).last then
               exit;
            else
               vn_indice_tri := vt_tri_tab_reg_c112(vn_indice)(vn_indice_bi).next(vn_indice_tri);
            end if;
            --
         end loop;
         --
         vn_fase := 12;
         --
         if vn_indice_bi = vt_tri_tab_reg_c112(vn_indice).last then
            exit;
         else
            vn_indice_bi := vt_tri_tab_reg_c112(vn_indice).next(vn_indice_bi);
         end if;
         --
      end loop;
      --
      vn_fase := 13;
      --
      if vn_indice = vt_tri_tab_reg_c112.last then
         exit;
      else
         vn_indice := vt_tri_tab_reg_c112.next(vn_indice);
      end if;
      --
   end loop;
   --
   vn_fase := 14;
   --
   return nvl(vn_qtde,0);
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_c112 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_c112;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro c113
function fkg_qtde_linha_reg_c113
         return number
is
   --
   vn_fase       number := 0;
   vn_qtde       number := 0;
   vn_indice     pls_integer := 0;
   vn_indice_bi  pls_integer := 0;
   vn_indice_tri pls_integer := 0;
   --
begin
   --
   vn_fase   := 1;
   vn_indice := nvl(vt_tri_tab_reg_c113.first,0);
   vn_qtde   := 0;
   vn_fase   := 2;
   --
   loop
      --
      vn_fase := 3;
      --
      if nvl(vn_indice,0) = 0 then
         exit;
      end if;
      --
      vn_fase := 4;
      --
      vn_indice_bi := nvl(vt_tri_tab_reg_c113(vn_indice).first,0);
      --
      vn_fase := 5;
      --
      loop
         --
         vn_fase := 6;
         --
         if nvl(vn_indice_bi,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 7;
         --
         vn_indice_tri := nvl(vt_tri_tab_reg_c113(vn_indice)(vn_indice_bi).first,0);
         --
         vn_fase := 8;
         --
         loop
            --
            vn_fase := 9;
            --
            if nvl(vn_indice_tri,0) = 0 then
               exit;
            end if;
            --
            vn_fase := 10;
            --
            vn_qtde := nvl(vn_qtde,0) + 1;
            --
            vn_fase := 11;
            --
            if vn_indice_tri = vt_tri_tab_reg_c113(vn_indice)(vn_indice_bi).last then
               exit;
            else
               vn_indice_tri := vt_tri_tab_reg_c113(vn_indice)(vn_indice_bi).next(vn_indice_tri);
            end if;
            --
         end loop;
         --
         vn_fase := 12;
         --
         if vn_indice_bi = vt_tri_tab_reg_c113(vn_indice).last then
            exit;
         else
            vn_indice_bi := vt_tri_tab_reg_c113(vn_indice).next(vn_indice_bi);
         end if;
         --
      end loop;
      --
      vn_fase := 13;
      --
      if vn_indice = vt_tri_tab_reg_c113.last then
         exit;
      else
         vn_indice := vt_tri_tab_reg_c113.next(vn_indice);
      end if;
      --
   end loop;
   --
   vn_fase := 14;
   --
   return nvl(vn_qtde,0);
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_c113 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_c113;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro c114
function fkg_qtde_linha_reg_c114
         return number
is
   --
   vn_fase       number := 0;
   vn_qtde       number := 0;
   vn_indice     pls_integer := 0;
   vn_indice_bi  pls_integer := 0;
   vn_indice_tri pls_integer := 0;
   --
begin
   --
   vn_fase   := 1;
   vn_indice := nvl(vt_tri_tab_reg_c114.first,0);
   vn_qtde   := 0;
   vn_fase   := 2;
   --
   loop
      --
      vn_fase := 3;
      --
      if nvl(vn_indice,0) = 0 then
         exit;
      end if;
      --
      vn_fase := 4;
      --
      vn_indice_bi := nvl(vt_tri_tab_reg_c114(vn_indice).first,0);
      --
      vn_fase := 5;
      --
      loop
         --
         vn_fase := 6;
         --
         if nvl(vn_indice_bi,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 7;
         --
         vn_indice_tri := nvl(vt_tri_tab_reg_c114(vn_indice)(vn_indice_bi).first,0);
         --
         vn_fase := 8;
         --
         loop
            --
            vn_fase := 9;
            --
            if nvl(vn_indice_tri,0) = 0 then
               exit;
            end if;
            --
            vn_fase := 10;
            --
            vn_qtde := nvl(vn_qtde,0) + 1;
            --
            vn_fase := 11;
            --
            if vn_indice_tri = vt_tri_tab_reg_c114(vn_indice)(vn_indice_bi).last then
               exit;
            else
               vn_indice_tri := vt_tri_tab_reg_c114(vn_indice)(vn_indice_bi).next(vn_indice_tri);
            end if;
            --
         end loop;
         --
         vn_fase := 12;
         --
         if vn_indice_bi = vt_tri_tab_reg_c114(vn_indice).last then
            exit;
         else
            vn_indice_bi := vt_tri_tab_reg_c114(vn_indice).next(vn_indice_bi);
         end if;
         --
      end loop;
      --
      vn_fase := 13;
      --
      if vn_indice = vt_tri_tab_reg_c114.last then
         exit;
      else
         vn_indice := vt_tri_tab_reg_c114.next(vn_indice);
      end if;
      --
   end loop;
   --
   vn_fase := 14;
   --
   return nvl(vn_qtde,0);
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_c114 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_c114;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro c115
function fkg_qtde_linha_reg_c115
         return number
is
   --
   vn_fase       number := 0;
   vn_qtde       number := 0;
   vn_indice     pls_integer := 0;
   vn_indice_bi  pls_integer := 0;
   vn_indice_tri pls_integer := 0;
   --
begin
   --
   vn_fase   := 1;
   vn_indice := nvl(vt_tri_tab_reg_c115.first,0);
   vn_qtde   := 0;
   vn_fase   := 2;
   --
   loop
      --
      vn_fase := 3;
      --
      if nvl(vn_indice,0) = 0 then
         exit;
      end if;
      --
      vn_fase := 4;
      --
      vn_indice_bi := nvl(vt_tri_tab_reg_c115(vn_indice).first,0);
      --
      vn_fase := 5;
      --
      loop
         --
         vn_fase := 6;
         --
         if nvl(vn_indice_bi,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 7;
         --
         vn_indice_tri := nvl(vt_tri_tab_reg_c115(vn_indice)(vn_indice_bi).first,0);
         --
         vn_fase := 8;
         --
         loop
            --
            vn_fase := 9;
            --
            if nvl(vn_indice_tri,0) = 0 then
               exit;
            end if;
            --
            vn_fase := 10;
            --
            vn_qtde := nvl(vn_qtde,0) + 1;
            --
            vn_fase := 11;
            --
            if vn_indice_tri = vt_tri_tab_reg_c115(vn_indice)(vn_indice_bi).last then
               exit;
            else
               vn_indice_tri := vt_tri_tab_reg_c115(vn_indice)(vn_indice_bi).next(vn_indice_tri);
            end if;
            --
         end loop;
         --
         vn_fase := 12;
         --
         if vn_indice_bi = vt_tri_tab_reg_c115(vn_indice).last then
            exit;
         else
            vn_indice_bi := vt_tri_tab_reg_c115(vn_indice).next(vn_indice_bi);
         end if;
         --
      end loop;
      --
      vn_fase := 13;
      --
      if vn_indice = vt_tri_tab_reg_c115.last then
         exit;
      else
         vn_indice := vt_tri_tab_reg_c115.next(vn_indice);
      end if;
      --
   end loop;
   --
   vn_fase := 14;
   --
   return nvl(vn_qtde,0);
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_c115 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_c115;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro c116
function fkg_qtde_linha_reg_c116
         return number
is
   --
   vn_fase       number := 0;
   vn_qtde       number := 0;
   vn_indice     pls_integer := 0;
   vn_indice_bi  pls_integer := 0;
   vn_indice_tri pls_integer := 0;
   --
begin
   --
   vn_fase   := 1;
   vn_indice := nvl(vt_tri_tab_reg_c116.first,0);
   vn_qtde   := 0;
   vn_fase   := 2;
   --
   loop
      --
      vn_fase := 3;
      --
      if nvl(vn_indice,0) = 0 then
         exit;
      end if;
      --
      vn_fase := 4;
      --
      vn_indice_bi := nvl(vt_tri_tab_reg_c116(vn_indice).first,0);
      --
      vn_fase := 5;
      --
      loop
         --
         vn_fase := 6;
         --
         if nvl(vn_indice_bi,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 7;
         --
         vn_indice_tri := nvl(vt_tri_tab_reg_c116(vn_indice)(vn_indice_bi).first,0);
         --
         vn_fase := 8;
         --
         loop
            --
            vn_fase := 9;
            --
            if nvl(vn_indice_tri,0) = 0 then
               exit;
            end if;
            --
            vn_fase := 10;
            --
            vn_qtde := nvl(vn_qtde,0) + 1;
            --
            vn_fase := 11;
            --
            if vn_indice_tri = vt_tri_tab_reg_c116(vn_indice)(vn_indice_bi).last then
               exit;
            else
               vn_indice_tri := vt_tri_tab_reg_c116(vn_indice)(vn_indice_bi).next(vn_indice_tri);
            end if;
            --
         end loop;
         --
         vn_fase := 12;
         --
         if vn_indice_bi = vt_tri_tab_reg_c116(vn_indice).last then
            exit;
         else
            vn_indice_bi := vt_tri_tab_reg_c116(vn_indice).next(vn_indice_bi);
         end if;
         --
      end loop;
      --
      vn_fase := 13;
      --
      if vn_indice = vt_tri_tab_reg_c116.last then
         exit;
      else
         vn_indice := vt_tri_tab_reg_c116.next(vn_indice);
      end if;
      --
   end loop;
   --
   vn_fase := 14;
   --
   return nvl(vn_qtde,0);
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_c116 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_c116;
-----------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro c120
function fkg_qtde_linha_reg_c120
         return number
is
   --
   vn_fase       number := 0;
   vn_qtde       number := 0;
   vn_indice     pls_integer := 0;
   vn_indice_bi  pls_integer := 0;
   --
begin
   --
   vn_fase   := 1;
   vn_indice := nvl(vt_bi_tab_reg_c120.first,0);
   vn_qtde   := 0;
   vn_fase   := 2;
   --
   loop
      --
      vn_fase := 3;
      --
      if nvl(vn_indice,0) = 0 then
         exit;
      end if;
      --
      vn_fase := 4;
      --
      vn_indice_bi := nvl(vt_bi_tab_reg_c120(vn_indice).first,0);
      --
      vn_fase := 5;
      --
      loop
         --
         vn_fase := 6;
         --
         if nvl(vn_indice_bi,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 7;
         --
         vn_qtde := nvl(vn_qtde,0) + 1;
         --
         vn_fase := 8;
         --
         if vn_indice_bi = vt_bi_tab_reg_c120(vn_indice).last then
            exit;
         else
            vn_indice_bi := vt_bi_tab_reg_c120(vn_indice).next(vn_indice_bi);
         end if;
         --
      end loop;
      --
      vn_fase := 9;
      --
      if vn_indice = vt_bi_tab_reg_c120.last then
         exit;
      else
         vn_indice := vt_bi_tab_reg_c120.next(vn_indice);
      end if;
      --
   end loop;
   --
   vn_fase := 10;
   --
   return nvl(vn_qtde,0);
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_c120 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_c120;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro c130
function fkg_qtde_linha_reg_c130
         return number
is
   --
   vn_fase       number := 0;
   vn_qtde       number := 0;
   vn_indice     pls_integer := 0;
   vn_indice_bi  pls_integer := 0;
   --
begin
   --
   vn_fase   := 1;
   vn_indice := nvl(vt_bi_tab_reg_c130.first,0);
   vn_qtde   := 0;
   vn_fase   := 2;
   --
   loop
      --
      vn_fase := 3;
      --
      if nvl(vn_indice,0) = 0 then
         exit;
      end if;
      --
      vn_fase := 4;
      --
      vn_indice_bi := nvl(vt_bi_tab_reg_c130(vn_indice).first,0);
      --
      vn_fase := 5;
      --
      loop
         --
         vn_fase := 6;
         --
         if nvl(vn_indice_bi,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 7;
         --
         vn_qtde := nvl(vn_qtde,0) + 1;
         --
         vn_fase := 8;
         --
         if vn_indice_bi = vt_bi_tab_reg_c130(vn_indice).last then
            exit;
         else
            vn_indice_bi := vt_bi_tab_reg_c130(vn_indice).next(vn_indice_bi);
         end if;
         --
      end loop;
      --
      vn_fase := 9;
      --
      if vn_indice = vt_bi_tab_reg_c130.last then
         exit;
      else
         vn_indice := vt_bi_tab_reg_c130.next(vn_indice);
      end if;
      --
   end loop;
   --
   vn_fase := 10;
   --
   return nvl(vn_qtde,0);
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_c130 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_c130;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro c140
function fkg_qtde_linha_reg_c140
         return number
is
   --
   vn_fase       number := 0;
   vn_qtde       number := 0;
   vn_indice     pls_integer := 0;
   vn_indice_bi  pls_integer := 0;
   --
begin
   --
   vn_fase   := 1;
   vn_indice := nvl(vt_bi_tab_reg_c140.first,0);
   vn_qtde   := 0;
   vn_fase   := 2;
   --
   loop
      --
      vn_fase := 3;
      --
      if nvl(vn_indice,0) = 0 then
         exit;
      end if;
      --
      vn_fase := 4;
      --
      vn_indice_bi := nvl(vt_bi_tab_reg_c140(vn_indice).first,0);
      --
      vn_fase := 5;
      --
      loop
         --
         vn_fase := 6;
         --
         if nvl(vn_indice_bi,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 7;
         --
         vn_qtde := nvl(vn_qtde,0) + 1;
         --
         vn_fase := 8;
         --
         if vn_indice_bi = vt_bi_tab_reg_c140(vn_indice).last then
            exit;
         else
            vn_indice_bi := vt_bi_tab_reg_c140(vn_indice).next(vn_indice_bi);
         end if;
         --
      end loop;
      --
      vn_fase := 9;
      --
      if vn_indice = vt_bi_tab_reg_c140.last then
         exit;
      else
         vn_indice := vt_bi_tab_reg_c140.next(vn_indice);
      end if;
      --
   end loop;
   --
   vn_fase := 10;
   --
   return nvl(vn_qtde,0);
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_c140 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_c140;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro c141
function fkg_qtde_linha_reg_c141
         return number
is
   --
   vn_fase       number := 0;
   vn_qtde       number := 0;
   vn_indice     pls_integer := 0;
   vn_indice_bi  pls_integer := 0;
   vn_indice_tri pls_integer := 0;
   --
begin
   --
   vn_fase   := 1;
   vn_indice := nvl(vt_tri_tab_reg_c141.first,0);
   vn_qtde   := 0;
   vn_fase   := 2;
   --
   loop
      --
      vn_fase := 3;
      --
      if nvl(vn_indice,0) = 0 then
         exit;
      end if;
      --
      vn_fase := 4;
      --
      vn_indice_bi := nvl(vt_tri_tab_reg_c141(vn_indice).first,0);
      --
      vn_fase := 5;
      --
      loop
         --
         vn_fase := 6;
         --
         if nvl(vn_indice_bi,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 7;
         --
         vn_indice_tri := nvl(vt_tri_tab_reg_c141(vn_indice)(vn_indice_bi).first,0);
         --
         vn_fase := 8;
         --
         loop
            --
            vn_fase := 9;
            --
            if nvl(vn_indice_tri,0) = 0 then
               exit;
            end if;
            --
            vn_fase := 10;
            --
            vn_qtde := nvl(vn_qtde,0) + 1;
            --
            vn_fase := 11;
            --
            if vn_indice_tri = vt_tri_tab_reg_c141(vn_indice)(vn_indice_bi).last then
               exit;
            else
               vn_indice_tri := vt_tri_tab_reg_c141(vn_indice)(vn_indice_bi).next(vn_indice_tri);
            end if;
            --
         end loop;
         --
         vn_fase := 12;
         --
         if vn_indice_bi = vt_tri_tab_reg_c141(vn_indice).last then
            exit;
         else
            vn_indice_bi := vt_tri_tab_reg_c141(vn_indice).next(vn_indice_bi);
         end if;
         --
      end loop;
      --
      vn_fase := 13;
      --
      if vn_indice = vt_tri_tab_reg_c141.last then
         exit;
      else
         vn_indice := vt_tri_tab_reg_c141.next(vn_indice);
      end if;
      --
   end loop;
   --
   vn_fase := 14;
   --
   return nvl(vn_qtde,0);
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_c141 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_c141;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro c160
function fkg_qtde_linha_reg_c160
         return number
is
   --
   vn_fase       number := 0;
   vn_qtde       number := 0;
   vn_indice     pls_integer := 0;
   vn_indice_bi  pls_integer := 0;
   --
begin
   --
   vn_fase   := 1;
   vn_indice := nvl(vt_bi_tab_reg_c160.first,0);
   vn_qtde   := 0;
   vn_fase   := 2;
   --
   loop
      --
      vn_fase := 3;
      --
      if nvl(vn_indice,0) = 0 then
         exit;
      end if;
      --
      vn_fase := 4;
      --
      vn_indice_bi := nvl(vt_bi_tab_reg_c160(vn_indice).first,0);
      --
      vn_fase := 5;
      --
      loop
         --
         vn_fase := 6;
         --
         if nvl(vn_indice_bi,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 7;
         --
         vn_qtde := nvl(vn_qtde,0) + 1;
         --
         vn_fase := 8;
         --
         if vn_indice_bi = vt_bi_tab_reg_c160(vn_indice).last then
            exit;
         else
            vn_indice_bi := vt_bi_tab_reg_c160(vn_indice).next(vn_indice_bi);
         end if;
         --
      end loop;
      --
      vn_fase := 9;
      --
      if vn_indice = vt_bi_tab_reg_c160.last then
         exit;
      else
         vn_indice := vt_bi_tab_reg_c160.next(vn_indice);
      end if;
      --
   end loop;
   --
   vn_fase := 10;
   --
   return nvl(vn_qtde,0);
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_c160 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_c160;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro c165
function fkg_qtde_linha_reg_c165
         return number
is
   --
   vn_fase       number := 0;
   vn_qtde       number := 0;
   vn_indice     pls_integer := 0;
   vn_indice_bi  pls_integer := 0;
   --
begin
   --
   vn_fase   := 1;
   vn_indice := nvl(vt_bi_tab_reg_c165.first,0);
   vn_qtde   := 0;
   vn_fase   := 2;
   --
   loop
      --
      vn_fase := 3;
      --
      if nvl(vn_indice,0) = 0 then
         exit;
      end if;
      --
      vn_fase := 4;
      --
      vn_indice_bi := nvl(vt_bi_tab_reg_c165(vn_indice).first,0);
      --
      vn_fase := 5;
      --
      loop
         --
         vn_fase := 6;
         --
         if nvl(vn_indice_bi,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 7;
         --
         vn_qtde := nvl(vn_qtde,0) + 1;
         --
         vn_fase := 8;
         --
         if vn_indice_bi = vt_bi_tab_reg_c165(vn_indice).last then
            exit;
         else
            vn_indice_bi := vt_bi_tab_reg_c165(vn_indice).next(vn_indice_bi);
         end if;
         --
      end loop;
      --
      vn_fase := 9;
      --
      if vn_indice = vt_bi_tab_reg_c165.last then
         exit;
      else
         vn_indice := vt_bi_tab_reg_c165.next(vn_indice);
      end if;
      --
   end loop;
   --
   vn_fase := 10;
   --
   return nvl(vn_qtde,0);
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_c165 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_c165;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro c170
function fkg_qtde_linha_reg_c170
         return number
is
   --
   vn_fase       number := 0;
   vn_qtde       number := 0;
   vn_indice     pls_integer := 0;
   vn_indice_bi  pls_integer := 0;
   --
begin
   --
   vn_fase   := 1;
   vn_indice := nvl(vt_bi_tab_reg_c170.first,0);
   vn_qtde   := 0;
   vn_fase   := 2;
   --
   loop
      --
      vn_fase := 3;
      --
      if nvl(vn_indice,0) = 0 then
         exit;
      end if;
      --
      vn_fase := 4;
      --
      vn_indice_bi := nvl(vt_bi_tab_reg_c170(vn_indice).first,0);
      --
      vn_fase := 5;
      --
      loop
         --
         vn_fase := 6;
         --
         if nvl(vn_indice_bi,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 7;
         --
         vn_qtde := nvl(vn_qtde,0) + 1;
         --
         vn_fase := 8;
         --
         if vn_indice_bi = vt_bi_tab_reg_c170(vn_indice).last then
            exit;
         else
            vn_indice_bi := vt_bi_tab_reg_c170(vn_indice).next(vn_indice_bi);
         end if;
         --
      end loop;
      --
      vn_fase := 9;
      --
      if vn_indice = vt_bi_tab_reg_c170.last then
         exit;
      else
         vn_indice := vt_bi_tab_reg_c170.next(vn_indice);
      end if;
      --
   end loop;
   --
   vn_fase := 10;
   --
   return nvl(vn_qtde,0);
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_c170 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_c170;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro c171
function fkg_qtde_linha_reg_c171
         return number
is
   --
   vn_fase       number := 0;
   vn_qtde       number := 0;
   vn_indice     pls_integer := 0;
   vn_indice_bi  pls_integer := 0;
   vn_indice_tri pls_integer := 0;
   --
begin
   --
   vn_fase   := 1;
   vn_indice := nvl(vt_tri_tab_reg_c171.first,0);
   vn_qtde   := 0;
   vn_fase   := 2;
   --
   loop
      --
      vn_fase := 3;
      --
      if nvl(vn_indice,0) = 0 then
         exit;
      end if;
      --
      vn_fase := 4;
      --
      vn_indice_bi := nvl(vt_tri_tab_reg_c171(vn_indice).first,0);
      --
      vn_fase := 5;
      --
      loop
         --
         vn_fase := 6;
         --
         if nvl(vn_indice_bi,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 7;
         --
         vn_indice_tri := nvl(vt_tri_tab_reg_c171(vn_indice)(vn_indice_bi).first,0);
         --
         vn_fase := 8;
         --
         loop
            --
            vn_fase := 9;
            --
            if nvl(vn_indice_tri,0) = 0 then
               exit;
            end if;
            --
            vn_fase := 10;
            --
            vn_qtde := nvl(vn_qtde,0) + 1;
            --
            vn_fase := 11;
            --
            if vn_indice_tri = vt_tri_tab_reg_c171(vn_indice)(vn_indice_bi).last then
               exit;
            else
               vn_indice_tri := vt_tri_tab_reg_c171(vn_indice)(vn_indice_bi).next(vn_indice_tri);
            end if;
            --
         end loop;
         --
         vn_fase := 12;
         --
         if vn_indice_bi = vt_tri_tab_reg_c171(vn_indice).last then
            exit;
         else
            vn_indice_bi := vt_tri_tab_reg_c171(vn_indice).next(vn_indice_bi);
         end if;
         --
      end loop;
      --
      vn_fase := 13;
      --
      if vn_indice = vt_tri_tab_reg_c171.last then
         exit;
      else
         vn_indice := vt_tri_tab_reg_c171.next(vn_indice);
      end if;
      --
   end loop;
   --
   vn_fase := 14;
   --
   return nvl(vn_qtde,0);
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_c171 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_c171;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro c172
function fkg_qtde_linha_reg_c172
         return number
is
   --
   vn_fase       number := 0;
   vn_qtde       number := 0;
   vn_indice     pls_integer := 0;
   vn_indice_bi  pls_integer := 0;
   vn_indice_tri pls_integer := 0;
   --
begin
   --
   vn_fase   := 1;
   vn_indice := nvl(vt_tri_tab_reg_c172.first,0);
   vn_qtde   := 0;
   vn_fase   := 2;
   --
   loop
      --
      vn_fase := 3;
      --
      if nvl(vn_indice,0) = 0 then
         exit;
      end if;
      --
      vn_fase := 4;
      --
      vn_indice_bi := nvl(vt_tri_tab_reg_c172(vn_indice).first,0);
      --
      vn_fase := 5;
      --
      loop
         --
         vn_fase := 6;
         --
         if nvl(vn_indice_bi,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 7;
         --
         vn_indice_tri := nvl(vt_tri_tab_reg_c172(vn_indice)(vn_indice_bi).first,0);
         --
         vn_fase := 8;
         --
         loop
            --
            vn_fase := 9;
            --
            if nvl(vn_indice_tri,0) = 0 then
               exit;
            end if;
            --
            vn_fase := 10;
            --
            vn_qtde := nvl(vn_qtde,0) + 1;
            --
            vn_fase := 11;
            --
            if vn_indice_tri = vt_tri_tab_reg_c172(vn_indice)(vn_indice_bi).last then
               exit;
            else
               vn_indice_tri := vt_tri_tab_reg_c172(vn_indice)(vn_indice_bi).next(vn_indice_tri);
            end if;
            --
         end loop;
         --
         vn_fase := 12;
         --
         if vn_indice_bi = vt_tri_tab_reg_c172(vn_indice).last then
            exit;
         else
            vn_indice_bi := vt_tri_tab_reg_c172(vn_indice).next(vn_indice_bi);
         end if;
         --
      end loop;
      --
      vn_fase := 13;
      --
      if vn_indice = vt_tri_tab_reg_c172.last then
         exit;
      else
         vn_indice := vt_tri_tab_reg_c172.next(vn_indice);
      end if;
      --
   end loop;
   --
   vn_fase := 14;
   --
   return nvl(vn_qtde,0);
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_c172 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_c172;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro c173
function fkg_qtde_linha_reg_c173
         return number
is
   --
   vn_fase       number := 0;
   vn_qtde       number := 0;
   vn_indice     pls_integer := 0;
   vn_indice_bi  pls_integer := 0;
   vn_indice_tri pls_integer := 0;
   --
begin
   --
   vn_fase   := 1;
   vn_indice := nvl(vt_tri_tab_reg_c173.first,0);
   vn_qtde   := 0;
   vn_fase   := 2;
   --
   loop
      --
      vn_fase := 3;
      --
      if nvl(vn_indice,0) = 0 then
         exit;
      end if;
      --
      vn_fase := 4;
      --
      vn_indice_bi := nvl(vt_tri_tab_reg_c173(vn_indice).first,0);
      --
      vn_fase := 5;
      --
      loop
         --
         vn_fase := 6;
         --
         if nvl(vn_indice_bi,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 7;
         --
         vn_indice_tri := nvl(vt_tri_tab_reg_c173(vn_indice)(vn_indice_bi).first,0);
         --
         vn_fase := 8;
         --
         loop
            --
            vn_fase := 9;
            --
            if nvl(vn_indice_tri,0) = 0 then
               exit;
            end if;
            --
            vn_fase := 10;
            --
            vn_qtde := nvl(vn_qtde,0) + 1;
            --
            vn_fase := 11;
            --
            if vn_indice_tri = vt_tri_tab_reg_c173(vn_indice)(vn_indice_bi).last then
               exit;
            else
               vn_indice_tri := vt_tri_tab_reg_c173(vn_indice)(vn_indice_bi).next(vn_indice_tri);
            end if;
            --
         end loop;
         --
         vn_fase := 12;
         --
         if vn_indice_bi = vt_tri_tab_reg_c173(vn_indice).last then
            exit;
         else
            vn_indice_bi := vt_tri_tab_reg_c173(vn_indice).next(vn_indice_bi);
         end if;
         --
      end loop;
      --
      vn_fase := 13;
      --
      if vn_indice = vt_tri_tab_reg_c173.last then
         exit;
      else
         vn_indice := vt_tri_tab_reg_c173.next(vn_indice);
      end if;
      --
   end loop;
   --
   vn_fase := 14;
   --
   return nvl(vn_qtde,0);
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_c173 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_c173;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro c174
function fkg_qtde_linha_reg_c174
         return number
is
   --
   vn_fase       number := 0;
   vn_qtde       number := 0;
   vn_indice     pls_integer := 0;
   vn_indice_bi  pls_integer := 0;
   vn_indice_tri pls_integer := 0;
   --
begin
   --
   vn_fase   := 1;
   vn_indice := nvl(vt_tri_tab_reg_c174.first,0);
   vn_qtde   := 0;
   vn_fase   := 2;
   --
   loop
      --
      vn_fase := 3;
      --
      if nvl(vn_indice,0) = 0 then
         exit;
      end if;
      --
      vn_fase := 4;
      --
      vn_indice_bi := nvl(vt_tri_tab_reg_c174(vn_indice).first,0);
      --
      vn_fase := 5;
      --
      loop
         --
         vn_fase := 6;
         --
         if nvl(vn_indice_bi,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 7;
         --
         vn_indice_tri := nvl(vt_tri_tab_reg_c174(vn_indice)(vn_indice_bi).first,0);
         --
         vn_fase := 8;
         --
         loop
            --
            vn_fase := 9;
            --
            if nvl(vn_indice_tri,0) = 0 then
               exit;
            end if;
            --
            vn_fase := 10;
            --
            vn_qtde := nvl(vn_qtde,0) + 1;
            --
            vn_fase := 11;
            --
            if vn_indice_tri = vt_tri_tab_reg_c174(vn_indice)(vn_indice_bi).last then
               exit;
            else
               vn_indice_tri := vt_tri_tab_reg_c174(vn_indice)(vn_indice_bi).next(vn_indice_tri);
            end if;
            --
         end loop;
         --
         vn_fase := 12;
         --
         if vn_indice_bi = vt_tri_tab_reg_c174(vn_indice).last then
            exit;
         else
            vn_indice_bi := vt_tri_tab_reg_c174(vn_indice).next(vn_indice_bi);
         end if;
         --
      end loop;
      --
      vn_fase := 13;
      --
      if vn_indice = vt_tri_tab_reg_c174.last then
         exit;
      else
         vn_indice := vt_tri_tab_reg_c174.next(vn_indice);
      end if;
      --
   end loop;
   --
   vn_fase := 14;
   --
   return nvl(vn_qtde,0);
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_c174 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_c174;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro c175
function fkg_qtde_linha_reg_c175
         return number
is
   --
   vn_fase       number := 0;
   vn_qtde       number := 0;
   vn_indice     pls_integer := 0;
   vn_indice_bi  pls_integer := 0;
   vn_indice_tri pls_integer := 0;
   --
begin
   --
   vn_fase   := 1;
   vn_indice := nvl(vt_tri_tab_reg_c175.first,0);
   vn_qtde   := 0;
   vn_fase   := 2;
   --
   loop
      --
      vn_fase := 3;
      --
      if nvl(vn_indice,0) = 0 then
         exit;
      end if;
      --
      vn_fase := 4;
      --
      vn_indice_bi := nvl(vt_tri_tab_reg_c175(vn_indice).first,0);
      --
      vn_fase := 5;
      --
      loop
         --
         vn_fase := 6;
         --
         if nvl(vn_indice_bi,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 7;
         --
         vn_indice_tri := nvl(vt_tri_tab_reg_c175(vn_indice)(vn_indice_bi).first,0);
         --
         vn_fase := 8;
         --
         loop
            --
            vn_fase := 9;
            --
            if nvl(vn_indice_tri,0) = 0 then
               exit;
            end if;
            --
            vn_fase := 10;
            --
            vn_qtde := nvl(vn_qtde,0) + 1;
            --
            vn_fase := 11;
            --
            if vn_indice_tri = vt_tri_tab_reg_c175(vn_indice)(vn_indice_bi).last then
               exit;
            else
               vn_indice_tri := vt_tri_tab_reg_c175(vn_indice)(vn_indice_bi).next(vn_indice_tri);
            end if;
            --
         end loop;
         --
         vn_fase := 12;
         --
         if vn_indice_bi = vt_tri_tab_reg_c175(vn_indice).last then
            exit;
         else
            vn_indice_bi := vt_tri_tab_reg_c175(vn_indice).next(vn_indice_bi);
         end if;
         --
      end loop;
      --
      vn_fase := 13;
      --
      if vn_indice = vt_tri_tab_reg_c175.last then
         exit;
      else
         vn_indice := vt_tri_tab_reg_c175.next(vn_indice);
      end if;
      --
   end loop;
   --
   vn_fase := 14;
   --
   return nvl(vn_qtde,0);
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_c175 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_c175;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro c176
function fkg_qtde_linha_reg_c176
         return number
is
   --
   vn_fase       number := 0;
   vn_qtde       number := 0;
   vn_indice     pls_integer := 0;
   vn_indice_bi  pls_integer := 0;
   vn_indice_tri pls_integer := 0;
   --
begin
   --
   vn_fase   := 1;
   vn_indice := nvl(vt_tri_tab_reg_c176.first,0);
   vn_qtde   := 0;
   vn_fase   := 2;
   --
   loop
      --
      vn_fase := 3;
      --
      if nvl(vn_indice,0) = 0 then
         exit;
      end if;
      --
      vn_fase := 4;
      --
      vn_indice_bi := nvl(vt_tri_tab_reg_c176(vn_indice).first,0);
      --
      vn_fase := 5;
      --
      loop
         --
         vn_fase := 6;
         --
         if nvl(vn_indice_bi,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 7;
         --
         vn_indice_tri := nvl(vt_tri_tab_reg_c176(vn_indice)(vn_indice_bi).first,0);
         --
         vn_fase := 8;
         --
         loop
            --
            vn_fase := 9;
            --
            if nvl(vn_indice_tri,0) = 0 then
               exit;
            end if;
            --
            vn_fase := 10;
            --
            vn_qtde := nvl(vn_qtde,0) + 1;
            --
            vn_fase := 11;
            --
            if vn_indice_tri = vt_tri_tab_reg_c176(vn_indice)(vn_indice_bi).last then
               exit;
            else
               vn_indice_tri := vt_tri_tab_reg_c176(vn_indice)(vn_indice_bi).next(vn_indice_tri);
            end if;
            --
         end loop;
         --
         vn_fase := 12;
         --
         if vn_indice_bi = vt_tri_tab_reg_c176(vn_indice).last then
            exit;
         else
            vn_indice_bi := vt_tri_tab_reg_c176(vn_indice).next(vn_indice_bi);
         end if;
         --
      end loop;
      --
      vn_fase := 13;
      --
      if vn_indice = vt_tri_tab_reg_c176.last then
         exit;
      else
         vn_indice := vt_tri_tab_reg_c176.next(vn_indice);
      end if;
      --
   end loop;
   --
   vn_fase := 14;
   --
   return nvl(vn_qtde,0);
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_c176 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_c176;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro c177
function fkg_qtde_linha_reg_c177
         return number
is
   --
   vn_fase       number := 0;
   vn_qtde       number := 0;
   vn_indice     pls_integer := 0;
   vn_indice_bi  pls_integer := 0;
   vn_indice_tri pls_integer := 0;
   --
begin
   --
   vn_fase   := 1;
   vn_indice := nvl(vt_tri_tab_reg_c177.first,0);
   vn_qtde   := 0;
   vn_fase   := 2;
   --
   loop
      --
      vn_fase := 3;
      --
      if nvl(vn_indice,0) = 0 then
         exit;
      end if;
      --
      vn_fase := 4;
      --
      vn_indice_bi := nvl(vt_tri_tab_reg_c177(vn_indice).first,0);
      --
      vn_fase := 5;
      --
      loop
         --
         vn_fase := 6;
         --
         if nvl(vn_indice_bi,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 7;
         --
         vn_indice_tri := nvl(vt_tri_tab_reg_c177(vn_indice)(vn_indice_bi).first,0);
         --
         vn_fase := 8;
         --
         loop
            --
            vn_fase := 9;
            --
            if nvl(vn_indice_tri,0) = 0 then
               exit;
            end if;
            --
            vn_fase := 10;
            --
            vn_qtde := nvl(vn_qtde,0) + 1;
            --
            vn_fase := 11;
            --
            if vn_indice_tri = vt_tri_tab_reg_c177(vn_indice)(vn_indice_bi).last then
               exit;
            else
               vn_indice_tri := vt_tri_tab_reg_c177(vn_indice)(vn_indice_bi).next(vn_indice_tri);
            end if;
            --
         end loop;
         --
         vn_fase := 12;
         --
         if vn_indice_bi = vt_tri_tab_reg_c177(vn_indice).last then
            exit;
         else
            vn_indice_bi := vt_tri_tab_reg_c177(vn_indice).next(vn_indice_bi);
         end if;
         --
      end loop;
      --
      vn_fase := 13;
      --
      if vn_indice = vt_tri_tab_reg_c177.last then
         exit;
      else
         vn_indice := vt_tri_tab_reg_c177.next(vn_indice);
      end if;
      --
   end loop;
   --
   vn_fase := 14;
   --
   return nvl(vn_qtde,0);
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_c177 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_c177;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro c178
function fkg_qtde_linha_reg_c178
         return number
is
   --
   vn_fase       number := 0;
   vn_qtde       number := 0;
   vn_indice     pls_integer := 0;
   vn_indice_bi  pls_integer := 0;
   vn_indice_tri pls_integer := 0;
   --
begin
   --
   vn_fase   := 1;
   vn_indice := nvl(vt_tri_tab_reg_c178.first,0);
   vn_qtde   := 0;
   vn_fase   := 2;
   --
   loop
      --
      vn_fase := 3;
      --
      if nvl(vn_indice,0) = 0 then
         exit;
      end if;
      --
      vn_fase := 4;
      --
      vn_indice_bi := nvl(vt_tri_tab_reg_c178(vn_indice).first,0);
      --
      vn_fase := 5;
      --
      loop
         --
         vn_fase := 6;
         --
         if nvl(vn_indice_bi,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 7;
         --
         vn_indice_tri := nvl(vt_tri_tab_reg_c178(vn_indice)(vn_indice_bi).first,0);
         --
         vn_fase := 8;
         --
         loop
            --
            vn_fase := 9;
            --
            if nvl(vn_indice_tri,0) = 0 then
               exit;
            end if;
            --
            vn_fase := 10;
            --
            vn_qtde := nvl(vn_qtde,0) + 1;
            --
            vn_fase := 11;
            --
            if vn_indice_tri = vt_tri_tab_reg_c178(vn_indice)(vn_indice_bi).last then
               exit;
            else
               vn_indice_tri := vt_tri_tab_reg_c178(vn_indice)(vn_indice_bi).next(vn_indice_tri);
            end if;
            --
         end loop;
         --
         vn_fase := 12;
         --
         if vn_indice_bi = vt_tri_tab_reg_c178(vn_indice).last then
            exit;
         else
            vn_indice_bi := vt_tri_tab_reg_c178(vn_indice).next(vn_indice_bi);
         end if;
         --
      end loop;
      --
      vn_fase := 13;
      --
      if vn_indice = vt_tri_tab_reg_c178.last then
         exit;
      else
         vn_indice := vt_tri_tab_reg_c178.next(vn_indice);
      end if;
      --
   end loop;
   --
   vn_fase := 14;
   --
   return nvl(vn_qtde,0);
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_c178 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_c178;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro c179
function fkg_qtde_linha_reg_c179
         return number
is
   --
   vn_fase       number := 0;
   vn_qtde       number := 0;
   vn_indice     pls_integer := 0;
   vn_indice_bi  pls_integer := 0;
   vn_indice_tri pls_integer := 0;
   --
begin
   --
   vn_fase   := 1;
   vn_indice := nvl(vt_tri_tab_reg_c179.first,0);
   vn_qtde   := 0;
   vn_fase   := 2;
   --
   loop
      --
      vn_fase := 3;
      --
      if nvl(vn_indice,0) = 0 then
         exit;
      end if;
      --
      vn_fase := 4;
      --
      vn_indice_bi := nvl(vt_tri_tab_reg_c179(vn_indice).first,0);
      --
      vn_fase := 5;
      --
      loop
         --
         vn_fase := 6;
         --
         if nvl(vn_indice_bi,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 7;
         --
         vn_indice_tri := nvl(vt_tri_tab_reg_c179(vn_indice)(vn_indice_bi).first,0);
         --
         vn_fase := 8;
         --
         loop
            --
            vn_fase := 9;
            --
            if nvl(vn_indice_tri,0) = 0 then
               exit;
            end if;
            --
            vn_fase := 10;
            --
            vn_qtde := nvl(vn_qtde,0) + 1;
            --
            vn_fase := 11;
            --
            if vn_indice_tri = vt_tri_tab_reg_c179(vn_indice)(vn_indice_bi).last then
               exit;
            else
               vn_indice_tri := vt_tri_tab_reg_c179(vn_indice)(vn_indice_bi).next(vn_indice_tri);
            end if;
            --
         end loop;
         --
         vn_fase := 12;
         --
         if vn_indice_bi = vt_tri_tab_reg_c179(vn_indice).last then
            exit;
         else
            vn_indice_bi := vt_tri_tab_reg_c179(vn_indice).next(vn_indice_bi);
         end if;
         --
      end loop;
      --
      vn_fase := 13;
      --
      if vn_indice = vt_tri_tab_reg_c179.last then
         exit;
      else
         vn_indice := vt_tri_tab_reg_c179.next(vn_indice);
      end if;
      --
   end loop;
   --
   vn_fase := 14;
   --
   return nvl(vn_qtde,0);
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_c179 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_c179;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro c190
function fkg_qtde_linha_reg_c190
         return number
is
   --
   vn_fase       number := 0;
   vn_qtde       number := 0;
   vn_indice     pls_integer := 0;
   vn_indice_bi  pls_integer := 0;
   --
begin
   --
   vn_fase   := 1;
   vn_indice := nvl(vt_bi_tab_reg_c190.first,0);
   vn_qtde   := 0;
   vn_fase   := 2;
   --
   loop
      --
      vn_fase := 3;
      --
      if nvl(vn_indice,0) = 0 then
         exit;
      end if;
      --
      vn_fase := 4;
      --
      vn_indice_bi := nvl(vt_bi_tab_reg_c190(vn_indice).first,0);
      --
      vn_fase := 5;
      --
      loop
         --
         vn_fase := 6;
         --
         if nvl(vn_indice_bi,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 7;
         --
         vn_qtde := nvl(vn_qtde,0) + 1;
         --
         vn_fase := 8;
         --
         if vn_indice_bi = vt_bi_tab_reg_c190(vn_indice).last then
            exit;
         else
            vn_indice_bi := vt_bi_tab_reg_c190(vn_indice).next(vn_indice_bi);
         end if;
         --
      end loop;
      --
      vn_fase := 9;
      --
      if vn_indice = vt_bi_tab_reg_c190.last then
         exit;
      else
         vn_indice := vt_bi_tab_reg_c190.next(vn_indice);
      end if;
      --
   end loop;
   --
   vn_fase := 10;
   --
   return nvl(vn_qtde,0);
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_c190 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_c190;
-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro c191
function fkg_qtde_linha_reg_c191
         return number
is
   --
   vn_fase       number := 0;
   vn_qtde       number := 0;
   vn_indice     pls_integer := 0;
   vn_indice_bi  pls_integer := 0;
   vn_indice_tri pls_integer := 0;
   --
begin
   --
   vn_fase   := 1;
   vn_indice := nvl(vt_tri_tab_reg_c191.first,0);
   vn_qtde   := 0;
   vn_fase   := 2;
   --
   loop
      --
      vn_fase := 3;
      --
      if nvl(vn_indice,0) = 0 then
         exit;
      end if;
      --
      vn_fase := 4;
      --
      vn_indice_bi := nvl(vt_tri_tab_reg_c191(vn_indice).first,0);
      --
      vn_fase := 5;
      --
      loop
         --
         vn_fase := 6;
         --
         if nvl(vn_indice_bi,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 7;
         --
         vn_indice_tri := nvl(vt_tri_tab_reg_c191(vn_indice)(vn_indice_bi).first,0);
         --
         vn_fase := 8;
         --
         loop
            --
            vn_fase := 9;
            --
            if nvl(vn_indice_tri,0) = 0 then
               exit;
            end if;
            --
            vn_fase := 10;
            --
            vn_qtde := nvl(vn_qtde,0) + 1;
            --
            vn_fase := 11;
            --
            if vn_indice_tri = vt_tri_tab_reg_c191(vn_indice)(vn_indice_bi).last then
               exit;
            else
               vn_indice_tri := vt_tri_tab_reg_c191(vn_indice)(vn_indice_bi).next(vn_indice_tri);
            end if;
            --
         end loop;
         --
         vn_fase := 12;
         --
         if vn_indice_bi = vt_tri_tab_reg_c191(vn_indice).last then
            exit;
         else
            vn_indice_bi := vt_tri_tab_reg_c191(vn_indice).next(vn_indice_bi);
         end if;
         --
      end loop;
      --
      vn_fase := 13;
      --
      if vn_indice = vt_tri_tab_reg_c191.last then
         exit;
      else
         vn_indice := vt_tri_tab_reg_c191.next(vn_indice);
      end if;
      --
   end loop;
   --
   vn_fase := 14;
   --
   return nvl(vn_qtde,0);
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_c191 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_c191;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro c195
function fkg_qtde_linha_reg_c195
         return number
is
   --
   vn_fase       number := 0;
   vn_qtde       number := 0;
   vn_indice     pls_integer := 0;
   vn_indice_bi  pls_integer := 0;
   --
begin
   --
   vn_fase   := 1;
   vn_indice := nvl(vt_bi_tab_reg_c195.first,0);
   vn_qtde   := 0;
   vn_fase   := 2;
   --
   loop
      --
      vn_fase := 3;
      --
      if nvl(vn_indice,0) = 0 then
         exit;
      end if;
      --
      vn_fase := 4;
      --
      vn_indice_bi := nvl(vt_bi_tab_reg_c195(vn_indice).first,0);
      --
      vn_fase := 5;
      --
      loop
         --
         vn_fase := 6;
         --
         if nvl(vn_indice_bi,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 7;
         --
         vn_qtde := nvl(vn_qtde,0) + 1;
         --
         vn_fase := 8;
         --
         if vn_indice_bi = vt_bi_tab_reg_c195(vn_indice).last then
            exit;
         else
            vn_indice_bi := vt_bi_tab_reg_c195(vn_indice).next(vn_indice_bi);
         end if;
         --
      end loop;
      --
      vn_fase := 9;
      --
      if vn_indice = vt_bi_tab_reg_c195.last then
         exit;
      else
         vn_indice := vt_bi_tab_reg_c195.next(vn_indice);
      end if;
      --
   end loop;
   --
   vn_fase := 10;
   --
   return nvl(vn_qtde,0);
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_c195 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_c195;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro c197
function fkg_qtde_linha_reg_c197
         return number
is
   --
   vn_fase       number := 0;
   vn_qtde       number := 0;
   vn_indice     pls_integer := 0;
   vn_indice_bi  pls_integer := 0;
   vn_indice_tri pls_integer := 0;
   --
begin
   --
   vn_fase   := 1;
   vn_indice := nvl(vt_tri_tab_reg_c197.first,0);
   vn_qtde   := 0;
   vn_fase   := 2;
   --
   loop
      --
      vn_fase := 3;
      --
      if nvl(vn_indice,0) = 0 then
         exit;
      end if;
      --
      vn_fase := 4;
      --
      vn_indice_bi := nvl(vt_tri_tab_reg_c197(vn_indice).first,0);
      --
      vn_fase := 5;
      --
      loop
         --
         vn_fase := 6;
         --
         if nvl(vn_indice_bi,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 7;
         --
         vn_indice_tri := nvl(vt_tri_tab_reg_c197(vn_indice)(vn_indice_bi).first,0);
         --
         vn_fase := 8;
         --
         loop
            --
            vn_fase := 9;
            --
            if nvl(vn_indice_tri,0) = 0 then
               exit;
            end if;
            --
            vn_fase := 10;
            --
            vn_qtde := nvl(vn_qtde,0) + 1;
            --
            vn_fase := 11;
            --
            if vn_indice_tri = vt_tri_tab_reg_c197(vn_indice)(vn_indice_bi).last then
               exit;
            else
               vn_indice_tri := vt_tri_tab_reg_c197(vn_indice)(vn_indice_bi).next(vn_indice_tri);
            end if;
            --
         end loop;
         --
         vn_fase := 12;
         --
         if vn_indice_bi = vt_tri_tab_reg_c197(vn_indice).last then
            exit;
         else
            vn_indice_bi := vt_tri_tab_reg_c197(vn_indice).next(vn_indice_bi);
         end if;
         --
      end loop;
      --
      vn_fase := 13;
      --
      if vn_indice = vt_tri_tab_reg_c197.last then
         exit;
      else
         vn_indice := vt_tri_tab_reg_c197.next(vn_indice);
      end if;
      --
   end loop;
   --
   vn_fase := 14;
   --
   return nvl(vn_qtde,0);
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_c197 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_c197;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro c300
function fkg_qtde_linha_reg_c300
         return number
is
   --
   vn_fase  number := 0;
   vn_qtde  number := 0;
   --
begin
   --
   vn_fase := 1;
   vn_qtde := nvl(vt_tab_reg_c300.count,0);
   vn_fase := 2;
   --
   return vn_qtde;
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_c300 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_c300;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro c310
function fkg_qtde_linha_reg_c310
         return number
is
   --
   vn_fase       number := 0;
   vn_qtde       number := 0;
   vn_indice     pls_integer := 0;
   vn_indice_bi  pls_integer := 0;
   --
begin
   --
   vn_fase   := 1;
   vn_indice := nvl(vt_bi_tab_reg_c310.first,0);
   vn_qtde   := 0;
   vn_fase   := 2;
   --
   loop
      --
      vn_fase := 3;
      --
      if nvl(vn_indice,0) = 0 then
         exit;
      end if;
      --
      vn_fase := 4;
      --
      vn_indice_bi := nvl(vt_bi_tab_reg_c310(vn_indice).first,0);
      --
      vn_fase := 5;
      --
      loop
         --
         vn_fase := 6;
         --
         if nvl(vn_indice_bi,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 7;
         --
         vn_qtde := nvl(vn_qtde,0) + 1;
         --
         vn_fase := 8;
         --
         if vn_indice_bi = vt_bi_tab_reg_c310(vn_indice).last then
            exit;
         else
            vn_indice_bi := vt_bi_tab_reg_c310(vn_indice).next(vn_indice_bi);
         end if;
         --
      end loop;
      --
      vn_fase := 9;
      --
      if vn_indice = vt_bi_tab_reg_c310.last then
         exit;
      else
         vn_indice := vt_bi_tab_reg_c310.next(vn_indice);
      end if;
      --
   end loop;
   --
   vn_fase := 10;
   --
   return nvl(vn_qtde,0);
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_c310 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_c310;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro c320
function fkg_qtde_linha_reg_c320
         return number
is
   --
   vn_fase       number := 0;
   vn_qtde       number := 0;
   vn_indice     pls_integer := 0;
   vn_indice_bi  pls_integer := 0;
   --
begin
   --
   vn_fase   := 1;
   vn_indice := nvl(vt_bi_tab_reg_c320.first,0);
   vn_qtde   := 0;
   vn_fase   := 2;
   --
   loop
      --
      vn_fase := 3;
      --
      if nvl(vn_indice,0) = 0 then
         exit;
      end if;
      --
      vn_fase := 4;
      --
      vn_indice_bi := nvl(vt_bi_tab_reg_c320(vn_indice).first,0);
      --
      vn_fase := 5;
      --
      loop
         --
         vn_fase := 6;
         --
         if nvl(vn_indice_bi,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 7;
         --
         vn_qtde := nvl(vn_qtde,0) + 1;
         --
         vn_fase := 8;
         --
         if vn_indice_bi = vt_bi_tab_reg_c320(vn_indice).last then
            exit;
         else
            vn_indice_bi := vt_bi_tab_reg_c320(vn_indice).next(vn_indice_bi);
         end if;
         --
      end loop;
      --
      vn_fase := 9;
      --
      if vn_indice = vt_bi_tab_reg_c320.last then
         exit;
      else
         vn_indice := vt_bi_tab_reg_c320.next(vn_indice);
      end if;
      --
   end loop;
   --
   vn_fase := 10;
   --
   return nvl(vn_qtde,0);
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_c320 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_c320;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro c321
function fkg_qtde_linha_reg_c321
         return number
is
   --
   vn_fase       number := 0;
   vn_qtde       number := 0;
   vn_indice     pls_integer := 0;
   vn_indice_bi  pls_integer := 0;
   vn_indice_tri pls_integer := 0;
   --
begin
   --
   vn_fase   := 1;
   vn_indice := nvl(vt_tri_tab_reg_c321.first,0);
   vn_qtde   := 0;
   vn_fase   := 2;
   --
   loop
      --
      vn_fase := 3;
      --
      if nvl(vn_indice,0) = 0 then
         exit;
      end if;
      --
      vn_fase := 4;
      --
      vn_indice_bi := nvl(vt_tri_tab_reg_c321(vn_indice).first,0);
      --
      vn_fase := 5;
      --
      loop
         --
         vn_fase := 6;
         --
         if nvl(vn_indice_bi,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 7;
         --
         vn_indice_tri := nvl(vt_tri_tab_reg_c321(vn_indice)(vn_indice_bi).first,0);
         --
         vn_fase := 8;
         --
         loop
            --
            vn_fase := 9;
            --
            if nvl(vn_indice_tri,0) = 0 then
               exit;
            end if;
            --
            vn_fase := 10;
            --
            vn_qtde := nvl(vn_qtde,0) + 1;
            --
            vn_fase := 11;
            --
            if vn_indice_tri = vt_tri_tab_reg_c321(vn_indice)(vn_indice_bi).last then
               exit;
            else
               vn_indice_tri := vt_tri_tab_reg_c321(vn_indice)(vn_indice_bi).next(vn_indice_tri);
            end if;
            --
         end loop;
         --
         vn_fase := 12;
         --
         if vn_indice_bi = vt_tri_tab_reg_c321(vn_indice).last then
            exit;
         else
            vn_indice_bi := vt_tri_tab_reg_c321(vn_indice).next(vn_indice_bi);
         end if;
         --
      end loop;
      --
      vn_fase := 13;
      --
      if vn_indice = vt_tri_tab_reg_c321.last then
         exit;
      else
         vn_indice := vt_tri_tab_reg_c321.next(vn_indice);
      end if;
      --
   end loop;
   --
   vn_fase := 14;
   --
   return nvl(vn_qtde,0);
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_c321 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_c321;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro c350
function fkg_qtde_linha_reg_c350
         return number
is
   --
   vn_fase  number := 0;
   vn_qtde  number := 0;
   --
begin
   --
   vn_fase := 1;
   vn_qtde := nvl(vt_tab_reg_c350.count,0);
   vn_fase := 2;
   --
   return vn_qtde;
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_c350 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_c350;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro c370
function fkg_qtde_linha_reg_c370
         return number
is
   --
   vn_fase       number := 0;
   vn_qtde       number := 0;
   vn_indice     pls_integer := 0;
   vn_indice_bi  pls_integer := 0;
   --
begin
   --
   vn_fase   := 1;
   vn_indice := nvl(vt_bi_tab_reg_c370.first,0);
   vn_qtde   := 0;
   vn_fase   := 2;
   --
   loop
      --
      vn_fase := 3;
      --
      if nvl(vn_indice,0) = 0 then
         exit;
      end if;
      --
      vn_fase := 4;
      --
      vn_indice_bi := nvl(vt_bi_tab_reg_c370(vn_indice).first,0);
      --
      vn_fase := 5;
      --
      loop
         --
         vn_fase := 6;
         --
         if nvl(vn_indice_bi,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 7;
         --
         vn_qtde := nvl(vn_qtde,0) + 1;
         --
         vn_fase := 8;
         --
         if vn_indice_bi = vt_bi_tab_reg_c370(vn_indice).last then
            exit;
         else
            vn_indice_bi := vt_bi_tab_reg_c370(vn_indice).next(vn_indice_bi);
         end if;
         --
      end loop;
      --
      vn_fase := 9;
      --
      if vn_indice = vt_bi_tab_reg_c370.last then
         exit;
      else
         vn_indice := vt_bi_tab_reg_c370.next(vn_indice);
      end if;
      --
   end loop;
   --
   vn_fase := 10;
   --
   return nvl(vn_qtde,0);
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_c370 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_c370;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro c390
function fkg_qtde_linha_reg_c390
         return number
is
   --
   vn_fase       number := 0;
   vn_qtde       number := 0;
   vn_indice     pls_integer := 0;
   vn_indice_bi  pls_integer := 0;
   --
begin
   --
   vn_fase   := 1;
   vn_indice := nvl(vt_bi_tab_reg_c390.first,0);
   vn_qtde   := 0;
   vn_fase   := 2;
   --
   loop
      --
      vn_fase := 3;
      --
      if nvl(vn_indice,0) = 0 then
         exit;
      end if;
      --
      vn_fase := 4;
      --
      vn_indice_bi := nvl(vt_bi_tab_reg_c390(vn_indice).first,0);
      --
      vn_fase := 5;
      --
      loop
         --
         vn_fase := 6;
         --
         if nvl(vn_indice_bi,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 7;
         --
         vn_qtde := nvl(vn_qtde,0) + 1;
         --
         vn_fase := 8;
         --
         if vn_indice_bi = vt_bi_tab_reg_c390(vn_indice).last then
            exit;
         else
            vn_indice_bi := vt_bi_tab_reg_c390(vn_indice).next(vn_indice_bi);
         end if;
         --
      end loop;
      --
      vn_fase := 9;
      --
      if vn_indice = vt_bi_tab_reg_c390.last then
         exit;
      else
         vn_indice := vt_bi_tab_reg_c390.next(vn_indice);
      end if;
      --
   end loop;
   --
   vn_fase := 10;
   --
   return nvl(vn_qtde,0);
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_c390 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_c390;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro c400
function fkg_qtde_linha_reg_c400
         return number
is
   --
   vn_fase  number := 0;
   vn_qtde  number := 0;
   --
begin
   --
   vn_fase := 1;
   vn_qtde := nvl(vt_tab_reg_c400.count,0);
   vn_fase := 2;
   --
   return vn_qtde;
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_c400 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_c400;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro c405
function fkg_qtde_linha_reg_c405
         return number
is
   --
   vn_fase       number := 0;
   vn_qtde       number := 0;
   vn_indice     pls_integer := 0;
   vn_indice_bi  pls_integer := 0;
   --
begin
   --
   vn_fase   := 1;
   vn_indice := nvl(vt_bi_tab_reg_c405.first,0);
   vn_qtde   := 0;
   vn_fase   := 2;
   --
   loop
      --
      vn_fase := 3;
      --
      if nvl(vn_indice,0) = 0 then
         exit;
      end if;
      --
      vn_fase := 4;
      --
      vn_indice_bi := nvl(vt_bi_tab_reg_c405(vn_indice).first,0);
      --
      vn_fase := 5;
      --
      loop
         --
         vn_fase := 6;
         --
         if nvl(vn_indice_bi,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 7;
         --
         vn_qtde := nvl(vn_qtde,0) + 1;
         --
         vn_fase := 8;
         --
         if vn_indice_bi = vt_bi_tab_reg_c405(vn_indice).last then
            exit;
         else
            vn_indice_bi := vt_bi_tab_reg_c405(vn_indice).next(vn_indice_bi);
         end if;
         --
      end loop;
      --
      vn_fase := 9;
      --
      if vn_indice = vt_bi_tab_reg_c405.last then
         exit;
      else
         vn_indice := vt_bi_tab_reg_c405.next(vn_indice);
      end if;
      --
   end loop;
   --
   vn_fase := 10;
   --
   return nvl(vn_qtde,0);
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_c405 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_c405;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro c410
function fkg_qtde_linha_reg_c410
         return number
is
   --
   vn_fase       number := 0;
   vn_qtde       number := 0;
   vn_indice     pls_integer := 0;
   vn_indice_bi  pls_integer := 0;
   vn_indice_tri pls_integer := 0;
   --
begin
   --
   vn_fase   := 1;
   vn_indice := nvl(vt_tri_tab_reg_c410.first,0);
   vn_qtde   := 0;
   vn_fase   := 2;
   --
   loop
      --
      vn_fase := 3;
      --
      if nvl(vn_indice,0) = 0 then
         exit;
      end if;
      --
      vn_fase := 4;
      --
      vn_indice_bi := nvl(vt_tri_tab_reg_c410(vn_indice).first,0);
      --
      vn_fase := 5;
      --
      loop
         --
         vn_fase := 6;
         --
         if nvl(vn_indice_bi,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 7;
         --
         vn_indice_tri := nvl(vt_tri_tab_reg_c410(vn_indice)(vn_indice_bi).first,0);
         --
         vn_fase := 8;
         --
         loop
            --
            vn_fase := 9;
            --
            if nvl(vn_indice_tri,0) = 0 then
               exit;
            end if;
            --
            vn_fase := 10;
            --
            vn_qtde := nvl(vn_qtde,0) + 1;
            --
            vn_fase := 11;
            --
            if vn_indice_tri = vt_tri_tab_reg_c410(vn_indice)(vn_indice_bi).last then
               exit;
            else
               vn_indice_tri := vt_tri_tab_reg_c410(vn_indice)(vn_indice_bi).next(vn_indice_tri);
            end if;
            --
         end loop;
         --
         vn_fase := 12;
         --
         if vn_indice_bi = vt_tri_tab_reg_c410(vn_indice).last then
            exit;
         else
            vn_indice_bi := vt_tri_tab_reg_c410(vn_indice).next(vn_indice_bi);
         end if;
         --
      end loop;
      --
      vn_fase := 13;
      --
      if vn_indice = vt_tri_tab_reg_c410.last then
         exit;
      else
         vn_indice := vt_tri_tab_reg_c410.next(vn_indice);
      end if;
      --
   end loop;
   --
   vn_fase := 14;
   --
   return nvl(vn_qtde,0);
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_c410 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_c410;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro c420
function fkg_qtde_linha_reg_c420
         return number
is
   --
   vn_fase       number := 0;
   vn_qtde       number := 0;
   vn_indice     pls_integer := 0;
   vn_indice_bi  pls_integer := 0;
   vn_indice_tri pls_integer := 0;
   --
begin
   --
   vn_fase   := 1;
   vn_indice := nvl(vt_tri_tab_reg_c420.first,0);
   vn_qtde   := 0;
   vn_fase   := 2;
   --
   loop
      --
      vn_fase := 3;
      --
      if nvl(vn_indice,0) = 0 then
         exit;
      end if;
      --
      vn_fase := 4;
      --
      vn_indice_bi := nvl(vt_tri_tab_reg_c420(vn_indice).first,0);
      --
      vn_fase := 5;
      --
      loop
         --
         vn_fase := 6;
         --
         if nvl(vn_indice_bi,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 7;
         --
         vn_indice_tri := nvl(vt_tri_tab_reg_c420(vn_indice)(vn_indice_bi).first,0);
         --
         vn_fase := 8;
         --
         loop
            --
            vn_fase := 9;
            --
            if nvl(vn_indice_tri,0) = 0 then
               exit;
            end if;
            --
            vn_fase := 10;
            --
            vn_qtde := nvl(vn_qtde,0) + 1;
            --
            vn_fase := 11;
            --
            if vn_indice_tri = vt_tri_tab_reg_c420(vn_indice)(vn_indice_bi).last then
               exit;
            else
               vn_indice_tri := vt_tri_tab_reg_c420(vn_indice)(vn_indice_bi).next(vn_indice_tri);
            end if;
            --
         end loop;
         --
         vn_fase := 12;
         --
         if vn_indice_bi = vt_tri_tab_reg_c420(vn_indice).last then
            exit;
         else
            vn_indice_bi := vt_tri_tab_reg_c420(vn_indice).next(vn_indice_bi);
         end if;
         --
      end loop;
      --
      vn_fase := 13;
      --
      if vn_indice = vt_tri_tab_reg_c420.last then
         exit;
      else
         vn_indice := vt_tri_tab_reg_c420.next(vn_indice);
      end if;
      --
   end loop;
   --
   vn_fase := 14;
   --
   return nvl(vn_qtde,0);
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_c420 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_c420;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro c425
function fkg_qtde_linha_reg_c425
         return number
is
   --
   vn_fase         number := 0;
   vn_qtde         number := 0;
   vn_indice       pls_integer := 0;
   vn_indice_bi    pls_integer := 0;
   vn_indice_tri   pls_integer := 0;
   vn_indice_tetra pls_integer := 0;
   --
begin
   --
   vn_fase   := 1;
   vn_indice := nvl(vt_tetra_tab_reg_c425.first,0);
   vn_qtde   := 0;
   vn_fase   := 2;
   --
   loop
      --
      vn_fase := 3;
      --
      if nvl(vn_indice,0) = 0 then
         exit;
      end if;
      --
      vn_fase := 4;
      --
      vn_indice_bi := nvl(vt_tetra_tab_reg_c425(vn_indice).first,0);
      --
      vn_fase := 5;
      --
      loop
         --
         vn_fase := 6;
         --
         if nvl(vn_indice_bi,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 7;
         --
         vn_indice_tri := nvl(vt_tetra_tab_reg_c425(vn_indice)(vn_indice_bi).first,0);
         --
         vn_fase := 8;
         --
         loop
            --
            vn_fase := 9;
            --
            if nvl(vn_indice_tri,0) = 0 then
               exit;
            end if;
            --
            vn_fase := 10;
            --
            vn_indice_tetra := nvl(vt_tetra_tab_reg_c425(vn_indice)(vn_indice_bi)(vn_indice_tri).first,0);
            --
            vn_fase := 11;
            --
            loop
               --
               vn_fase := 12;
               --
               if nvl(vn_indice_tetra,0) = 0 then
                  exit;
               end if;
               --
               vn_fase := 13;
               --
               vn_qtde := nvl(vn_qtde,0) + 1;
               --
               vn_fase := 14;
               --
               if vn_indice_tetra = vt_tetra_tab_reg_c425(vn_indice)(vn_indice_bi)(vn_indice_tri).last then
                  exit;
               else
                  vn_indice_tetra := vt_tetra_tab_reg_c425(vn_indice)(vn_indice_bi)(vn_indice_tri).next(vn_indice_tetra);
               end if;
               --
            end loop;
            --
            vn_fase := 15;
            --
            if vn_indice_tri = vt_tetra_tab_reg_c425(vn_indice)(vn_indice_bi).last then
               exit;
            else
               vn_indice_tri := vt_tetra_tab_reg_c425(vn_indice)(vn_indice_bi).next(vn_indice_tri);
            end if;
            --
         end loop;
         --
         vn_fase := 16;
         --
         if vn_indice_bi = vt_tetra_tab_reg_c425(vn_indice).last then
            exit;
         else
            vn_indice_bi := vt_tetra_tab_reg_c425(vn_indice).next(vn_indice_bi);
         end if;
         --
      end loop;
      --
      vn_fase := 17;
      --
      if vn_indice = vt_tetra_tab_reg_c425.last then
         exit;
      else
         vn_indice := vt_tetra_tab_reg_c425.next(vn_indice);
      end if;
      --
   end loop;
   --
   vn_fase := 18;
   --
   return nvl(vn_qtde,0);
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_c425 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_c425;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro c460
function fkg_qtde_linha_reg_c460
         return number
is
   --
   vn_fase       number := 0;
   vn_qtde       number := 0;
   vn_indice     pls_integer := 0;
   vn_indice_bi  pls_integer := 0;
   vn_indice_tri pls_integer := 0;
   --
begin
   --
   vn_fase   := 1;
   vn_indice := nvl(vt_tri_tab_reg_c460.first,0);
   vn_qtde   := 0;
   vn_fase   := 2;
   --
   loop
      --
      vn_fase := 3;
      --
      if nvl(vn_indice,0) = 0 then
         exit;
      end if;
      --
      vn_fase := 4;
      --
      vn_indice_bi := nvl(vt_tri_tab_reg_c460(vn_indice).first,0);
      --
      vn_fase := 5;
      --
      loop
         --
         vn_fase := 6;
         --
         if nvl(vn_indice_bi,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 7;
         --
         vn_indice_tri := nvl(vt_tri_tab_reg_c460(vn_indice)(vn_indice_bi).first,0);
         --
         vn_fase := 8;
         --
         loop
            --
            vn_fase := 9;
            --
            if nvl(vn_indice_tri,0) = 0 then
               exit;
            end if;
            --
            vn_fase := 10;
            --
            vn_qtde := nvl(vn_qtde,0) + 1;
            --
            vn_fase := 11;
            --
            if vn_indice_tri = vt_tri_tab_reg_c460(vn_indice)(vn_indice_bi).last then
               exit;
            else
               vn_indice_tri := vt_tri_tab_reg_c460(vn_indice)(vn_indice_bi).next(vn_indice_tri);
            end if;
            --
         end loop;
         --
         vn_fase := 12;
         --
         if vn_indice_bi = vt_tri_tab_reg_c460(vn_indice).last then
            exit;
         else
            vn_indice_bi := vt_tri_tab_reg_c460(vn_indice).next(vn_indice_bi);
         end if;
         --
      end loop;
      --
      vn_fase := 13;
      --
      if vn_indice = vt_tri_tab_reg_c460.last then
         exit;
      else
         vn_indice := vt_tri_tab_reg_c460.next(vn_indice);
      end if;
      --
   end loop;
   --
   vn_fase := 14;
   --
   return nvl(vn_qtde,0);
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_c460 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_c460;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro c470
function fkg_qtde_linha_reg_c470
         return number
is
   --
   vn_fase         number := 0;
   vn_qtde         number := 0;
   vn_indice       pls_integer := 0;
   vn_indice_bi    pls_integer := 0;
   vn_indice_tri   pls_integer := 0;
   vn_indice_tetra pls_integer := 0;
   --
begin
   --
   vn_fase   := 1;
   vn_indice := nvl(vt_tetra_tab_reg_c470.first,0);
   vn_qtde   := 0;
   vn_fase   := 2;
   --
   loop
      --
      vn_fase := 3;
      --
      if nvl(vn_indice,0) = 0 then
         exit;
      end if;
      --
      vn_fase := 4;
      --
      vn_indice_bi := nvl(vt_tetra_tab_reg_c470(vn_indice).first,0);
      --
      vn_fase := 5;
      --
      loop
         --
         vn_fase := 6;
         --
         if nvl(vn_indice_bi,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 7;
         --
         vn_indice_tri := nvl(vt_tetra_tab_reg_c470(vn_indice)(vn_indice_bi).first,0);
         --
         vn_fase := 8;
         --
         loop
            --
            vn_fase := 9;
            --
            if nvl(vn_indice_tri,0) = 0 then
               exit;
            end if;
            --
            vn_fase := 10;
            --
            vn_indice_tetra := nvl(vt_tetra_tab_reg_c470(vn_indice)(vn_indice_bi)(vn_indice_tri).first,0);
            --
            vn_fase := 11;
            --
            loop
               --
               vn_fase := 12;
               --
               if nvl(vn_indice_tetra,0) = 0 then
                  exit;
               end if;
               --
               vn_fase := 13;
               --
               vn_qtde := nvl(vn_qtde,0) + 1;
               --
               vn_fase := 14;
               --
               if vn_indice_tetra = vt_tetra_tab_reg_c470(vn_indice)(vn_indice_bi)(vn_indice_tri).last then
                  exit;
               else
                  vn_indice_tetra := vt_tetra_tab_reg_c470(vn_indice)(vn_indice_bi)(vn_indice_tri).next(vn_indice_tetra);
               end if;
               --
            end loop;
            --
            vn_fase := 15;
            --
            if vn_indice_tri = vt_tetra_tab_reg_c470(vn_indice)(vn_indice_bi).last then
               exit;
            else
               vn_indice_tri := vt_tetra_tab_reg_c470(vn_indice)(vn_indice_bi).next(vn_indice_tri);
            end if;
            --
         end loop;
         --
         vn_fase := 16;
         --
         if vn_indice_bi = vt_tetra_tab_reg_c470(vn_indice).last then
            exit;
         else
            vn_indice_bi := vt_tetra_tab_reg_c470(vn_indice).next(vn_indice_bi);
         end if;
         --
      end loop;
      --
      vn_fase := 17;
      --
      if vn_indice = vt_tetra_tab_reg_c470.last then
         exit;
      else
         vn_indice := vt_tetra_tab_reg_c470.next(vn_indice);
      end if;
      --
   end loop;
   --
   vn_fase := 18;
   --
   return nvl(vn_qtde,0);
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_c470 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_c470;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro c490
function fkg_qtde_linha_reg_c490
         return number
is
   --
   vn_fase       number := 0;
   vn_qtde       number := 0;
   vn_indice     pls_integer := 0;
   vn_indice_bi  pls_integer := 0;
   vn_indice_tri pls_integer := 0;
   --
begin
   --
   vn_fase   := 1;
   vn_indice := nvl(vt_tri_tab_reg_c490.first,0);
   vn_qtde   := 0;
   vn_fase   := 2;
   --
   loop
      --
      vn_fase := 3;
      --
      if nvl(vn_indice,0) = 0 then
         exit;
      end if;
      --
      vn_fase := 4;
      --
      vn_indice_bi := nvl(vt_tri_tab_reg_c490(vn_indice).first,0);
      --
      vn_fase := 5;
      --
      loop
         --
         vn_fase := 6;
         --
         if nvl(vn_indice_bi,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 7;
         --
         vn_indice_tri := nvl(vt_tri_tab_reg_c490(vn_indice)(vn_indice_bi).first,0);
         --
         vn_fase := 8;
         --
         loop
            --
            vn_fase := 9;
            --
            if nvl(vn_indice_tri,0) = 0 then
               exit;
            end if;
            --
            vn_fase := 10;
            --
            vn_qtde := nvl(vn_qtde,0) + 1;
            --
            vn_fase := 11;
            --
            if vn_indice_tri = vt_tri_tab_reg_c490(vn_indice)(vn_indice_bi).last then
               exit;
            else
               vn_indice_tri := vt_tri_tab_reg_c490(vn_indice)(vn_indice_bi).next(vn_indice_tri);
            end if;
            --
         end loop;
         --
         vn_fase := 12;
         --
         if vn_indice_bi = vt_tri_tab_reg_c490(vn_indice).last then
            exit;
         else
            vn_indice_bi := vt_tri_tab_reg_c490(vn_indice).next(vn_indice_bi);
         end if;
         --
      end loop;
      --
      vn_fase := 13;
      --
      if vn_indice = vt_tri_tab_reg_c490.last then
         exit;
      else
         vn_indice := vt_tri_tab_reg_c490.next(vn_indice);
      end if;
      --
   end loop;
   --
   vn_fase := 14;
   --
   return nvl(vn_qtde,0);
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_c490 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_c490;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro c495
function fkg_qtde_linha_reg_c495
         return number
is
   --
   vn_fase  number := 0;
   vn_qtde  number := 0;
   --
begin
   --
   vn_fase := 1;
   vn_qtde := nvl(vt_tab_reg_c495.count,0);
   vn_fase := 2;
   --
   return vn_qtde;
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_c495 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_c495;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro c500
function fkg_qtde_linha_reg_c500
         return number
is
   --
   vn_fase  number := 0;
   vn_qtde  number := 0;
   --
begin
   --
   vn_fase := 1;
   vn_qtde := nvl(vt_tab_reg_c500.count,0);
   vn_fase := 2;
   --
   return vn_qtde;
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_c500 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_c500;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro c510
function fkg_qtde_linha_reg_c510
         return number
is
   --
   vn_fase       number := 0;
   vn_qtde       number := 0;
   vn_indice     pls_integer := 0;
   vn_indice_bi  pls_integer := 0;
   --
begin
   --
   vn_fase   := 1;
   vn_indice := nvl(vt_bi_tab_reg_c510.first,0);
   vn_qtde   := 0;
   vn_fase   := 2;
   --
   loop
      --
      vn_fase := 3;
      --
      if nvl(vn_indice,0) = 0 then
         exit;
      end if;
      --
      vn_fase := 4;
      --
      vn_indice_bi := nvl(vt_bi_tab_reg_c510(vn_indice).first,0);
      --
      vn_fase := 5;
      --
      loop
         --
         vn_fase := 6;
         --
         if nvl(vn_indice_bi,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 7;
         --
         vn_qtde := nvl(vn_qtde,0) + 1;
         --
         vn_fase := 8;
         --
         if vn_indice_bi = vt_bi_tab_reg_c510(vn_indice).last then
            exit;
         else
            vn_indice_bi := vt_bi_tab_reg_c510(vn_indice).next(vn_indice_bi);
         end if;
         --
      end loop;
      --
      vn_fase := 9;
      --
      if vn_indice = vt_bi_tab_reg_c510.last then
         exit;
      else
         vn_indice := vt_bi_tab_reg_c510.next(vn_indice);
      end if;
      --
   end loop;
   --
   vn_fase := 10;
   --
   return nvl(vn_qtde,0);
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_c510 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_c510;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro c590
function fkg_qtde_linha_reg_c590
         return number
is
   --
   vn_fase       number := 0;
   vn_qtde       number := 0;
   vn_indice     pls_integer := 0;
   vn_indice_bi  pls_integer := 0;
   --
begin
   --
   vn_fase   := 1;
   vn_indice := nvl(vt_bi_tab_reg_c590.first,0);
   vn_qtde   := 0;
   vn_fase   := 2;
   --
   loop
      --
      vn_fase := 3;
      --
      if nvl(vn_indice,0) = 0 then
         exit;
      end if;
      --
      vn_fase := 4;
      --
      vn_indice_bi := nvl(vt_bi_tab_reg_c590(vn_indice).first,0);
      --
      vn_fase := 5;
      --
      loop
         --
         vn_fase := 6;
         --
         if nvl(vn_indice_bi,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 7;
         --
         vn_qtde := nvl(vn_qtde,0) + 1;
         --
         vn_fase := 8;
         --
         if vn_indice_bi = vt_bi_tab_reg_c590(vn_indice).last then
            exit;
         else
            vn_indice_bi := vt_bi_tab_reg_c590(vn_indice).next(vn_indice_bi);
         end if;
         --
      end loop;
      --
      vn_fase := 9;
      --
      if vn_indice = vt_bi_tab_reg_c590.last then
         exit;
      else
         vn_indice := vt_bi_tab_reg_c590.next(vn_indice);
      end if;
      --
   end loop;
   --
   vn_fase := 10;
   --
   return nvl(vn_qtde,0);
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_c590 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_c590;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro c591
function fkg_qtde_linha_reg_c591
         return number
is
   --
   vn_fase       number := 0;
   vn_qtde       number := 0;
   vn_indice     pls_integer := 0;
   vn_indice_bi  pls_integer := 0;
   vn_indice_tri pls_integer := 0;
   --
begin
   --
   vn_fase   := 1;
   vn_indice := nvl(vt_tri_tab_reg_c591.first,0);
   vn_qtde   := 0;
   vn_fase   := 2;
   --
   loop
      --
      vn_fase := 3;
      --
      if nvl(vn_indice,0) = 0 then
         exit;
      end if;
      --
      vn_fase := 4;
      --
      vn_indice_bi := nvl(vt_tri_tab_reg_c591(vn_indice).first,0);
      --
      vn_fase := 5;
      --
      loop
         --
         vn_fase := 6;
         --
         if nvl(vn_indice_bi,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 7;
         --
         vn_indice_tri := nvl(vt_tri_tab_reg_c591(vn_indice)(vn_indice_bi).first,0);
         --
         vn_fase := 8;
         --
         loop
            --
            vn_fase := 9;
            --
            if nvl(vn_indice_tri,0) = 0 then
               exit;
            end if;
            --
            vn_fase := 10;
            --
            vn_qtde := nvl(vn_qtde,0) + 1;
            --
            vn_fase := 11;
            --
            if vn_indice_tri = vt_tri_tab_reg_c591(vn_indice)(vn_indice_bi).last then
               exit;
            else
               vn_indice_tri := vt_tri_tab_reg_c591(vn_indice)(vn_indice_bi).next(vn_indice_tri);
            end if;
            --
         end loop;
         --
         vn_fase := 12;
         --
         if vn_indice_bi = vt_tri_tab_reg_c591(vn_indice).last then
            exit;
         else
            vn_indice_bi := vt_tri_tab_reg_c591(vn_indice).next(vn_indice_bi);
         end if;
         --
      end loop;
      --
      vn_fase := 13;
      --
      if vn_indice = vt_tri_tab_reg_c591.last then
         exit;
      else
         vn_indice := vt_tri_tab_reg_c591.next(vn_indice);
      end if;
      --
   end loop;
   --
   vn_fase := 14;
   --
   return nvl(vn_qtde,0);
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_c591 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_c591;


-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro c595
function fkg_qtde_linha_reg_c595
         return number
is
   --
   vn_fase       number := 0;
   vn_qtde       number := 0;
   vn_indice     pls_integer := 0;
   vn_indice_bi  pls_integer := 0;
   --
begin
   --
   vn_fase   := 1;
   vn_indice := nvl(vt_bi_tab_reg_c595.first,0);
   vn_qtde   := 0;
   vn_fase   := 2;
   --
   loop
      --
      vn_fase := 3;
      --
      if nvl(vn_indice,0) = 0 then
         exit;
      end if;
      --
      vn_fase := 4;
      --
      vn_indice_bi := nvl(vt_bi_tab_reg_c595(vn_indice).first,0);
      --
      vn_fase := 5;
      --
      loop
         --
         vn_fase := 6;
         --
         if nvl(vn_indice_bi,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 7;
         --
         vn_qtde := nvl(vn_qtde,0) + 1;
         --
         vn_fase := 8;
         --
         if vn_indice_bi = vt_bi_tab_reg_c595(vn_indice).last then
            exit;
         else
            vn_indice_bi := vt_bi_tab_reg_c595(vn_indice).next(vn_indice_bi);
         end if;
         --
      end loop;
      --
      vn_fase := 9;
      --
      if vn_indice = vt_bi_tab_reg_c595.last then
         exit;
      else
         vn_indice := vt_bi_tab_reg_c595.next(vn_indice);
      end if;
      --
   end loop;
   --
   vn_fase := 10;
   --
   return nvl(vn_qtde,0);
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_c595 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_c595;


-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro c597
function fkg_qtde_linha_reg_c597
         return number
is
   --
   vn_fase       number := 0;
   vn_qtde       number := 0;
   vn_indice     pls_integer := 0;
   vn_indice_bi  pls_integer := 0;
   vn_indice_tri pls_integer := 0;
   --
begin
   --
   vn_fase   := 1;
   vn_indice := nvl(vt_tri_tab_reg_c597.first,0);
   vn_qtde   := 0;
   vn_fase   := 2;
   --
   loop
      --
      vn_fase := 3;
      --
      if nvl(vn_indice,0) = 0 then
         exit;
      end if;
      --
      vn_fase := 4;
      --
      vn_indice_bi := nvl(vt_tri_tab_reg_c597(vn_indice).first,0);
      --
      vn_fase := 5;
      --
      loop
         --
         vn_fase := 6;
         --
         if nvl(vn_indice_bi,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 7;
         --
         vn_indice_tri := nvl(vt_tri_tab_reg_c597(vn_indice)(vn_indice_bi).first,0);
         --
         vn_fase := 8;
         --
         loop
            --
            vn_fase := 9;
            --
            if nvl(vn_indice_tri,0) = 0 then
               exit;
            end if;
            --
            vn_fase := 10;
            --
            vn_qtde := nvl(vn_qtde,0) + 1;
            --
            vn_fase := 11;
            --
            if vn_indice_tri = vt_tri_tab_reg_c597(vn_indice)(vn_indice_bi).last then
               exit;
            else
               vn_indice_tri := vt_tri_tab_reg_c597(vn_indice)(vn_indice_bi).next(vn_indice_tri);
            end if;
            --
         end loop;
         --
         vn_fase := 12;
         --
         if vn_indice_bi = vt_tri_tab_reg_c597(vn_indice).last then
            exit;
         else
            vn_indice_bi := vt_tri_tab_reg_c597(vn_indice).next(vn_indice_bi);
         end if;
         --
      end loop;
      --
      vn_fase := 13;
      --
      if vn_indice = vt_tri_tab_reg_c597.last then
         exit;
      else
         vn_indice := vt_tri_tab_reg_c597.next(vn_indice);
      end if;
      --
   end loop;
   --
   vn_fase := 14;
   --
   return nvl(vn_qtde,0);
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_c597 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_c597;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro c600
function fkg_qtde_linha_reg_c600
         return number
is
   --
   vn_fase  number := 0;
   vn_qtde  number := 0;
   --
begin
   --
   vn_fase := 1;
   vn_qtde := nvl(vt_tab_reg_c600.count,0);
   vn_fase := 2;
   --
   return vn_qtde;
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_c600 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_c600;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro c601
function fkg_qtde_linha_reg_c601
         return number
is
   --
   vn_fase       number := 0;
   vn_qtde       number := 0;
   vn_indice     pls_integer := 0;
   vn_indice_bi  pls_integer := 0;
   --
begin
   --
   vn_fase   := 1;
   vn_indice := nvl(vt_bi_tab_reg_c601.first,0);
   vn_qtde   := 0;
   vn_fase   := 2;
   --
   loop
      --
      vn_fase := 3;
      --
      if nvl(vn_indice,0) = 0 then
         exit;
      end if;
      --
      vn_fase := 4;
      --
      vn_indice_bi := nvl(vt_bi_tab_reg_c601(vn_indice).first,0);
      --
      vn_fase := 5;
      --
      loop
         --
         vn_fase := 6;
         --
         if nvl(vn_indice_bi,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 7;
         --
         vn_qtde := nvl(vn_qtde,0) + 1;
         --
         vn_fase := 8;
         --
         if vn_indice_bi = vt_bi_tab_reg_c601(vn_indice).last then
            exit;
         else
            vn_indice_bi := vt_bi_tab_reg_c601(vn_indice).next(vn_indice_bi);
         end if;
         --
      end loop;
      --
      vn_fase := 9;
      --
      if vn_indice = vt_bi_tab_reg_c601.last then
         exit;
      else
         vn_indice := vt_bi_tab_reg_c601.next(vn_indice);
      end if;
      --
   end loop;
   --
   vn_fase := 10;
   --
   return nvl(vn_qtde,0);
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_c601 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_c601;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro c610
function fkg_qtde_linha_reg_c610
         return number
is
   --
   vn_fase       number := 0;
   vn_qtde       number := 0;
   vn_indice     pls_integer := 0;
   vn_indice_bi  pls_integer := 0;
   --
begin
   --
   vn_fase   := 1;
   vn_indice := nvl(vt_bi_tab_reg_c610.first,0);
   vn_qtde   := 0;
   vn_fase   := 2;
   --
   loop
      --
      vn_fase := 3;
      --
      if nvl(vn_indice,0) = 0 then
         exit;
      end if;
      --
      vn_fase := 4;
      --
      vn_indice_bi := nvl(vt_bi_tab_reg_c610(vn_indice).first,0);
      --
      vn_fase := 5;
      --
      loop
         --
         vn_fase := 6;
         --
         if nvl(vn_indice_bi,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 7;
         --
         vn_qtde := nvl(vn_qtde,0) + 1;
         --
         vn_fase := 8;
         --
         if vn_indice_bi = vt_bi_tab_reg_c610(vn_indice).last then
            exit;
         else
            vn_indice_bi := vt_bi_tab_reg_c610(vn_indice).next(vn_indice_bi);
         end if;
         --
      end loop;
      --
      vn_fase := 9;
      --
      if vn_indice = vt_bi_tab_reg_c610.last then
         exit;
      else
         vn_indice := vt_bi_tab_reg_c610.next(vn_indice);
      end if;
      --
   end loop;
   --
   vn_fase := 10;
   --
   return nvl(vn_qtde,0);
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_c610 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_c610;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro c690
function fkg_qtde_linha_reg_c690
         return number
is
   --
   vn_fase       number := 0;
   vn_qtde       number := 0;
   vn_indice     pls_integer := 0;
   vn_indice_bi  pls_integer := 0;
   --
begin
   --
   vn_fase   := 1;
   vn_indice := nvl(vt_bi_tab_reg_c690.first,0);
   vn_qtde   := 0;
   vn_fase   := 2;
   --
   loop
      --
      vn_fase := 3;
      --
      if nvl(vn_indice,0) = 0 then
         exit;
      end if;
      --
      vn_fase := 4;
      --
      vn_indice_bi := nvl(vt_bi_tab_reg_c690(vn_indice).first,0);
      --
      vn_fase := 5;
      --
      loop
         --
         vn_fase := 6;
         --
         if nvl(vn_indice_bi,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 7;
         --
         vn_qtde := nvl(vn_qtde,0) + 1;
         --
         vn_fase := 8;
         --
         if vn_indice_bi = vt_bi_tab_reg_c690(vn_indice).last then
            exit;
         else
            vn_indice_bi := vt_bi_tab_reg_c690(vn_indice).next(vn_indice_bi);
         end if;
         --
      end loop;
      --
      vn_fase := 9;
      --
      if vn_indice = vt_bi_tab_reg_c690.last then
         exit;
      else
         vn_indice := vt_bi_tab_reg_c690.next(vn_indice);
      end if;
      --
   end loop;
   --
   vn_fase := 10;
   --
   return nvl(vn_qtde,0);
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_c690 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_c690;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro c700
function fkg_qtde_linha_reg_c700
         return number
is
   --
   vn_fase  number := 0;
   vn_qtde  number := 0;
   --
begin
   --
   vn_fase := 1;
   vn_qtde := nvl(vt_tab_reg_c700.count,0);
   vn_fase := 2;
   --
   return vn_qtde;
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_c700 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_c700;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro c790
function fkg_qtde_linha_reg_c790
         return number
is
   --
   vn_fase       number := 0;
   vn_qtde       number := 0;
   vn_indice     pls_integer := 0;
   vn_indice_bi  pls_integer := 0;
   --
begin
   --
   vn_fase   := 1;
   vn_indice := nvl(vt_bi_tab_reg_c790.first,0);
   vn_qtde   := 0;
   vn_fase   := 2;
   --
   loop
      --
      vn_fase := 3;
      --
      if nvl(vn_indice,0) = 0 then
         exit;
      end if;
      --
      vn_fase := 4;
      --
      vn_indice_bi := nvl(vt_bi_tab_reg_c790(vn_indice).first,0);
      --
      vn_fase := 5;
      --
      loop
         --
         vn_fase := 6;
         --
         if nvl(vn_indice_bi,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 7;
         --
         vn_qtde := nvl(vn_qtde,0) + 1;
         --
         vn_fase := 8;
         --
         if vn_indice_bi = vt_bi_tab_reg_c790(vn_indice).last then
            exit;
         else
            vn_indice_bi := vt_bi_tab_reg_c790(vn_indice).next(vn_indice_bi);
         end if;
         --
      end loop;
      --
      vn_fase := 9;
      --
      if vn_indice = vt_bi_tab_reg_c790.last then
         exit;
      else
         vn_indice := vt_bi_tab_reg_c790.next(vn_indice);
      end if;
      --
   end loop;
   --
   vn_fase := 10;
   --
   return nvl(vn_qtde,0);
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_c790 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_c790;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro c791
function fkg_qtde_linha_reg_c791
         return number
is
   --
   vn_fase       number := 0;
   vn_qtde       number := 0;
   vn_indice     pls_integer := 0;
   vn_indice_bi  pls_integer := 0;
   vn_indice_tri pls_integer := 0;
   --
begin
   --
   vn_fase   := 1;
   vn_indice := nvl(vt_tri_tab_reg_c791.first,0);
   vn_qtde   := 0;
   vn_fase   := 2;
   --
   loop
      --
      vn_fase := 3;
      --
      if nvl(vn_indice,0) = 0 then
         exit;
      end if;
      --
      vn_fase := 4;
      --
      vn_indice_bi := nvl(vt_tri_tab_reg_c791(vn_indice).first,0);
      --
      vn_fase := 5;
      --
      loop
         --
         vn_fase := 6;
         --
         if nvl(vn_indice_bi,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 7;
         --
         vn_indice_tri := nvl(vt_tri_tab_reg_c791(vn_indice)(vn_indice_bi).first,0);
         --
         vn_fase := 8;
         --
         loop
            --
            vn_fase := 9;
            --
            if nvl(vn_indice_tri,0) = 0 then
               exit;
            end if;
            --
            vn_fase := 10;
            --
            vn_qtde := nvl(vn_qtde,0) + 1;
            --
            vn_fase := 11;
            --
            if vn_indice_tri = vt_tri_tab_reg_c791(vn_indice)(vn_indice_bi).last then
               exit;
            else
               vn_indice_tri := vt_tri_tab_reg_c791(vn_indice)(vn_indice_bi).next(vn_indice_tri);
            end if;
            --
         end loop;
         --
         vn_fase := 12;
         --
         if vn_indice_bi = vt_tri_tab_reg_c791(vn_indice).last then
            exit;
         else
            vn_indice_bi := vt_tri_tab_reg_c791(vn_indice).next(vn_indice_bi);
         end if;
         --
      end loop;
      --
      vn_fase := 13;
      --
      if vn_indice = vt_tri_tab_reg_c791.last then
         exit;
      else
         vn_indice := vt_tri_tab_reg_c791.next(vn_indice);
      end if;
      --
   end loop;
   --
   vn_fase := 14;
   --
   return nvl(vn_qtde,0);
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_c791 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_c791;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro c800
function fkg_qtde_linha_reg_c800
         return number
is
   --
   vn_fase  number := 0;
   vn_qtde  number := 0;
   --
begin
   --
   vn_fase := 1;
   vn_qtde := nvl(vt_tab_reg_c800.count,0);
   vn_fase := 2;
   --
   return vn_qtde;
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_c800 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_c800;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro c850
function fkg_qtde_linha_reg_c850
         return number
is
   --
   vn_fase       number := 0;
   vn_qtde       number := 0;
   vn_indice     pls_integer := 0;
   vn_indice_bi  pls_integer := 0;
   --
begin
   --
   vn_fase   := 1;
   vn_indice := nvl(vt_bi_tab_reg_c850.first,0);
   vn_qtde   := 0;
   vn_fase   := 2;
   --
   loop
      --
      vn_fase := 3;
      --
      if nvl(vn_indice,0) = 0 then
         exit;
      end if;
      --
      vn_fase := 4;
      --
      vn_indice_bi := nvl(vt_bi_tab_reg_c850(vn_indice).first,0);
      --
      vn_fase := 5;
      --
      loop
         --
         vn_fase := 6;
         --
         if nvl(vn_indice_bi,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 7;
         --
         vn_qtde := nvl(vn_qtde,0) + 1;
         --
         vn_fase := 8;
         --
         if vn_indice_bi = vt_bi_tab_reg_c850(vn_indice).last then
            exit;
         else
            vn_indice_bi := vt_bi_tab_reg_c850(vn_indice).next(vn_indice_bi);
         end if;
         --
      end loop;
      --
      vn_fase := 9;
      --
      if vn_indice = vt_bi_tab_reg_c850.last then
         exit;
      else
         vn_indice := vt_bi_tab_reg_c850.next(vn_indice);
      end if;
      --
   end loop;
   --
   vn_fase := 10;
   --
   return nvl(vn_qtde,0);
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_c850 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_c850;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro c860
function fkg_qtde_linha_reg_c860
         return number
is
   --
   vn_fase  number := 0;
   vn_qtde  number := 0;
   --
begin
   --
   vn_fase := 1;
   vn_qtde := nvl(vt_tab_reg_c860.count,0);
   vn_fase := 2;
   --
   return vn_qtde;
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_c860 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_c860;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro c890
function fkg_qtde_linha_reg_c890
         return number
is
   --
   vn_fase       number := 0;
   vn_qtde       number := 0;
   vn_indice     pls_integer := 0;
   vn_indice_bi  pls_integer := 0;
   --
begin
   --
   vn_fase   := 1;
   vn_indice := nvl(vt_bi_tab_reg_c890.first,0);
   vn_qtde   := 0;
   vn_fase   := 2;
   --
   loop
      --
      vn_fase := 3;
      --
      if nvl(vn_indice,0) = 0 then
         exit;
      end if;
      --
      vn_fase := 4;
      --
      vn_indice_bi := nvl(vt_bi_tab_reg_c890(vn_indice).first,0);
      --
      vn_fase := 5;
      --
      loop
         --
         vn_fase := 6;
         --
         if nvl(vn_indice_bi,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 7;
         --
         vn_qtde := nvl(vn_qtde,0) + 1;
         --
         vn_fase := 8;
         --
         if vn_indice_bi = vt_bi_tab_reg_c890(vn_indice).last then
            exit;
         else
            vn_indice_bi := vt_bi_tab_reg_c890(vn_indice).next(vn_indice_bi);
         end if;
         --
      end loop;
      --
      vn_fase := 9;
      --
      if vn_indice = vt_bi_tab_reg_c890.last then
         exit;
      else
         vn_indice := vt_bi_tab_reg_c890.next(vn_indice);
      end if;
      --
   end loop;
   --
   vn_fase := 10;
   --
   return nvl(vn_qtde,0);
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_c890 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_c890;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro c990
function fkg_qtde_linha_reg_c990
         return number
is
   --
   vn_fase  number := 0;
   vn_qtde  number := 0;
   --
begin
   --
   vn_fase := 1;
   vn_qtde := nvl(vt_tab_reg_c990.count,0);
   vn_fase := 2;
   --
   return vn_qtde;
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_c990 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_c990;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro d001
function fkg_qtde_linha_reg_d001
         return number
is
   --
   vn_fase  number := 0;
   vn_qtde  number := 0;
   --
begin
   --
   vn_fase := 1;
   vn_qtde := nvl(vt_tab_reg_d001.count,0);
   vn_fase := 2;
   --
   return vn_qtde;
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_d001 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_d001;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro d100
function fkg_qtde_linha_reg_d100
         return number
is
   --
   vn_fase  number := 0;
   vn_qtde  number := 0;
   --
begin
   --
   vn_fase := 1;
   vn_qtde := nvl(vt_tab_reg_d100.count,0);
   vn_fase := 2;
   --
   return vn_qtde;
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_d100 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_d100;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro d110
function fkg_qtde_linha_reg_d110
         return number
is
   --
   vn_fase       number := 0;
   vn_qtde       number := 0;
   vn_indice     pls_integer := 0;
   vn_indice_bi  pls_integer := 0;
   --
begin
   --
   vn_fase   := 1;
   vn_indice := nvl(vt_bi_tab_reg_d110.first,0);
   vn_qtde   := 0;
   vn_fase   := 2;
   --
   loop
      --
      vn_fase := 3;
      --
      if nvl(vn_indice,0) = 0 then
         exit;
      end if;
      --
      vn_fase := 4;
      --
      vn_indice_bi := nvl(vt_bi_tab_reg_d110(vn_indice).first,0);
      --
      vn_fase := 5;
      --
      loop
         --
         vn_fase := 6;
         --
         if nvl(vn_indice_bi,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 7;
         --
         vn_qtde := nvl(vn_qtde,0) + 1;
         --
         vn_fase := 8;
         --
         if vn_indice_bi = vt_bi_tab_reg_d110(vn_indice).last then
            exit;
         else
            vn_indice_bi := vt_bi_tab_reg_d110(vn_indice).next(vn_indice_bi);
         end if;
         --
      end loop;
      --
      vn_fase := 9;
      --
      if vn_indice = vt_bi_tab_reg_d110.last then
         exit;
      else
         vn_indice := vt_bi_tab_reg_d110.next(vn_indice);
      end if;
      --
   end loop;
   --
   vn_fase := 10;
   --
   return nvl(vn_qtde,0);
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_d110 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_d110;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro d120
function fkg_qtde_linha_reg_d120
         return number
is
   --
   vn_fase       number := 0;
   vn_qtde       number := 0;
   vn_indice     pls_integer := 0;
   vn_indice_bi  pls_integer := 0;
   vn_indice_tri pls_integer := 0;
   --
begin
   --
   vn_fase   := 1;
   vn_indice := nvl(vt_tri_tab_reg_d120.first,0);
   vn_qtde   := 0;
   vn_fase   := 2;
   --
   loop
      --
      vn_fase := 3;
      --
      if nvl(vn_indice,0) = 0 then
         exit;
      end if;
      --
      vn_fase := 4;
      --
      vn_indice_bi := nvl(vt_tri_tab_reg_d120(vn_indice).first,0);
      --
      vn_fase := 5;
      --
      loop
         --
         vn_fase := 6;
         --
         if nvl(vn_indice_bi,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 7;
         --
         vn_indice_tri := nvl(vt_tri_tab_reg_d120(vn_indice)(vn_indice_bi).first,0);
         --
         vn_fase := 8;
         --
         loop
            --
            vn_fase := 9;
            --
            if nvl(vn_indice_tri,0) = 0 then
               exit;
            end if;
            --
            vn_fase := 10;
            --
            vn_qtde := nvl(vn_qtde,0) + 1;
            --
            vn_fase := 11;
            --
            if vn_indice_tri = vt_tri_tab_reg_d120(vn_indice)(vn_indice_bi).last then
               exit;
            else
               vn_indice_tri := vt_tri_tab_reg_d120(vn_indice)(vn_indice_bi).next(vn_indice_tri);
            end if;
            --
         end loop;
         --
         vn_fase := 12;
         --
         if vn_indice_bi = vt_tri_tab_reg_d120(vn_indice).last then
            exit;
         else
            vn_indice_bi := vt_tri_tab_reg_d120(vn_indice).next(vn_indice_bi);
         end if;
         --
      end loop;
      --
      vn_fase := 13;
      --
      if vn_indice = vt_tri_tab_reg_d120.last then
         exit;
      else
         vn_indice := vt_tri_tab_reg_d120.next(vn_indice);
      end if;
      --
   end loop;
   --
   vn_fase := 14;
   --
   return nvl(vn_qtde,0);
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_d120 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_d120;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro d130
function fkg_qtde_linha_reg_d130
         return number
is
   --
   vn_fase       number := 0;
   vn_qtde       number := 0;
   vn_indice     pls_integer := 0;
   vn_indice_bi  pls_integer := 0;
   --
begin
   --
   vn_fase   := 1;
   vn_indice := nvl(vt_bi_tab_reg_d130.first,0);
   vn_qtde   := 0;
   vn_fase   := 2;
   --
   loop
      --
      vn_fase := 3;
      --
      if nvl(vn_indice,0) = 0 then
         exit;
      end if;
      --
      vn_fase := 4;
      --
      vn_indice_bi := nvl(vt_bi_tab_reg_d130(vn_indice).first,0);
      --
      vn_fase := 5;
      --
      loop
         --
         vn_fase := 6;
         --
         if nvl(vn_indice_bi,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 7;
         --
         vn_qtde := nvl(vn_qtde,0) + 1;
         --
         vn_fase := 8;
         --
         if vn_indice_bi = vt_bi_tab_reg_d130(vn_indice).last then
            exit;
         else
            vn_indice_bi := vt_bi_tab_reg_d130(vn_indice).next(vn_indice_bi);
         end if;
         --
      end loop;
      --
      vn_fase := 9;
      --
      if vn_indice = vt_bi_tab_reg_d130.last then
         exit;
      else
         vn_indice := vt_bi_tab_reg_d130.next(vn_indice);
      end if;
      --
   end loop;
   --
   vn_fase := 10;
   --
   return nvl(vn_qtde,0);
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_d130 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_d130;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro d140
function fkg_qtde_linha_reg_d140
         return number
is
   --
   vn_fase       number := 0;
   vn_qtde       number := 0;
   vn_indice     pls_integer := 0;
   vn_indice_bi  pls_integer := 0;
   --
begin
   --
   vn_fase   := 1;
   vn_indice := nvl(vt_bi_tab_reg_d140.first,0);
   vn_qtde   := 0;
   vn_fase   := 2;
   --
   loop
      --
      vn_fase := 3;
      --
      if nvl(vn_indice,0) = 0 then
         exit;
      end if;
      --
      vn_fase := 4;
      --
      vn_indice_bi := nvl(vt_bi_tab_reg_d140(vn_indice).first,0);
      --
      vn_fase := 5;
      --
      loop
         --
         vn_fase := 6;
         --
         if nvl(vn_indice_bi,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 7;
         --
         vn_qtde := nvl(vn_qtde,0) + 1;
         --
         vn_fase := 8;
         --
         if vn_indice_bi = vt_bi_tab_reg_d140(vn_indice).last then
            exit;
         else
            vn_indice_bi := vt_bi_tab_reg_d140(vn_indice).next(vn_indice_bi);
         end if;
         --
      end loop;
      --
      vn_fase := 9;
      --
      if vn_indice = vt_bi_tab_reg_d140.last then
         exit;
      else
         vn_indice := vt_bi_tab_reg_d140.next(vn_indice);
      end if;
      --
   end loop;
   --
   vn_fase := 10;
   --
   return nvl(vn_qtde,0);
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_d140 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_d140;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro d150
function fkg_qtde_linha_reg_d150
         return number
is
   --
   vn_fase       number := 0;
   vn_qtde       number := 0;
   vn_indice     pls_integer := 0;
   vn_indice_bi  pls_integer := 0;
   --
begin
   --
   vn_fase   := 1;
   vn_indice := nvl(vt_bi_tab_reg_d150.first,0);
   vn_qtde   := 0;
   vn_fase   := 2;
   --
   loop
      --
      vn_fase := 3;
      --
      if nvl(vn_indice,0) = 0 then
         exit;
      end if;
      --
      vn_fase := 4;
      --
      vn_indice_bi := nvl(vt_bi_tab_reg_d150(vn_indice).first,0);
      --
      vn_fase := 5;
      --
      loop
         --
         vn_fase := 6;
         --
         if nvl(vn_indice_bi,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 7;
         --
         vn_qtde := nvl(vn_qtde,0) + 1;
         --
         vn_fase := 8;
         --
         if vn_indice_bi = vt_bi_tab_reg_d150(vn_indice).last then
            exit;
         else
            vn_indice_bi := vt_bi_tab_reg_d150(vn_indice).next(vn_indice_bi);
         end if;
         --
      end loop;
      --
      vn_fase := 9;
      --
      if vn_indice = vt_bi_tab_reg_d150.last then
         exit;
      else
         vn_indice := vt_bi_tab_reg_d150.next(vn_indice);
      end if;
      --
   end loop;
   --
   vn_fase := 10;
   --
   return nvl(vn_qtde,0);
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_d150 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_d150;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro d160
function fkg_qtde_linha_reg_d160
         return number
is
   --
   vn_fase       number := 0;
   vn_qtde       number := 0;
   vn_indice     pls_integer := 0;
   vn_indice_bi  pls_integer := 0;
   --
begin
   --
   vn_fase   := 1;
   vn_indice := nvl(vt_bi_tab_reg_d160.first,0);
   vn_qtde   := 0;
   vn_fase   := 2;
   --
   loop
      --
      vn_fase := 3;
      --
      if nvl(vn_indice,0) = 0 then
         exit;
      end if;
      --
      vn_fase := 4;
      --
      vn_indice_bi := nvl(vt_bi_tab_reg_d160(vn_indice).first,0);
      --
      vn_fase := 5;
      --
      loop
         --
         vn_fase := 6;
         --
         if nvl(vn_indice_bi,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 7;
         --
         vn_qtde := nvl(vn_qtde,0) + 1;
         --
         vn_fase := 8;
         --
         if vn_indice_bi = vt_bi_tab_reg_d160(vn_indice).last then
            exit;
         else
            vn_indice_bi := vt_bi_tab_reg_d160(vn_indice).next(vn_indice_bi);
         end if;
         --
      end loop;
      --
      vn_fase := 9;
      --
      if vn_indice = vt_bi_tab_reg_d160.last then
         exit;
      else
         vn_indice := vt_bi_tab_reg_d160.next(vn_indice);
      end if;
      --
   end loop;
   --
   vn_fase := 10;
   --
   return nvl(vn_qtde,0);
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_d160 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_d160;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro d161
function fkg_qtde_linha_reg_d161
         return number
is
   --
   vn_fase       number := 0;
   vn_qtde       number := 0;
   vn_indice     pls_integer := 0;
   vn_indice_bi  pls_integer := 0;
   vn_indice_tri pls_integer := 0;
   --
begin
   --
   vn_fase   := 1;
   vn_indice := nvl(vt_tri_tab_reg_d161.first,0);
   vn_qtde   := 0;
   vn_fase   := 2;
   --
   loop
      --
      vn_fase := 3;
      --
      if nvl(vn_indice,0) = 0 then
         exit;
      end if;
      --
      vn_fase := 4;
      --
      vn_indice_bi := nvl(vt_tri_tab_reg_d161(vn_indice).first,0);
      --
      vn_fase := 5;
      --
      loop
         --
         vn_fase := 6;
         --
         if nvl(vn_indice_bi,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 7;
         --
         vn_indice_tri := nvl(vt_tri_tab_reg_d161(vn_indice)(vn_indice_bi).first,0);
         --
         vn_fase := 8;
         --
         loop
            --
            vn_fase := 9;
            --
            if nvl(vn_indice_tri,0) = 0 then
               exit;
            end if;
            --
            vn_fase := 10;
            --
            vn_qtde := nvl(vn_qtde,0) + 1;
            --
            vn_fase := 11;
            --
            if vn_indice_tri = vt_tri_tab_reg_d161(vn_indice)(vn_indice_bi).last then
               exit;
            else
               vn_indice_tri := vt_tri_tab_reg_d161(vn_indice)(vn_indice_bi).next(vn_indice_tri);
            end if;
            --
         end loop;
         --
         vn_fase := 12;
         --
         if vn_indice_bi = vt_tri_tab_reg_d161(vn_indice).last then
            exit;
         else
            vn_indice_bi := vt_tri_tab_reg_d161(vn_indice).next(vn_indice_bi);
         end if;
         --
      end loop;
      --
      vn_fase := 13;
      --
      if vn_indice = vt_tri_tab_reg_d161.last then
         exit;
      else
         vn_indice := vt_tri_tab_reg_d161.next(vn_indice);
      end if;
      --
   end loop;
   --
   vn_fase := 14;
   --
   return nvl(vn_qtde,0);
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_d161 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_d161;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro d162
function fkg_qtde_linha_reg_d162
         return number
is
   --
   vn_fase       number := 0;
   vn_qtde       number := 0;
   vn_indice     pls_integer := 0;
   vn_indice_bi  pls_integer := 0;
   vn_indice_tri pls_integer := 0;
   --
begin
   --
   vn_fase   := 1;
   vn_indice := nvl(vt_tri_tab_reg_d162.first,0);
   vn_qtde   := 0;
   vn_fase   := 2;
   --
   loop
      --
      vn_fase := 3;
      --
      if nvl(vn_indice,0) = 0 then
         exit;
      end if;
      --
      vn_fase := 4;
      --
      vn_indice_bi := nvl(vt_tri_tab_reg_d162(vn_indice).first,0);
      --
      vn_fase := 5;
      --
      loop
         --
         vn_fase := 6;
         --
         if nvl(vn_indice_bi,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 7;
         --
         vn_indice_tri := nvl(vt_tri_tab_reg_d162(vn_indice)(vn_indice_bi).first,0);
         --
         vn_fase := 8;
         --
         loop
            --
            vn_fase := 9;
            --
            if nvl(vn_indice_tri,0) = 0 then
               exit;
            end if;
            --
            vn_fase := 10;
            --
            vn_qtde := nvl(vn_qtde,0) + 1;
            --
            vn_fase := 11;
            --
            if vn_indice_tri = vt_tri_tab_reg_d162(vn_indice)(vn_indice_bi).last then
               exit;
            else
               vn_indice_tri := vt_tri_tab_reg_d162(vn_indice)(vn_indice_bi).next(vn_indice_tri);
            end if;
            --
         end loop;
         --
         vn_fase := 12;
         --
         if vn_indice_bi = vt_tri_tab_reg_d162(vn_indice).last then
            exit;
         else
            vn_indice_bi := vt_tri_tab_reg_d162(vn_indice).next(vn_indice_bi);
         end if;
         --
      end loop;
      --
      vn_fase := 13;
      --
      if vn_indice = vt_tri_tab_reg_d162.last then
         exit;
      else
         vn_indice := vt_tri_tab_reg_d162.next(vn_indice);
      end if;
      --
   end loop;
   --
   vn_fase := 14;
   --
   return nvl(vn_qtde,0);
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_d162 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_d162;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro d170
function fkg_qtde_linha_reg_d170
         return number
is
   --
   vn_fase       number := 0;
   vn_qtde       number := 0;
   vn_indice     pls_integer := 0;
   vn_indice_bi  pls_integer := 0;
   --
begin
   --
   vn_fase   := 1;
   vn_indice := nvl(vt_bi_tab_reg_d170.first,0);
   vn_qtde   := 0;
   vn_fase   := 2;
   --
   loop
      --
      vn_fase := 3;
      --
      if nvl(vn_indice,0) = 0 then
         exit;
      end if;
      --
      vn_fase := 4;
      --
      vn_indice_bi := nvl(vt_bi_tab_reg_d170(vn_indice).first,0);
      --
      vn_fase := 5;
      --
      loop
         --
         vn_fase := 6;
         --
         if nvl(vn_indice_bi,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 7;
         --
         vn_qtde := nvl(vn_qtde,0) + 1;
         --
         vn_fase := 8;
         --
         if vn_indice_bi = vt_bi_tab_reg_d170(vn_indice).last then
            exit;
         else
            vn_indice_bi := vt_bi_tab_reg_d170(vn_indice).next(vn_indice_bi);
         end if;
         --
      end loop;
      --
      vn_fase := 9;
      --
      if vn_indice = vt_bi_tab_reg_d170.last then
         exit;
      else
         vn_indice := vt_bi_tab_reg_d170.next(vn_indice);
      end if;
      --
   end loop;
   --
   vn_fase := 10;
   --
   return nvl(vn_qtde,0);
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_d170 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_d170;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro d180
function fkg_qtde_linha_reg_d180
         return number
is
   --
   vn_fase       number := 0;
   vn_qtde       number := 0;
   vn_indice     pls_integer := 0;
   vn_indice_bi  pls_integer := 0;
   --
begin
   --
   vn_fase   := 1;
   vn_indice := nvl(vt_bi_tab_reg_d180.first,0);
   vn_qtde   := 0;
   vn_fase   := 2;
   --
   loop
      --
      vn_fase := 3;
      --
      if nvl(vn_indice,0) = 0 then
         exit;
      end if;
      --
      vn_fase := 4;
      --
      vn_indice_bi := nvl(vt_bi_tab_reg_d180(vn_indice).first,0);
      --
      vn_fase := 5;
      --
      loop
         --
         vn_fase := 6;
         --
         if nvl(vn_indice_bi,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 7;
         --
         vn_qtde := nvl(vn_qtde,0) + 1;
         --
         vn_fase := 8;
         --
         if vn_indice_bi = vt_bi_tab_reg_d180(vn_indice).last then
            exit;
         else
            vn_indice_bi := vt_bi_tab_reg_d180(vn_indice).next(vn_indice_bi);
         end if;
         --
      end loop;
      --
      vn_fase := 9;
      --
      if vn_indice = vt_bi_tab_reg_d180.last then
         exit;
      else
         vn_indice := vt_bi_tab_reg_d180.next(vn_indice);
      end if;
      --
   end loop;
   --
   vn_fase := 10;
   --
   return nvl(vn_qtde,0);
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_d180 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_d180;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro d190
function fkg_qtde_linha_reg_d190
         return number
is
   --
   vn_fase       number := 0;
   vn_qtde       number := 0;
   vn_indice     pls_integer := 0;
   vn_indice_bi  pls_integer := 0;
   --
begin
   --
   vn_fase   := 1;
   vn_indice := nvl(vt_bi_tab_reg_d190.first,0);
   vn_qtde   := 0;
   vn_fase   := 2;
   --
   loop
      --
      vn_fase := 3;
      --
      if nvl(vn_indice,0) = 0 then
         exit;
      end if;
      --
      vn_fase := 4;
      --
      vn_indice_bi := nvl(vt_bi_tab_reg_d190(vn_indice).first,0);
      --
      vn_fase := 5;
      --
      loop
         --
         vn_fase := 6;
         --
         if nvl(vn_indice_bi,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 7;
         --
         vn_qtde := nvl(vn_qtde,0) + 1;
         --
         vn_fase := 8;
         --
         if vn_indice_bi = vt_bi_tab_reg_d190(vn_indice).last then
            exit;
         else
            vn_indice_bi := vt_bi_tab_reg_d190(vn_indice).next(vn_indice_bi);
         end if;
         --
      end loop;
      --
      vn_fase := 9;
      --
      if vn_indice = vt_bi_tab_reg_d190.last then
         exit;
      else
         vn_indice := vt_bi_tab_reg_d190.next(vn_indice);
      end if;
      --
   end loop;
   --
   vn_fase := 10;
   --
   return nvl(vn_qtde,0);
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_d190 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_d190;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro d195
function fkg_qtde_linha_reg_d195
         return number
is
   --
   vn_fase       number := 0;
   vn_qtde       number := 0;
   vn_indice     pls_integer := 0;
   vn_indice_bi  pls_integer := 0;
   --
begin
   --
   vn_fase   := 1;
   vn_indice := nvl(vt_bi_tab_reg_d195.first,0);
   vn_qtde   := 0;
   vn_fase   := 2;
   --
   loop
      --
      vn_fase := 3;
      --
      if nvl(vn_indice,0) = 0 then
         exit;
      end if;
      --
      vn_fase := 4;
      --
      vn_indice_bi := nvl(vt_bi_tab_reg_d195(vn_indice).first,0);
      --
      vn_fase := 5;
      --
      loop
         --
         vn_fase := 6;
         --
         if nvl(vn_indice_bi,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 7;
         --
         vn_qtde := nvl(vn_qtde,0) + 1;
         --
         vn_fase := 8;
         --
         if vn_indice_bi = vt_bi_tab_reg_d195(vn_indice).last then
            exit;
         else
            vn_indice_bi := vt_bi_tab_reg_d195(vn_indice).next(vn_indice_bi);
         end if;
         --
      end loop;
      --
      vn_fase := 9;
      --
      if vn_indice = vt_bi_tab_reg_d195.last then
         exit;
      else
         vn_indice := vt_bi_tab_reg_d195.next(vn_indice);
      end if;
      --
   end loop;
   --
   vn_fase := 10;
   --
   return nvl(vn_qtde,0);
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na pk_gera_arq_efd.fkg_qtde_linha_reg_d195 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_d195;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro d197
function fkg_qtde_linha_reg_d197
         return number
is
   --
   vn_fase       number := 0;
   vn_qtde       number := 0;
   vn_indice     pls_integer := 0;
   vn_indice_bi  pls_integer := 0;
   vn_indice_tri pls_integer := 0;
   --
begin
   --
   vn_fase   := 1;
   vn_indice := nvl(vt_tri_tab_reg_d197.first,0);
   vn_qtde   := 0;
   vn_fase   := 2;
   --
   loop
      --
      vn_fase := 3;
      --
      if nvl(vn_indice,0) = 0 then
         exit;
      end if;
      --
      vn_fase := 4;
      --
      vn_indice_bi := nvl(vt_tri_tab_reg_d197(vn_indice).first,0);
      --
      vn_fase := 5;
      --
      loop
         --
         vn_fase := 6;
         --
         if nvl(vn_indice_bi,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 7;
         --
         vn_indice_tri := nvl(vt_tri_tab_reg_d197(vn_indice)(vn_indice_bi).first,0);
         --
         vn_fase := 8;
         --
         loop
            --
            vn_fase := 9;
            --
            if nvl(vn_indice_tri,0) = 0 then
               exit;
            end if;
            --
            vn_fase := 10;
            --
            vn_qtde := nvl(vn_qtde,0) + 1;
            --
            vn_fase := 11;
            --
            if vn_indice_tri = vt_tri_tab_reg_d197(vn_indice)(vn_indice_bi).last then
               exit;
            else
               vn_indice_tri := vt_tri_tab_reg_d197(vn_indice)(vn_indice_bi).next(vn_indice_tri);
            end if;
            --
         end loop;
         --
         vn_fase := 12;
         --
         if vn_indice_bi = vt_tri_tab_reg_d197(vn_indice).last then
            exit;
         else
            vn_indice_bi := vt_tri_tab_reg_d197(vn_indice).next(vn_indice_bi);
         end if;
         --
      end loop;
      --
      vn_fase := 13;
      --
      if vn_indice = vt_tri_tab_reg_d197.last then
         exit;
      else
         vn_indice := vt_tri_tab_reg_d197.next(vn_indice);
      end if;
      --
   end loop;
   --
   vn_fase := 14;
   --
   return nvl(vn_qtde,0);
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na pk_gera_arq_efd.fkg_qtde_linha_reg_d197 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_d197;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro d300
function fkg_qtde_linha_reg_d300
         return number
is
   --
   vn_fase  number := 0;
   vn_qtde  number := 0;
   --
begin
   --
   vn_fase := 1;
   vn_qtde := nvl(vt_tab_reg_d300.count,0);
   vn_fase := 2;
   --
   return vn_qtde;
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_d300 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_d300;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro d301
function fkg_qtde_linha_reg_d301
         return number
is
   --
   vn_fase       number := 0;
   vn_qtde       number := 0;
   vn_indice     pls_integer := 0;
   vn_indice_bi  pls_integer := 0;
   --
begin
   --
   vn_fase   := 1;
   vn_indice := nvl(vt_bi_tab_reg_d301.first,0);
   vn_qtde   := 0;
   vn_fase   := 2;
   --
   loop
      --
      vn_fase := 3;
      --
      if nvl(vn_indice,0) = 0 then
         exit;
      end if;
      --
      vn_fase := 4;
      --
      vn_indice_bi := nvl(vt_bi_tab_reg_d301(vn_indice).first,0);
      --
      vn_fase := 5;
      --
      loop
         --
         vn_fase := 6;
         --
         if nvl(vn_indice_bi,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 7;
         --
         vn_qtde := nvl(vn_qtde,0) + 1;
         --
         vn_fase := 8;
         --
         if vn_indice_bi = vt_bi_tab_reg_d301(vn_indice).last then
            exit;
         else
            vn_indice_bi := vt_bi_tab_reg_d301(vn_indice).next(vn_indice_bi);
         end if;
         --
      end loop;
      --
      vn_fase := 9;
      --
      if vn_indice = vt_bi_tab_reg_d301.last then
         exit;
      else
         vn_indice := vt_bi_tab_reg_d301.next(vn_indice);
      end if;
      --
   end loop;
   --
   vn_fase := 10;
   --
   return nvl(vn_qtde,0);
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_d301 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_d301;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro d310
function fkg_qtde_linha_reg_d310
         return number
is
   --
   vn_fase       number := 0;
   vn_qtde       number := 0;
   vn_indice     pls_integer := 0;
   vn_indice_bi  pls_integer := 0;
   --
begin
   --
   vn_fase   := 1;
   vn_indice := nvl(vt_bi_tab_reg_d310.first,0);
   vn_qtde   := 0;
   vn_fase   := 2;
   --
   loop
      --
      vn_fase := 3;
      --
      if nvl(vn_indice,0) = 0 then
         exit;
      end if;
      --
      vn_fase := 4;
      --
      vn_indice_bi := nvl(vt_bi_tab_reg_d310(vn_indice).first,0);
      --
      vn_fase := 5;
      --
      loop
         --
         vn_fase := 6;
         --
         if nvl(vn_indice_bi,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 7;
         --
         vn_qtde := nvl(vn_qtde,0) + 1;
         --
         vn_fase := 8;
         --
         if vn_indice_bi = vt_bi_tab_reg_d310(vn_indice).last then
            exit;
         else
            vn_indice_bi := vt_bi_tab_reg_d310(vn_indice).next(vn_indice_bi);
         end if;
         --
      end loop;
      --
      vn_fase := 9;
      --
      if vn_indice = vt_bi_tab_reg_d310.last then
         exit;
      else
         vn_indice := vt_bi_tab_reg_d310.next(vn_indice);
      end if;
      --
   end loop;
   --
   vn_fase := 10;
   --
   return nvl(vn_qtde,0);
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_d310 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_d310;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro d350
function fkg_qtde_linha_reg_d350
         return number
is
   --
   vn_fase  number := 0;
   vn_qtde  number := 0;
   --
begin
   --
   vn_fase := 1;
   vn_qtde := nvl(vt_tab_reg_d350.count,0);
   vn_fase := 2;
   --
   return vn_qtde;
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_d350 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_d350;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro d355
function fkg_qtde_linha_reg_d355
         return number
is
   --
   vn_fase       number := 0;
   vn_qtde       number := 0;
   vn_indice     pls_integer := 0;
   vn_indice_bi  pls_integer := 0;
   --
begin
   --
   vn_fase   := 1;
   vn_indice := nvl(vt_bi_tab_reg_d355.first,0);
   vn_qtde   := 0;
   vn_fase   := 2;
   --
   loop
      --
      vn_fase := 3;
      --
      if nvl(vn_indice,0) = 0 then
         exit;
      end if;
      --
      vn_fase := 4;
      --
      vn_indice_bi := nvl(vt_bi_tab_reg_d355(vn_indice).first,0);
      --
      vn_fase := 5;
      --
      loop
         --
         vn_fase := 6;
         --
         if nvl(vn_indice_bi,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 7;
         --
         vn_qtde := nvl(vn_qtde,0) + 1;
         --
         vn_fase := 8;
         --
         if vn_indice_bi = vt_bi_tab_reg_d355(vn_indice).last then
            exit;
         else
            vn_indice_bi := vt_bi_tab_reg_d355(vn_indice).next(vn_indice_bi);
         end if;
         --
      end loop;
      --
      vn_fase := 9;
      --
      if vn_indice = vt_bi_tab_reg_d355.last then
         exit;
      else
         vn_indice := vt_bi_tab_reg_d355.next(vn_indice);
      end if;
      --
   end loop;
   --
   vn_fase := 10;
   --
   return nvl(vn_qtde,0);
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_d355 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_d355;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro d360
function fkg_qtde_linha_reg_d360
         return number
is
   --
   vn_fase       number := 0;
   vn_qtde       number := 0;
   vn_indice     pls_integer := 0;
   vn_indice_bi  pls_integer := 0;
   vn_indice_tri pls_integer := 0;
   --
begin
   --
   vn_fase   := 1;
   vn_indice := nvl(vt_tri_tab_reg_d360.first,0);
   vn_qtde   := 0;
   vn_fase   := 2;
   --
   loop
      --
      vn_fase := 3;
      --
      if nvl(vn_indice,0) = 0 then
         exit;
      end if;
      --
      vn_fase := 4;
      --
      vn_indice_bi := nvl(vt_tri_tab_reg_d360(vn_indice).first,0);
      --
      vn_fase := 5;
      --
      loop
         --
         vn_fase := 6;
         --
         if nvl(vn_indice_bi,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 7;
         --
         vn_indice_tri := nvl(vt_tri_tab_reg_d360(vn_indice)(vn_indice_bi).first,0);
         --
         vn_fase := 8;
         --
         loop
            --
            vn_fase := 9;
            --
            if nvl(vn_indice_tri,0) = 0 then
               exit;
            end if;
            --
            vn_fase := 10;
            --
            vn_qtde := nvl(vn_qtde,0) + 1;
            --
            vn_fase := 11;
            --
            if vn_indice_tri = vt_tri_tab_reg_d360(vn_indice)(vn_indice_bi).last then
               exit;
            else
               vn_indice_tri := vt_tri_tab_reg_d360(vn_indice)(vn_indice_bi).next(vn_indice_tri);
            end if;
            --
         end loop;
         --
         vn_fase := 12;
         --
         if vn_indice_bi = vt_tri_tab_reg_d360(vn_indice).last then
            exit;
         else
            vn_indice_bi := vt_tri_tab_reg_d360(vn_indice).next(vn_indice_bi);
         end if;
         --
      end loop;
      --
      vn_fase := 13;
      --
      if vn_indice = vt_tri_tab_reg_d360.last then
         exit;
      else
         vn_indice := vt_tri_tab_reg_d360.next(vn_indice);
      end if;
      --
   end loop;
   --
   vn_fase := 14;
   --
   return nvl(vn_qtde,0);
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_d360 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_d360;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro d365
function fkg_qtde_linha_reg_d365
         return number
is
   --
   vn_fase       number := 0;
   vn_qtde       number := 0;
   vn_indice     pls_integer := 0;
   vn_indice_bi  pls_integer := 0;
   vn_indice_tri pls_integer := 0;
   --
begin
   --
   vn_fase   := 1;
   vn_indice := nvl(vt_tri_tab_reg_d365.first,0);
   vn_qtde   := 0;
   vn_fase   := 2;
   --
   loop
      --
      vn_fase := 3;
      --
      if nvl(vn_indice,0) = 0 then
         exit;
      end if;
      --
      vn_fase := 4;
      --
      vn_indice_bi := nvl(vt_tri_tab_reg_d365(vn_indice).first,0);
      --
      vn_fase := 5;
      --
      loop
         --
         vn_fase := 6;
         --
         if nvl(vn_indice_bi,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 7;
         --
         vn_indice_tri := nvl(vt_tri_tab_reg_d365(vn_indice)(vn_indice_bi).first,0);
         --
         vn_fase := 8;
         --
         loop
            --
            vn_fase := 9;
            --
            if nvl(vn_indice_tri,0) = 0 then
               exit;
            end if;
            --
            vn_fase := 10;
            --
            vn_qtde := nvl(vn_qtde,0) + 1;
            --
            vn_fase := 11;
            --
            if vn_indice_tri = vt_tri_tab_reg_d365(vn_indice)(vn_indice_bi).last then
               exit;
            else
               vn_indice_tri := vt_tri_tab_reg_d365(vn_indice)(vn_indice_bi).next(vn_indice_tri);
            end if;
            --
         end loop;
         --
         vn_fase := 12;
         --
         if vn_indice_bi = vt_tri_tab_reg_d365(vn_indice).last then
            exit;
         else
            vn_indice_bi := vt_tri_tab_reg_d365(vn_indice).next(vn_indice_bi);
         end if;
         --
      end loop;
      --
      vn_fase := 13;
      --
      if vn_indice = vt_tri_tab_reg_d365.last then
         exit;
      else
         vn_indice := vt_tri_tab_reg_d365.next(vn_indice);
      end if;
      --
   end loop;
   --
   vn_fase := 14;
   --
   return nvl(vn_qtde,0);
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_d365 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_d365;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro d370
function fkg_qtde_linha_reg_d370
         return number
is
   --
   vn_fase         number := 0;
   vn_qtde         number := 0;
   vn_indice       pls_integer := 0;
   vn_indice_bi    pls_integer := 0;
   vn_indice_tri   pls_integer := 0;
   vn_indice_tetra pls_integer := 0;
   --
begin
   --
   vn_fase   := 1;
   vn_indice := nvl(vt_tetra_tab_reg_d370.first,0);
   vn_qtde   := 0;
   vn_fase   := 2;
   --
   loop
      --
      vn_fase := 3;
      --
      if nvl(vn_indice,0) = 0 then
         exit;
      end if;
      --
      vn_fase := 4;
      --
      vn_indice_bi := nvl(vt_tetra_tab_reg_d370(vn_indice).first,0);
      --
      vn_fase := 5;
      --
      loop
         --
         vn_fase := 6;
         --
         if nvl(vn_indice_bi,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 7;
         --
         vn_indice_tri := nvl(vt_tetra_tab_reg_d370(vn_indice)(vn_indice_bi).first,0);
         --
         vn_fase := 8;
         --
         loop
            --
            vn_fase := 9;
            --
            if nvl(vn_indice_tri,0) = 0 then
               exit;
            end if;
            --
            vn_fase := 10;
            --
            vn_indice_tetra := nvl(vt_tetra_tab_reg_d370(vn_indice)(vn_indice_bi)(vn_indice_tri).first,0);
            --
            vn_fase := 11;
            --
            loop
               --
               vn_fase := 12;
               --
               if nvl(vn_indice_tetra,0) = 0 then
                  exit;
               end if;
               --
               vn_fase := 13;
               --
               vn_qtde := nvl(vn_qtde,0) + 1;
               --
               vn_fase := 14;
               --
               if vn_indice_tetra = vt_tetra_tab_reg_d370(vn_indice)(vn_indice_bi)(vn_indice_tri).last then
                  exit;
               else
                  vn_indice_tetra := vt_tetra_tab_reg_d370(vn_indice)(vn_indice_bi)(vn_indice_tri).next(vn_indice_tetra);
               end if;
               --
            end loop;
            --
            vn_fase := 15;
            --
            if vn_indice_tri = vt_tetra_tab_reg_d370(vn_indice)(vn_indice_bi).last then
               exit;
            else
               vn_indice_tri := vt_tetra_tab_reg_d370(vn_indice)(vn_indice_bi).next(vn_indice_tri);
            end if;
            --
         end loop;
         --
         vn_fase := 16;
         --
         if vn_indice_bi = vt_tetra_tab_reg_d370(vn_indice).last then
            exit;
         else
            vn_indice_bi := vt_tetra_tab_reg_d370(vn_indice).next(vn_indice_bi);
         end if;
         --
      end loop;
      --
      vn_fase := 17;
      --
      if vn_indice = vt_tetra_tab_reg_d370.last then
         exit;
      else
         vn_indice := vt_tetra_tab_reg_d370.next(vn_indice);
      end if;
      --
   end loop;
   --
   vn_fase := 18;
   --
   return nvl(vn_qtde,0);
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_d370 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_d370;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro d390
function fkg_qtde_linha_reg_d390
         return number
is
   --
   vn_fase       number := 0;
   vn_qtde       number := 0;
   vn_indice     pls_integer := 0;
   vn_indice_bi  pls_integer := 0;
   vn_indice_tri pls_integer := 0;
   --
begin
   --
   vn_fase   := 1;
   vn_indice := nvl(vt_tri_tab_reg_d390.first,0);
   vn_qtde   := 0;
   vn_fase   := 2;
   --
   loop
      --
      vn_fase := 3;
      --
      if nvl(vn_indice,0) = 0 then
         exit;
      end if;
      --
      vn_fase := 4;
      --
      vn_indice_bi := nvl(vt_tri_tab_reg_d390(vn_indice).first,0);
      --
      vn_fase := 5;
      --
      loop
         --
         vn_fase := 6;
         --
         if nvl(vn_indice_bi,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 7;
         --
         vn_indice_tri := nvl(vt_tri_tab_reg_d390(vn_indice)(vn_indice_bi).first,0);
         --
         vn_fase := 8;
         --
         loop
            --
            vn_fase := 9;
            --
            if nvl(vn_indice_tri,0) = 0 then
               exit;
            end if;
            --
            vn_fase := 10;
            --
            vn_qtde := nvl(vn_qtde,0) + 1;
            --
            vn_fase := 11;
            --
            if vn_indice_tri = vt_tri_tab_reg_d390(vn_indice)(vn_indice_bi).last then
               exit;
            else
               vn_indice_tri := vt_tri_tab_reg_d390(vn_indice)(vn_indice_bi).next(vn_indice_tri);
            end if;
            --
         end loop;
         --
         vn_fase := 12;
         --
         if vn_indice_bi = vt_tri_tab_reg_d390(vn_indice).last then
            exit;
         else
            vn_indice_bi := vt_tri_tab_reg_d390(vn_indice).next(vn_indice_bi);
         end if;
         --
      end loop;
      --
      vn_fase := 13;
      --
      if vn_indice = vt_tri_tab_reg_d390.last then
         exit;
      else
         vn_indice := vt_tri_tab_reg_d390.next(vn_indice);
      end if;
      --
   end loop;
   --
   vn_fase := 14;
   --
   return nvl(vn_qtde,0);
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_d390 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_d390;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro d400
function fkg_qtde_linha_reg_d400
         return number
is
   --
   vn_fase  number := 0;
   vn_qtde  number := 0;
   --
begin
   --
   vn_fase := 1;
   vn_qtde := nvl(vt_tab_reg_d400.count,0);
   vn_fase := 2;
   --
   return vn_qtde;
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_d400 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_d400;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro d410
function fkg_qtde_linha_reg_d410
         return number
is
   --
   vn_fase       number := 0;
   vn_qtde       number := 0;
   vn_indice     pls_integer := 0;
   vn_indice_bi  pls_integer := 0;
   --
begin
   --
   vn_fase   := 1;
   vn_indice := nvl(vt_bi_tab_reg_d410.first,0);
   vn_qtde   := 0;
   vn_fase   := 2;
   --
   loop
      --
      vn_fase := 3;
      --
      if nvl(vn_indice,0) = 0 then
         exit;
      end if;
      --
      vn_fase := 4;
      --
      vn_indice_bi := nvl(vt_bi_tab_reg_d410(vn_indice).first,0);
      --
      vn_fase := 5;
      --
      loop
         --
         vn_fase := 6;
         --
         if nvl(vn_indice_bi,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 7;
         --
         vn_qtde := nvl(vn_qtde,0) + 1;
         --
         vn_fase := 8;
         --
         if vn_indice_bi = vt_bi_tab_reg_d410(vn_indice).last then
            exit;
         else
            vn_indice_bi := vt_bi_tab_reg_d410(vn_indice).next(vn_indice_bi);
         end if;
         --
      end loop;
      --
      vn_fase := 9;
      --
      if vn_indice = vt_bi_tab_reg_d410.last then
         exit;
      else
         vn_indice := vt_bi_tab_reg_d410.next(vn_indice);
      end if;
      --
   end loop;
   --
   vn_fase := 10;
   --
   return nvl(vn_qtde,0);
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_d410 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_d410;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro d411
function fkg_qtde_linha_reg_d411
         return number
is
   --
   vn_fase       number := 0;
   vn_qtde       number := 0;
   vn_indice     pls_integer := 0;
   vn_indice_bi  pls_integer := 0;
   vn_indice_tri pls_integer := 0;
   --
begin
   --
   vn_fase   := 1;
   vn_indice := nvl(vt_tri_tab_reg_d411.first,0);
   vn_qtde   := 0;
   vn_fase   := 2;
   --
   loop
      --
      vn_fase := 3;
      --
      if nvl(vn_indice,0) = 0 then
         exit;
      end if;
      --
      vn_fase := 4;
      --
      vn_indice_bi := nvl(vt_tri_tab_reg_d411(vn_indice).first,0);
      --
      vn_fase := 5;
      --
      loop
         --
         vn_fase := 6;
         --
         if nvl(vn_indice_bi,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 7;
         --
         vn_indice_tri := nvl(vt_tri_tab_reg_d411(vn_indice)(vn_indice_bi).first,0);
         --
         vn_fase := 8;
         --
         loop
            --
            vn_fase := 9;
            --
            if nvl(vn_indice_tri,0) = 0 then
               exit;
            end if;
            --
            vn_fase := 10;
            --
            vn_qtde := nvl(vn_qtde,0) + 1;
            --
            vn_fase := 11;
            --
            if vn_indice_tri = vt_tri_tab_reg_d411(vn_indice)(vn_indice_bi).last then
               exit;
            else
               vn_indice_tri := vt_tri_tab_reg_d411(vn_indice)(vn_indice_bi).next(vn_indice_tri);
            end if;
            --
         end loop;
         --
         vn_fase := 12;
         --
         if vn_indice_bi = vt_tri_tab_reg_d411(vn_indice).last then
            exit;
         else
            vn_indice_bi := vt_tri_tab_reg_d411(vn_indice).next(vn_indice_bi);
         end if;
         --
      end loop;
      --
      vn_fase := 13;
      --
      if vn_indice = vt_tri_tab_reg_d411.last then
         exit;
      else
         vn_indice := vt_tri_tab_reg_d411.next(vn_indice);
      end if;
      --
   end loop;
   --
   vn_fase := 14;
   --
   return nvl(vn_qtde,0);
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_d411 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_d411;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro d420
function fkg_qtde_linha_reg_d420
         return number
is
   --
   vn_fase       number := 0;
   vn_qtde       number := 0;
   vn_indice     pls_integer := 0;
   vn_indice_bi  pls_integer := 0;
   --
begin
   --
   vn_fase   := 1;
   vn_indice := nvl(vt_bi_tab_reg_d420.first,0);
   vn_qtde   := 0;
   vn_fase   := 2;
   --
   loop
      --
      vn_fase := 3;
      --
      if nvl(vn_indice,0) = 0 then
         exit;
      end if;
      --
      vn_fase := 4;
      --
      vn_indice_bi := nvl(vt_bi_tab_reg_d420(vn_indice).first,0);
      --
      vn_fase := 5;
      --
      loop
         --
         vn_fase := 6;
         --
         if nvl(vn_indice_bi,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 7;
         --
         vn_qtde := nvl(vn_qtde,0) + 1;
         --
         vn_fase := 8;
         --
         if vn_indice_bi = vt_bi_tab_reg_d420(vn_indice).last then
            exit;
         else
            vn_indice_bi := vt_bi_tab_reg_d420(vn_indice).next(vn_indice_bi);
         end if;
         --
      end loop;
      --
      vn_fase := 9;
      --
      if vn_indice = vt_bi_tab_reg_d420.last then
         exit;
      else
         vn_indice := vt_bi_tab_reg_d420.next(vn_indice);
      end if;
      --
   end loop;
   --
   vn_fase := 10;
   --
   return nvl(vn_qtde,0);
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_d420 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_d420;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro d500
function fkg_qtde_linha_reg_d500
         return number
is
   --
   vn_fase  number := 0;
   vn_qtde  number := 0;
   --
begin
   --
   vn_fase := 1;
   vn_qtde := nvl(vt_tab_reg_d500.count,0);
   vn_fase := 2;
   --
   return vn_qtde;
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_d500 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_d500;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro d510
function fkg_qtde_linha_reg_d510
         return number
is
   --
   vn_fase       number := 0;
   vn_qtde       number := 0;
   vn_indice     pls_integer := 0;
   vn_indice_bi  pls_integer := 0;
   --
begin
   --
   vn_fase   := 1;
   vn_indice := nvl(vt_bi_tab_reg_d510.first,0);
   vn_qtde   := 0;
   vn_fase   := 2;
   --
   loop
      --
      vn_fase := 3;
      --
      if nvl(vn_indice,0) = 0 then
         exit;
      end if;
      --
      vn_fase := 4;
      --
      vn_indice_bi := nvl(vt_bi_tab_reg_d510(vn_indice).first,0);
      --
      vn_fase := 5;
      --
      loop
         --
         vn_fase := 6;
         --
         if nvl(vn_indice_bi,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 7;
         --
         vn_qtde := nvl(vn_qtde,0) + 1;
         --
         vn_fase := 8;
         --
         if vn_indice_bi = vt_bi_tab_reg_d510(vn_indice).last then
            exit;
         else
            vn_indice_bi := vt_bi_tab_reg_d510(vn_indice).next(vn_indice_bi);
         end if;
         --
      end loop;
      --
      vn_fase := 9;
      --
      if vn_indice = vt_bi_tab_reg_d510.last then
         exit;
      else
         vn_indice := vt_bi_tab_reg_d510.next(vn_indice);
      end if;
      --
   end loop;
   --
   vn_fase := 10;
   --
   return nvl(vn_qtde,0);
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_d510 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_d510;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro d530
function fkg_qtde_linha_reg_d530
         return number
is
   --
   vn_fase       number := 0;
   vn_qtde       number := 0;
   vn_indice     pls_integer := 0;
   vn_indice_bi  pls_integer := 0;
   --
begin
   --
   vn_fase   := 1;
   vn_indice := nvl(vt_bi_tab_reg_d530.first,0);
   vn_qtde   := 0;
   vn_fase   := 2;
   --
   loop
      --
      vn_fase := 3;
      --
      if nvl(vn_indice,0) = 0 then
         exit;
      end if;
      --
      vn_fase := 4;
      --
      vn_indice_bi := nvl(vt_bi_tab_reg_d530(vn_indice).first,0);
      --
      vn_fase := 5;
      --
      loop
         --
         vn_fase := 6;
         --
         if nvl(vn_indice_bi,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 7;
         --
         vn_qtde := nvl(vn_qtde,0) + 1;
         --
         vn_fase := 8;
         --
         if vn_indice_bi = vt_bi_tab_reg_d530(vn_indice).last then
            exit;
         else
            vn_indice_bi := vt_bi_tab_reg_d530(vn_indice).next(vn_indice_bi);
         end if;
         --
      end loop;
      --
      vn_fase := 9;
      --
      if vn_indice = vt_bi_tab_reg_d530.last then
         exit;
      else
         vn_indice := vt_bi_tab_reg_d530.next(vn_indice);
      end if;
      --
   end loop;
   --
   vn_fase := 10;
   --
   return nvl(vn_qtde,0);
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_d530 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_d530;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro d590
function fkg_qtde_linha_reg_d590
         return number
is
   --
   vn_fase       number := 0;
   vn_qtde       number := 0;
   vn_indice     pls_integer := 0;
   vn_indice_bi  pls_integer := 0;
   --
begin
   --
   vn_fase   := 1;
   vn_indice := nvl(vt_bi_tab_reg_d590.first,0);
   vn_qtde   := 0;
   vn_fase   := 2;
   --
   loop
      --
      vn_fase := 3;
      --
      if nvl(vn_indice,0) = 0 then
         exit;
      end if;
      --
      vn_fase := 4;
      --
      vn_indice_bi := nvl(vt_bi_tab_reg_d590(vn_indice).first,0);
      --
      vn_fase := 5;
      --
      loop
         --
         vn_fase := 6;
         --
         if nvl(vn_indice_bi,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 7;
         --
         vn_qtde := nvl(vn_qtde,0) + 1;
         --
         vn_fase := 8;
         --
         if vn_indice_bi = vt_bi_tab_reg_d590(vn_indice).last then
            exit;
         else
            vn_indice_bi := vt_bi_tab_reg_d590(vn_indice).next(vn_indice_bi);
         end if;
         --
      end loop;
      --
      vn_fase := 9;
      --
      if vn_indice = vt_bi_tab_reg_d590.last then
         exit;
      else
         vn_indice := vt_bi_tab_reg_d590.next(vn_indice);
      end if;
      --
   end loop;
   --
   vn_fase := 10;
   --
   return nvl(vn_qtde,0);
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_d590 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_d590;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro d600
function fkg_qtde_linha_reg_d600
         return number
is
   --
   vn_fase  number := 0;
   vn_qtde  number := 0;
   --
begin
   --
   vn_fase := 1;
   vn_qtde := nvl(vt_tab_reg_d600.count,0);
   vn_fase := 2;
   --
   return vn_qtde;
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_d600 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_d600;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro d610
function fkg_qtde_linha_reg_d610
         return number
is
   --
   vn_fase       number := 0;
   vn_qtde       number := 0;
   vn_indice     pls_integer := 0;
   vn_indice_bi  pls_integer := 0;
   --
begin
   --
   vn_fase   := 1;
   vn_indice := nvl(vt_bi_tab_reg_d610.first,0);
   vn_qtde   := 0;
   vn_fase   := 2;
   --
   loop
      --
      vn_fase := 3;
      --
      if nvl(vn_indice,0) = 0 then
         exit;
      end if;
      --
      vn_fase := 4;
      --
      vn_indice_bi := nvl(vt_bi_tab_reg_d610(vn_indice).first,0);
      --
      vn_fase := 5;
      --
      loop
         --
         vn_fase := 6;
         --
         if nvl(vn_indice_bi,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 7;
         --
         vn_qtde := nvl(vn_qtde,0) + 1;
         --
         vn_fase := 8;
         --
         if vn_indice_bi = vt_bi_tab_reg_d610(vn_indice).last then
            exit;
         else
            vn_indice_bi := vt_bi_tab_reg_d610(vn_indice).next(vn_indice_bi);
         end if;
         --
      end loop;
      --
      vn_fase := 9;
      --
      if vn_indice = vt_bi_tab_reg_d610.last then
         exit;
      else
         vn_indice := vt_bi_tab_reg_d610.next(vn_indice);
      end if;
      --
   end loop;
   --
   vn_fase := 10;
   --
   return nvl(vn_qtde,0);
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_d610 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_d610;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro d690
function fkg_qtde_linha_reg_d690
         return number
is
   --
   vn_fase       number := 0;
   vn_qtde       number := 0;
   vn_indice     pls_integer := 0;
   vn_indice_bi  pls_integer := 0;
   --
begin
   --
   vn_fase   := 1;
   vn_indice := nvl(vt_bi_tab_reg_d690.first,0);
   vn_qtde   := 0;
   vn_fase   := 2;
   --
   loop
      --
      vn_fase := 3;
      --
      if nvl(vn_indice,0) = 0 then
         exit;
      end if;
      --
      vn_fase := 4;
      --
      vn_indice_bi := nvl(vt_bi_tab_reg_d690(vn_indice).first,0);
      --
      vn_fase := 5;
      --
      loop
         --
         vn_fase := 6;
         --
         if nvl(vn_indice_bi,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 7;
         --
         vn_qtde := nvl(vn_qtde,0) + 1;
         --
         vn_fase := 8;
         --
         if vn_indice_bi = vt_bi_tab_reg_d690(vn_indice).last then
            exit;
         else
            vn_indice_bi := vt_bi_tab_reg_d690(vn_indice).next(vn_indice_bi);
         end if;
         --
      end loop;
      --
      vn_fase := 9;
      --
      if vn_indice = vt_bi_tab_reg_d690.last then
         exit;
      else
         vn_indice := vt_bi_tab_reg_d690.next(vn_indice);
      end if;
      --
   end loop;
   --
   vn_fase := 10;
   --
   return nvl(vn_qtde,0);
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_d690 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_d690;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro d695
function fkg_qtde_linha_reg_d695
         return number
is
   --
   vn_fase  number := 0;
   vn_qtde  number := 0;
   --
begin
   --
   vn_fase := 1;
   vn_qtde := nvl(vt_tab_reg_d695.count,0);
   vn_fase := 2;
   --
   return vn_qtde;
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_d695 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_d695;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro d696
function fkg_qtde_linha_reg_d696
         return number
is
   --
   vn_fase       number := 0;
   vn_qtde       number := 0;
   vn_indice     pls_integer := 0;
   vn_indice_bi  pls_integer := 0;
   --
begin
   --
   vn_fase   := 1;
   vn_indice := nvl(vt_bi_tab_reg_d696.first,0);
   vn_qtde   := 0;
   vn_fase   := 2;
   --
   loop
      --
      vn_fase := 3;
      --
      if nvl(vn_indice,0) = 0 then
         exit;
      end if;
      --
      vn_fase := 4;
      --
      vn_indice_bi := nvl(vt_bi_tab_reg_d696(vn_indice).first,0);
      --
      vn_fase := 5;
      --
      loop
         --
         vn_fase := 6;
         --
         if nvl(vn_indice_bi,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 7;
         --
         vn_qtde := nvl(vn_qtde,0) + 1;
         --
         vn_fase := 8;
         --
         if vn_indice_bi = vt_bi_tab_reg_d696(vn_indice).last then
            exit;
         else
            vn_indice_bi := vt_bi_tab_reg_d696(vn_indice).next(vn_indice_bi);
         end if;
         --
      end loop;
      --
      vn_fase := 9;
      --
      if vn_indice = vt_bi_tab_reg_d696.last then
         exit;
      else
         vn_indice := vt_bi_tab_reg_d696.next(vn_indice);
      end if;
      --
   end loop;
   --
   vn_fase := 10;
   --
   return nvl(vn_qtde,0);
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_d696 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_d696;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro d697
function fkg_qtde_linha_reg_d697
         return number
is
   --
   vn_fase       number := 0;
   vn_qtde       number := 0;
   vn_indice     pls_integer := 0;
   vn_indice_bi  pls_integer := 0;
   vn_indice_tri pls_integer := 0;
   --
begin
   --
   vn_fase   := 1;
   vn_indice := nvl(vt_tri_tab_reg_d697.first,0);
   vn_qtde   := 0;
   vn_fase   := 2;
   --
   loop
      --
      vn_fase := 3;
      --
      if nvl(vn_indice,0) = 0 then
         exit;
      end if;
      --
      vn_fase := 4;
      --
      vn_indice_bi := nvl(vt_tri_tab_reg_d697(vn_indice).first,0);
      --
      vn_fase := 5;
      --
      loop
         --
         vn_fase := 6;
         --
         if nvl(vn_indice_bi,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 7;
         --
         vn_indice_tri := nvl(vt_tri_tab_reg_d697(vn_indice)(vn_indice_bi).first,0);
         --
         vn_fase := 8;
         --
         loop
            --
            vn_fase := 9;
            --
            if nvl(vn_indice_tri,0) = 0 then
               exit;
            end if;
            --
            vn_fase := 10;
            --
            vn_qtde := nvl(vn_qtde,0) + 1;
            --
            vn_fase := 11;
            --
            if vn_indice_tri = vt_tri_tab_reg_d697(vn_indice)(vn_indice_bi).last then
               exit;
            else
               vn_indice_tri := vt_tri_tab_reg_d697(vn_indice)(vn_indice_bi).next(vn_indice_tri);
            end if;
            --
         end loop;
         --
         vn_fase := 12;
         --
         if vn_indice_bi = vt_tri_tab_reg_d697(vn_indice).last then
            exit;
         else
            vn_indice_bi := vt_tri_tab_reg_d697(vn_indice).next(vn_indice_bi);
         end if;
         --
      end loop;
      --
      vn_fase := 13;
      --
      if vn_indice = vt_tri_tab_reg_d697.last then
         exit;
      else
         vn_indice := vt_tri_tab_reg_d697.next(vn_indice);
      end if;
      --
   end loop;
   --
   vn_fase := 14;
   --
   return nvl(vn_qtde,0);
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_d697 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_d697;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro d990
function fkg_qtde_linha_reg_d990
         return number
is
   --
   vn_fase  number := 0;
   vn_qtde  number := 0;
   --
begin
   --
   vn_fase := 1;
   vn_qtde := nvl(vt_tab_reg_d990.count,0);
   vn_fase := 2;
   --
   return vn_qtde;
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_d990 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_d990;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro e001
function fkg_qtde_linha_reg_e001
         return number
is
   --
   vn_fase  number := 0;
   vn_qtde  number := 0;
   --
begin
   --
   vn_fase := 1;
   vn_qtde := nvl(vt_tab_reg_e001.count,0);
   vn_fase := 2;
   --
   return vn_qtde;
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_e001 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_e001;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro e100
function fkg_qtde_linha_reg_e100
         return number
is
   --
   vn_fase  number := 0;
   vn_qtde  number := 0;
   --
begin
   --
   vn_fase := 1;
   vn_qtde := nvl(vt_tab_reg_e100.count,0);
   vn_fase := 2;
   --
   return vn_qtde;
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_e100 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_e100;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro e110
function fkg_qtde_linha_reg_e110
         return number
is
   --
   vn_fase  number := 0;
   vn_qtde  number := 0;
   --
begin
   --
   vn_fase := 1;
   vn_qtde := nvl(vt_tab_reg_e110.count,0);
   vn_fase := 2;
   --
   return vn_qtde;
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_e110 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_e110;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro e111
function fkg_qtde_linha_reg_e111
         return number
is
   --
   vn_fase       number := 0;
   vn_qtde       number := 0;
   vn_indice     pls_integer := 0;
   vn_indice_bi  pls_integer := 0;
   --
begin
   --
   vn_fase   := 1;
   vn_indice := nvl(vt_bi_tab_reg_e111.first,0);
   vn_qtde   := 0;
   vn_fase   := 2;
   --
   loop
      --
      vn_fase := 3;
      --
      if nvl(vn_indice,0) = 0 then
         exit;
      end if;
      --
      vn_fase := 4;
      --
      vn_indice_bi := nvl(vt_bi_tab_reg_e111(vn_indice).first,0);
      --
      vn_fase := 5;
      --
      loop
         --
         vn_fase := 6;
         --
         if nvl(vn_indice_bi,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 7;
         --
         vn_qtde := nvl(vn_qtde,0) + 1;
         --
         vn_fase := 8;
         --
         if vn_indice_bi = vt_bi_tab_reg_e111(vn_indice).last then
            exit;
         else
            vn_indice_bi := vt_bi_tab_reg_e111(vn_indice).next(vn_indice_bi);
         end if;
         --
      end loop;
      --
      vn_fase := 9;
      --
      if vn_indice = vt_bi_tab_reg_e111.last then
         exit;
      else
         vn_indice := vt_bi_tab_reg_e111.next(vn_indice);
      end if;
      --
   end loop;
   --
   vn_fase := 10;
   --
   return nvl(vn_qtde,0);
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_e111 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_e111;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro e112
function fkg_qtde_linha_reg_e112
         return number
is
   --
   vn_fase       number := 0;
   vn_qtde       number := 0;
   vn_indice     pls_integer := 0;
   vn_indice_bi  pls_integer := 0;
   vn_indice_tri pls_integer := 0;
   --
begin
   --
   vn_fase   := 1;
   vn_indice := nvl(vt_tri_tab_reg_e112.first,0);
   vn_qtde   := 0;
   vn_fase   := 2;
   --
   loop
      --
      vn_fase := 3;
      --
      if nvl(vn_indice,0) = 0 then
         exit;
      end if;
      --
      vn_fase := 4;
      --
      vn_indice_bi := nvl(vt_tri_tab_reg_e112(vn_indice).first,0);
      --
      vn_fase := 5;
      --
      loop
         --
         vn_fase := 6;
         --
         if nvl(vn_indice_bi,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 7;
         --
         vn_indice_tri := nvl(vt_tri_tab_reg_e112(vn_indice)(vn_indice_bi).first,0);
         --
         vn_fase := 8;
         --
         loop
            --
            vn_fase := 9;
            --
            if nvl(vn_indice_tri,0) = 0 then
               exit;
            end if;
            --
            vn_fase := 10;
            --
            vn_qtde := nvl(vn_qtde,0) + 1;
            --
            vn_fase := 11;
            --
            if vn_indice_tri = vt_tri_tab_reg_e112(vn_indice)(vn_indice_bi).last then
               exit;
            else
               vn_indice_tri := vt_tri_tab_reg_e112(vn_indice)(vn_indice_bi).next(vn_indice_tri);
            end if;
            --
         end loop;
         --
         vn_fase := 12;
         --
         if vn_indice_bi = vt_tri_tab_reg_e112(vn_indice).last then
            exit;
         else
            vn_indice_bi := vt_tri_tab_reg_e112(vn_indice).next(vn_indice_bi);
         end if;
         --
      end loop;
      --
      vn_fase := 13;
      --
      if vn_indice = vt_tri_tab_reg_e112.last then
         exit;
      else
         vn_indice := vt_tri_tab_reg_e112.next(vn_indice);
      end if;
      --
   end loop;
   --
   vn_fase := 14;
   --
   return nvl(vn_qtde,0);
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_e112 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_e112;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro e113
function fkg_qtde_linha_reg_e113
         return number
is
   --
   vn_fase       number := 0;
   vn_qtde       number := 0;
   vn_indice     pls_integer := 0;
   vn_indice_bi  pls_integer := 0;
   vn_indice_tri pls_integer := 0;
   --
begin
   --
   vn_fase   := 1;
   vn_indice := nvl(vt_tri_tab_reg_e113.first,0);
   vn_qtde   := 0;
   vn_fase   := 2;
   --
   loop
      --
      vn_fase := 3;
      --
      if nvl(vn_indice,0) = 0 then
         exit;
      end if;
      --
      vn_fase := 4;
      --
      vn_indice_bi := nvl(vt_tri_tab_reg_e113(vn_indice).first,0);
      --
      vn_fase := 5;
      --
      loop
         --
         vn_fase := 6;
         --
         if nvl(vn_indice_bi,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 7;
         --
         vn_indice_tri := nvl(vt_tri_tab_reg_e113(vn_indice)(vn_indice_bi).first,0);
         --
         vn_fase := 8;
         --
         loop
            --
            vn_fase := 9;
            --
            if nvl(vn_indice_tri,0) = 0 then
               exit;
            end if;
            --
            vn_fase := 10;
            --
            vn_qtde := nvl(vn_qtde,0) + 1;
            --
            vn_fase := 11;
            --
            if vn_indice_tri = vt_tri_tab_reg_e113(vn_indice)(vn_indice_bi).last then
               exit;
            else
               vn_indice_tri := vt_tri_tab_reg_e113(vn_indice)(vn_indice_bi).next(vn_indice_tri);
            end if;
            --
         end loop;
         --
         vn_fase := 12;
         --
         if vn_indice_bi = vt_tri_tab_reg_e113(vn_indice).last then
            exit;
         else
            vn_indice_bi := vt_tri_tab_reg_e113(vn_indice).next(vn_indice_bi);
         end if;
         --
      end loop;
      --
      vn_fase := 13;
      --
      if vn_indice = vt_tri_tab_reg_e113.last then
         exit;
      else
         vn_indice := vt_tri_tab_reg_e113.next(vn_indice);
      end if;
      --
   end loop;
   --
   vn_fase := 14;
   --
   return nvl(vn_qtde,0);
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_e113 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_e113;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro e115
function fkg_qtde_linha_reg_e115
         return number
is
   --
   vn_fase       number := 0;
   vn_qtde       number := 0;
   vn_indice     pls_integer := 0;
   vn_indice_bi  pls_integer := 0;
   --
begin
   --
   vn_fase   := 1;
   vn_indice := nvl(vt_bi_tab_reg_e115.first,0);
   vn_qtde   := 0;
   vn_fase   := 2;
   --
   loop
      --
      vn_fase := 3;
      --
      if nvl(vn_indice,0) = 0 then
         exit;
      end if;
      --
      vn_fase := 4;
      --
      vn_indice_bi := nvl(vt_bi_tab_reg_e115(vn_indice).first,0);
      --
      vn_fase := 5;
      --
      loop
         --
         vn_fase := 6;
         --
         if nvl(vn_indice_bi,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 7;
         --
         vn_qtde := nvl(vn_qtde,0) + 1;
         --
         vn_fase := 8;
         --
         if vn_indice_bi = vt_bi_tab_reg_e115(vn_indice).last then
            exit;
         else
            vn_indice_bi := vt_bi_tab_reg_e115(vn_indice).next(vn_indice_bi);
         end if;
         --
      end loop;
      --
      vn_fase := 9;
      --
      if vn_indice = vt_bi_tab_reg_e115.last then
         exit;
      else
         vn_indice := vt_bi_tab_reg_e115.next(vn_indice);
      end if;
      --
   end loop;
   --
   vn_fase := 10;
   --
   return nvl(vn_qtde,0);
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_e115 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_e115;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro e116
function fkg_qtde_linha_reg_e116
         return number
is
   --
   vn_fase       number := 0;
   vn_qtde       number := 0;
   vn_indice     pls_integer := 0;
   vn_indice_bi  pls_integer := 0;
   --
begin
   --
   vn_fase   := 1;
   vn_indice := nvl(vt_bi_tab_reg_e116.first,0);
   vn_qtde   := 0;
   vn_fase   := 2;
   --
   loop
      --
      vn_fase := 3;
      --
      if nvl(vn_indice,0) = 0 then
         exit;
      end if;
      --
      vn_fase := 4;
      --
      vn_indice_bi := nvl(vt_bi_tab_reg_e116(vn_indice).first,0);
      --
      vn_fase := 5;
      --
      loop
         --
         vn_fase := 6;
         --
         if nvl(vn_indice_bi,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 7;
         --
         vn_qtde := nvl(vn_qtde,0) + 1;
         --
         vn_fase := 8;
         --
         if vn_indice_bi = vt_bi_tab_reg_e116(vn_indice).last then
            exit;
         else
            vn_indice_bi := vt_bi_tab_reg_e116(vn_indice).next(vn_indice_bi);
         end if;
         --
      end loop;
      --
      vn_fase := 9;
      --
      if vn_indice = vt_bi_tab_reg_e116.last then
         exit;
      else
         vn_indice := vt_bi_tab_reg_e116.next(vn_indice);
      end if;
      --
   end loop;
   --
   vn_fase := 10;
   --
   return nvl(vn_qtde,0);
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_e116 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_e116;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro e200
function fkg_qtde_linha_reg_e200
         return number
is
   --
   vn_fase  number := 0;
   vn_qtde  number := 0;
   --
begin
   --
   vn_fase := 1;
   vn_qtde := nvl(vt_tab_reg_e200.count,0);
   vn_fase := 2;
   --
   return vn_qtde;
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_e200 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_e200;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro e210
function fkg_qtde_linha_reg_e210
         return number
is
   --
   vn_fase  number := 0;
   vn_qtde  number := 0;
   --
begin
   --
   vn_fase := 1;
   vn_qtde := nvl(vt_tab_reg_e210.count,0);
   vn_fase := 2;
   --
   return vn_qtde;
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_e210 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_e210;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro e220
function fkg_qtde_linha_reg_e220
         return number
is
   --
   vn_fase       number := 0;
   vn_qtde       number := 0;
   vn_indice     pls_integer := 0;
   vn_indice_bi  pls_integer := 0;
   --
begin
   --
   vn_fase   := 1;
   vn_indice := nvl(vt_bi_tab_reg_e220.first,0);
   vn_qtde   := 0;
   vn_fase   := 2;
   --
   loop
      --
      vn_fase := 3;
      --
      if nvl(vn_indice,0) = 0 then
         exit;
      end if;
      --
      vn_fase := 4;
      --
      vn_indice_bi := nvl(vt_bi_tab_reg_e220(vn_indice).first,0);
      --
      vn_fase := 5;
      --
      loop
         --
         vn_fase := 6;
         --
         if nvl(vn_indice_bi,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 7;
         --
         vn_qtde := nvl(vn_qtde,0) + 1;
         --
         vn_fase := 8;
         --
         if vn_indice_bi = vt_bi_tab_reg_e220(vn_indice).last then
            exit;
         else
            vn_indice_bi := vt_bi_tab_reg_e220(vn_indice).next(vn_indice_bi);
         end if;
         --
      end loop;
      --
      vn_fase := 9;
      --
      if vn_indice = vt_bi_tab_reg_e220.last then
         exit;
      else
         vn_indice := vt_bi_tab_reg_e220.next(vn_indice);
      end if;
      --
   end loop;
   --
   vn_fase := 10;
   --
   return nvl(vn_qtde,0);
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_e220 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_e220;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro e230
function fkg_qtde_linha_reg_e230
         return number
is
   --
   vn_fase       number := 0;
   vn_qtde       number := 0;
   vn_indice     pls_integer := 0;
   vn_indice_bi  pls_integer := 0;
   vn_indice_tri pls_integer := 0;
   --
begin
   --
   vn_fase   := 1;
   vn_indice := nvl(vt_tri_tab_reg_e230.first,0);
   vn_qtde   := 0;
   vn_fase   := 2;
   --
   loop
      --
      vn_fase := 3;
      --
      if nvl(vn_indice,0) = 0 then
         exit;
      end if;
      --
      vn_fase := 4;
      --
      vn_indice_bi := nvl(vt_tri_tab_reg_e230(vn_indice).first,0);
      --
      vn_fase := 5;
      --
      loop
         --
         vn_fase := 6;
         --
         if nvl(vn_indice_bi,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 7;
         --
         vn_indice_tri := nvl(vt_tri_tab_reg_e230(vn_indice)(vn_indice_bi).first,0);
         --
         vn_fase := 8;
         --
         loop
            --
            vn_fase := 9;
            --
            if nvl(vn_indice_tri,0) = 0 then
               exit;
            end if;
            --
            vn_fase := 10;
            --
            vn_qtde := nvl(vn_qtde,0) + 1;
            --
            vn_fase := 11;
            --
            if vn_indice_tri = vt_tri_tab_reg_e230(vn_indice)(vn_indice_bi).last then
               exit;
            else
               vn_indice_tri := vt_tri_tab_reg_e230(vn_indice)(vn_indice_bi).next(vn_indice_tri);
            end if;
            --
         end loop;
         --
         vn_fase := 12;
         --
         if vn_indice_bi = vt_tri_tab_reg_e230(vn_indice).last then
            exit;
         else
            vn_indice_bi := vt_tri_tab_reg_e230(vn_indice).next(vn_indice_bi);
         end if;
         --
      end loop;
      --
      vn_fase := 13;
      --
      if vn_indice = vt_tri_tab_reg_e230.last then
         exit;
      else
         vn_indice := vt_tri_tab_reg_e230.next(vn_indice);
      end if;
      --
   end loop;
   --
   vn_fase := 14;
   --
   return nvl(vn_qtde,0);
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_e230 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_e230;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro e240
function fkg_qtde_linha_reg_e240
         return number
is
   --
   vn_fase       number := 0;
   vn_qtde       number := 0;
   vn_indice     pls_integer := 0;
   vn_indice_bi  pls_integer := 0;
   vn_indice_tri pls_integer := 0;
   --
begin
   --
   vn_fase   := 1;
   vn_indice := nvl(vt_tri_tab_reg_e240.first,0);
   vn_qtde   := 0;
   vn_fase   := 2;
   --
   loop
      --
      vn_fase := 3;
      --
      if nvl(vn_indice,0) = 0 then
         exit;
      end if;
      --
      vn_fase := 4;
      --
      vn_indice_bi := nvl(vt_tri_tab_reg_e240(vn_indice).first,0);
      --
      vn_fase := 5;
      --
      loop
         --
         vn_fase := 6;
         --
         if nvl(vn_indice_bi,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 7;
         --
         vn_indice_tri := nvl(vt_tri_tab_reg_e240(vn_indice)(vn_indice_bi).first,0);
         --
         vn_fase := 8;
         --
         loop
            --
            vn_fase := 9;
            --
            if nvl(vn_indice_tri,0) = 0 then
               exit;
            end if;
            --
            vn_fase := 10;
            --
            vn_qtde := nvl(vn_qtde,0) + 1;
            --
            vn_fase := 11;
            --
            if vn_indice_tri = vt_tri_tab_reg_e240(vn_indice)(vn_indice_bi).last then
               exit;
            else
               vn_indice_tri := vt_tri_tab_reg_e240(vn_indice)(vn_indice_bi).next(vn_indice_tri);
            end if;
            --
         end loop;
         --
         vn_fase := 12;
         --
         if vn_indice_bi = vt_tri_tab_reg_e240(vn_indice).last then
            exit;
         else
            vn_indice_bi := vt_tri_tab_reg_e240(vn_indice).next(vn_indice_bi);
         end if;
         --
      end loop;
      --
      vn_fase := 13;
      --
      if vn_indice = vt_tri_tab_reg_e240.last then
         exit;
      else
         vn_indice := vt_tri_tab_reg_e240.next(vn_indice);
      end if;
      --
   end loop;
   --
   vn_fase := 14;
   --
   return nvl(vn_qtde,0);
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_e240 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_e240;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro e250
function fkg_qtde_linha_reg_e250
         return number
is
   --
   vn_fase       number := 0;
   vn_qtde       number := 0;
   vn_indice     pls_integer := 0;
   vn_indice_bi  pls_integer := 0;
   --
begin
   --
   vn_fase   := 1;
   vn_indice := nvl(vt_bi_tab_reg_e250.first,0);
   vn_qtde   := 0;
   vn_fase   := 2;
   --
   loop
      --
      vn_fase := 3;
      --
      if nvl(vn_indice,0) = 0 then
         exit;
      end if;
      --
      vn_fase := 4;
      --
      vn_indice_bi := nvl(vt_bi_tab_reg_e250(vn_indice).first,0);
      --
      vn_fase := 5;
      --
      loop
         --
         vn_fase := 6;
         --
         if nvl(vn_indice_bi,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 7;
         --
         vn_qtde := nvl(vn_qtde,0) + 1;
         --
         vn_fase := 8;
         --
         if vn_indice_bi = vt_bi_tab_reg_e250(vn_indice).last then
            exit;
         else
            vn_indice_bi := vt_bi_tab_reg_e250(vn_indice).next(vn_indice_bi);
         end if;
         --
      end loop;
      --
      vn_fase := 9;
      --
      if vn_indice = vt_bi_tab_reg_e250.last then
         exit;
      else
         vn_indice := vt_bi_tab_reg_e250.next(vn_indice);
      end if;
      --
   end loop;
   --
   vn_fase := 10;
   --
   return nvl(vn_qtde,0);
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_e250 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_e250;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro e300
function fkg_qtde_linha_reg_e300
         return number
is
   --
   vn_fase  number := 0;
   vn_qtde  number := 0;
   --
begin
   --
   vn_fase := 1;
   vn_qtde := nvl(vt_tab_reg_e300.count,0);
   vn_fase := 2;
   --
   return vn_qtde;
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_e300 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_e300;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro e310
function fkg_qtde_linha_reg_e310
         return number
is
   --
   vn_fase  number := 0;
   vn_qtde  number := 0;
   --
begin
   --
   vn_fase := 1;
   vn_qtde := nvl(vt_tab_reg_e310.count,0);
   vn_fase := 2;
   --
   return vn_qtde;
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_e310 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_e310;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro e311
function fkg_qtde_linha_reg_e311
         return number
is
   --
   vn_fase       number := 0;
   vn_qtde       number := 0;
   vn_indice     pls_integer := 0;
   vn_indice_bi  pls_integer := 0;
   --
begin
   --
   vn_fase   := 1;
   vn_indice := nvl(vt_bi_tab_reg_e311.first,0);
   vn_qtde   := 0;
   vn_fase   := 2;
   --
   loop
      --
      vn_fase := 3;
      --
      if nvl(vn_indice,0) = 0 then
         exit;
      end if;
      --
      vn_fase := 4;
      --
      vn_indice_bi := nvl(vt_bi_tab_reg_e311(vn_indice).first,0);
      --
      vn_fase := 5;
      --
      loop
         --
         vn_fase := 6;
         --
         if nvl(vn_indice_bi,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 7;
         --
         vn_qtde := nvl(vn_qtde,0) + 1;
         --
         vn_fase := 8;
         --
         if vn_indice_bi = vt_bi_tab_reg_e311(vn_indice).last then
            exit;
         else
            vn_indice_bi := vt_bi_tab_reg_e311(vn_indice).next(vn_indice_bi);
         end if;
         --
      end loop;
      --
      vn_fase := 9;
      --
      if vn_indice = vt_bi_tab_reg_e311.last then
         exit;
      else
         vn_indice := vt_bi_tab_reg_e311.next(vn_indice);
      end if;
      --
   end loop;
   --
   vn_fase := 10;
   --
   return nvl(vn_qtde,0);
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_e311 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_e311;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro e312
function fkg_qtde_linha_reg_e312
         return number
is
   --
   vn_fase       number := 0;
   vn_qtde       number := 0;
   vn_indice     pls_integer := 0;
   vn_indice_bi  pls_integer := 0;
   vn_indice_tri pls_integer := 0;
   --
begin
   --
   vn_fase   := 1;
   vn_indice := nvl(vt_tri_tab_reg_e312.first,0);
   vn_qtde   := 0;
   vn_fase   := 2;
   --
   loop
      --
      vn_fase := 3;
      --
      if nvl(vn_indice,0) = 0 then
         exit;
      end if;
      --
      vn_fase := 4;
      --
      vn_indice_bi := nvl(vt_tri_tab_reg_e312(vn_indice).first,0);
      --
      vn_fase := 5;
      --
      loop
         --
         vn_fase := 6;
         --
         if nvl(vn_indice_bi,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 7;
         --
         vn_indice_tri := nvl(vt_tri_tab_reg_e312(vn_indice)(vn_indice_bi).first,0);
         --
         vn_fase := 8;
         --
         loop
            --
            vn_fase := 9;
            --
            if nvl(vn_indice_tri,0) = 0 then
               exit;
            end if;
            --
            vn_fase := 10;
            --
            vn_qtde := nvl(vn_qtde,0) + 1;
            --
            vn_fase := 11;
            --
            if vn_indice_tri = vt_tri_tab_reg_e312(vn_indice)(vn_indice_bi).last then
               exit;
            else
               vn_indice_tri := vt_tri_tab_reg_e312(vn_indice)(vn_indice_bi).next(vn_indice_tri);
            end if;
            --
         end loop;
         --
         vn_fase := 12;
         --
         if vn_indice_bi = vt_tri_tab_reg_e312(vn_indice).last then
            exit;
         else
            vn_indice_bi := vt_tri_tab_reg_e312(vn_indice).next(vn_indice_bi);
         end if;
         --
      end loop;
      --
      vn_fase := 13;
      --
      if vn_indice = vt_tri_tab_reg_e312.last then
         exit;
      else
         vn_indice := vt_tri_tab_reg_e312.next(vn_indice);
      end if;
      --
   end loop;
   --
   vn_fase := 14;
   --
   return nvl(vn_qtde,0);
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_e312 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_e312;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro e313
function fkg_qtde_linha_reg_e313
         return number
is
   --
   vn_fase       number := 0;
   vn_qtde       number := 0;
   vn_indice     pls_integer := 0;
   vn_indice_bi  pls_integer := 0;
   vn_indice_tri pls_integer := 0;
   --
begin
   --
   vn_fase   := 1;
   vn_indice := nvl(vt_tri_tab_reg_e313.first,0);
   vn_qtde   := 0;
   vn_fase   := 2;
   --
   loop
      --
      vn_fase := 3;
      --
      if nvl(vn_indice,0) = 0 then
         exit;
      end if;
      --
      vn_fase := 4;
      --
      vn_indice_bi := nvl(vt_tri_tab_reg_e313(vn_indice).first,0);
      --
      vn_fase := 5;
      --
      loop
         --
         vn_fase := 6;
         --
         if nvl(vn_indice_bi,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 7;
         --
         vn_indice_tri := nvl(vt_tri_tab_reg_e313(vn_indice)(vn_indice_bi).first,0);
         --
         vn_fase := 8;
         --
         loop
            --
            vn_fase := 9;
            --
            if nvl(vn_indice_tri,0) = 0 then
               exit;
            end if;
            --
            vn_fase := 10;
            --
            vn_qtde := nvl(vn_qtde,0) + 1;
            --
            vn_fase := 11;
            --
            if vn_indice_tri = vt_tri_tab_reg_e313(vn_indice)(vn_indice_bi).last then
               exit;
            else
               vn_indice_tri := vt_tri_tab_reg_e313(vn_indice)(vn_indice_bi).next(vn_indice_tri);
            end if;
            --
         end loop;
         --
         vn_fase := 12;
         --
         if vn_indice_bi = vt_tri_tab_reg_e313(vn_indice).last then
            exit;
         else
            vn_indice_bi := vt_tri_tab_reg_e313(vn_indice).next(vn_indice_bi);
         end if;
         --
      end loop;
      --
      vn_fase := 13;
      --
      if vn_indice = vt_tri_tab_reg_e313.last then
         exit;
      else
         vn_indice := vt_tri_tab_reg_e313.next(vn_indice);
      end if;
      --
   end loop;
   --
   vn_fase := 14;
   --
   return nvl(vn_qtde,0);
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_e313 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_e313;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro e316
function fkg_qtde_linha_reg_e316
         return number
is
   --
   vn_fase       number := 0;
   vn_qtde       number := 0;
   vn_indice     pls_integer := 0;
   vn_indice_bi  pls_integer := 0;
   --
begin
   --
   vn_fase   := 1;
   vn_indice := nvl(vt_bi_tab_reg_e316.first,0);
   vn_qtde   := 0;
   vn_fase   := 2;
   --
   loop
      --
      vn_fase := 3;
      --
      if nvl(vn_indice,0) = 0 then
         exit;
      end if;
      --
      vn_fase := 4;
      --
      vn_indice_bi := nvl(vt_bi_tab_reg_e316(vn_indice).first,0);
      --
      vn_fase := 5;
      --
      loop
         --
         vn_fase := 6;
         --
         if nvl(vn_indice_bi,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 7;
         --
         vn_qtde := nvl(vn_qtde,0) + 1;
         --
         vn_fase := 8;
         --
         if vn_indice_bi = vt_bi_tab_reg_e316(vn_indice).last then
            exit;
         else
            vn_indice_bi := vt_bi_tab_reg_e316(vn_indice).next(vn_indice_bi);
         end if;
         --
      end loop;
      --
      vn_fase := 9;
      --
      if vn_indice = vt_bi_tab_reg_e316.last then
         exit;
      else
         vn_indice := vt_bi_tab_reg_e316.next(vn_indice);
      end if;
      --
   end loop;
   --
   vn_fase := 10;
   --
   return nvl(vn_qtde,0);
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_e316 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_e316;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro e500
function fkg_qtde_linha_reg_e500
         return number
is
   --
   vn_fase  number := 0;
   vn_qtde  number := 0;
   --
begin
   --
   vn_fase := 1;
   vn_qtde := nvl(vt_tab_reg_e500.count,0);
   vn_fase := 2;
   --
   return vn_qtde;
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_e500 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_e500;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro e510
function fkg_qtde_linha_reg_e510
         return number
is
   --
   vn_fase       number := 0;
   vn_qtde       number := 0;
   vn_indice     pls_integer := 0;
   vn_indice_bi  pls_integer := 0;
   --
begin
   --
   vn_fase   := 1;
   vn_indice := nvl(vt_bi_tab_reg_e510.first,0);
   vn_qtde   := 0;
   vn_fase   := 2;
   --
   loop
      --
      vn_fase := 3;
      --
      if nvl(vn_indice,0) = 0 then
         exit;
      end if;
      --
      vn_fase := 4;
      --
      vn_indice_bi := nvl(vt_bi_tab_reg_e510(vn_indice).first,0);
      --
      vn_fase := 5;
      --
      loop
         --
         vn_fase := 6;
         --
         if nvl(vn_indice_bi,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 7;
         --
         vn_qtde := nvl(vn_qtde,0) + 1;
         --
         vn_fase := 8;
         --
         if vn_indice_bi = vt_bi_tab_reg_e510(vn_indice).last then
            exit;
         else
            vn_indice_bi := vt_bi_tab_reg_e510(vn_indice).next(vn_indice_bi);
         end if;
         --
      end loop;
      --
      vn_fase := 9;
      --
      if vn_indice = vt_bi_tab_reg_e510.last then
         exit;
      else
         vn_indice := vt_bi_tab_reg_e510.next(vn_indice);
      end if;
      --
   end loop;
   --
   vn_fase := 10;
   --
   return nvl(vn_qtde,0);
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_e510 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_e510;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro e520
function fkg_qtde_linha_reg_e520
         return number
is
   --
   vn_fase  number := 0;
   vn_qtde  number := 0;
   --
begin
   --
   vn_fase := 1;
   vn_qtde := nvl(vt_tab_reg_e520.count,0);
   vn_fase := 2;
   --
   return vn_qtde;
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_e520 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_e520;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro e530
function fkg_qtde_linha_reg_e530
         return number
is
   --
   vn_fase       number := 0;
   vn_qtde       number := 0;
   vn_indice     pls_integer := 0;
   vn_indice_bi  pls_integer := 0;
   --
begin
   --
   vn_fase   := 1;
   vn_indice := nvl(vt_bi_tab_reg_e530.first,0);
   vn_qtde   := 0;
   vn_fase   := 2;
   --
   loop
      --
      vn_fase := 3;
      --
      if nvl(vn_indice,0) = 0 then
         exit;
      end if;
      --
      vn_fase := 4;
      --
      vn_indice_bi := nvl(vt_bi_tab_reg_e530(vn_indice).first,0);
      --
      vn_fase := 5;
      --
      loop
         --
         vn_fase := 6;
         --
         if nvl(vn_indice_bi,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 7;
         --
         vn_qtde := nvl(vn_qtde,0) + 1;
         --
         vn_fase := 8;
         --
         if vn_indice_bi = vt_bi_tab_reg_e530(vn_indice).last then
            exit;
         else
            vn_indice_bi := vt_bi_tab_reg_e530(vn_indice).next(vn_indice_bi);
         end if;
         --
      end loop;
      --
      vn_fase := 9;
      --
      if vn_indice = vt_bi_tab_reg_e530.last then
         exit;
      else
         vn_indice := vt_bi_tab_reg_e530.next(vn_indice);
      end if;
      --
   end loop;
   --
   vn_fase := 10;
   --
   return nvl(vn_qtde,0);
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_e530 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_e530;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro e531
function fkg_qtde_linha_reg_e531
         return number
is
   --
   vn_fase       number := 0;
   vn_qtde       number := 0;
   vn_indice     pls_integer := 0;
   vn_indice_bi  pls_integer := 0;
   vn_indice_tri pls_integer := 0;
   --
begin
   --
   vn_fase   := 1;
   vn_indice := nvl(vt_tri_tab_reg_e531.first,0);
   vn_qtde   := 0;
   vn_fase   := 2;
   --
   loop
      --
      vn_fase := 3;
      --
      if nvl(vn_indice,0) = 0 then
         exit;
      end if;
      --
      vn_fase := 4;
      --
      vn_indice_bi := nvl(vt_tri_tab_reg_e531(vn_indice).first,0);
      --
      vn_fase := 5;
      --
      loop
         --
         vn_fase := 6;
         --
         if nvl(vn_indice_bi,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 7;
         --
         vn_indice_tri := nvl(vt_tri_tab_reg_e531(vn_indice)(vn_indice_bi).first,0);
         --
         vn_fase := 8;
         --
         loop
            --
            vn_fase := 9;
            --
            if nvl(vn_indice_tri,0) = 0 then
               exit;
            end if;
            --
            vn_fase := 10;
            --
            vn_qtde := nvl(vn_qtde,0) + 1;
            --
            vn_fase := 11;
            --
            if vn_indice_tri = vt_tri_tab_reg_e531(vn_indice)(vn_indice_bi).last then
               exit;
            else
               vn_indice_tri := vt_tri_tab_reg_e531(vn_indice)(vn_indice_bi).next(vn_indice_tri);
            end if;
            --
         end loop;
         --
         vn_fase := 12;
         --
         if vn_indice_bi = vt_tri_tab_reg_e531(vn_indice).last then
            exit;
         else
            vn_indice_bi := vt_tri_tab_reg_e531(vn_indice).next(vn_indice_bi);
         end if;
         --
      end loop;
      --
      vn_fase := 13;
      --
      if vn_indice = vt_tri_tab_reg_e531.last then
         exit;
      else
         vn_indice := vt_tri_tab_reg_e531.next(vn_indice);
      end if;
      --
   end loop;
   --
   vn_fase := 14;
   --
   return nvl(vn_qtde,0);
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_e531 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_e531;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro e990
function fkg_qtde_linha_reg_e990
         return number
is
   --
   vn_fase  number := 0;
   vn_qtde  number := 0;
   --
begin
   --
   vn_fase := 1;
   vn_qtde := nvl(vt_tab_reg_e990.count,0);
   vn_fase := 2;
   --
   return vn_qtde;
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_e990 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_e990;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro g001
function fkg_qtde_linha_reg_g001
         return number
is
   --
   vn_fase  number := 0;
   vn_qtde  number := 0;
   --
begin
   --
   vn_fase := 1;
   vn_qtde := nvl(vt_tab_reg_g001.count,0);
   vn_fase := 2;
   --
   return vn_qtde;
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_g001 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_g001;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro g110
function fkg_qtde_linha_reg_g110
         return number
is
   --
   vn_fase  number := 0;
   vn_qtde  number := 0;
   --
begin
   --
   vn_fase := 1;
   vn_qtde := nvl(vt_tab_reg_g110.count,0);
   vn_fase := 2;
   --
   return vn_qtde;
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_g110 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_g110;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro g125
function fkg_qtde_linha_reg_g125
         return number
is
   --
   vn_fase       number := 0;
   vn_qtde       number := 0;
   vn_indice     pls_integer := 0;
   vn_indice_bi  pls_integer := 0;
   --
begin
   --
   vn_fase   := 1;
   vn_indice := nvl(vt_bi_tab_reg_g125.first,0);
   vn_qtde   := 0;
   vn_fase   := 2;
   --
   loop
      --
      vn_fase := 3;
      --
      if nvl(vn_indice,0) = 0 then
         exit;
      end if;
      --
      vn_fase := 4;
      --
      vn_indice_bi := nvl(vt_bi_tab_reg_g125(vn_indice).first,0);
      --
      vn_fase := 5;
      --
      loop
         --
         vn_fase := 6;
         --
         if nvl(vn_indice_bi,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 7;
         --
         vn_qtde := nvl(vn_qtde,0) + 1;
         --
         vn_fase := 8;
         --
         if vn_indice_bi = vt_bi_tab_reg_g125(vn_indice).last then
            exit;
         else
            vn_indice_bi := vt_bi_tab_reg_g125(vn_indice).next(vn_indice_bi);
         end if;
         --
      end loop;
      --
      vn_fase := 9;
      --
      if vn_indice = vt_bi_tab_reg_g125.last then
         exit;
      else
         vn_indice := vt_bi_tab_reg_g125.next(vn_indice);
      end if;
      --
   end loop;
   --
   vn_fase := 10;
   --
   return nvl(vn_qtde,0);
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_g125 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_g125;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro g126
function fkg_qtde_linha_reg_g126
         return number
is
   --
   vn_fase       number := 0;
   vn_qtde       number := 0;
   vn_indice     pls_integer := 0;
   vn_indice_bi  pls_integer := 0;
   vn_indice_tri pls_integer := 0;
   --
begin
   --
   vn_fase   := 1;
   vn_indice := nvl(vt_tri_tab_reg_g126.first,0);
   vn_qtde   := 0;
   vn_fase   := 2;
   --
   loop
      --
      vn_fase := 3;
      --
      if nvl(vn_indice,0) = 0 then
         exit;
      end if;
      --
      vn_fase := 4;
      --
      vn_indice_bi := nvl(vt_tri_tab_reg_g126(vn_indice).first,0);
      --
      vn_fase := 5;
      --
      loop
         --
         vn_fase := 6;
         --
         if nvl(vn_indice_bi,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 7;
         --
         vn_indice_tri := nvl(vt_tri_tab_reg_g126(vn_indice)(vn_indice_bi).first,0);
         --
         vn_fase := 7.1;
         --
         loop
            --
            vn_fase := 7.2;
            --
            if nvl(vn_indice_tri,0) = 0 then
               exit;
            end if;
            --
            vn_fase := 7.3;
            --
            vn_qtde := nvl(vn_qtde,0) + 1;
            --
            vn_fase := 7.4;
            --
            if vn_indice_tri = vt_tri_tab_reg_g126(vn_indice)(vn_indice_bi).last then
               exit;
            else
               vn_indice_tri := vt_tri_tab_reg_g126(vn_indice)(vn_indice_bi).next(vn_indice_tri);
            end if;
            --
         end loop;
         --
         vn_fase := 8;
         --
         if vn_indice_bi = vt_tri_tab_reg_g126(vn_indice).last then
            exit;
         else
            vn_indice_bi := vt_tri_tab_reg_g126(vn_indice).next(vn_indice_bi);
         end if;
         --
      end loop;
      --
      vn_fase := 9;
      --
      if vn_indice = vt_tri_tab_reg_g126.last then
         exit;
      else
         vn_indice := vt_tri_tab_reg_g126.next(vn_indice);
      end if;
      --
   end loop;
   --
   vn_fase := 10;
   --
   return nvl(vn_qtde,0);
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_g126 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_g126;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro g130
function fkg_qtde_linha_reg_g130
         return number
is
   --
   vn_fase       number := 0;
   vn_qtde       number := 0;
   vn_indice     pls_integer := 0;
   vn_indice_bi  pls_integer := 0;
   vn_indice_tri pls_integer := 0;
   --
begin
   --
   vn_fase   := 1;
   vn_indice := nvl(vt_tri_tab_reg_g130.first,0);
   vn_qtde   := 0;
   vn_fase   := 2;
   --
   loop
      --
      vn_fase := 3;
      --
      if nvl(vn_indice,0) = 0 then
         exit;
      end if;
      --
      vn_fase := 4;
      --
      vn_indice_bi := nvl(vt_tri_tab_reg_g130(vn_indice).first,0);
      --
      vn_fase := 5;
      --
      loop
         --
         vn_fase := 6;
         --
         if nvl(vn_indice_bi,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 7;
         --
         vn_indice_tri := nvl(vt_tri_tab_reg_g130(vn_indice)(vn_indice_bi).first,0);
         --
         vn_fase := 7.1;
         --
         loop
            --
            vn_fase := 7.2;
            --
            if nvl(vn_indice_tri,0) = 0 then
               exit;
            end if;
            --
            vn_fase := 7.3;
            --
            vn_qtde := nvl(vn_qtde,0) + 1;
            --
            vn_fase := 7.4;
            --
            if vn_indice_tri = vt_tri_tab_reg_g130(vn_indice)(vn_indice_bi).last then
               exit;
            else
               vn_indice_tri := vt_tri_tab_reg_g130(vn_indice)(vn_indice_bi).next(vn_indice_tri);
            end if;
            --
         end loop;
         --
         vn_fase := 8;
         --
         if vn_indice_bi = vt_tri_tab_reg_g130(vn_indice).last then
            exit;
         else
            vn_indice_bi := vt_tri_tab_reg_g130(vn_indice).next(vn_indice_bi);
         end if;
         --
      end loop;
      --
      vn_fase := 9;
      --
      if vn_indice = vt_tri_tab_reg_g130.last then
         exit;
      else
         vn_indice := vt_tri_tab_reg_g130.next(vn_indice);
      end if;
      --
   end loop;
   --
   vn_fase := 10;
   --
   return nvl(vn_qtde,0);
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_g130 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_g130;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro g140
function fkg_qtde_linha_reg_g140
         return number
is
   --
   vn_fase         number := 0;
   vn_qtde         number := 0;
   vn_indice       pls_integer := 0;
   vn_indice_bi    pls_integer := 0;
   vn_indice_tri   pls_integer := 0;
   vn_indice_tetra pls_integer := 0;
   --
begin
   --
   vn_fase   := 1;
   vn_indice := nvl(vt_tetra_tab_reg_g140.first,0);
   vn_qtde   := 0;
   vn_fase   := 2;
   --
   loop
      --
      vn_fase := 3;
      --
      if nvl(vn_indice,0) = 0 then
         exit;
      end if;
      --
      vn_fase := 4;
      --
      vn_indice_bi := nvl(vt_tetra_tab_reg_g140(vn_indice).first,0);
      --
      vn_fase := 5;
      --
      loop
         --
         vn_fase := 6;
         --
         if nvl(vn_indice_bi,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 7;
         --
         vn_indice_tri := nvl(vt_tetra_tab_reg_g140(vn_indice)(vn_indice_bi).first,0);
         --
         vn_fase := 7.1;
         --
         loop
            --
            vn_fase := 7.2;
            --
            if nvl(vn_indice_tri,0) = 0 then
               exit;
            end if;
            --
            vn_fase := 7.3;
            --
            vn_indice_tetra := nvl(vt_tetra_tab_reg_g140(vn_indice)(vn_indice_bi)(vn_indice_tri).first,0);
            --
            vn_fase := 7.4;
            --
            loop
               --
               vn_fase := 7.5;
               --
               if nvl(vn_indice_tetra,0) = 0 then
                  exit;
               end if;
               --
               vn_fase := 7.6;
               --
               vn_qtde := nvl(vn_qtde,0) + 1;
               --
               vn_fase := 7.7;
               --
               if vn_indice_tetra = vt_tetra_tab_reg_g140(vn_indice)(vn_indice_bi)(vn_indice_tri).last then
                  exit;
               else
                  vn_indice_tetra := vt_tetra_tab_reg_g140(vn_indice)(vn_indice_bi)(vn_indice_tri).next(vn_indice_tetra);
               end if;
               --
            end loop;
            --
            vn_fase := 7.8;
            --
            if vn_indice_tri = vt_tetra_tab_reg_g140(vn_indice)(vn_indice_bi).last then
               exit;
            else
               vn_indice_tri := vt_tetra_tab_reg_g140(vn_indice)(vn_indice_bi).next(vn_indice_tri);
            end if;
            --
         end loop;
         --
         vn_fase := 8;
         --
         if vn_indice_bi = vt_tetra_tab_reg_g140(vn_indice).last then
            exit;
         else
            vn_indice_bi := vt_tetra_tab_reg_g140(vn_indice).next(vn_indice_bi);
         end if;
         --
      end loop;
      --
      vn_fase := 9;
      --
      if vn_indice = vt_tetra_tab_reg_g140.last then
         exit;
      else
         vn_indice := vt_tetra_tab_reg_g140.next(vn_indice);
      end if;
      --
   end loop;
   --
   vn_fase := 10;
   --
   return nvl(vn_qtde,0);
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_g140 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_g140;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro g990
function fkg_qtde_linha_reg_g990
         return number
is
   --
   vn_fase  number := 0;
   vn_qtde  number := 0;
   --
begin
   --
   vn_fase := 1;
   vn_qtde := nvl(vt_tab_reg_g990.count,0);
   vn_fase := 2;
   --
   return vn_qtde;
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_g990 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_g990;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro h001
function fkg_qtde_linha_reg_h001
         return number
is
   --
   vn_fase  number := 0;
   vn_qtde  number := 0;
   --
begin
   --
   vn_fase := 1;
   vn_qtde := nvl(vt_tab_reg_h001.count,0);
   vn_fase := 2;
   --
   return vn_qtde;
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_h001 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_h001;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro h005
function fkg_qtde_linha_reg_h005
         return number
is
   --
   vn_fase  number := 0;
   vn_qtde  number := 0;
   --
begin
   --
   vn_fase := 1;
   vn_qtde := nvl(vt_tab_reg_h005.count,0);
   vn_fase := 2;
   --
   return vn_qtde;
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_h005 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_h005;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro h010
function fkg_qtde_linha_reg_h010
         return number
is
   --
   vn_fase       number := 0;
   vn_qtde       number := 0;
   vn_indice     pls_integer := 0;
   vn_indice_bi  pls_integer := 0;
   --
begin
   --
   vn_fase   := 1;
   vn_indice := nvl(vt_bi_tab_reg_h010.first,0);
   vn_qtde   := 0;
   vn_fase   := 2;
   --
   loop
      --
      vn_fase := 3;
      --
      if nvl(vn_indice,0) = 0 then
         exit;
      end if;
      --
      vn_fase := 4;
      --
      vn_indice_bi := nvl(vt_bi_tab_reg_h010(vn_indice).first,0);
      --
      vn_fase := 5;
      --
      loop
         --
         vn_fase := 6;
         --
         if nvl(vn_indice_bi,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 7;
         --
         vn_qtde := nvl(vn_qtde,0) + 1;
         --
         vn_fase := 8;
         --
         if vn_indice_bi = vt_bi_tab_reg_h010(vn_indice).last then
            exit;
         else
            vn_indice_bi := vt_bi_tab_reg_h010(vn_indice).next(vn_indice_bi);
         end if;
         --
      end loop;
      --
      vn_fase := 9;
      --
      if vn_indice = vt_bi_tab_reg_h010.last then
         exit;
      else
         vn_indice := vt_bi_tab_reg_h010.next(vn_indice);
      end if;
      --
   end loop;
   --
   vn_fase := 10;
   --
   return nvl(vn_qtde,0);
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_h010 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_h010;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro h020
function fkg_qtde_linha_reg_h020
         return number
is
   --
   vn_fase       number := 0;
   vn_qtde       number := 0;
   vn_indice     pls_integer := 0;
   vn_indice_bi  pls_integer := 0;
   vn_indice_tri pls_integer := 0;
   --
begin
   --
   vn_fase   := 1;
   vn_indice := nvl(vt_tri_tab_reg_h020.first,0);
   vn_qtde   := 0;
   vn_fase   := 2;
   --
   loop
      --
      vn_fase := 3;
      --
      if nvl(vn_indice,0) = 0 then
         exit;
      end if;
      --
      vn_fase := 4;
      --
      vn_indice_bi := nvl(vt_tri_tab_reg_h020(vn_indice).first,0);
      --
      vn_fase := 5;
      --
      loop
         --
         vn_fase := 6;
         --
         if nvl(vn_indice_bi,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 7;
         --
         vn_indice_tri := nvl(vt_tri_tab_reg_h020(vn_indice)(vn_indice_bi).first,0);
         --
         vn_fase := 8;
         --
         loop
            --
            vn_fase := 9;
            --
            if nvl(vn_indice_tri,0) = 0 then
               exit;
            end if;
            --
            vn_fase := 10;
            --
            vn_qtde := nvl(vn_qtde,0) + 1;
            --
            vn_fase := 11;
            --
            if vn_indice_tri = vt_tri_tab_reg_h020(vn_indice)(vn_indice_bi).last then
               exit;
            else
               vn_indice_tri := vt_tri_tab_reg_h020(vn_indice)(vn_indice_bi).next(vn_indice_tri);
            end if;
            --
         end loop;
         --
         vn_fase := 12;
         --
         if vn_indice_bi = vt_tri_tab_reg_h020(vn_indice).last then
            exit;
         else
            vn_indice_bi := vt_tri_tab_reg_h020(vn_indice).next(vn_indice_bi);
         end if;
         --
      end loop;
      --
      vn_fase := 13;
      --
      if vn_indice = vt_tri_tab_reg_h020.last then
         exit;
      else
         vn_indice := vt_tri_tab_reg_h020.next(vn_indice);
      end if;
      --
   end loop;
   --
   vn_fase := 14;
   --
   return nvl(vn_qtde,0);
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_h020 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_h020;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro h990
function fkg_qtde_linha_reg_h990
         return number
is
   --
   vn_fase  number := 0;
   vn_qtde  number := 0;
   --
begin
   --
   vn_fase := 1;
   vn_qtde := nvl(vt_tab_reg_h990.count,0);
   vn_fase := 2;
   --
   return vn_qtde;
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_h990 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_h990;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro k001
function fkg_qtde_linha_reg_k001
         return number
is
   --
   vn_fase  number := 0;
   vn_qtde  number := 0;
   --
begin
   --
   vn_fase := 1;
   vn_qtde := nvl(vt_tab_reg_k001.count,0);
   vn_fase := 2;
   --
   return vn_qtde;
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_k001 fase('||vn_fase||'): '||sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id => vn_loggenerico_id
                                          , ev_mensagem       => gv_mensagem_log
                                          , ev_resumo         => null
                                          , en_tipo_log       => erro_de_sistema
                                          , en_referencia_id  => gt_row_abertura_efd.id
                                          , ev_obj_referencia => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_k001;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro k100
function fkg_qtde_linha_reg_k100
         return number
is
   --
   vn_fase  number := 0;
   vn_qtde  number := 0;
   --
begin
   --
   vn_fase := 1;
   vn_qtde := nvl(vt_tab_reg_k100.count,0);
   vn_fase := 2;
   --
   return vn_qtde;
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_k100 fase('||vn_fase||'): '||sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id => vn_loggenerico_id
                                          , ev_mensagem       => gv_mensagem_log
                                          , ev_resumo         => null
                                          , en_tipo_log       => erro_de_sistema
                                          , en_referencia_id  => gt_row_abertura_efd.id
                                          , ev_obj_referencia => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_k100;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro k200
function fkg_qtde_linha_reg_k200
         return number
is
   --
   vn_fase       number := 0;
   vn_qtde       number := 0;
   vn_indice     pls_integer := 0;
   vn_indice_bi  pls_integer := 0;
   --
begin
   --
   vn_fase   := 1;
   vn_indice := nvl(vt_bi_tab_reg_k200.first,0);
   vn_qtde   := 0;
   vn_fase   := 2;
   --
   loop
      --
      vn_fase := 3;
      --
      if nvl(vn_indice,0) = 0 then
         exit;
      end if;
      --
      vn_fase := 4;
      --
      vn_indice_bi := nvl(vt_bi_tab_reg_k200(vn_indice).first,0);
      --
      vn_fase := 5;
      --
      loop
         --
         vn_fase := 6;
         --
         if nvl(vn_indice_bi,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 7;
         --
         vn_qtde := nvl(vn_qtde,0) + 1;
         --
         vn_fase := 8;
         --
         if vn_indice_bi = vt_bi_tab_reg_k200(vn_indice).last then
            exit;
         else
            vn_indice_bi := vt_bi_tab_reg_k200(vn_indice).next(vn_indice_bi);
         end if;
         --
      end loop;
      --
      vn_fase := 9;
      --
      if vn_indice = vt_bi_tab_reg_k200.last then
         exit;
      else
         vn_indice := vt_bi_tab_reg_k200.next(vn_indice);
      end if;
      --
   end loop;
   --
   vn_fase := 10;
   --
   return nvl(vn_qtde,0);
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_k200 fase('||vn_fase||'): '||sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id => vn_loggenerico_id
                                          , ev_mensagem       => gv_mensagem_log
                                          , ev_resumo         => null
                                          , en_tipo_log       => erro_de_sistema
                                          , en_referencia_id  => gt_row_abertura_efd.id
                                          , ev_obj_referencia => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_k200;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro k210
function fkg_qtde_linha_reg_k210
         return number
is
   --
   vn_fase       number := 0;
   vn_qtde       number := 0;
   vn_indice     pls_integer := 0;
   vn_indice_bi  pls_integer := 0;
   --
begin
   --
   vn_fase   := 1;
   vn_indice := nvl(vt_bi_tab_reg_k210.first,0);
   vn_qtde   := 0;
   vn_fase   := 2;
   --
   loop
      --
      vn_fase := 3;
      --
      if nvl(vn_indice,0) = 0 then
         exit;
      end if;
      --
      vn_fase := 4;
      --
      vn_indice_bi := nvl(vt_bi_tab_reg_k210(vn_indice).first,0);
      --
      vn_fase := 5;
      --
      loop
         --
         vn_fase := 6;
         --
         if nvl(vn_indice_bi,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 7;
         --
         vn_qtde := nvl(vn_qtde,0) + 1;
         --
         vn_fase := 8;
         --
         if vn_indice_bi = vt_bi_tab_reg_k210(vn_indice).last then
            exit;
         else
            vn_indice_bi := vt_bi_tab_reg_k210(vn_indice).next(vn_indice_bi);
         end if;
         --
      end loop;
      --
      vn_fase := 9;
      --
      if vn_indice = vt_bi_tab_reg_k210.last then
         exit;
      else
         vn_indice := vt_bi_tab_reg_k210.next(vn_indice);
      end if;
      --
   end loop;
   --
   vn_fase := 10;
   --
   return nvl(vn_qtde,0);
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_k210 fase('||vn_fase||'): '||sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id => vn_loggenerico_id
                                          , ev_mensagem       => gv_mensagem_log
                                          , ev_resumo         => null
                                          , en_tipo_log       => erro_de_sistema
                                          , en_referencia_id  => gt_row_abertura_efd.id
                                          , ev_obj_referencia => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_k210;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro k235
function fkg_qtde_linha_reg_k215
         return number
is
   --
   vn_fase       number := 0;
   vn_qtde       number := 0;
   vn_indice     pls_integer := 0;
   vn_indice_bi  pls_integer := 0;
   vn_indice_tri pls_integer := 0;
   --
begin
   --
   vn_fase   := 1;
   vn_indice := nvl(vt_tri_tab_reg_k215.first,0);
   vn_qtde   := 0;
   vn_fase   := 2;
   --
   loop
      --
      vn_fase := 3;
      --
      if nvl(vn_indice,0) = 0 then
         exit;
      end if;
      --
      vn_fase := 4;
      --
      vn_indice_bi := nvl(vt_tri_tab_reg_k215(vn_indice).first,0);
      --
      vn_fase := 5;
      --
      loop
         --
         vn_fase := 6;
         --
         if nvl(vn_indice_bi,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 7;
         --
         vn_indice_tri := nvl(vt_tri_tab_reg_k215(vn_indice)(vn_indice_bi).first,0);
         --
         vn_fase := 8;
         --
         loop
            --
            vn_fase := 9;
            --
            if nvl(vn_indice_tri,0) = 0 then
               exit;
            end if;
            --
            vn_fase := 10;
            --
            vn_qtde := nvl(vn_qtde,0) + 1;
            --
            vn_fase := 11;
            --
            if vn_indice_tri = vt_tri_tab_reg_k215(vn_indice)(vn_indice_bi).last then
               exit;
            else
               vn_indice_tri := vt_tri_tab_reg_k215(vn_indice)(vn_indice_bi).next(vn_indice_tri);
            end if;
            --
         end loop;
         --
         vn_fase := 12;
         --
         if vn_indice_bi = vt_tri_tab_reg_k215(vn_indice).last then
            exit;
         else
            vn_indice_bi := vt_tri_tab_reg_k215(vn_indice).next(vn_indice_bi);
         end if;
         --
      end loop;
      --
      vn_fase := 13;
      --
      if vn_indice = vt_tri_tab_reg_k215.last then
         exit;
      else
         vn_indice := vt_tri_tab_reg_k215.next(vn_indice);
      end if;
      --
   end loop;
   --
   vn_fase := 14;
   --
   return nvl(vn_qtde,0);
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_k215 fase('||vn_fase||'): '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico.id%type;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id => vn_loggenerico_id
                                          , ev_mensagem       => gv_mensagem_log
                                          , ev_resumo         => null
                                          , en_tipo_log       => erro_de_sistema
                                          , en_referencia_id  => gt_row_abertura_efd.id
                                          , ev_obj_referencia => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_k215;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro k220
function fkg_qtde_linha_reg_k220
         return number
is
   --
   vn_fase       number := 0;
   vn_qtde       number := 0;
   vn_indice     pls_integer := 0;
   vn_indice_bi  pls_integer := 0;
   --
begin
   --
   vn_fase   := 1;
   vn_indice := nvl(vt_bi_tab_reg_k220.first,0);
   vn_qtde   := 0;
   vn_fase   := 2;
   --
   loop
      --
      vn_fase := 3;
      --
      if nvl(vn_indice,0) = 0 then
         exit;
      end if;
      --
      vn_fase := 4;
      --
      vn_indice_bi := nvl(vt_bi_tab_reg_k220(vn_indice).first,0);
      --
      vn_fase := 5;
      --
      loop
         --
         vn_fase := 6;
         --
         if nvl(vn_indice_bi,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 7;
         --
         vn_qtde := nvl(vn_qtde,0) + 1;
         --
         vn_fase := 8;
         --
         if vn_indice_bi = vt_bi_tab_reg_k220(vn_indice).last then
            exit;
         else
            vn_indice_bi := vt_bi_tab_reg_k220(vn_indice).next(vn_indice_bi);
         end if;
         --
      end loop;
      --
      vn_fase := 9;
      --
      if vn_indice = vt_bi_tab_reg_k220.last then
         exit;
      else
         vn_indice := vt_bi_tab_reg_k220.next(vn_indice);
      end if;
      --
   end loop;
   --
   vn_fase := 10;
   --
   return nvl(vn_qtde,0);
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_k220 fase('||vn_fase||'): '||sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id => vn_loggenerico_id
                                          , ev_mensagem       => gv_mensagem_log
                                          , ev_resumo         => null
                                          , en_tipo_log       => erro_de_sistema
                                          , en_referencia_id  => gt_row_abertura_efd.id
                                          , ev_obj_referencia => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_k220;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro k230
function fkg_qtde_linha_reg_k230
         return number
is
   --
   vn_fase       number := 0;
   vn_qtde       number := 0;
   vn_indice     pls_integer := 0;
   vn_indice_bi  pls_integer := 0;
   --
begin
   --
   vn_fase   := 1;
   vn_indice := nvl(vt_bi_tab_reg_k230.first,0);
   vn_qtde   := 0;
   vn_fase   := 2;
   --
   loop
      --
      vn_fase := 3;
      --
      if nvl(vn_indice,0) = 0 then
         exit;
      end if;
      --
      vn_fase := 4;
      --
      vn_indice_bi := nvl(vt_bi_tab_reg_k230(vn_indice).first,0);
      --
      vn_fase := 5;
      --
      loop
         --
         vn_fase := 6;
         --
         if nvl(vn_indice_bi,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 7;
         --
         vn_qtde := nvl(vn_qtde,0) + 1;
         --
         vn_fase := 8;
         --
         if vn_indice_bi = vt_bi_tab_reg_k230(vn_indice).last then
            exit;
         else
            vn_indice_bi := vt_bi_tab_reg_k230(vn_indice).next(vn_indice_bi);
         end if;
         --
      end loop;
      --
      vn_fase := 9;
      --
      if vn_indice = vt_bi_tab_reg_k230.last then
         exit;
      else
         vn_indice := vt_bi_tab_reg_k230.next(vn_indice);
      end if;
      --
   end loop;
   --
   vn_fase := 10;
   --
   return nvl(vn_qtde,0);
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_k230 fase('||vn_fase||'): '||sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id => vn_loggenerico_id
                                          , ev_mensagem       => gv_mensagem_log
                                          , ev_resumo         => null
                                          , en_tipo_log       => erro_de_sistema
                                          , en_referencia_id  => gt_row_abertura_efd.id
                                          , ev_obj_referencia => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_k230;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro k235
function fkg_qtde_linha_reg_k235
         return number
is
   --
   vn_fase       number := 0;
   vn_qtde       number := 0;
   vn_indice     pls_integer := 0;
   vn_indice_bi  pls_integer := 0;
   vn_indice_tri pls_integer := 0;
   --
begin
   --
   vn_fase   := 1;
   vn_indice := nvl(vt_tri_tab_reg_k235.first,0);
   vn_qtde   := 0;
   vn_fase   := 2;
   --
   loop
      --
      vn_fase := 3;
      --
      if nvl(vn_indice,0) = 0 then
         exit;
      end if;
      --
      vn_fase := 4;
      --
      vn_indice_bi := nvl(vt_tri_tab_reg_k235(vn_indice).first,0);
      --
      vn_fase := 5;
      --
      loop
         --
         vn_fase := 6;
         --
         if nvl(vn_indice_bi,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 7;
         --
         vn_indice_tri := nvl(vt_tri_tab_reg_k235(vn_indice)(vn_indice_bi).first,0);
         --
         vn_fase := 8;
         --
         loop
            --
            vn_fase := 9;
            --
            if nvl(vn_indice_tri,0) = 0 then
               exit;
            end if;
            --
            vn_fase := 10;
            --
            vn_qtde := nvl(vn_qtde,0) + 1;
            --
            vn_fase := 11;
            --
            if vn_indice_tri = vt_tri_tab_reg_k235(vn_indice)(vn_indice_bi).last then
               exit;
            else
               vn_indice_tri := vt_tri_tab_reg_k235(vn_indice)(vn_indice_bi).next(vn_indice_tri);
            end if;
            --
         end loop;
         --
         vn_fase := 12;
         --
         if vn_indice_bi = vt_tri_tab_reg_k235(vn_indice).last then
            exit;
         else
            vn_indice_bi := vt_tri_tab_reg_k235(vn_indice).next(vn_indice_bi);
         end if;
         --
      end loop;
      --
      vn_fase := 13;
      --
      if vn_indice = vt_tri_tab_reg_k235.last then
         exit;
      else
         vn_indice := vt_tri_tab_reg_k235.next(vn_indice);
      end if;
      --
   end loop;
   --
   vn_fase := 14;
   --
   return nvl(vn_qtde,0);
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_k235 fase('||vn_fase||'): '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico.id%type;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id => vn_loggenerico_id
                                          , ev_mensagem       => gv_mensagem_log
                                          , ev_resumo         => null
                                          , en_tipo_log       => erro_de_sistema
                                          , en_referencia_id  => gt_row_abertura_efd.id
                                          , ev_obj_referencia => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_k235;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro k250
function fkg_qtde_linha_reg_k250
         return number
is
   --
   vn_fase       number := 0;
   vn_qtde       number := 0;
   vn_indice     pls_integer := 0;
   vn_indice_bi  pls_integer := 0;
   --
begin
   --
   vn_fase   := 1;
   vn_indice := nvl(vt_bi_tab_reg_k250.first,0);
   vn_qtde   := 0;
   vn_fase   := 2;
   --
   loop
      --
      vn_fase := 3;
      --
      if nvl(vn_indice,0) = 0 then
         exit;
      end if;
      --
      vn_fase := 4;
      --
      vn_indice_bi := nvl(vt_bi_tab_reg_k250(vn_indice).first,0);
      --
      vn_fase := 5;
      --
      loop
         --
         vn_fase := 6;
         --
         if nvl(vn_indice_bi,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 7;
         --
         vn_qtde := nvl(vn_qtde,0) + 1;
         --
         vn_fase := 8;
         --
         if vn_indice_bi = vt_bi_tab_reg_k250(vn_indice).last then
            exit;
         else
            vn_indice_bi := vt_bi_tab_reg_k250(vn_indice).next(vn_indice_bi);
         end if;
         --
      end loop;
      --
      vn_fase := 9;
      --
      if vn_indice = vt_bi_tab_reg_k250.last then
         exit;
      else
         vn_indice := vt_bi_tab_reg_k250.next(vn_indice);
      end if;
      --
   end loop;
   --
   vn_fase := 10;
   --
   return nvl(vn_qtde,0);
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_k250 fase('||vn_fase||'): '||sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id => vn_loggenerico_id
                                          , ev_mensagem       => gv_mensagem_log
                                          , ev_resumo         => null
                                          , en_tipo_log       => erro_de_sistema
                                          , en_referencia_id  => gt_row_abertura_efd.id
                                          , ev_obj_referencia => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_k250;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro k255
function fkg_qtde_linha_reg_k255
         return number
is
   --
   vn_fase       number := 0;
   vn_qtde       number := 0;
   vn_indice     pls_integer := 0;
   vn_indice_bi  pls_integer := 0;
   vn_indice_tri pls_integer := 0;
   --
begin
   --
   vn_fase   := 1;
   vn_indice := nvl(vt_tri_tab_reg_k255.first,0);
   vn_qtde   := 0;
   vn_fase   := 2;
   --
   loop
      --
      vn_fase := 3;
      --
      if nvl(vn_indice,0) = 0 then
         exit;
      end if;
      --
      vn_fase := 4;
      --
      vn_indice_bi := nvl(vt_tri_tab_reg_k255(vn_indice).first,0);
      --
      vn_fase := 5;
      --
      loop
         --
         vn_fase := 6;
         --
         if nvl(vn_indice_bi,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 7;
         --
         vn_indice_tri := nvl(vt_tri_tab_reg_k255(vn_indice)(vn_indice_bi).first,0);
         --
         vn_fase := 8;
         --
         loop
            --
            vn_fase := 9;
            --
            if nvl(vn_indice_tri,0) = 0 then
               exit;
            end if;
            --
            vn_fase := 10;
            --
            vn_qtde := nvl(vn_qtde,0) + 1;
            --
            vn_fase := 11;
            --
            if vn_indice_tri = vt_tri_tab_reg_k255(vn_indice)(vn_indice_bi).last then
               exit;
            else
               vn_indice_tri := vt_tri_tab_reg_k255(vn_indice)(vn_indice_bi).next(vn_indice_tri);
            end if;
            --
         end loop;
         --
         vn_fase := 12;
         --
         if vn_indice_bi = vt_tri_tab_reg_k255(vn_indice).last then
            exit;
         else
            vn_indice_bi := vt_tri_tab_reg_k255(vn_indice).next(vn_indice_bi);
         end if;
         --
      end loop;
      --
      vn_fase := 13;
      --
      if vn_indice = vt_tri_tab_reg_k255.last then
         exit;
      else
         vn_indice := vt_tri_tab_reg_k255.next(vn_indice);
      end if;
      --
   end loop;
   --
   vn_fase := 14;
   --
   return nvl(vn_qtde,0);
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_k255 fase('||vn_fase||'): '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico.id%type;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id => vn_loggenerico_id
                                          , ev_mensagem       => gv_mensagem_log
                                          , ev_resumo         => null
                                          , en_tipo_log       => erro_de_sistema
                                          , en_referencia_id  => gt_row_abertura_efd.id
                                          , ev_obj_referencia => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_k255;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro k260
function fkg_qtde_linha_reg_k260
         return number
is
   --
   vn_fase       number := 0;
   vn_qtde       number := 0;
   vn_indice     pls_integer := 0;
   vn_indice_bi  pls_integer := 0;
   --
begin
   --
   vn_fase   := 1;
   vn_indice := nvl(vt_bi_tab_reg_k260.first,0);
   vn_qtde   := 0;
   vn_fase   := 2;
   --
   loop
      --
      vn_fase := 3;
      --
      if nvl(vn_indice,0) = 0 then
         exit;
      end if;
      --
      vn_fase := 4;
      --
      vn_indice_bi := nvl(vt_bi_tab_reg_k260(vn_indice).first,0);
      --
      vn_fase := 5;
      --
      loop
         --
         vn_fase := 6;
         --
         if nvl(vn_indice_bi,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 7;
         --
         vn_qtde := nvl(vn_qtde,0) + 1;
         --
         vn_fase := 8;
         --
         if vn_indice_bi = vt_bi_tab_reg_k260(vn_indice).last then
            exit;
         else
            vn_indice_bi := vt_bi_tab_reg_k260(vn_indice).next(vn_indice_bi);
         end if;
         --
      end loop;
      --
      vn_fase := 9;
      --
      if vn_indice = vt_bi_tab_reg_k260.last then
         exit;
      else
         vn_indice := vt_bi_tab_reg_k260.next(vn_indice);
      end if;
      --
   end loop;
   --
   vn_fase := 10;
   --
   return nvl(vn_qtde,0);
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_k260 fase('||vn_fase||'): '||sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id => vn_loggenerico_id
                                          , ev_mensagem       => gv_mensagem_log
                                          , ev_resumo         => null
                                          , en_tipo_log       => erro_de_sistema
                                          , en_referencia_id  => gt_row_abertura_efd.id
                                          , ev_obj_referencia => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_k260;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro k265
function fkg_qtde_linha_reg_k265
         return number
is
   --
   vn_fase       number := 0;
   vn_qtde       number := 0;
   vn_indice     pls_integer := 0;
   vn_indice_bi  pls_integer := 0;
   vn_indice_tri pls_integer := 0;
   --
begin
   --
   vn_fase   := 1;
   vn_indice := nvl(vt_tri_tab_reg_k265.first,0);
   vn_qtde   := 0;
   vn_fase   := 2;
   --
   loop
      --
      vn_fase := 3;
      --
      if nvl(vn_indice,0) = 0 then
         exit;
      end if;
      --
      vn_fase := 4;
      --
      vn_indice_bi := nvl(vt_tri_tab_reg_k265(vn_indice).first,0);
      --
      vn_fase := 5;
      --
      loop
         --
         vn_fase := 6;
         --
         if nvl(vn_indice_bi,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 7;
         --
         vn_indice_tri := nvl(vt_tri_tab_reg_k265(vn_indice)(vn_indice_bi).first,0);
         --
         vn_fase := 8;
         --
         loop
            --
            vn_fase := 9;
            --
            if nvl(vn_indice_tri,0) = 0 then
               exit;
            end if;
            --
            vn_fase := 10;
            --
            vn_qtde := nvl(vn_qtde,0) + 1;
            --
            vn_fase := 11;
            --
            if vn_indice_tri = vt_tri_tab_reg_k265(vn_indice)(vn_indice_bi).last then
               exit;
            else
               vn_indice_tri := vt_tri_tab_reg_k265(vn_indice)(vn_indice_bi).next(vn_indice_tri);
            end if;
            --
         end loop;
         --
         vn_fase := 12;
         --
         if vn_indice_bi = vt_tri_tab_reg_k265(vn_indice).last then
            exit;
         else
            vn_indice_bi := vt_tri_tab_reg_k265(vn_indice).next(vn_indice_bi);
         end if;
         --
      end loop;
      --
      vn_fase := 13;
      --
      if vn_indice = vt_tri_tab_reg_k265.last then
         exit;
      else
         vn_indice := vt_tri_tab_reg_k265.next(vn_indice);
      end if;
      --
   end loop;
   --
   vn_fase := 14;
   --
   return nvl(vn_qtde,0);
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_k265 fase('||vn_fase||'): '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico.id%type;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id => vn_loggenerico_id
                                          , ev_mensagem       => gv_mensagem_log
                                          , ev_resumo         => null
                                          , en_tipo_log       => erro_de_sistema
                                          , en_referencia_id  => gt_row_abertura_efd.id
                                          , ev_obj_referencia => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_k265;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro k270
function fkg_qtde_linha_reg_k270
         return number
is
   --
   vn_fase       number := 0;
   vn_qtde       number := 0;
   vn_indice     pls_integer := 0;
   vn_indice_bi  pls_integer := 0;
   --
begin
   --
   vn_fase   := 1;
   vn_indice := nvl(vt_bi_tab_reg_k270.first,0);
   vn_qtde   := 0;
   vn_fase   := 2;
   --
   loop
      --
      vn_fase := 3;
      --
      if nvl(vn_indice,0) = 0 then
         exit;
      end if;
      --
      vn_fase := 4;
      --
      vn_indice_bi := nvl(vt_bi_tab_reg_k270(vn_indice).first,0);
      --
      vn_fase := 5;
      --
      loop
         --
         vn_fase := 6;
         --
         if nvl(vn_indice_bi,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 7;
         --
         vn_qtde := nvl(vn_qtde,0) + 1;
         --
         vn_fase := 8;
         --
         if vn_indice_bi = vt_bi_tab_reg_k270(vn_indice).last then
            exit;
         else
            vn_indice_bi := vt_bi_tab_reg_k270(vn_indice).next(vn_indice_bi);
         end if;
         --
      end loop;
      --
      vn_fase := 9;
      --
      if vn_indice = vt_bi_tab_reg_k270.last then
         exit;
      else
         vn_indice := vt_bi_tab_reg_k270.next(vn_indice);
      end if;
      --
   end loop;
   --
   vn_fase := 10;
   --
   return nvl(vn_qtde,0);
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_k270 fase('||vn_fase||'): '||sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id => vn_loggenerico_id
                                          , ev_mensagem       => gv_mensagem_log
                                          , ev_resumo         => null
                                          , en_tipo_log       => erro_de_sistema
                                          , en_referencia_id  => gt_row_abertura_efd.id
                                          , ev_obj_referencia => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_k270;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro k275
function fkg_qtde_linha_reg_k275
         return number
is
   --
   vn_fase       number := 0;
   vn_qtde       number := 0;
   vn_indice     pls_integer := 0;
   vn_indice_bi  pls_integer := 0;
   vn_indice_tri pls_integer := 0;
   --
begin
   --
   vn_fase   := 1;
   vn_indice := nvl(vt_tri_tab_reg_k275.first,0);
   vn_qtde   := 0;
   vn_fase   := 2;
   --
   loop
      --
      vn_fase := 3;
      --
      if nvl(vn_indice,0) = 0 then
         exit;
      end if;
      --
      vn_fase := 4;
      --
      vn_indice_bi := nvl(vt_tri_tab_reg_k275(vn_indice).first,0);
      --
      vn_fase := 5;
      --
      loop
         --
         vn_fase := 6;
         --
         if nvl(vn_indice_bi,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 7;
         --
         vn_indice_tri := nvl(vt_tri_tab_reg_k275(vn_indice)(vn_indice_bi).first,0);
         --
         vn_fase := 8;
         --
         loop
            --
            vn_fase := 9;
            --
            if nvl(vn_indice_tri,0) = 0 then
               exit;
            end if;
            --
            vn_fase := 10;
            --
            vn_qtde := nvl(vn_qtde,0) + 1;
            --
            vn_fase := 11;
            --
            if vn_indice_tri = vt_tri_tab_reg_k275(vn_indice)(vn_indice_bi).last then
               exit;
            else
               vn_indice_tri := vt_tri_tab_reg_k275(vn_indice)(vn_indice_bi).next(vn_indice_tri);
            end if;
            --
         end loop;
         --
         vn_fase := 12;
         --
         if vn_indice_bi = vt_tri_tab_reg_k275(vn_indice).last then
            exit;
         else
            vn_indice_bi := vt_tri_tab_reg_k275(vn_indice).next(vn_indice_bi);
         end if;
         --
      end loop;
      --
      vn_fase := 13;
      --
      if vn_indice = vt_tri_tab_reg_k275.last then
         exit;
      else
         vn_indice := vt_tri_tab_reg_k275.next(vn_indice);
      end if;
      --
   end loop;
   --
   vn_fase := 14;
   --
   return nvl(vn_qtde,0);
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_k275 fase('||vn_fase||'): '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico.id%type;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id => vn_loggenerico_id
                                          , ev_mensagem       => gv_mensagem_log
                                          , ev_resumo         => null
                                          , en_tipo_log       => erro_de_sistema
                                          , en_referencia_id  => gt_row_abertura_efd.id
                                          , ev_obj_referencia => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_k275;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro k280
function fkg_qtde_linha_reg_k280
         return number
is
   --
   vn_fase       number := 0;
   vn_qtde       number := 0;
   vn_indice     pls_integer := 0;
   vn_indice_bi  pls_integer := 0;
   --
begin
   --
   vn_fase   := 1;
   vn_indice := nvl(vt_bi_tab_reg_k280.first,0);
   vn_qtde   := 0;
   vn_fase   := 2;
   --
   loop
      --
      vn_fase := 3;
      --
      if nvl(vn_indice,0) = 0 then
         exit;
      end if;
      --
      vn_fase := 4;
      --
      vn_indice_bi := nvl(vt_bi_tab_reg_k280(vn_indice).first,0);
      --
      vn_fase := 5;
      --
      loop
         --
         vn_fase := 6;
         --
         if nvl(vn_indice_bi,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 7;
         --
         vn_qtde := nvl(vn_qtde,0) + 1;
         --
         vn_fase := 8;
         --
         if vn_indice_bi = vt_bi_tab_reg_k280(vn_indice).last then
            exit;
         else
            vn_indice_bi := vt_bi_tab_reg_k280(vn_indice).next(vn_indice_bi);
         end if;
         --
      end loop;
      --
      vn_fase := 9;
      --
      if vn_indice = vt_bi_tab_reg_k280.last then
         exit;
      else
         vn_indice := vt_bi_tab_reg_k280.next(vn_indice);
      end if;
      --
   end loop;
   --
   vn_fase := 10;
   --
   return nvl(vn_qtde,0);
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_k280 fase('||vn_fase||'): '||sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id => vn_loggenerico_id
                                          , ev_mensagem       => gv_mensagem_log
                                          , ev_resumo         => null
                                          , en_tipo_log       => erro_de_sistema
                                          , en_referencia_id  => gt_row_abertura_efd.id
                                          , ev_obj_referencia => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_k280;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro k290
function fkg_qtde_linha_reg_k290
         return number
is
   --
   vn_fase       number := 0;
   vn_qtde       number := 0;
   vn_indice     pls_integer := 0;
   vn_indice_bi  pls_integer := 0;
   --
begin
   --
   vn_fase   := 1;
   vn_indice := nvl(vt_bi_tab_reg_k290.first,0);
   vn_qtde   := 0;
   vn_fase   := 2;
   --
   loop
      --
      vn_fase := 3;
      --
      if nvl(vn_indice,0) = 0 then
         exit;
      end if;
      --
      vn_fase := 4;
      --
      vn_indice_bi := nvl(vt_bi_tab_reg_k290(vn_indice).first,0);
      --
      vn_fase := 5;
      --
      loop
         --
         vn_fase := 6;
         --
         if nvl(vn_indice_bi,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 7;
         --
         vn_qtde := nvl(vn_qtde,0) + 1;
         --
         vn_fase := 8;
         --
         if vn_indice_bi = vt_bi_tab_reg_k290(vn_indice).last then
            exit;
         else
            vn_indice_bi := vt_bi_tab_reg_k290(vn_indice).next(vn_indice_bi);
         end if;
         --
      end loop;
      --
      vn_fase := 9;
      --
      if vn_indice = vt_bi_tab_reg_k290.last then
         exit;
      else
         vn_indice := vt_bi_tab_reg_k290.next(vn_indice);
      end if;
      --
   end loop;
   --
   vn_fase := 10;
   --
   return nvl(vn_qtde,0);
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_k290 fase('||vn_fase||'): '||sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id => vn_loggenerico_id
                                          , ev_mensagem       => gv_mensagem_log
                                          , ev_resumo         => null
                                          , en_tipo_log       => erro_de_sistema
                                          , en_referencia_id  => gt_row_abertura_efd.id
                                          , ev_obj_referencia => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_k290;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro k291
function fkg_qtde_linha_reg_k291
         return number
is
   --
   vn_fase       number := 0;
   vn_qtde       number := 0;
   vn_indice     pls_integer := 0;
   vn_indice_bi  pls_integer := 0;
   vn_indice_tri pls_integer := 0;
   --
begin
   --
   vn_fase   := 1;
   vn_indice := nvl(vt_tri_tab_reg_k291.first,0);
   vn_qtde   := 0;
   vn_fase   := 2;
   --
   loop
      --
      vn_fase := 3;
      --
      if nvl(vn_indice,0) = 0 then
         exit;
      end if;
      --
      vn_fase := 4;
      --
      vn_indice_bi := nvl(vt_tri_tab_reg_k291(vn_indice).first,0);
      --
      vn_fase := 5;
      --
      loop
         --
         vn_fase := 6;
         --
         if nvl(vn_indice_bi,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 7;
         --
         vn_indice_tri := nvl(vt_tri_tab_reg_k291(vn_indice)(vn_indice_bi).first,0);
         --
         vn_fase := 8;
         --
         loop
            --
            vn_fase := 9;
            --
            if nvl(vn_indice_tri,0) = 0 then
               exit;
            end if;
            --
            vn_fase := 10;
            --
            vn_qtde := nvl(vn_qtde,0) + 1;
            --
            vn_fase := 11;
            --
            if vn_indice_tri = vt_tri_tab_reg_k291(vn_indice)(vn_indice_bi).last then
               exit;
            else
               vn_indice_tri := vt_tri_tab_reg_k291(vn_indice)(vn_indice_bi).next(vn_indice_tri);
            end if;
            --
         end loop;
         --
         vn_fase := 12;
         --
         if vn_indice_bi = vt_tri_tab_reg_k291(vn_indice).last then
            exit;
         else
            vn_indice_bi := vt_tri_tab_reg_k291(vn_indice).next(vn_indice_bi);
         end if;
         --
      end loop;
      --
      vn_fase := 13;
      --
      if vn_indice = vt_tri_tab_reg_k291.last then
         exit;
      else
         vn_indice := vt_tri_tab_reg_k291.next(vn_indice);
      end if;
      --
   end loop;
   --
   vn_fase := 14;
   --
   return nvl(vn_qtde,0);
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_k291 fase('||vn_fase||'): '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico.id%type;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id => vn_loggenerico_id
                                          , ev_mensagem       => gv_mensagem_log
                                          , ev_resumo         => null
                                          , en_tipo_log       => erro_de_sistema
                                          , en_referencia_id  => gt_row_abertura_efd.id
                                          , ev_obj_referencia => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_k291;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro k292
function fkg_qtde_linha_reg_k292
         return number
is
   --
   vn_fase       number := 0;
   vn_qtde       number := 0;
   vn_indice     pls_integer := 0;
   vn_indice_bi  pls_integer := 0;
   vn_indice_tri pls_integer := 0;
   --
begin
   --
   vn_fase   := 1;
   vn_indice := nvl(vt_tri_tab_reg_k292.first,0);
   vn_qtde   := 0;
   vn_fase   := 2;
   --
   loop
      --
      vn_fase := 3;
      --
      if nvl(vn_indice,0) = 0 then
         exit;
      end if;
      --
      vn_fase := 4;
      --
      vn_indice_bi := nvl(vt_tri_tab_reg_k292(vn_indice).first,0);
      --
      vn_fase := 5;
      --
      loop
         --
         vn_fase := 6;
         --
         if nvl(vn_indice_bi,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 7;
         --
         vn_indice_tri := nvl(vt_tri_tab_reg_k292(vn_indice)(vn_indice_bi).first,0);
         --
         vn_fase := 8;
         --
         loop
            --
            vn_fase := 9;
            --
            if nvl(vn_indice_tri,0) = 0 then
               exit;
            end if;
            --
            vn_fase := 10;
            --
            vn_qtde := nvl(vn_qtde,0) + 1;
            --
            vn_fase := 11;
            --
            if vn_indice_tri = vt_tri_tab_reg_k292(vn_indice)(vn_indice_bi).last then
               exit;
            else
               vn_indice_tri := vt_tri_tab_reg_k292(vn_indice)(vn_indice_bi).next(vn_indice_tri);
            end if;
            --
         end loop;
         --
         vn_fase := 12;
         --
         if vn_indice_bi = vt_tri_tab_reg_k292(vn_indice).last then
            exit;
         else
            vn_indice_bi := vt_tri_tab_reg_k292(vn_indice).next(vn_indice_bi);
         end if;
         --
      end loop;
      --
      vn_fase := 13;
      --
      if vn_indice = vt_tri_tab_reg_k292.last then
         exit;
      else
         vn_indice := vt_tri_tab_reg_k292.next(vn_indice);
      end if;
      --
   end loop;
   --
   vn_fase := 14;
   --
   return nvl(vn_qtde,0);
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_k292 fase('||vn_fase||'): '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico.id%type;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id => vn_loggenerico_id
                                          , ev_mensagem       => gv_mensagem_log
                                          , ev_resumo         => null
                                          , en_tipo_log       => erro_de_sistema
                                          , en_referencia_id  => gt_row_abertura_efd.id
                                          , ev_obj_referencia => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_k292;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro k300
function fkg_qtde_linha_reg_k300
         return number
is
   --
   vn_fase       number := 0;
   vn_qtde       number := 0;
   vn_indice     pls_integer := 0;
   vn_indice_bi  pls_integer := 0;
   --
begin
   --
   vn_fase   := 1;
   vn_indice := nvl(vt_bi_tab_reg_k300.first,0);
   vn_qtde   := 0;
   vn_fase   := 2;
   --
   loop
      --
      vn_fase := 3;
      --
      if nvl(vn_indice,0) = 0 then
         exit;
      end if;
      --
      vn_fase := 4;
      --
      vn_indice_bi := nvl(vt_bi_tab_reg_k300(vn_indice).first,0);
      --
      vn_fase := 5;
      --
      loop
         --
         vn_fase := 6;
         --
         if nvl(vn_indice_bi,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 7;
         --
         vn_qtde := nvl(vn_qtde,0) + 1;
         --
         vn_fase := 8;
         --
         if vn_indice_bi = vt_bi_tab_reg_k300(vn_indice).last then
            exit;
         else
            vn_indice_bi := vt_bi_tab_reg_k300(vn_indice).next(vn_indice_bi);
         end if;
         --
      end loop;
      --
      vn_fase := 9;
      --
      if vn_indice = vt_bi_tab_reg_k300.last then
         exit;
      else
         vn_indice := vt_bi_tab_reg_k300.next(vn_indice);
      end if;
      --
   end loop;
   --
   vn_fase := 10;
   --
   return nvl(vn_qtde,0);
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_k300 fase('||vn_fase||'): '||sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id => vn_loggenerico_id
                                          , ev_mensagem       => gv_mensagem_log
                                          , ev_resumo         => null
                                          , en_tipo_log       => erro_de_sistema
                                          , en_referencia_id  => gt_row_abertura_efd.id
                                          , ev_obj_referencia => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_k300;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro k301
function fkg_qtde_linha_reg_k301
         return number
is
   --
   vn_fase       number := 0;
   vn_qtde       number := 0;
   vn_indice     pls_integer := 0;
   vn_indice_bi  pls_integer := 0;
   vn_indice_tri pls_integer := 0;
   --
begin
   --
   vn_fase   := 1;
   vn_indice := nvl(vt_tri_tab_reg_k301.first,0);
   vn_qtde   := 0;
   vn_fase   := 2;
   --
   loop
      --
      vn_fase := 3;
      --
      if nvl(vn_indice,0) = 0 then
         exit;
      end if;
      --
      vn_fase := 4;
      --
      vn_indice_bi := nvl(vt_tri_tab_reg_k301(vn_indice).first,0);
      --
      vn_fase := 5;
      --
      loop
         --
         vn_fase := 6;
         --
         if nvl(vn_indice_bi,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 7;
         --
         vn_indice_tri := nvl(vt_tri_tab_reg_k301(vn_indice)(vn_indice_bi).first,0);
         --
         vn_fase := 8;
         --
         loop
            --
            vn_fase := 9;
            --
            if nvl(vn_indice_tri,0) = 0 then
               exit;
            end if;
            --
            vn_fase := 10;
            --
            vn_qtde := nvl(vn_qtde,0) + 1;
            --
            vn_fase := 11;
            --
            if vn_indice_tri = vt_tri_tab_reg_k301(vn_indice)(vn_indice_bi).last then
               exit;
            else
               vn_indice_tri := vt_tri_tab_reg_k301(vn_indice)(vn_indice_bi).next(vn_indice_tri);
            end if;
            --
         end loop;
         --
         vn_fase := 12;
         --
         if vn_indice_bi = vt_tri_tab_reg_k301(vn_indice).last then
            exit;
         else
            vn_indice_bi := vt_tri_tab_reg_k301(vn_indice).next(vn_indice_bi);
         end if;
         --
      end loop;
      --
      vn_fase := 13;
      --
      if vn_indice = vt_tri_tab_reg_k301.last then
         exit;
      else
         vn_indice := vt_tri_tab_reg_k301.next(vn_indice);
      end if;
      --
   end loop;
   --
   vn_fase := 14;
   --
   return nvl(vn_qtde,0);
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_k301 fase('||vn_fase||'): '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico.id%type;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id => vn_loggenerico_id
                                          , ev_mensagem       => gv_mensagem_log
                                          , ev_resumo         => null
                                          , en_tipo_log       => erro_de_sistema
                                          , en_referencia_id  => gt_row_abertura_efd.id
                                          , ev_obj_referencia => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_k301;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro k302
function fkg_qtde_linha_reg_k302
         return number
is
   --
   vn_fase       number := 0;
   vn_qtde       number := 0;
   vn_indice     pls_integer := 0;
   vn_indice_bi  pls_integer := 0;
   vn_indice_tri pls_integer := 0;
   --
begin
   --
   vn_fase   := 1;
   vn_indice := nvl(vt_tri_tab_reg_k302.first,0);
   vn_qtde   := 0;
   vn_fase   := 2;
   --
   loop
      --
      vn_fase := 3;
      --
      if nvl(vn_indice,0) = 0 then
         exit;
      end if;
      --
      vn_fase := 4;
      --
      vn_indice_bi := nvl(vt_tri_tab_reg_k302(vn_indice).first,0);
      --
      vn_fase := 5;
      --
      loop
         --
         vn_fase := 6;
         --
         if nvl(vn_indice_bi,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 7;
         --
         vn_indice_tri := nvl(vt_tri_tab_reg_k302(vn_indice)(vn_indice_bi).first,0);
         --
         vn_fase := 8;
         --
         loop
            --
            vn_fase := 9;
            --
            if nvl(vn_indice_tri,0) = 0 then
               exit;
            end if;
            --
            vn_fase := 10;
            --
            vn_qtde := nvl(vn_qtde,0) + 1;
            --
            vn_fase := 11;
            --
            if vn_indice_tri = vt_tri_tab_reg_k302(vn_indice)(vn_indice_bi).last then
               exit;
            else
               vn_indice_tri := vt_tri_tab_reg_k302(vn_indice)(vn_indice_bi).next(vn_indice_tri);
            end if;
            --
         end loop;
         --
         vn_fase := 12;
         --
         if vn_indice_bi = vt_tri_tab_reg_k302(vn_indice).last then
            exit;
         else
            vn_indice_bi := vt_tri_tab_reg_k302(vn_indice).next(vn_indice_bi);
         end if;
         --
      end loop;
      --
      vn_fase := 13;
      --
      if vn_indice = vt_tri_tab_reg_k302.last then
         exit;
      else
         vn_indice := vt_tri_tab_reg_k302.next(vn_indice);
      end if;
      --
   end loop;
   --
   vn_fase := 14;
   --
   return nvl(vn_qtde,0);
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_k302 fase('||vn_fase||'): '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico.id%type;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id => vn_loggenerico_id
                                          , ev_mensagem       => gv_mensagem_log
                                          , ev_resumo         => null
                                          , en_tipo_log       => erro_de_sistema
                                          , en_referencia_id  => gt_row_abertura_efd.id
                                          , ev_obj_referencia => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_k302;

-------------------------------------------------------------------------------------------------------


-- Função retorna a quantidade de linhas do registro k990
function fkg_qtde_linha_reg_k990
         return number
is
   --
   vn_fase  number := 0;
   vn_qtde  number := 0;
   --
begin
   --
   vn_fase := 1;
   vn_qtde := nvl(vt_tab_reg_k990.count,0);
   vn_fase := 2;
   --
   return vn_qtde;
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_k990 fase('||vn_fase||'): '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico.id%type;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id => vn_loggenerico_id
                                          , ev_mensagem       => gv_mensagem_log
                                          , ev_resumo         => null
                                          , en_tipo_log       => erro_de_sistema
                                          , en_referencia_id  => gt_row_abertura_efd.id
                                          , ev_obj_referencia => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_k990;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro 1001
function fkg_qtde_linha_reg_1001
         return number
is
   --
   vn_fase  number := 0;
   vn_qtde  number := 0;
   --
begin
   --
   vn_fase := 1;
   vn_qtde := nvl(vt_tab_reg_1001.count,0);
   vn_fase := 2;
   --
   return vn_qtde;
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_1001 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_1001;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro 1010
function fkg_qtde_linha_reg_1010
         return number
is
   --
   vn_fase  number := 0;
   vn_qtde  number := 0;
   --
begin
   --
   vn_fase := 1;
   vn_qtde := nvl(vt_tab_reg_1010.count,0);
   vn_fase := 2;
   --
   return vn_qtde;
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_1010 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_1010;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro 1100
function fkg_qtde_linha_reg_1100
         return number
is
   --
   vn_fase  number := 0;
   vn_qtde  number := 0;
   --
begin
   --
   vn_fase := 1;
   vn_qtde := nvl(vt_tab_reg_1100.count,0);
   vn_fase := 2;
   --
   return vn_qtde;
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_1100 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_1100;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro 1105
function fkg_qtde_linha_reg_1105
         return number
is
   --
   vn_fase       number := 0;
   vn_qtde       number := 0;
   vn_indice     pls_integer := 0;
   vn_indice_bi  pls_integer := 0;
   --
begin
   --
   vn_fase   := 1;
   vn_indice := nvl(vt_bi_tab_reg_1105.first,0);
   vn_qtde   := 0;
   vn_fase   := 2;
   --
   loop
      --
      vn_fase := 3;
      --
      if nvl(vn_indice,0) = 0 then
         exit;
      end if;
      --
      vn_fase := 4;
      --
      vn_indice_bi := nvl(vt_bi_tab_reg_1105(vn_indice).first,0);
      --
      vn_fase := 5;
      --
      loop
         --
         vn_fase := 6;
         --
         if nvl(vn_indice_bi,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 7;
         --
         vn_qtde := nvl(vn_qtde,0) + 1;
         --
         vn_fase := 8;
         --
         if vn_indice_bi = vt_bi_tab_reg_1105(vn_indice).last then
            exit;
         else
            vn_indice_bi := vt_bi_tab_reg_1105(vn_indice).next(vn_indice_bi);
         end if;
         --
      end loop;
      --
      vn_fase := 9;
      --
      if vn_indice = vt_bi_tab_reg_1105.last then
         exit;
      else
         vn_indice := vt_bi_tab_reg_1105.next(vn_indice);
      end if;
      --
   end loop;
   --
   vn_fase := 10;
   --
   return nvl(vn_qtde,0);
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_1105 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_1105;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro 1110
function fkg_qtde_linha_reg_1110
         return number
is
   --
   vn_fase       number := 0;
   vn_qtde       number := 0;
   vn_indice     pls_integer := 0;
   vn_indice_bi  pls_integer := 0;
   vn_indice_tri pls_integer := 0;
   --
begin
   --
   vn_fase   := 1;
   vn_indice := nvl(vt_tri_tab_reg_1110.first,0);
   vn_qtde   := 0;
   vn_fase   := 2;
   --
   loop
      --
      vn_fase := 3;
      --
      if nvl(vn_indice,0) = 0 then
         exit;
      end if;
      --
      vn_fase := 4;
      --
      vn_indice_bi := nvl(vt_tri_tab_reg_1110(vn_indice).first,0);
      --
      vn_fase := 5;
      --
      loop
         --
         vn_fase := 6;
         --
         if nvl(vn_indice_bi,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 7;
         --
         vn_indice_tri := nvl(vt_tri_tab_reg_1110(vn_indice)(vn_indice_bi).first,0);
         --
         vn_fase := 8;
         --
         loop
            --
            vn_fase := 9;
            --
            if nvl(vn_indice_tri,0) = 0 then
               exit;
            end if;
            --
            vn_fase := 10;
            --
            vn_qtde := nvl(vn_qtde,0) + 1;
            --
            vn_fase := 11;
            --
            if vn_indice_tri = vt_tri_tab_reg_1110(vn_indice)(vn_indice_bi).last then
               exit;
            else
               vn_indice_tri := vt_tri_tab_reg_1110(vn_indice)(vn_indice_bi).next(vn_indice_tri);
            end if;
            --
         end loop;
         --
         vn_fase := 12;
         --
         if vn_indice_bi = vt_tri_tab_reg_1110(vn_indice).last then
            exit;
         else
            vn_indice_bi := vt_tri_tab_reg_1110(vn_indice).next(vn_indice_bi);
         end if;
         --
      end loop;
      --
      vn_fase := 13;
      --
      if vn_indice = vt_tri_tab_reg_1110.last then
         exit;
      else
         vn_indice := vt_tri_tab_reg_1110.next(vn_indice);
      end if;
      --
   end loop;
   --
   vn_fase := 14;
   --
   return nvl(vn_qtde,0);
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_1110 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_1110;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro 1200
function fkg_qtde_linha_reg_1200
         return number
is
   --
   vn_fase  number := 0;
   vn_qtde  number := 0;
   --
begin
   --
   vn_fase := 1;
   vn_qtde := nvl(vt_tab_reg_1200.count,0);
   vn_fase := 2;
   --
   return vn_qtde;
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_1200 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_1200;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro 1210
function fkg_qtde_linha_reg_1210
         return number
is
   --
   vn_fase       number := 0;
   vn_qtde       number := 0;
   vn_indice     pls_integer := 0;
   vn_indice_bi  pls_integer := 0;
   --
begin
   --
   vn_fase   := 1;
   vn_indice := nvl(vt_bi_tab_reg_1210.first,0);
   vn_qtde   := 0;
   vn_fase   := 2;
   --
   loop
      --
      vn_fase := 3;
      --
      if nvl(vn_indice,0) = 0 then
         exit;
      end if;
      --
      vn_fase := 4;
      --
      vn_indice_bi := nvl(vt_bi_tab_reg_1210(vn_indice).first,0);
      --
      vn_fase := 5;
      --
      loop
         --
         vn_fase := 6;
         --
         if nvl(vn_indice_bi,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 7;
         --
         vn_qtde := nvl(vn_qtde,0) + 1;
         --
         vn_fase := 8;
         --
         if vn_indice_bi = vt_bi_tab_reg_1210(vn_indice).last then
            exit;
         else
            vn_indice_bi := vt_bi_tab_reg_1210(vn_indice).next(vn_indice_bi);
         end if;
         --
      end loop;
      --
      vn_fase := 9;
      --
      if vn_indice = vt_bi_tab_reg_1210.last then
         exit;
      else
         vn_indice := vt_bi_tab_reg_1210.next(vn_indice);
      end if;
      --
   end loop;
   --
   vn_fase := 10;
   --
   return nvl(vn_qtde,0);
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_1210 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_1210;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro 1300
function fkg_qtde_linha_reg_1300
         return number
is
   --
   vn_fase  number := 0;
   vn_qtde  number := 0;
   --
begin
   --
   vn_fase := 1;
   vn_qtde := nvl(vt_tab_reg_1300.count,0);
   vn_fase := 2;
   --
   return vn_qtde;
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_1300 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_1300;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro 1310
function fkg_qtde_linha_reg_1310
         return number
is
   --
   vn_fase       number := 0;
   vn_qtde       number := 0;
   vn_indice     pls_integer := 0;
   vn_indice_bi  pls_integer := 0;
   --
begin
   --
   vn_fase   := 1;
   vn_indice := nvl(vt_bi_tab_reg_1310.first,0);
   vn_qtde   := 0;
   vn_fase   := 2;
   --
   loop
      --
      vn_fase := 3;
      --
      if nvl(vn_indice,0) = 0 then
         exit;
      end if;
      --
      vn_fase := 4;
      --
      vn_indice_bi := nvl(vt_bi_tab_reg_1310(vn_indice).first,0);
      --
      vn_fase := 5;
      --
      loop
         --
         vn_fase := 6;
         --
         if nvl(vn_indice_bi,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 7;
         --
         vn_qtde := nvl(vn_qtde,0) + 1;
         --
         vn_fase := 8;
         --
         if vn_indice_bi = vt_bi_tab_reg_1310(vn_indice).last then
            exit;
         else
            vn_indice_bi := vt_bi_tab_reg_1310(vn_indice).next(vn_indice_bi);
         end if;
         --
      end loop;
      --
      vn_fase := 9;
      --
      if vn_indice = vt_bi_tab_reg_1310.last then
         exit;
      else
         vn_indice := vt_bi_tab_reg_1310.next(vn_indice);
      end if;
      --
   end loop;
   --
   vn_fase := 10;
   --
   return nvl(vn_qtde,0);
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_1310 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_1310;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro 1320
function fkg_qtde_linha_reg_1320
         return number
is
   --
   vn_fase       number := 0;
   vn_qtde       number := 0;
   vn_indice     pls_integer := 0;
   vn_indice_bi  pls_integer := 0;
   vn_indice_tri pls_integer := 0;
   --
begin
   --
   vn_fase   := 1;
   vn_indice := nvl(vt_tri_tab_reg_1320.first,0);
   vn_qtde   := 0;
   vn_fase   := 2;
   --
   loop
      --
      vn_fase := 3;
      --
      if nvl(vn_indice,0) = 0 then
         exit;
      end if;
      --
      vn_fase := 4;
      --
      vn_indice_bi := nvl(vt_tri_tab_reg_1320(vn_indice).first,0);
      --
      vn_fase := 5;
      --
      loop
         --
         vn_fase := 6;
         --
         if nvl(vn_indice_bi,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 7;
         --
         vn_indice_tri := nvl(vt_tri_tab_reg_1320(vn_indice)(vn_indice_bi).first,0);
         --
         vn_fase := 8;
         --
         loop
            --
            vn_fase := 9;
            --
            if nvl(vn_indice_tri,0) = 0 then
               exit;
            end if;
            --
            vn_fase := 10;
            --
            vn_qtde := nvl(vn_qtde,0) + 1;
            --
            vn_fase := 11;
            --
            if vn_indice_tri = vt_tri_tab_reg_1320(vn_indice)(vn_indice_bi).last then
               exit;
            else
               vn_indice_tri := vt_tri_tab_reg_1320(vn_indice)(vn_indice_bi).next(vn_indice_tri);
            end if;
            --
         end loop;
         --
         vn_fase := 12;
         --
         if vn_indice_bi = vt_tri_tab_reg_1320(vn_indice).last then
            exit;
         else
            vn_indice_bi := vt_tri_tab_reg_1320(vn_indice).next(vn_indice_bi);
         end if;
         --
      end loop;
      --
      vn_fase := 13;
      --
      if vn_indice = vt_tri_tab_reg_1320.last then
         exit;
      else
         vn_indice := vt_tri_tab_reg_1320.next(vn_indice);
      end if;
      --
   end loop;
   --
   vn_fase := 14;
   --
   return nvl(vn_qtde,0);
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_1320 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_1320;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro 1350
function fkg_qtde_linha_reg_1350
         return number
is
   --
   vn_fase  number := 0;
   vn_qtde  number := 0;
   --
begin
   --
   vn_fase := 1;
   vn_qtde := nvl(vt_tab_reg_1350.count,0);
   vn_fase := 2;
   --
   return vn_qtde;
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_1350 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_1350;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro 1360
function fkg_qtde_linha_reg_1360
         return number
is
   --
   vn_fase       number := 0;
   vn_qtde       number := 0;
   vn_indice     pls_integer := 0;
   vn_indice_bi  pls_integer := 0;
   --
begin
   --
   vn_fase   := 1;
   vn_indice := nvl(vt_bi_tab_reg_1360.first,0);
   vn_qtde   := 0;
   vn_fase   := 2;
   --
   loop
      --
      vn_fase := 3;
      --
      if nvl(vn_indice,0) = 0 then
         exit;
      end if;
      --
      vn_fase := 4;
      --
      vn_indice_bi := nvl(vt_bi_tab_reg_1360(vn_indice).first,0);
      --
      vn_fase := 5;
      --
      loop
         --
         vn_fase := 6;
         --
         if nvl(vn_indice_bi,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 7;
         --
         vn_qtde := nvl(vn_qtde,0) + 1;
         --
         vn_fase := 8;
         --
         if vn_indice_bi = vt_bi_tab_reg_1360(vn_indice).last then
            exit;
         else
            vn_indice_bi := vt_bi_tab_reg_1360(vn_indice).next(vn_indice_bi);
         end if;
         --
      end loop;
      --
      vn_fase := 9;
      --
      if vn_indice = vt_bi_tab_reg_1360.last then
         exit;
      else
         vn_indice := vt_bi_tab_reg_1360.next(vn_indice);
      end if;
      --
   end loop;
   --
   vn_fase := 10;
   --
   return nvl(vn_qtde,0);
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_1360 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_1360;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro 1370
function fkg_qtde_linha_reg_1370
         return number
is
   --
   vn_fase       number := 0;
   vn_qtde       number := 0;
   vn_indice     pls_integer := 0;
   vn_indice_bi  pls_integer := 0;
   --
begin
   --
   vn_fase   := 1;
   vn_indice := nvl(vt_bi_tab_reg_1370.first,0);
   vn_qtde   := 0;
   vn_fase   := 2;
   --
   loop
      --
      vn_fase := 3;
      --
      if nvl(vn_indice,0) = 0 then
         exit;
      end if;
      --
      vn_fase := 4;
      --
      vn_indice_bi := nvl(vt_bi_tab_reg_1370(vn_indice).first,0);
      --
      vn_fase := 5;
      --
      loop
         --
         vn_fase := 6;
         --
         if nvl(vn_indice_bi,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 7;
         --
         vn_qtde := nvl(vn_qtde,0) + 1;
         --
         vn_fase := 8;
         --
         if vn_indice_bi = vt_bi_tab_reg_1370(vn_indice).last then
            exit;
         else
            vn_indice_bi := vt_bi_tab_reg_1370(vn_indice).next(vn_indice_bi);
         end if;
         --
      end loop;
      --
      vn_fase := 9;
      --
      if vn_indice = vt_bi_tab_reg_1370.last then
         exit;
      else
         vn_indice := vt_bi_tab_reg_1370.next(vn_indice);
      end if;
      --
   end loop;
   --
   vn_fase := 10;
   --
   return nvl(vn_qtde,0);
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_1370 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_1370;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro 1390
function fkg_qtde_linha_reg_1390
         return number
is
   --
   vn_fase  number := 0;
   vn_qtde  number := 0;
   --
begin
   --
   vn_fase := 1;
   vn_qtde := nvl(vt_tab_reg_1390.count,0);
   vn_fase := 2;
   --
   return vn_qtde;
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_1390 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_1390;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro 1391
function fkg_qtde_linha_reg_1391
         return number
is
   --
   vn_fase       number := 0;
   vn_qtde       number := 0;
   vn_indice     pls_integer := 0;
   vn_indice_bi  pls_integer := 0;
   --
begin
   --
   vn_fase   := 1;
   vn_indice := nvl(vt_bi_tab_reg_1391.first,0);
   vn_qtde   := 0;
   vn_fase   := 2;
   --
   loop
      --
      vn_fase := 3;
      --
      if nvl(vn_indice,0) = 0 then
         exit;
      end if;
      --
      vn_fase := 4;
      --
      vn_indice_bi := nvl(vt_bi_tab_reg_1391(vn_indice).first,0);
      --
      vn_fase := 5;
      --
      loop
         --
         vn_fase := 6;
         --
         if nvl(vn_indice_bi,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 7;
         --
         vn_qtde := nvl(vn_qtde,0) + 1;
         --
         vn_fase := 8;
         --
         if vn_indice_bi = vt_bi_tab_reg_1391(vn_indice).last then
            exit;
         else
            vn_indice_bi := vt_bi_tab_reg_1391(vn_indice).next(vn_indice_bi);
         end if;
         --
      end loop;
      --
      vn_fase := 9;
      --
      if vn_indice = vt_bi_tab_reg_1391.last then
         exit;
      else
         vn_indice := vt_bi_tab_reg_1391.next(vn_indice);
      end if;
      --
   end loop;
   --
   vn_fase := 10;
   --
   return nvl(vn_qtde,0);
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_1391 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_1391;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro 1400
function fkg_qtde_linha_reg_1400
         return number
is
   --
   vn_fase  number := 0;
   vn_qtde  number := 0;
   --
begin
   --
   vn_fase := 1;
   vn_qtde := nvl(vt_tab_reg_1400.count,0);
   vn_fase := 2;
   --
   return vn_qtde;
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_1400 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_1400;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro 1500
function fkg_qtde_linha_reg_1500
         return number
is
   --
   vn_fase  number := 0;
   vn_qtde  number := 0;
   --
begin
   --
   vn_fase := 1;
   vn_qtde := nvl(vt_tab_reg_1500.count,0);
   vn_fase := 2;
   --
   return vn_qtde;
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_1500 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_1500;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro 1510
function fkg_qtde_linha_reg_1510
         return number
is
   --
   vn_fase       number := 0;
   vn_qtde       number := 0;
   vn_indice     pls_integer := 0;
   vn_indice_bi  pls_integer := 0;
   --
begin
   --
   vn_fase   := 1;
   vn_indice := nvl(vt_bi_tab_reg_1510.first,0);
   vn_qtde   := 0;
   vn_fase   := 2;
   --
   loop
      --
      vn_fase := 3;
      --
      if nvl(vn_indice,0) = 0 then
         exit;
      end if;
      --
      vn_fase := 4;
      --
      vn_indice_bi := nvl(vt_bi_tab_reg_1510(vn_indice).first,0);
      --
      vn_fase := 5;
      --
      loop
         --
         vn_fase := 6;
         --
         if nvl(vn_indice_bi,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 7;
         --
         vn_qtde := nvl(vn_qtde,0) + 1;
         --
         vn_fase := 8;
         --
         if vn_indice_bi = vt_bi_tab_reg_1510(vn_indice).last then
            exit;
         else
            vn_indice_bi := vt_bi_tab_reg_1510(vn_indice).next(vn_indice_bi);
         end if;
         --
      end loop;
      --
      vn_fase := 9;
      --
      if vn_indice = vt_bi_tab_reg_1510.last then
         exit;
      else
         vn_indice := vt_bi_tab_reg_1510.next(vn_indice);
      end if;
      --
   end loop;
   --
   vn_fase := 10;
   --
   return nvl(vn_qtde,0);
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_1510 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_1510;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro 1600
function fkg_qtde_linha_reg_1600
         return number
is
   --
   vn_fase  number := 0;
   vn_qtde  number := 0;
   --
begin
   --
   vn_fase := 1;
   vn_qtde := nvl(vt_tab_reg_1600.count,0);
   vn_fase := 2;
   --
   return vn_qtde;
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_1600 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_1600;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro 1700
function fkg_qtde_linha_reg_1700
         return number
is
   --
   vn_fase  number := 0;
   vn_qtde  number := 0;
   --
begin
   --
   vn_fase := 1;
   vn_qtde := nvl(vt_tab_reg_1700.count,0);
   vn_fase := 2;
   --
   return vn_qtde;
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_1700 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_1700;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro 1710
function fkg_qtde_linha_reg_1710
         return number
is
   --
   vn_fase       number := 0;
   vn_qtde       number := 0;
   vn_indice     pls_integer := 0;
   vn_indice_bi  pls_integer := 0;
   --
begin
   --
   vn_fase   := 1;
   vn_indice := nvl(vt_bi_tab_reg_1710.first,0);
   vn_qtde   := 0;
   vn_fase   := 2;
   --
   loop
      --
      vn_fase := 3;
      --
      if nvl(vn_indice,0) = 0 then
         exit;
      end if;
      --
      vn_fase := 4;
      --
      vn_indice_bi := nvl(vt_bi_tab_reg_1710(vn_indice).first,0);
      --
      vn_fase := 5;
      --
      loop
         --
         vn_fase := 6;
         --
         if nvl(vn_indice_bi,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 7;
         --
         vn_qtde := nvl(vn_qtde,0) + 1;
         --
         vn_fase := 8;
         --
         if vn_indice_bi = vt_bi_tab_reg_1710(vn_indice).last then
            exit;
         else
            vn_indice_bi := vt_bi_tab_reg_1710(vn_indice).next(vn_indice_bi);
         end if;
         --
      end loop;
      --
      vn_fase := 9;
      --
      if vn_indice = vt_bi_tab_reg_1710.last then
         exit;
      else
         vn_indice := vt_bi_tab_reg_1710.next(vn_indice);
      end if;
      --
   end loop;
   --
   vn_fase := 10;
   --
   return nvl(vn_qtde,0);
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_1710 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_1710;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro 1800
function fkg_qtde_linha_reg_1800
         return number
is
   --
   vn_fase  number := 0;
   vn_qtde  number := 0;
   --
begin
   --
   vn_fase := 1;
   vn_qtde := nvl(vt_tab_reg_1800.count,0);
   vn_fase := 2;
   --
   return vn_qtde;
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_1800 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_1800;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro 1900
function fkg_qtde_linha_reg_1900
         return number
is
   --
   vn_fase  number := 0;
   vn_qtde  number := 0;
   --
begin
   --
   vn_fase := 1;
   vn_qtde := nvl(vt_tab_reg_1900.count,0);
   vn_fase := 2;
   --
   return vn_qtde;
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_1900 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_1900;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro 1910
function fkg_qtde_linha_reg_1910
         return number
is
   --
   vn_fase  number := 0;
   vn_qtde  number := 0;
   --
begin
   --
   vn_fase := 1;
   vn_qtde := nvl(vt_tab_reg_1910.count,0);
   vn_fase := 2;
   --
   return vn_qtde;
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_1910 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_1910;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro 1920
function fkg_qtde_linha_reg_1920
         return number
is
   --
   vn_fase  number := 0;
   vn_qtde  number := 0;
   --
begin
   --
   vn_fase := 1;
   vn_qtde := nvl(vt_tab_reg_1920.count,0);
   vn_fase := 2;
   --
   return vn_qtde;
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_1920 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_1920;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro 1921
function fkg_qtde_linha_reg_1921
         return number
is
   --
   vn_fase       number := 0;
   vn_qtde       number := 0;
   vn_indice     pls_integer := 0;
   vn_indice_bi  pls_integer := 0;
   --
begin
   --
   vn_fase   := 1;
   vn_indice := nvl(vt_bi_tab_reg_1921.first,0);
   vn_qtde   := 0;
   vn_fase   := 2;
   --
   loop
      --
      vn_fase := 3;
      --
      if nvl(vn_indice,0) = 0 then
         exit;
      end if;
      --
      vn_fase := 4;
      --
      vn_indice_bi := nvl(vt_bi_tab_reg_1921(vn_indice).first,0);
      --
      vn_fase := 5;
      --
      loop
         --
         vn_fase := 6;
         --
         if nvl(vn_indice_bi,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 7;
         --
         vn_qtde := nvl(vn_qtde,0) + 1;
         --
         vn_fase := 8;
         --
         if vn_indice_bi = vt_bi_tab_reg_1921(vn_indice).last then
            exit;
         else
            vn_indice_bi := vt_bi_tab_reg_1921(vn_indice).next(vn_indice_bi);
         end if;
         --
      end loop;
      --
      vn_fase := 9;
      --
      if vn_indice = vt_bi_tab_reg_1921.last then
         exit;
      else
         vn_indice := vt_bi_tab_reg_1921.next(vn_indice);
      end if;
      --
   end loop;
   --
   vn_fase := 10;
   --
   return nvl(vn_qtde,0);
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_1921 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_1921;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro 1922
function fkg_qtde_linha_reg_1922
         return number
is
   --
   vn_fase       number := 0;
   vn_qtde       number := 0;
   vn_indice     pls_integer := 0;
   vn_indice_bi  pls_integer := 0;
   vn_indice_tri pls_integer := 0;
   --
begin
   --
   vn_fase   := 1;
   vn_indice := nvl(vt_tri_tab_reg_1922.first,0);
   vn_qtde   := 0;
   vn_fase   := 2;
   --
   loop
      --
      vn_fase := 3;
      --
      if nvl(vn_indice,0) = 0 then
         exit;
      end if;
      --
      vn_fase := 4;
      --
      vn_indice_bi := nvl(vt_tri_tab_reg_1922(vn_indice).first,0);
      --
      vn_fase := 5;
      --
      loop
         --
         vn_fase := 6;
         --
         if nvl(vn_indice_bi,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 7;
         --
         vn_indice_tri := nvl(vt_tri_tab_reg_1922(vn_indice)(vn_indice_bi).first,0);
         --
         vn_fase := 8;
         --
         loop
            --
            vn_fase := 9;
            --
            if nvl(vn_indice_tri,0) = 0 then
               exit;
            end if;
            --
            vn_fase := 10;
            --
            vn_qtde := nvl(vn_qtde,0) + 1;
            --
            vn_fase := 11;
            --
            if vn_indice_tri = vt_tri_tab_reg_1922(vn_indice)(vn_indice_bi).last then
               exit;
            else
               vn_indice_tri := vt_tri_tab_reg_1922(vn_indice)(vn_indice_bi).next(vn_indice_tri);
            end if;
            --
         end loop;
         --
         vn_fase := 12;
         --
         if vn_indice_bi = vt_tri_tab_reg_1922(vn_indice).last then
            exit;
         else
            vn_indice_bi := vt_tri_tab_reg_1922(vn_indice).next(vn_indice_bi);
         end if;
         --
      end loop;
      --
      vn_fase := 13;
      --
      if vn_indice = vt_tri_tab_reg_1922.last then
         exit;
      else
         vn_indice := vt_tri_tab_reg_1922.next(vn_indice);
      end if;
      --
   end loop;
   --
   vn_fase := 14;
   --
   return nvl(vn_qtde,0);
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_1922 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_1922;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro 1923
function fkg_qtde_linha_reg_1923
         return number
is
   --
   vn_fase       number := 0;
   vn_qtde       number := 0;
   vn_indice     pls_integer := 0;
   vn_indice_bi  pls_integer := 0;
   vn_indice_tri pls_integer := 0;
   --
begin
   --
   vn_fase   := 1;
   vn_indice := nvl(vt_tri_tab_reg_1923.first,0);
   vn_qtde   := 0;
   vn_fase   := 2;
   --
   loop
      --
      vn_fase := 3;
      --
      if nvl(vn_indice,0) = 0 then
         exit;
      end if;
      --
      vn_fase := 4;
      --
      vn_indice_bi := nvl(vt_tri_tab_reg_1923(vn_indice).first,0);
      --
      vn_fase := 5;
      --
      loop
         --
         vn_fase := 6;
         --
         if nvl(vn_indice_bi,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 7;
         --
         vn_indice_tri := nvl(vt_tri_tab_reg_1923(vn_indice)(vn_indice_bi).first,0);
         --
         vn_fase := 8;
         --
         loop
            --
            vn_fase := 9;
            --
            if nvl(vn_indice_tri,0) = 0 then
               exit;
            end if;
            --
            vn_fase := 10;
            --
            vn_qtde := nvl(vn_qtde,0) + 1;
            --
            vn_fase := 11;
            --
            if vn_indice_tri = vt_tri_tab_reg_1923(vn_indice)(vn_indice_bi).last then
               exit;
            else
               vn_indice_tri := vt_tri_tab_reg_1923(vn_indice)(vn_indice_bi).next(vn_indice_tri);
            end if;
            --
         end loop;
         --
         vn_fase := 12;
         --
         if vn_indice_bi = vt_tri_tab_reg_1923(vn_indice).last then
            exit;
         else
            vn_indice_bi := vt_tri_tab_reg_1923(vn_indice).next(vn_indice_bi);
         end if;
         --
      end loop;
      --
      vn_fase := 13;
      --
      if vn_indice = vt_tri_tab_reg_1923.last then
         exit;
      else
         vn_indice := vt_tri_tab_reg_1923.next(vn_indice);
      end if;
      --
   end loop;
   --
   vn_fase := 14;
   --
   return nvl(vn_qtde,0);
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_1923 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_1923;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro 1925
function fkg_qtde_linha_reg_1925
         return number
is
   --
   vn_fase       number := 0;
   vn_qtde       number := 0;
   vn_indice     pls_integer := 0;
   vn_indice_bi  pls_integer := 0;
   --
begin
   --
   vn_fase   := 1;
   vn_indice := nvl(vt_bi_tab_reg_1925.first,0);
   vn_qtde   := 0;
   vn_fase   := 2;
   --
   loop
      --
      vn_fase := 3;
      --
      if nvl(vn_indice,0) = 0 then
         exit;
      end if;
      --
      vn_fase := 4;
      --
      vn_indice_bi := nvl(vt_bi_tab_reg_1925(vn_indice).first,0);
      --
      vn_fase := 5;
      --
      loop
         --
         vn_fase := 6;
         --
         if nvl(vn_indice_bi,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 7;
         --
         vn_qtde := nvl(vn_qtde,0) + 1;
         --
         vn_fase := 8;
         --
         if vn_indice_bi = vt_bi_tab_reg_1925(vn_indice).last then
            exit;
         else
            vn_indice_bi := vt_bi_tab_reg_1925(vn_indice).next(vn_indice_bi);
         end if;
         --
      end loop;
      --
      vn_fase := 9;
      --
      if vn_indice = vt_bi_tab_reg_1925.last then
         exit;
      else
         vn_indice := vt_bi_tab_reg_1925.next(vn_indice);
      end if;
      --
   end loop;
   --
   vn_fase := 10;
   --
   return nvl(vn_qtde,0);
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_1925 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_1925;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro 1926
function fkg_qtde_linha_reg_1926
         return number
is
   --
   vn_fase       number := 0;
   vn_qtde       number := 0;
   vn_indice     pls_integer := 0;
   vn_indice_bi  pls_integer := 0;
   --
begin
   --
   vn_fase   := 1;
   vn_indice := nvl(vt_bi_tab_reg_1926.first,0);
   vn_qtde   := 0;
   vn_fase   := 2;
   --
   loop
      --
      vn_fase := 3;
      --
      if nvl(vn_indice,0) = 0 then
         exit;
      end if;
      --
      vn_fase := 4;
      --
      vn_indice_bi := nvl(vt_bi_tab_reg_1926(vn_indice).first,0);
      --
      vn_fase := 5;
      --
      loop
         --
         vn_fase := 6;
         --
         if nvl(vn_indice_bi,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 7;
         --
         vn_qtde := nvl(vn_qtde,0) + 1;
         --
         vn_fase := 8;
         --
         if vn_indice_bi = vt_bi_tab_reg_1926(vn_indice).last then
            exit;
         else
            vn_indice_bi := vt_bi_tab_reg_1926(vn_indice).next(vn_indice_bi);
         end if;
         --
      end loop;
      --
      vn_fase := 9;
      --
      if vn_indice = vt_bi_tab_reg_1926.last then
         exit;
      else
         vn_indice := vt_bi_tab_reg_1926.next(vn_indice);
      end if;
      --
   end loop;
   --
   vn_fase := 10;
   --
   return nvl(vn_qtde,0);
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_1926 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_1926;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro 1960
function fkg_qtde_linha_reg_1960
         return number
is
   --
   vn_fase  number := 0;
   vn_qtde  number := 0;
   --
begin
   --
   vn_fase := 1;
   vn_qtde := nvl(vt_tab_reg_1960.count,0);
   vn_fase := 2;
   --
   return vn_qtde;
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_1960 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_1960;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro 1970
function fkg_qtde_linha_reg_1970
         return number
is
   --
   vn_fase  number := 0;
   vn_qtde  number := 0;
   --
begin
   --
   vn_fase := 1;
   vn_qtde := nvl(vt_tab_reg_1970.count,0);
   vn_fase := 2;
   --
   return vn_qtde;
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_1970 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_1970;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro 1975
function fkg_qtde_linha_reg_1975
         return number
is
   --
   vn_fase       number := 0;
   vn_qtde       number := 0;
   vn_indice     pls_integer := 0;
   vn_indice_bi  pls_integer := 0;
   --
begin
   --
   vn_fase   := 1;
   vn_indice := nvl(vt_bi_tab_reg_1975.first,0);
   vn_qtde   := 0;
   vn_fase   := 2;
   --
   loop
      --
      vn_fase := 3;
      --
      if nvl(vn_indice,0) = 0 then
         exit;
      end if;
      --
      vn_fase := 4;
      --
      vn_indice_bi := nvl(vt_bi_tab_reg_1975(vn_indice).first,0);
      --
      vn_fase := 5;
      --
      loop
         --
         vn_fase := 6;
         --
         if nvl(vn_indice_bi,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 7;
         --
         vn_qtde := nvl(vn_qtde,0) + 1;
         --
         vn_fase := 8;
         --
         if vn_indice_bi = vt_bi_tab_reg_1975(vn_indice).last then
            exit;
         else
            vn_indice_bi := vt_bi_tab_reg_1975(vn_indice).next(vn_indice_bi);
         end if;
         --
      end loop;
      --
      vn_fase := 9;
      --
      if vn_indice = vt_bi_tab_reg_1975.last then
         exit;
      else
         vn_indice := vt_bi_tab_reg_1975.next(vn_indice);
      end if;
      --
   end loop;
   --
   vn_fase := 10;
   --
   return nvl(vn_qtde,0);
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_1975 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_1975;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro 1980
function fkg_qtde_linha_reg_1980
         return number
is
   --
   vn_fase  number := 0;
   vn_qtde  number := 0;
   --
begin
   --
   vn_fase := 1;
   vn_qtde := nvl(vt_tab_reg_1980.count,0);
   vn_fase := 2;
   --
   return vn_qtde;
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_1980 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_1980;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro 1990
function fkg_qtde_linha_reg_1990
         return number
is
   --
   vn_fase  number := 0;
   vn_qtde  number := 0;
   --
begin
   --
   vn_fase := 1;
   vn_qtde := nvl(vt_tab_reg_1990.count,0);
   vn_fase := 2;
   --
   return vn_qtde;
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_1990 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_1990;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro 9001
function fkg_qtde_linha_reg_9001
         return number
is
   --
   vn_fase  number := 0;
   vn_qtde  number := 0;
   --
begin
   --
   vn_fase := 1;
   vn_qtde := nvl(vt_tab_reg_9001.count,0);
   vn_fase := 2;
   --
   return vn_qtde;
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_9001 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_9001;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro 9900
function fkg_qtde_linha_reg_9900
         return number
is
   --
   vn_fase  number := 0;
   vn_qtde  number := 0;
   --
begin
   --
   vn_fase := 1;
   vn_qtde := nvl(vt_tab_reg_9900.count,0);
   vn_fase := 2;
   --
   return vn_qtde;
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_9900 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_9900;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro 9990
function fkg_qtde_linha_reg_9990
         return number
is
   --
   vn_fase  number := 0;
   vn_qtde  number := 0;
   --
begin
   --
   vn_fase := 1;
   vn_qtde := nvl(vt_tab_reg_9990.count,0);
   vn_fase := 2;
   --
   return vn_qtde;
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_9990 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_9990;

-------------------------------------------------------------------------------------------------------

-- Função retorna a quantidade de linhas do registro 9999
function fkg_qtde_linha_reg_9999
         return number
is
   --
   vn_fase  number := 0;
   vn_qtde  number := 0;
   --
begin
   --
   vn_fase := 1;
   vn_qtde := nvl(vt_tab_reg_9999.count,0);
   vn_fase := 2;
   --
   return vn_qtde;
   --
exception
   when no_data_found then
      return 0;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_qtde_linha_reg_9999 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end fkg_qtde_linha_reg_9999;

-------------------------------------------------------------------------------------------------------

-- Monta o REGISTRO 9900: REGISTROS DO ARQUIVO
procedure pkb_monta_reg_9900
is
   --
   vn_fase            number := 0;
--
-- BLOCO 0: ABERTURA, IDENTIFICAÇÃO E REFERÊNCIAS
--
   vn_qtde_reg_0000   number := 0;
   vn_qtde_reg_0001   number := 0;
   vn_qtde_reg_0002   number := 0;
   vn_qtde_reg_0005   number := 0;
   vn_qtde_reg_0015   number := 0;
   vn_qtde_reg_0100   number := 0;
   vn_qtde_reg_0150   number := 0;
   vn_qtde_reg_0175   number := 0;
   vn_qtde_reg_0190   number := 0;
   vn_qtde_reg_0200   number := 0;
   vn_qtde_reg_0205   number := 0;
   vn_qtde_reg_0206   number := 0;
   vn_qtde_reg_0210   number := 0;
   vn_qtde_reg_0220   number := 0;
   vn_qtde_reg_0300   number := 0;
   vn_qtde_reg_0305   number := 0;
   vn_qtde_reg_0400   number := 0;
   vn_qtde_reg_0450   number := 0;
   vn_qtde_reg_0460   number := 0;
   vn_qtde_reg_0500   number := 0;
   vn_qtde_reg_0600   number := 0;
   vn_qtde_reg_0990   number := 0;
--   
-- BLOCO B: ESCRITURAÇÃO E APURAÇÃO DO ISS   
--- B001, B020, B025, B420, B440, B460, B470, B990   
  vn_qtde_reg_B001   number := 0;
  vn_qtde_reg_B020   number := 0;
  vn_qtde_reg_B025   number := 0;
  vn_qtde_reg_B420   number := 0;
  vn_qtde_reg_B440   number := 0;
  vn_qtde_reg_B460   number := 0;
  vn_qtde_reg_B470   number := 0;
  vn_qtde_reg_B990   number := 0;  
--
-- BLOCO C: DOCUMENTOS FISCAIS I - MERCADORIAS (ICMS/IPI)
--
   vn_qtde_reg_c001   number := 0;
   vn_qtde_reg_c100   number := 0;
   vn_qtde_reg_c101   number := 0;
   vn_qtde_reg_c105   number := 0;
   vn_qtde_reg_c110   number := 0;
   vn_qtde_reg_c111   number := 0;
   vn_qtde_reg_c112   number := 0;
   vn_qtde_reg_c113   number := 0;
   vn_qtde_reg_c114   number := 0;
   vn_qtde_reg_c115   number := 0;
   vn_qtde_reg_c116   number := 0;
   vn_qtde_reg_c120   number := 0;
   vn_qtde_reg_c130   number := 0;
   vn_qtde_reg_c140   number := 0;
   vn_qtde_reg_c141   number := 0;
   vn_qtde_reg_c160   number := 0;
   vn_qtde_reg_c165   number := 0;
   vn_qtde_reg_c170   number := 0;
   vn_qtde_reg_c171   number := 0;
   vn_qtde_reg_c172   number := 0;
   vn_qtde_reg_c173   number := 0;
   vn_qtde_reg_c174   number := 0;
   vn_qtde_reg_c175   number := 0;
   vn_qtde_reg_c176   number := 0;
   vn_qtde_reg_c177   number := 0;
   vn_qtde_reg_c178   number := 0;
   vn_qtde_reg_c179   number := 0;
   vn_qtde_reg_c190   number := 0;
   vn_qtde_reg_c191   number := 0;
   vn_qtde_reg_c195   number := 0;
   vn_qtde_reg_c197   number := 0;
   vn_qtde_reg_c300   number := 0;
   vn_qtde_reg_c310   number := 0;
   vn_qtde_reg_c320   number := 0;
   vn_qtde_reg_c321   number := 0;
   vn_qtde_reg_c350   number := 0;
   vn_qtde_reg_c370   number := 0;
   vn_qtde_reg_c390   number := 0;
   vn_qtde_reg_c400   number := 0;
   vn_qtde_reg_c405   number := 0;
   vn_qtde_reg_c410   number := 0;
   vn_qtde_reg_c420   number := 0;
   vn_qtde_reg_c425   number := 0;
   vn_qtde_reg_c460   number := 0;
   vn_qtde_reg_c470   number := 0;
   vn_qtde_reg_c490   number := 0;
   vn_qtde_reg_c495   number := 0;
   vn_qtde_reg_c500   number := 0;
   vn_qtde_reg_c510   number := 0;
   vn_qtde_reg_c590   number := 0;
   vn_qtde_reg_c591   number := 0;
   vn_qtde_reg_c595   number := 0;
   vn_qtde_reg_c597   number := 0;
   vn_qtde_reg_c600   number := 0;
   vn_qtde_reg_c601   number := 0;
   vn_qtde_reg_c610   number := 0;
   vn_qtde_reg_c690   number := 0;
   vn_qtde_reg_c700   number := 0;
   vn_qtde_reg_c790   number := 0;
   vn_qtde_reg_c791   number := 0;
   vn_qtde_reg_c800   number := 0;
   vn_qtde_reg_c850   number := 0;
   vn_qtde_reg_c860   number := 0;
   vn_qtde_reg_c890   number := 0;
   vn_qtde_reg_c990   number := 0;
--
-- BLOCO D: DOCUMENTOS FISCAIS II - SERVIÇOS (ICMS).
--
   vn_qtde_reg_d001   number := 0;
   vn_qtde_reg_d100   number := 0;
   vn_qtde_reg_d110   number := 0;
   vn_qtde_reg_d120   number := 0;
   vn_qtde_reg_d130   number := 0;
   vn_qtde_reg_d140   number := 0;
   vn_qtde_reg_d150   number := 0;
   vn_qtde_reg_d160   number := 0;
   vn_qtde_reg_d161   number := 0;
   vn_qtde_reg_d162   number := 0;
   vn_qtde_reg_d170   number := 0;
   vn_qtde_reg_d180   number := 0;
   vn_qtde_reg_d190   number := 0;
   vn_qtde_reg_d195   number := 0;
   vn_qtde_reg_d197   number := 0;
   vn_qtde_reg_d300   number := 0;
   vn_qtde_reg_d301   number := 0;
   vn_qtde_reg_d310   number := 0;
   vn_qtde_reg_d350   number := 0;
   vn_qtde_reg_d355   number := 0;
   vn_qtde_reg_d360   number := 0;
   vn_qtde_reg_d365   number := 0;
   vn_qtde_reg_d370   number := 0;
   vn_qtde_reg_d390   number := 0;
   vn_qtde_reg_d400   number := 0;
   vn_qtde_reg_d410   number := 0;
   vn_qtde_reg_d411   number := 0;
   vn_qtde_reg_d420   number := 0;
   vn_qtde_reg_d500   number := 0;
   vn_qtde_reg_d510   number := 0;
   vn_qtde_reg_d530   number := 0;
   vn_qtde_reg_d590   number := 0;
   vn_qtde_reg_d600   number := 0;
   vn_qtde_reg_d610   number := 0;
   vn_qtde_reg_d690   number := 0;
   vn_qtde_reg_d695   number := 0;
   vn_qtde_reg_d696   number := 0;
   vn_qtde_reg_d697   number := 0;
   vn_qtde_reg_d990   number := 0;
--
-- BLOCO E: APURAÇÃO DO ICMS E DO IPI
--
   vn_qtde_reg_e001   number := 0;
   vn_qtde_reg_e100   number := 0;
   vn_qtde_reg_e110   number := 0;
   vn_qtde_reg_e111   number := 0;
   vn_qtde_reg_e112   number := 0;
   vn_qtde_reg_e113   number := 0;
   vn_qtde_reg_e115   number := 0;
   vn_qtde_reg_e116   number := 0;
   vn_qtde_reg_e200   number := 0;
   vn_qtde_reg_e210   number := 0;
   vn_qtde_reg_e220   number := 0;
   vn_qtde_reg_e230   number := 0;
   vn_qtde_reg_e240   number := 0;
   vn_qtde_reg_e250   number := 0;
   vn_qtde_reg_e300   number := 0;
   vn_qtde_reg_e310   number := 0;
   vn_qtde_reg_e311   number := 0;
   vn_qtde_reg_e312   number := 0;
   vn_qtde_reg_e313   number := 0;
   vn_qtde_reg_e316   number := 0;
   vn_qtde_reg_e500   number := 0;
   vn_qtde_reg_e510   number := 0;
   vn_qtde_reg_e520   number := 0;
   vn_qtde_reg_e530   number := 0;
   vn_qtde_reg_e531   number := 0;
   vn_qtde_reg_e990   number := 0;
--
-- BLOCO G ¿ CONTROLE DO CRÉDITO DE ICMS DO ATIVO PERMANENTE ¿ CIAP ¿ modelos ¿C¿ e ¿D¿
--
   vn_qtde_reg_g001   number := 0;
   vn_qtde_reg_g110   number := 0;
   vn_qtde_reg_g125   number := 0;
   vn_qtde_reg_g126   number := 0;
   vn_qtde_reg_g130   number := 0;
   vn_qtde_reg_g140   number := 0;
   vn_qtde_reg_g990   number := 0;
--
-- BLOCO H: INVENTÁRIO FÍSICO
--
   vn_qtde_reg_h001   number := 0;
   vn_qtde_reg_h005   number := 0;
   vn_qtde_reg_h010   number := 0;
   vn_qtde_reg_h020   number := 0;
   vn_qtde_reg_h990   number := 0;
--
-- BLOCO K: CONTROLE DA PRODUÇÃO E DO ESTOQUE
--
   vn_qtde_reg_k001   number := 0;
   vn_qtde_reg_k100   number := 0;
   vn_qtde_reg_k200   number := 0;
   vn_qtde_reg_k210   number := 0;
   vn_qtde_reg_k215   number := 0;
   vn_qtde_reg_k220   number := 0;
   vn_qtde_reg_k230   number := 0;
   vn_qtde_reg_k235   number := 0;
   vn_qtde_reg_k250   number := 0;
   vn_qtde_reg_k255   number := 0;
   vn_qtde_reg_k260   number := 0;
   vn_qtde_reg_k265   number := 0;
   vn_qtde_reg_k270   number := 0;
   vn_qtde_reg_k275   number := 0;
   vn_qtde_reg_k280   number := 0;
   vn_qtde_reg_k290   number := 0;
   vn_qtde_reg_k291   number := 0;
   vn_qtde_reg_k292   number := 0;
   vn_qtde_reg_k300   number := 0;
   vn_qtde_reg_k301   number := 0;
   vn_qtde_reg_k302   number := 0; 
   vn_qtde_reg_k990   number := 0;
--
-- BLOCO 1: OUTRAS INFORMAÇÕES
--
   vn_qtde_reg_1001   number := 0;
   vn_qtde_reg_1010   number := 0;
   vn_qtde_reg_1100   number := 0;
   vn_qtde_reg_1105   number := 0;
   vn_qtde_reg_1110   number := 0;
   vn_qtde_reg_1200   number := 0;
   vn_qtde_reg_1210   number := 0;
   vn_qtde_reg_1300   number := 0;
   vn_qtde_reg_1310   number := 0;
   vn_qtde_reg_1320   number := 0;
   vn_qtde_reg_1350   number := 0;
   vn_qtde_reg_1360   number := 0;
   vn_qtde_reg_1370   number := 0;
   vn_qtde_reg_1390   number := 0;
   vn_qtde_reg_1391   number := 0;
   vn_qtde_reg_1400   number := 0;
   vn_qtde_reg_1500   number := 0;
   vn_qtde_reg_1510   number := 0;
   vn_qtde_reg_1600   number := 0;
   vn_qtde_reg_1700   number := 0;
   vn_qtde_reg_1710   number := 0;
   vn_qtde_reg_1800   number := 0;
   vn_qtde_reg_1900   number := 0;
   vn_qtde_reg_1910   number := 0;
   vn_qtde_reg_1920   number := 0;
   vn_qtde_reg_1921   number := 0;
   vn_qtde_reg_1922   number := 0;
   vn_qtde_reg_1923   number := 0;
   vn_qtde_reg_1925   number := 0;       
   vn_qtde_reg_1926   number := 0;
   vn_qtde_reg_1960   number := 0;
   vn_qtde_reg_1970   number := 0;
   vn_qtde_reg_1975   number := 0;
   vn_qtde_reg_1980   number := 0;     
   vn_qtde_reg_1990   number := 0;
--
-- BLOCO 9: CONTROLE E ENCERRAMENTO DO ARQUIVO DIGITAL
--
   vn_qtde_reg_9001   number := 0;
   vn_qtde_reg_9900   number := 0;
   vn_qtde_reg_9990   number := 0;
   vn_qtde_reg_9999   number := 0;

   vn_qtd_lin_0   number := 0;
   vn_qtd_lin_b   number := 0;   
   vn_qtd_lin_c   number := 0;
   vn_qtd_lin_d   number := 0;
   vn_qtd_lin_e   number := 0;
   vn_qtd_lin_g   number := 0;
   vn_qtd_lin_h   number := 0;
   vn_qtd_lin_k   number := 0;
   vn_qtd_lin_1   number := 0;
   vn_qtd_lin_9   number := 0;

   procedure pkb_ins_array ( ev_reg_blc      in varchar2
                           , en_qtd_reg_blc  in number )
   is
      --
      vn_indice number := 0;
      --
   begin
      --
      vn_indice := nvl(vt_tab_reg_9900.count,0) + 1;
      --
      if ev_reg_blc is not null and nvl(en_qtd_reg_blc,0) > 0 then
         --
         vt_tab_reg_9900(vn_indice).reg          := '9900';
         vt_tab_reg_9900(vn_indice).reg_blc      := ev_reg_blc;
         vt_tab_reg_9900(vn_indice).qtd_reg_blc  := en_qtd_reg_blc;
         --
      end if;
      --
   end pkb_ins_array;

begin
   --
   vn_fase := 1;
   --
   -- BLOCO 0: ABERTURA, IDENTIFICAÇÃO E REFERÊNCIAS
   --
   vn_qtde_reg_0000 := nvl(fkg_qtde_linha_reg_0000,0);
   --
   pkb_ins_array ( ev_reg_blc      => '0000'
                 , en_qtd_reg_blc  => vn_qtde_reg_0000 );
   --
   vn_fase := 1.1;
   --
   vn_qtde_reg_0001 := nvl(fkg_qtde_linha_reg_0001,0);
   --
   pkb_ins_array ( ev_reg_blc      => '0001'
                 , en_qtd_reg_blc  => vn_qtde_reg_0001 );
   --
      --
   vn_fase := 1.12;
   --
   vn_qtde_reg_0002 := nvl(fkg_qtde_linha_reg_0002,0);
   --
   pkb_ins_array ( ev_reg_blc      => '0002'
                 , en_qtd_reg_blc  => vn_qtde_reg_0002 );
   --
   vn_fase := 1.2;
   --
   vn_qtde_reg_0005 := nvl(fkg_qtde_linha_reg_0005,0);
   --
   pkb_ins_array ( ev_reg_blc      => '0005'
                 , en_qtd_reg_blc  => vn_qtde_reg_0005 );
   --
   vn_fase := 1.3;
   --
   vn_qtde_reg_0015 := nvl(fkg_qtde_linha_reg_0015,0);
   --
   pkb_ins_array ( ev_reg_blc      => '0015'
                 , en_qtd_reg_blc  => vn_qtde_reg_0015 );
   --
   vn_fase := 1.4;
   --
   vn_qtde_reg_0100 := nvl(fkg_qtde_linha_reg_0100,0);
   --
   pkb_ins_array ( ev_reg_blc      => '0100'
                 , en_qtd_reg_blc  => vn_qtde_reg_0100 );
   --
   vn_fase := 1.5;
   --
   vn_qtde_reg_0150 := nvl(fkg_qtde_linha_reg_0150,0);
   --
   pkb_ins_array ( ev_reg_blc      => '0150'
                 , en_qtd_reg_blc  => vn_qtde_reg_0150 );
   --
   vn_fase := 1.6;
   --
   vn_qtde_reg_0175 := nvl(fkg_qtde_linha_reg_0175,0);
   --
   pkb_ins_array ( ev_reg_blc      => '0175'
                 , en_qtd_reg_blc  => vn_qtde_reg_0175 );
   --
   vn_fase := 1.7;
   --
   vn_qtde_reg_0190 := nvl(fkg_qtde_linha_reg_0190,0);
   --
   pkb_ins_array ( ev_reg_blc      => '0190'
                 , en_qtd_reg_blc  => vn_qtde_reg_0190 );
   --
   vn_fase := 1.8;
   --
   vn_qtde_reg_0200 := nvl(fkg_qtde_linha_reg_0200,0);
   --
   pkb_ins_array ( ev_reg_blc      => '0200'
                 , en_qtd_reg_blc  => vn_qtde_reg_0200 );
   --
   vn_fase := 1.9;
   --
   vn_qtde_reg_0205 := nvl(fkg_qtde_linha_reg_0205,0);
   --
   pkb_ins_array ( ev_reg_blc      => '0205'
                 , en_qtd_reg_blc  => vn_qtde_reg_0205 );
   --
   vn_fase := 1.10;
   --
   vn_qtde_reg_0206 := nvl(fkg_qtde_linha_reg_0206,0);
   --
   pkb_ins_array ( ev_reg_blc      => '0206'
                 , en_qtd_reg_blc  => vn_qtde_reg_0206 );
   --
   vn_fase := 1.11;
   --
   vn_qtde_reg_0210 := nvl(fkg_qtde_linha_reg_0210,0);
   --
   pkb_ins_array ( ev_reg_blc      => '0210'
                 , en_qtd_reg_blc  => vn_qtde_reg_0210 );
   --
   vn_fase := 1.12;
   --
   vn_qtde_reg_0220 := nvl(fkg_qtde_linha_reg_0220,0);
   --
   pkb_ins_array ( ev_reg_blc      => '0220'
                 , en_qtd_reg_blc  => vn_qtde_reg_0220 );
   --
   vn_fase := 1.13;
   --
   vn_qtde_reg_0300 := nvl(fkg_qtde_linha_reg_0300,0);
   --
   pkb_ins_array ( ev_reg_blc      => '0300'
                 , en_qtd_reg_blc  => vn_qtde_reg_0300 );
   --
   vn_fase := 1.14;
   --
   vn_qtde_reg_0305 := nvl(fkg_qtde_linha_reg_0305,0);
   --
   pkb_ins_array ( ev_reg_blc      => '0305'
                 , en_qtd_reg_blc  => vn_qtde_reg_0305 );
   --
   vn_fase := 1.15;
   --
   vn_qtde_reg_0400 := nvl(fkg_qtde_linha_reg_0400,0);
   --
   pkb_ins_array ( ev_reg_blc      => '0400'
                 , en_qtd_reg_blc  => vn_qtde_reg_0400 );
   --
   vn_fase := 1.16;
   --
   vn_qtde_reg_0450 := nvl(fkg_qtde_linha_reg_0450,0);
   --
   pkb_ins_array ( ev_reg_blc      => '0450'
                 , en_qtd_reg_blc  => vn_qtde_reg_0450 );
   --
   vn_fase := 1.17;
   --
   vn_qtde_reg_0460 := nvl(fkg_qtde_linha_reg_0460,0);
   --
   pkb_ins_array ( ev_reg_blc      => '0460'
                 , en_qtd_reg_blc  => vn_qtde_reg_0460 );
   --
   vn_fase := 1.18;
   --
   vn_qtde_reg_0500 := nvl(fkg_qtde_linha_reg_0500,0);
   --
   pkb_ins_array ( ev_reg_blc      => '0500'
                 , en_qtd_reg_blc  => vn_qtde_reg_0500 );
   --
   vn_fase := 1.19;
   --
   vn_qtde_reg_0600 := nvl(fkg_qtde_linha_reg_0600,0);
   --
   pkb_ins_array ( ev_reg_blc      => '0600'
                 , en_qtd_reg_blc  => vn_qtde_reg_0600 );
   --
   vn_fase := 1.20;
   --
   vn_qtde_reg_0990 := nvl(fkg_qtde_linha_reg_0990,0);
   --
   pkb_ins_array ( ev_reg_blc      => '0990'
                 , en_qtd_reg_blc  => vn_qtde_reg_0990 );
   --
   vn_fase := 2;
   --   
   -- BLOCO B: ESCRITURAÇÃO E APURAÇÃO DO ISS
   --
   vn_fase := 2.1;    
   --
   vn_qtde_reg_b001 := nvl(fkg_qtde_linha_reg_b001,0);
   --
   pkb_ins_array ( ev_reg_blc      => 'B001'
                 , en_qtd_reg_blc  => vn_qtde_reg_b001 );
   --
   vn_fase := 2.2;    
   --   
   vn_qtde_reg_b020 := nvl(fkg_qtde_linha_reg_b020,0);
   --
   pkb_ins_array ( ev_reg_blc      => 'B020'
                 , en_qtd_reg_blc  => vn_qtde_reg_b020 );
   --  
   vn_fase := 2.3;    
   --       
   vn_qtde_reg_b025 := nvl(fkg_qtde_linha_reg_b025,0);
   --
   pkb_ins_array ( ev_reg_blc      => 'B025'
                 , en_qtd_reg_blc  => vn_qtde_reg_b025 );
   --
   vn_fase := 2.4;    
   --      
   vn_qtde_reg_b420 := nvl(fkg_qtde_linha_reg_b420,0);
   --
   pkb_ins_array ( ev_reg_blc      => 'B420'
                 , en_qtd_reg_blc  => vn_qtde_reg_b420 );
   -- 
   vn_fase := 2.5;    
   --    
   vn_qtde_reg_b440 := nvl(fkg_qtde_linha_reg_b440,0);
   --
   pkb_ins_array ( ev_reg_blc      => 'B440'
                 , en_qtd_reg_blc  => vn_qtde_reg_b440 );
   -- 
   vn_fase := 2.6;    
   --   
   vn_qtde_reg_b460 := nvl(fkg_qtde_linha_reg_b460,0);
   --
   pkb_ins_array ( ev_reg_blc      => 'B460'
                 , en_qtd_reg_blc  => vn_qtde_reg_b460 );
   -- 
   vn_fase := 2.7;    
   --      
   vn_qtde_reg_b470 := nvl(fkg_qtde_linha_reg_b470,0);
   --
   pkb_ins_array ( ev_reg_blc      => 'B470'
                 , en_qtd_reg_blc  => vn_qtde_reg_b470 );
   --   
   vn_fase := 2.8;    
   --      
   vn_qtde_reg_b990 := nvl(fkg_qtde_linha_reg_b990,0);
   --
   pkb_ins_array ( ev_reg_blc      => 'B990'
                 , en_qtd_reg_blc  => vn_qtde_reg_b990 );
   --                       
   --
   vn_fase := 3;   
   -- BLOCO C: DOCUMENTOS FISCAIS I - MERCADORIAS (ICMS/IPI)
   --
   vn_qtde_reg_c001 := nvl(fkg_qtde_linha_reg_c001,0);
   --
   pkb_ins_array ( ev_reg_blc      => 'C001'
                 , en_qtd_reg_blc  => vn_qtde_reg_c001 );
   --
   vn_fase := 3.1;
   --
   vn_qtde_reg_c100 := nvl(fkg_qtde_linha_reg_c100,0);
   --
   pkb_ins_array ( ev_reg_blc      => 'C100'
                 , en_qtd_reg_blc  => vn_qtde_reg_c100 );
   --
   vn_fase := 3.11;
   --
   vn_qtde_reg_c101 := nvl(fkg_qtde_linha_reg_c101,0);
   --
   pkb_ins_array ( ev_reg_blc      => 'C101'
                 , en_qtd_reg_blc  => vn_qtde_reg_c101 );
   --
   vn_fase := 3.2;
   --
   vn_qtde_reg_c105 := nvl(fkg_qtde_linha_reg_c105,0);
   --
   pkb_ins_array ( ev_reg_blc      => 'C105'
                 , en_qtd_reg_blc  => vn_qtde_reg_c105 );
   --
   vn_fase := 3.3;
   --
   vn_qtde_reg_c110 := nvl(fkg_qtde_linha_reg_c110,0);
   --
   pkb_ins_array ( ev_reg_blc      => 'C110'
                 , en_qtd_reg_blc  => vn_qtde_reg_c110 );
   --
   vn_fase := 3.4;
   --
   vn_qtde_reg_c111 := nvl(fkg_qtde_linha_reg_c111,0);
   --
   pkb_ins_array ( ev_reg_blc      => 'C111'
                 , en_qtd_reg_blc  => vn_qtde_reg_c111 );
   --
   vn_fase := 3.5;
   --
   vn_qtde_reg_c112 := nvl(fkg_qtde_linha_reg_c112,0);
   --
   pkb_ins_array ( ev_reg_blc      => 'C112'
                 , en_qtd_reg_blc  => vn_qtde_reg_c112 );
   --
   vn_fase := 3.6;
   --
   vn_qtde_reg_c113 := nvl(fkg_qtde_linha_reg_c113,0);
   --
   pkb_ins_array ( ev_reg_blc      => 'C113'
                 , en_qtd_reg_blc  => vn_qtde_reg_c113 );
   --
   vn_fase := 3.7;
   --
   vn_qtde_reg_c114 := nvl(fkg_qtde_linha_reg_c114,0);
   --
   pkb_ins_array ( ev_reg_blc      => 'C114'
                 , en_qtd_reg_blc  => vn_qtde_reg_c114 );
   --
   vn_fase := 3.8;
   --
   vn_qtde_reg_c115 := nvl(fkg_qtde_linha_reg_c115,0);
   --
   pkb_ins_array ( ev_reg_blc      => 'C115'
                 , en_qtd_reg_blc  => vn_qtde_reg_c115 );
   --
   vn_fase := 3.9;
   --
   vn_qtde_reg_c116 := nvl(fkg_qtde_linha_reg_c116,0);
   --
   pkb_ins_array ( ev_reg_blc      => 'C116'
                 , en_qtd_reg_blc  => vn_qtde_reg_c116 );
   --
   vn_fase := 3.10;
   --
   vn_qtde_reg_c120 := nvl(fkg_qtde_linha_reg_c120,0);
   --
   pkb_ins_array ( ev_reg_blc      => 'C120'
                 , en_qtd_reg_blc  => vn_qtde_reg_c120 );
   --
   vn_fase := 3.11;
   --
   vn_qtde_reg_c130 := nvl(fkg_qtde_linha_reg_c130,0);
   --
   pkb_ins_array ( ev_reg_blc      => 'C130'
                 , en_qtd_reg_blc  => vn_qtde_reg_c130 );
   --
   vn_fase := 3.12;
   --
   vn_qtde_reg_c140 := nvl(fkg_qtde_linha_reg_c140,0);
   --
   pkb_ins_array ( ev_reg_blc      => 'C140'
                 , en_qtd_reg_blc  => vn_qtde_reg_c140 );
   --
   vn_fase := 3.13;
   --
   vn_qtde_reg_c141 := nvl(fkg_qtde_linha_reg_c141,0);
   --
   pkb_ins_array ( ev_reg_blc      => 'C141'
                 , en_qtd_reg_blc  => vn_qtde_reg_c141 );
   --
   vn_fase := 3.14;
   --
   vn_qtde_reg_c160 := nvl(fkg_qtde_linha_reg_c160,0);
   --
   pkb_ins_array ( ev_reg_blc      => 'C160'
                 , en_qtd_reg_blc  => vn_qtde_reg_c160 );
   --
   vn_fase := 3.15;
   --
   vn_qtde_reg_c165 := nvl(fkg_qtde_linha_reg_c165,0);
   --
   pkb_ins_array ( ev_reg_blc      => 'C165'
                 , en_qtd_reg_blc  => vn_qtde_reg_c165 );
   --
   vn_fase := 3.16;
   --
   vn_qtde_reg_c170 := nvl(fkg_qtde_linha_reg_c170,0);
   --
   pkb_ins_array ( ev_reg_blc      => 'C170'
                 , en_qtd_reg_blc  => vn_qtde_reg_c170 );
   --
   vn_fase := 3.17;
   --
   vn_qtde_reg_c171 := nvl(fkg_qtde_linha_reg_c171,0);
   --
   pkb_ins_array ( ev_reg_blc      => 'C171'
                 , en_qtd_reg_blc  => vn_qtde_reg_c171 );
   --
   vn_fase := 3.18;
   --
   vn_qtde_reg_c172 := nvl(fkg_qtde_linha_reg_c172,0);
   --
   pkb_ins_array ( ev_reg_blc      => 'C172'
                 , en_qtd_reg_blc  => vn_qtde_reg_c172 );
   --
   vn_fase := 3.19;
   --
   vn_qtde_reg_c173 := nvl(fkg_qtde_linha_reg_c173,0);
   --
   pkb_ins_array ( ev_reg_blc      => 'C173'
                 , en_qtd_reg_blc  => vn_qtde_reg_c173 );
   --
   vn_fase := 3.20;
   --
   vn_qtde_reg_c174 := nvl(fkg_qtde_linha_reg_c174,0);
   --
   pkb_ins_array ( ev_reg_blc      => 'C174'
                 , en_qtd_reg_blc  => vn_qtde_reg_c174 );
   --
   vn_fase := 3.21;
   --
   vn_qtde_reg_c175 := nvl(fkg_qtde_linha_reg_c175,0);
   --
   pkb_ins_array ( ev_reg_blc      => 'C175'
                 , en_qtd_reg_blc  => vn_qtde_reg_c175 );
   --
   vn_fase := 3.22;
   --
   vn_qtde_reg_c176 := nvl(fkg_qtde_linha_reg_c176,0);
   --
   pkb_ins_array ( ev_reg_blc      => 'C176'
                 , en_qtd_reg_blc  => vn_qtde_reg_c176 );
   --
   vn_fase := 3.23;
   --
   vn_qtde_reg_c177 := nvl(fkg_qtde_linha_reg_c177,0);
   --
   pkb_ins_array ( ev_reg_blc      => 'C177'
                 , en_qtd_reg_blc  => vn_qtde_reg_c177 );
   --
   vn_fase := 3.24;
   --
   vn_qtde_reg_c178 := nvl(fkg_qtde_linha_reg_c178,0);
   --
   pkb_ins_array ( ev_reg_blc      => 'C178'
                 , en_qtd_reg_blc  => vn_qtde_reg_c178 );
   --
   vn_fase := 3.25;
   --
   vn_qtde_reg_c179 := nvl(fkg_qtde_linha_reg_c179,0);
   --
   pkb_ins_array ( ev_reg_blc      => 'C179'
                 , en_qtd_reg_blc  => vn_qtde_reg_c179 );
   --
   vn_fase := 3.26;
   --
   vn_qtde_reg_c190 := nvl(fkg_qtde_linha_reg_c190,0);
   --
   pkb_ins_array ( ev_reg_blc      => 'C190'
                 , en_qtd_reg_blc  => vn_qtde_reg_c190 );
   --
   --
   vn_fase := 3.261;
   --
   vn_qtde_reg_c191 := nvl(fkg_qtde_linha_reg_c191,0);
   --
   pkb_ins_array ( ev_reg_blc      => 'C191'
                 , en_qtd_reg_blc  => vn_qtde_reg_c191 );
   --   
   vn_fase := 3.27;
   --
   vn_qtde_reg_c195 := nvl(fkg_qtde_linha_reg_c195,0);
   --
   pkb_ins_array ( ev_reg_blc      => 'C195'
                 , en_qtd_reg_blc  => vn_qtde_reg_c195 );
   --
   vn_fase := 3.28;
   --
   vn_qtde_reg_c197 := nvl(fkg_qtde_linha_reg_c197,0);
   --
   pkb_ins_array ( ev_reg_blc      => 'C197'
                 , en_qtd_reg_blc  => vn_qtde_reg_c197 );
   --
   vn_fase := 3.29;
   --
   vn_qtde_reg_c300 := nvl(fkg_qtde_linha_reg_c300,0);
   --
   pkb_ins_array ( ev_reg_blc      => 'C300'
                 , en_qtd_reg_blc  => vn_qtde_reg_c300 );
   --
   vn_fase := 3.30;
   --
   vn_qtde_reg_c310 := nvl(fkg_qtde_linha_reg_c310,0);
   --
   pkb_ins_array ( ev_reg_blc      => 'C310'
                 , en_qtd_reg_blc  => vn_qtde_reg_c310 );
   --
   vn_fase := 3.31;
   --
   vn_qtde_reg_c320 := nvl(fkg_qtde_linha_reg_c320,0);
   --
   pkb_ins_array ( ev_reg_blc      => 'C320'
                 , en_qtd_reg_blc  => vn_qtde_reg_c320 );
   --
   vn_fase := 3.32;
   --
   vn_qtde_reg_c321 := nvl(fkg_qtde_linha_reg_c321,0);
   --
   pkb_ins_array ( ev_reg_blc      => 'C321'
                 , en_qtd_reg_blc  => vn_qtde_reg_c321 );
   --
   vn_fase := 3.33;
   --
   vn_qtde_reg_c350 := nvl(fkg_qtde_linha_reg_c350,0);
   --
   pkb_ins_array ( ev_reg_blc      => 'C350'
                 , en_qtd_reg_blc  => vn_qtde_reg_c350 );
   --
   vn_fase := 3.34;
   --
   vn_qtde_reg_c370 := nvl(fkg_qtde_linha_reg_c370,0);
   --
   pkb_ins_array ( ev_reg_blc      => 'C370'
                 , en_qtd_reg_blc  => vn_qtde_reg_c370 );
   --
   vn_fase := 3.35;
   --
   vn_qtde_reg_c390 := nvl(fkg_qtde_linha_reg_c390,0);
   --
   pkb_ins_array ( ev_reg_blc      => 'C390'
                 , en_qtd_reg_blc  => vn_qtde_reg_c390 );
   --
   vn_fase := 3.36;
   --
   vn_qtde_reg_c400 := nvl(fkg_qtde_linha_reg_c400,0);
   --
   pkb_ins_array ( ev_reg_blc      => 'C400'
                 , en_qtd_reg_blc  => vn_qtde_reg_c400 );
   --
   vn_fase := 3.37;
   --
   vn_qtde_reg_c405 := nvl(fkg_qtde_linha_reg_c405,0);
   --
   pkb_ins_array ( ev_reg_blc      => 'C405'
                 , en_qtd_reg_blc  => vn_qtde_reg_c405 );
   --
   vn_fase := 3.38;
   --
   vn_qtde_reg_c410 := nvl(fkg_qtde_linha_reg_c410,0);
   --
   pkb_ins_array ( ev_reg_blc      => 'C410'
                 , en_qtd_reg_blc  => vn_qtde_reg_c410 );
   --
   vn_fase := 3.39;
   --
   vn_qtde_reg_c420 := nvl(fkg_qtde_linha_reg_c420,0);
   --
   pkb_ins_array ( ev_reg_blc      => 'C420'
                 , en_qtd_reg_blc  => vn_qtde_reg_c420 );
   --
   vn_fase := 3.40;
   --
   vn_qtde_reg_c425 := nvl(fkg_qtde_linha_reg_c425,0);
   --
   pkb_ins_array ( ev_reg_blc      => 'C425'
                 , en_qtd_reg_blc  => vn_qtde_reg_c425 );
   --
   vn_fase := 3.41;
   --
   vn_qtde_reg_c460 := nvl(fkg_qtde_linha_reg_c460,0);
   --
   pkb_ins_array ( ev_reg_blc      => 'C460'
                 , en_qtd_reg_blc  => vn_qtde_reg_c460 );
   --
   vn_fase := 3.42;
   --
   vn_qtde_reg_c470 := nvl(fkg_qtde_linha_reg_c470,0);
   --
   pkb_ins_array ( ev_reg_blc      => 'C470'
                 , en_qtd_reg_blc  => vn_qtde_reg_c470 );
   --
   vn_fase := 3.43;
   --
   vn_qtde_reg_c490 := nvl(fkg_qtde_linha_reg_c490,0);
   --
   pkb_ins_array ( ev_reg_blc      => 'C490'
                 , en_qtd_reg_blc  => vn_qtde_reg_c490 );
   --
   vn_fase := 3.44;
   --
   vn_qtde_reg_c495 := nvl(fkg_qtde_linha_reg_c495,0);
   --
   pkb_ins_array ( ev_reg_blc      => 'C495'
                 , en_qtd_reg_blc  => vn_qtde_reg_c495 );
   --
   vn_fase := 3.45;
   --
   vn_qtde_reg_c500 := nvl(fkg_qtde_linha_reg_c500,0);
   --
   pkb_ins_array ( ev_reg_blc      => 'C500'
                 , en_qtd_reg_blc  => vn_qtde_reg_c500 );
   --
   vn_fase := 3.46;
   --
   vn_qtde_reg_c510 := nvl(fkg_qtde_linha_reg_c510,0);
   --
   pkb_ins_array ( ev_reg_blc      => 'C510'
                 , en_qtd_reg_blc  => vn_qtde_reg_c510 );
   --
   vn_fase := 3.47;
   --
   vn_qtde_reg_c590 := nvl(fkg_qtde_linha_reg_c590,0);
   --
   pkb_ins_array ( ev_reg_blc      => 'C590'
                 , en_qtd_reg_blc  => vn_qtde_reg_c590 );
   --
   
   vn_fase := 3.471;
   --
   vn_qtde_reg_c591 := nvl(fkg_qtde_linha_reg_c591,0);
   --
   pkb_ins_array ( ev_reg_blc      => 'C591'
                 , en_qtd_reg_blc  => vn_qtde_reg_c591 );
   --   
   vn_fase := 3.472;
   --
   vn_qtde_reg_c595 := nvl(fkg_qtde_linha_reg_c595,0);
   --
   pkb_ins_array ( ev_reg_blc      => 'C595'
                 , en_qtd_reg_blc  => vn_qtde_reg_c595 );
   --
   vn_fase := 3.473;
   --
   vn_qtde_reg_c597 := nvl(fkg_qtde_linha_reg_c597,0);
   --
   pkb_ins_array ( ev_reg_blc      => 'C597'
                 , en_qtd_reg_blc  => vn_qtde_reg_c597 );   
   
   --
   vn_fase := 3.48;  
   --
   vn_qtde_reg_c600 := nvl(fkg_qtde_linha_reg_c600,0);
   --
   pkb_ins_array ( ev_reg_blc      => 'C600'
                 , en_qtd_reg_blc  => vn_qtde_reg_c600 );
   --
   vn_fase := 3.49;
   --
   vn_qtde_reg_c601 := nvl(fkg_qtde_linha_reg_c601,0);
   --
   pkb_ins_array ( ev_reg_blc      => 'C601'
                 , en_qtd_reg_blc  => vn_qtde_reg_c601 );
   --
   vn_fase := 3.50;
   --
   vn_qtde_reg_c610 := nvl(fkg_qtde_linha_reg_c610,0);
   --
   pkb_ins_array ( ev_reg_blc      => 'C610'
                 , en_qtd_reg_blc  => vn_qtde_reg_c610 );
   --
   vn_fase := 3.51;
   --
   vn_qtde_reg_c690 := nvl(fkg_qtde_linha_reg_c690,0);
   --
   pkb_ins_array ( ev_reg_blc      => 'C690'
                 , en_qtd_reg_blc  => vn_qtde_reg_c690 );
   --
   vn_fase := 3.52;
   --
   vn_qtde_reg_c700 := nvl(fkg_qtde_linha_reg_c700,0);
   --
   pkb_ins_array ( ev_reg_blc      => 'C700'
                 , en_qtd_reg_blc  => vn_qtde_reg_c700 );
   --
   vn_fase := 3.53;
   --
   vn_qtde_reg_c790 := nvl(fkg_qtde_linha_reg_c790,0);
   --
   pkb_ins_array ( ev_reg_blc      => 'C790'
                 , en_qtd_reg_blc  => vn_qtde_reg_c790 );
   --
   vn_fase := 3.54;
   --
   vn_qtde_reg_c791 := nvl(fkg_qtde_linha_reg_c791,0);
   --
   pkb_ins_array ( ev_reg_blc      => 'C791'
                 , en_qtd_reg_blc  => vn_qtde_reg_c791 );
   --
   vn_fase := 3.55;
   --
   vn_qtde_reg_c800 := nvl(fkg_qtde_linha_reg_c800,0);
   --
   pkb_ins_array ( ev_reg_blc      => 'C800'
                 , en_qtd_reg_blc  => vn_qtde_reg_c800 );
   --
   vn_fase := 3.56;
   --
   vn_qtde_reg_c850 := nvl(fkg_qtde_linha_reg_c850,0);
   --
   pkb_ins_array ( ev_reg_blc      => 'C850'
                 , en_qtd_reg_blc  => vn_qtde_reg_c850 );
   --
   vn_fase := 3.57;
   --
   vn_qtde_reg_c860 := nvl(fkg_qtde_linha_reg_c860,0);
   --
   pkb_ins_array ( ev_reg_blc      => 'C860'
                 , en_qtd_reg_blc  => vn_qtde_reg_c860 );
   --
   vn_fase := 3.58;
   --
   vn_qtde_reg_c890 := nvl(fkg_qtde_linha_reg_c890,0);
   --
   pkb_ins_array ( ev_reg_blc      => 'C890'
                 , en_qtd_reg_blc  => vn_qtde_reg_c890 );
   --
   vn_fase := 3.59;
   --
   vn_qtde_reg_c990 := nvl(fkg_qtde_linha_reg_c990,0);
   --
   pkb_ins_array ( ev_reg_blc      => 'C990'
                 , en_qtd_reg_blc  => vn_qtde_reg_c990 );
   --
   vn_fase := 4;
   --
   -- BLOCO D: DOCUMENTOS FISCAIS II - SERVIÇOS (ICMS).
   --
   vn_qtde_reg_d001 := nvl(fkg_qtde_linha_reg_d001,0);
   --
   pkb_ins_array ( ev_reg_blc      => 'D001'
                 , en_qtd_reg_blc  => vn_qtde_reg_d001 );
   --
   vn_fase := 4.1;
   --
   vn_qtde_reg_d100 := nvl(fkg_qtde_linha_reg_d100,0);
   --
   pkb_ins_array ( ev_reg_blc      => 'D100'
                 , en_qtd_reg_blc  => vn_qtde_reg_d100 );
   --
   vn_fase := 4.2;
   --
   vn_qtde_reg_d110 := nvl(fkg_qtde_linha_reg_d110,0);
   --
   pkb_ins_array ( ev_reg_blc      => 'D110'
                 , en_qtd_reg_blc  => vn_qtde_reg_d110 );
   --
   vn_fase := 4.3;
   --
   vn_qtde_reg_d120 := nvl(fkg_qtde_linha_reg_d120,0);
   --
   pkb_ins_array ( ev_reg_blc      => 'D120'
                 , en_qtd_reg_blc  => vn_qtde_reg_d120 );
   --
   vn_fase := 4.4;
   --
   vn_qtde_reg_d130 := nvl(fkg_qtde_linha_reg_d130,0);
   --
   pkb_ins_array ( ev_reg_blc      => 'D130'
                 , en_qtd_reg_blc  => vn_qtde_reg_d130 );
   --
   vn_fase := 4.5;
   --
   vn_qtde_reg_d140 := nvl(fkg_qtde_linha_reg_d140,0);
   --
   pkb_ins_array ( ev_reg_blc      => 'D140'
                 , en_qtd_reg_blc  => vn_qtde_reg_d140 );
   --
   vn_fase := 4.6;
   --
   vn_qtde_reg_d150 := nvl(fkg_qtde_linha_reg_d150,0);
   --
   pkb_ins_array ( ev_reg_blc      => 'D150'
                 , en_qtd_reg_blc  => vn_qtde_reg_d150 );
   --
   vn_fase := 4.7;
   --
   vn_qtde_reg_d160 := nvl(fkg_qtde_linha_reg_d160,0);
   --
   pkb_ins_array ( ev_reg_blc      => 'D160'
                 , en_qtd_reg_blc  => vn_qtde_reg_d160 );
   --
   vn_fase := 4.8;
   --
   vn_qtde_reg_d161 := nvl(fkg_qtde_linha_reg_d161,0);
   --
   pkb_ins_array ( ev_reg_blc      => 'D161'
                 , en_qtd_reg_blc  => vn_qtde_reg_d161 );
   --
   vn_fase := 4.9;
   --
   vn_qtde_reg_d162 := nvl(fkg_qtde_linha_reg_d162,0);
   --
   pkb_ins_array ( ev_reg_blc      => 'D162'
                 , en_qtd_reg_blc  => vn_qtde_reg_d162 );
   --
   vn_fase := 4.10;
   --
   vn_qtde_reg_d170 := nvl(fkg_qtde_linha_reg_d170,0);
   --
   pkb_ins_array ( ev_reg_blc      => 'D170'
                 , en_qtd_reg_blc  => vn_qtde_reg_d170 );
   --
   vn_fase := 4.11;
   --
   vn_qtde_reg_d180 := nvl(fkg_qtde_linha_reg_d180,0);
   --
   pkb_ins_array ( ev_reg_blc      => 'D180'
                 , en_qtd_reg_blc  => vn_qtde_reg_d180 );
   --
   vn_fase := 4.12;
   --
   vn_qtde_reg_d190 := nvl(fkg_qtde_linha_reg_d190,0);
   --
   pkb_ins_array ( ev_reg_blc      => 'D190'
                 , en_qtd_reg_blc  => vn_qtde_reg_d190 );
   --
   vn_fase := 4.13;
   --
   vn_qtde_reg_d195 := nvl(fkg_qtde_linha_reg_d195,0);
   --
   pkb_ins_array ( ev_reg_blc      => 'D195'
                 , en_qtd_reg_blc  => vn_qtde_reg_d195 );
   --
   vn_fase := 4.14;
   --
   vn_qtde_reg_d197 := nvl(fkg_qtde_linha_reg_d197,0);
   --
   pkb_ins_array ( ev_reg_blc      => 'D197'
                 , en_qtd_reg_blc  => vn_qtde_reg_d197 );
   --
   vn_fase := 4.15;
   --
   vn_qtde_reg_d300 := nvl(fkg_qtde_linha_reg_d300,0);
   --
   pkb_ins_array ( ev_reg_blc      => 'D300'
                 , en_qtd_reg_blc  => vn_qtde_reg_d300 );
   --
   vn_fase := 4.16;
   --
   vn_qtde_reg_d301 := nvl(fkg_qtde_linha_reg_d301,0);
   --
   pkb_ins_array ( ev_reg_blc      => 'D301'
                 , en_qtd_reg_blc  => vn_qtde_reg_d301 );
   --
   vn_fase := 4.17;
   --
   vn_qtde_reg_d310 := nvl(fkg_qtde_linha_reg_d310,0);
   --
   pkb_ins_array ( ev_reg_blc      => 'D310'
                 , en_qtd_reg_blc  => vn_qtde_reg_d310 );
   --
   vn_fase := 4.18;
   --
   vn_qtde_reg_d350 := nvl(fkg_qtde_linha_reg_d350,0);
   --
   pkb_ins_array ( ev_reg_blc      => 'D350'
                 , en_qtd_reg_blc  => vn_qtde_reg_d350 );
   --
   vn_fase := 4.19;
   --
   vn_qtde_reg_d355 := nvl(fkg_qtde_linha_reg_d355,0);
   --
   pkb_ins_array ( ev_reg_blc      => 'D355'
                 , en_qtd_reg_blc  => vn_qtde_reg_d355 );
   --
   vn_fase := 4.20;
   --
   vn_qtde_reg_d360 := nvl(fkg_qtde_linha_reg_d360,0);
   --
   pkb_ins_array ( ev_reg_blc      => 'D360'
                 , en_qtd_reg_blc  => vn_qtde_reg_d360 );
   --
   vn_fase := 4.21;
   --
   vn_qtde_reg_d365 := nvl(fkg_qtde_linha_reg_d365,0);
   --
   pkb_ins_array ( ev_reg_blc      => 'D365'
                 , en_qtd_reg_blc  => vn_qtde_reg_d365 );
   --
   vn_fase := 4.22;
   --
   vn_qtde_reg_d370 := nvl(fkg_qtde_linha_reg_d370,0);
   --
   pkb_ins_array ( ev_reg_blc      => 'D370'
                 , en_qtd_reg_blc  => vn_qtde_reg_d370 );
   --
   vn_fase := 4.23;
   --
   vn_qtde_reg_d390 := nvl(fkg_qtde_linha_reg_d390,0);
   --
   pkb_ins_array ( ev_reg_blc      => 'D390'
                 , en_qtd_reg_blc  => vn_qtde_reg_d390 );
   --
   vn_fase := 4.24;
   --
   vn_qtde_reg_d400 := nvl(fkg_qtde_linha_reg_d400,0);
   --
   pkb_ins_array ( ev_reg_blc      => 'D400'
                 , en_qtd_reg_blc  => vn_qtde_reg_d400 );
   --
   vn_fase := 4.25;
   --
   vn_qtde_reg_d410 := nvl(fkg_qtde_linha_reg_d410,0);
   --
   pkb_ins_array ( ev_reg_blc      => 'D410'
                 , en_qtd_reg_blc  => vn_qtde_reg_d410 );
   --
   vn_fase := 4.26;
   --
   vn_qtde_reg_d411 := nvl(fkg_qtde_linha_reg_d411,0);
   --
   pkb_ins_array ( ev_reg_blc      => 'D411'
                 , en_qtd_reg_blc  => vn_qtde_reg_d411 );
   --
   vn_fase := 4.27;
   --
   vn_qtde_reg_d420 := nvl(fkg_qtde_linha_reg_d420,0);
   --
   pkb_ins_array ( ev_reg_blc      => 'D420'
                 , en_qtd_reg_blc  => vn_qtde_reg_d420 );
   --
   vn_fase := 4.28;
   --
   vn_qtde_reg_d500 := nvl(fkg_qtde_linha_reg_d500,0);
   --
   pkb_ins_array ( ev_reg_blc      => 'D500'
                 , en_qtd_reg_blc  => vn_qtde_reg_d500 );
   --
   vn_fase := 4.29;
   --
   vn_qtde_reg_d510 := nvl(fkg_qtde_linha_reg_d510,0);
   --
   pkb_ins_array ( ev_reg_blc      => 'D510'
                 , en_qtd_reg_blc  => vn_qtde_reg_d510 );
   --
   vn_fase := 4.30;
   --
   vn_qtde_reg_d530 := nvl(fkg_qtde_linha_reg_d530,0);
   --
   pkb_ins_array ( ev_reg_blc      => 'D530'
                 , en_qtd_reg_blc  => vn_qtde_reg_d530 );
   --
   vn_fase := 4.31;
   --
   vn_qtde_reg_d590 := nvl(fkg_qtde_linha_reg_d590,0);
   --
   pkb_ins_array ( ev_reg_blc      => 'D590'
                 , en_qtd_reg_blc  => vn_qtde_reg_d590 );
   --
   vn_fase := 4.32;
   --
   vn_qtde_reg_d600 := nvl(fkg_qtde_linha_reg_d600,0);
   --
   pkb_ins_array ( ev_reg_blc      => 'D600'
                 , en_qtd_reg_blc  => vn_qtde_reg_d600 );
   --
   vn_fase := 4.33;
   --
   vn_qtde_reg_d610 := nvl(fkg_qtde_linha_reg_d610,0);
   --
   pkb_ins_array ( ev_reg_blc      => 'D610'
                 , en_qtd_reg_blc  => vn_qtde_reg_d610 );
   --
   vn_fase := 4.34;
   --
   vn_qtde_reg_d690 := nvl(fkg_qtde_linha_reg_d690,0);
   --
   pkb_ins_array ( ev_reg_blc      => 'D690'
                 , en_qtd_reg_blc  => vn_qtde_reg_d690 );
   --
   vn_fase := 4.35;
   --
   vn_qtde_reg_d695 := nvl(fkg_qtde_linha_reg_d695,0);
   --
   pkb_ins_array ( ev_reg_blc      => 'D695'
                 , en_qtd_reg_blc  => vn_qtde_reg_d695 );
   --
   vn_fase := 4.36;
   --
   vn_qtde_reg_d696 := nvl(fkg_qtde_linha_reg_d696,0);
   --
   pkb_ins_array ( ev_reg_blc      => 'D696'
                 , en_qtd_reg_blc  => vn_qtde_reg_d696 );
   --
   vn_fase := 4.37;
   --
   vn_qtde_reg_d697 := nvl(fkg_qtde_linha_reg_d697,0);
   --
   pkb_ins_array ( ev_reg_blc      => 'D697'
                 , en_qtd_reg_blc  => vn_qtde_reg_d697 );
   --
   vn_fase := 4.38;
   --
   vn_qtde_reg_d990 := nvl(fkg_qtde_linha_reg_d990,0);
   --
   pkb_ins_array ( ev_reg_blc      => 'D990'
                 , en_qtd_reg_blc  => vn_qtde_reg_d990 );
   --
   vn_fase := 5;
   --
   -- BLOCO E: APURAÇÃO DO ICMS E DO IPI
   --
   vn_qtde_reg_e001 := nvl(fkg_qtde_linha_reg_e001,0);
   --
   pkb_ins_array ( ev_reg_blc      => 'E001'
                 , en_qtd_reg_blc  => vn_qtde_reg_e001 );
   --
   vn_fase := 5.1;
   --
   vn_qtde_reg_e100 := nvl(fkg_qtde_linha_reg_e100,0);
   --
   pkb_ins_array ( ev_reg_blc      => 'E100'
                 , en_qtd_reg_blc  => vn_qtde_reg_e100 );
   --
   vn_fase := 5.2;
   --
   vn_qtde_reg_e110 := nvl(fkg_qtde_linha_reg_e110,0);
   --
   pkb_ins_array ( ev_reg_blc      => 'E110'
                 , en_qtd_reg_blc  => vn_qtde_reg_e110 );
   --
   vn_fase := 5.3;
   --
   vn_qtde_reg_e111 := nvl(fkg_qtde_linha_reg_e111,0);
   --
   pkb_ins_array ( ev_reg_blc      => 'E111'
                 , en_qtd_reg_blc  => vn_qtde_reg_e111 );
   --
   vn_fase := 5.4;
   --
   vn_qtde_reg_e112 := nvl(fkg_qtde_linha_reg_e112,0);
   --
   pkb_ins_array ( ev_reg_blc      => 'E112'
                 , en_qtd_reg_blc  => vn_qtde_reg_e112 );
   --
   vn_fase := 5.5;
   --
   vn_qtde_reg_e113 := nvl(fkg_qtde_linha_reg_e113,0);
   --
   pkb_ins_array ( ev_reg_blc      => 'E113'
                 , en_qtd_reg_blc  => vn_qtde_reg_e113 );
   --
   vn_fase := 5.6;
   --
   vn_qtde_reg_e115 := nvl(fkg_qtde_linha_reg_e115,0);
   --
   pkb_ins_array ( ev_reg_blc      => 'E115'
                 , en_qtd_reg_blc  => vn_qtde_reg_e115 );
   --
   vn_fase := 5.7;
   --
   vn_qtde_reg_e116 := nvl(fkg_qtde_linha_reg_e116,0);
   --
   pkb_ins_array ( ev_reg_blc      => 'E116'
                 , en_qtd_reg_blc  => vn_qtde_reg_e116 );
   --
   vn_fase := 5.8;
   --
   vn_qtde_reg_e200 := nvl(fkg_qtde_linha_reg_e200,0);
   --
   pkb_ins_array ( ev_reg_blc      => 'E200'
                 , en_qtd_reg_blc  => vn_qtde_reg_e200 );
   --
   vn_fase := 5.9;
   --
   vn_qtde_reg_e210 := nvl(fkg_qtde_linha_reg_e210,0);
   --
   pkb_ins_array ( ev_reg_blc      => 'E210'
                 , en_qtd_reg_blc  => vn_qtde_reg_e210 );
   --
   vn_fase := 5.10;
   --
   vn_qtde_reg_e220 := nvl(fkg_qtde_linha_reg_e220,0);
   --
   pkb_ins_array ( ev_reg_blc      => 'E220'
                 , en_qtd_reg_blc  => vn_qtde_reg_e220 );
   --
   vn_fase := 5.11;
   --
   vn_qtde_reg_e230 := nvl(fkg_qtde_linha_reg_e230,0);
   --
   pkb_ins_array ( ev_reg_blc      => 'E230'
                 , en_qtd_reg_blc  => vn_qtde_reg_e230 );
   --
   vn_fase := 5.12;
   --
   vn_qtde_reg_e240 := nvl(fkg_qtde_linha_reg_e240,0);
   --
   pkb_ins_array ( ev_reg_blc      => 'E240'
                 , en_qtd_reg_blc  => vn_qtde_reg_e240 );
   --
   vn_fase := 5.13;
   --
   vn_qtde_reg_e250 := nvl(fkg_qtde_linha_reg_e250,0);
   --
   pkb_ins_array ( ev_reg_blc      => 'E250'
                 , en_qtd_reg_blc  => vn_qtde_reg_e250 );
   --

   --
   vn_fase := 5.131;
   --
   vn_qtde_reg_e300 := nvl(fkg_qtde_linha_reg_e300,0);
   --
   pkb_ins_array ( ev_reg_blc      => 'E300'
                 , en_qtd_reg_blc  => vn_qtde_reg_e300 );
   --
   vn_fase := 5.132;
   --
   vn_qtde_reg_e310 := nvl(fkg_qtde_linha_reg_e310,0);
   --
   pkb_ins_array ( ev_reg_blc      => 'E310'
                 , en_qtd_reg_blc  => vn_qtde_reg_e310 );
   --
   vn_fase := 5.133;
   --
   vn_qtde_reg_e311 := nvl(fkg_qtde_linha_reg_e311,0);
   --
   pkb_ins_array ( ev_reg_blc      => 'E311'
                 , en_qtd_reg_blc  => vn_qtde_reg_e311 );
   --
   vn_fase := 5.134;
   --
   vn_qtde_reg_e312 := nvl(fkg_qtde_linha_reg_e312,0);
   --
   pkb_ins_array ( ev_reg_blc      => 'E312'
                 , en_qtd_reg_blc  => vn_qtde_reg_e312 );
   --
   vn_fase := 5.135;
   --
   vn_qtde_reg_e313 := nvl(fkg_qtde_linha_reg_e313,0);
   --
   pkb_ins_array ( ev_reg_blc      => 'E313'
                 , en_qtd_reg_blc  => vn_qtde_reg_e313 );
   --
   vn_fase := 5.136;
   --
   vn_qtde_reg_e316 := nvl(fkg_qtde_linha_reg_e316,0);
   --
   pkb_ins_array ( ev_reg_blc      => 'E316'
                 , en_qtd_reg_blc  => vn_qtde_reg_e316 );

   --
   vn_fase := 5.14;
   --
   vn_qtde_reg_e500 := nvl(fkg_qtde_linha_reg_e500,0);
   --
   pkb_ins_array ( ev_reg_blc      => 'E500'
                 , en_qtd_reg_blc  => vn_qtde_reg_e500 );
   --
   vn_fase := 5.15;
   --
   vn_qtde_reg_e510 := nvl(fkg_qtde_linha_reg_e510,0);
   --
   pkb_ins_array ( ev_reg_blc      => 'E510'
                 , en_qtd_reg_blc  => vn_qtde_reg_e510 );
   --
   vn_fase := 5.16;
   --
   vn_qtde_reg_e520 := nvl(fkg_qtde_linha_reg_e520,0);
   --
   pkb_ins_array ( ev_reg_blc      => 'E520'
                 , en_qtd_reg_blc  => vn_qtde_reg_e520 );
   --
   vn_fase := 5.17;
   --
   vn_qtde_reg_e530 := nvl(fkg_qtde_linha_reg_e530,0);
   --
   pkb_ins_array ( ev_reg_blc      => 'E530'
                 , en_qtd_reg_blc  => vn_qtde_reg_e530 );
   --
   vn_fase := 5.18;
   --
   vn_qtde_reg_e531 := nvl(fkg_qtde_linha_reg_e531,0);
   --
   pkb_ins_array ( ev_reg_blc      => 'E531'
                 , en_qtd_reg_blc  => vn_qtde_reg_e531 );
   --
   vn_fase := 5.19;
   --
   vn_qtde_reg_e990 := nvl(fkg_qtde_linha_reg_e990,0);
   --
   pkb_ins_array ( ev_reg_blc      => 'E990'
                 , en_qtd_reg_blc  => vn_qtde_reg_e990 );
   --
   -- BLOCO G ¿ CONTROLE DO CRÉDITO DE ICMS DO ATIVO PERMANENTE ¿ CIAP ¿ modelos ¿C¿ e ¿D¿
   --
   vn_fase := 6;
   --
   vn_qtde_reg_g001 := nvl(fkg_qtde_linha_reg_g001,0);
   --
   pkb_ins_array ( ev_reg_blc      => 'G001'
                 , en_qtd_reg_blc  => vn_qtde_reg_g001 );
   --
   vn_fase := 6.1;
   --
   vn_qtde_reg_g110 := nvl(fkg_qtde_linha_reg_g110,0);
   --
   pkb_ins_array ( ev_reg_blc      => 'G110'
                 , en_qtd_reg_blc  => vn_qtde_reg_g110 );
   --
   vn_fase := 6.2;
   --
   vn_qtde_reg_g125 := nvl(fkg_qtde_linha_reg_g125,0);
   --
   pkb_ins_array ( ev_reg_blc      => 'G125'
                 , en_qtd_reg_blc  => vn_qtde_reg_g125 );
   --
   vn_fase := 6.3;
   --
   vn_qtde_reg_g126 := nvl(fkg_qtde_linha_reg_g126,0);
   --
   pkb_ins_array ( ev_reg_blc      => 'G126'
                 , en_qtd_reg_blc  => vn_qtde_reg_g126 );
   --
   vn_fase := 6.4;
   --
   vn_qtde_reg_g130 := nvl(fkg_qtde_linha_reg_g130,0);
   --
   pkb_ins_array ( ev_reg_blc      => 'G130'
                 , en_qtd_reg_blc  => vn_qtde_reg_g130 );
   --
   vn_fase := 6.5;
   --
   vn_qtde_reg_g140 := nvl(fkg_qtde_linha_reg_g140,0);
   --
   pkb_ins_array ( ev_reg_blc      => 'G140'
                 , en_qtd_reg_blc  => vn_qtde_reg_g140 );
   --
   vn_fase := 6.6;
   --
   vn_qtde_reg_g990 := nvl(fkg_qtde_linha_reg_g990,0);
   --
   pkb_ins_array ( ev_reg_blc      => 'G990'
                 , en_qtd_reg_blc  => vn_qtde_reg_g990 );
   --
   vn_fase := 7;
   --
   -- BLOCO H: INVENTÁRIO FÍSICO
   --
   vn_qtde_reg_h001 := nvl(fkg_qtde_linha_reg_h001,0);
   --
   pkb_ins_array ( ev_reg_blc      => 'H001'
                 , en_qtd_reg_blc  => vn_qtde_reg_h001 );
   --
   vn_fase := 7.1;
   --
   vn_qtde_reg_h005 := nvl(fkg_qtde_linha_reg_h005,0);
   --
   pkb_ins_array ( ev_reg_blc      => 'H005'
                 , en_qtd_reg_blc  => vn_qtde_reg_h005 );
   --
   vn_fase := 7.2;
   --
   vn_qtde_reg_h010 := nvl(fkg_qtde_linha_reg_h010,0);
   --
   pkb_ins_array ( ev_reg_blc      => 'H010'
                 , en_qtd_reg_blc  => vn_qtde_reg_h010 );
   --
   vn_fase := 7.3;
   --
   vn_qtde_reg_h020 := nvl(fkg_qtde_linha_reg_h020,0);
   --
   pkb_ins_array ( ev_reg_blc      => 'H020'
                 , en_qtd_reg_blc  => vn_qtde_reg_h020 );
   --
   vn_fase := 7.4;
   --
   vn_qtde_reg_h990 := nvl(fkg_qtde_linha_reg_h990,0);
   --
   pkb_ins_array ( ev_reg_blc      => 'H990'
                 , en_qtd_reg_blc  => vn_qtde_reg_h990 );
   --
   vn_fase := 8;
   --
   -- BLOCO K: CONTROLE DA PRODUÇÃO E DO ESTOQUE
   --
   vn_qtde_reg_k001 := nvl(fkg_qtde_linha_reg_k001,0);
   --
   pkb_ins_array ( ev_reg_blc      => 'K001'
                 , en_qtd_reg_blc  => vn_qtde_reg_k001 );
   --
   vn_fase := 8.1;
   --
   vn_qtde_reg_k100 := nvl(fkg_qtde_linha_reg_k100,0);
   --
   pkb_ins_array ( ev_reg_blc      => 'K100'
                 , en_qtd_reg_blc  => vn_qtde_reg_k100 );
   --
   vn_fase := 8.2;
   --
   vn_qtde_reg_k200 := nvl(fkg_qtde_linha_reg_k200,0);
   --
   pkb_ins_array ( ev_reg_blc      => 'K200'
                 , en_qtd_reg_blc  => vn_qtde_reg_k200 );
   --
   vn_fase := 8.3;
   --
   vn_qtde_reg_k210 := nvl(fkg_qtde_linha_reg_k210,0);
   --
   pkb_ins_array ( ev_reg_blc      => 'K210'
                 , en_qtd_reg_blc  => vn_qtde_reg_k210 );
   --
   vn_fase := 8.4;
   --
   vn_qtde_reg_k215 := nvl(fkg_qtde_linha_reg_k215,0);
   --
   pkb_ins_array ( ev_reg_blc      => 'K215'
                 , en_qtd_reg_blc  => vn_qtde_reg_k215 );
   --
   vn_fase := 8.5;
   --
   vn_qtde_reg_k220 := nvl(fkg_qtde_linha_reg_k220,0);
   --
   pkb_ins_array ( ev_reg_blc      => 'K220'
                 , en_qtd_reg_blc  => vn_qtde_reg_k220 );
   --
   vn_fase := 8.6;
   --
   vn_qtde_reg_k230 := nvl(fkg_qtde_linha_reg_k230,0);
   --
   pkb_ins_array ( ev_reg_blc      => 'K230'
                 , en_qtd_reg_blc  => vn_qtde_reg_k230 );
   --
   vn_fase := 8.7;
   --
   vn_qtde_reg_k235 := nvl(fkg_qtde_linha_reg_k235,0);
   --
   pkb_ins_array ( ev_reg_blc      => 'K235'
                 , en_qtd_reg_blc  => vn_qtde_reg_k235 );
   --
   vn_fase := 8.8;
   --
   vn_qtde_reg_k250 := nvl(fkg_qtde_linha_reg_k250,0);
   --
   pkb_ins_array ( ev_reg_blc      => 'K250'
                 , en_qtd_reg_blc  => vn_qtde_reg_k250 );
   --
   vn_fase := 8.9;
   --
   vn_qtde_reg_k255 := nvl(fkg_qtde_linha_reg_k255,0);
   --
   pkb_ins_array ( ev_reg_blc      => 'K255'
                 , en_qtd_reg_blc  => vn_qtde_reg_k255 );
   --
   vn_fase := 8.10;
   --
   vn_qtde_reg_k260 := nvl(fkg_qtde_linha_reg_k260,0);
   --
   pkb_ins_array ( ev_reg_blc      => 'K260'
                 , en_qtd_reg_blc  => vn_qtde_reg_k260 );
   --
   vn_fase := 8.11;
   --
   vn_qtde_reg_k265 := nvl(fkg_qtde_linha_reg_k265,0);
   --
   pkb_ins_array ( ev_reg_blc      => 'K265'
                 , en_qtd_reg_blc  => vn_qtde_reg_k265 );
   --
   vn_fase := 8.12;
   --
   vn_qtde_reg_k270 := nvl(fkg_qtde_linha_reg_k270,0);
   --
   pkb_ins_array ( ev_reg_blc      => 'K270'
                 , en_qtd_reg_blc  => vn_qtde_reg_k270 );
   --
   vn_fase := 8.13;
   --
   vn_qtde_reg_k275 := nvl(fkg_qtde_linha_reg_k275,0);
   --
   pkb_ins_array ( ev_reg_blc      => 'K275'
                 , en_qtd_reg_blc  => vn_qtde_reg_k275 );
   --
   vn_fase := 8.14;
   --
   vn_qtde_reg_k280 := nvl(fkg_qtde_linha_reg_k280,0);
   --
   pkb_ins_array ( ev_reg_blc      => 'K280'
                 , en_qtd_reg_blc  => vn_qtde_reg_k280 );
   --
   vn_fase := 8.15;
   --
   vn_qtde_reg_k290 := nvl(fkg_qtde_linha_reg_k290,0);
   --
   pkb_ins_array ( ev_reg_blc      => 'K290'
                 , en_qtd_reg_blc  => vn_qtde_reg_k290 );
   --
   vn_fase := 8.16;
   --
   vn_qtde_reg_k291 := nvl(fkg_qtde_linha_reg_k291,0);
   --
   pkb_ins_array ( ev_reg_blc      => 'K291'
                 , en_qtd_reg_blc  => vn_qtde_reg_k291 );
   --
   vn_fase := 8.17;
   --
   vn_qtde_reg_k292 := nvl(fkg_qtde_linha_reg_k292,0);
   --
   pkb_ins_array ( ev_reg_blc      => 'K292'
                 , en_qtd_reg_blc  => vn_qtde_reg_k292 );
   --
   vn_fase := 8.18;
   --
   vn_qtde_reg_k300 := nvl(fkg_qtde_linha_reg_k300,0);
   --
   pkb_ins_array ( ev_reg_blc      => 'K300'
                 , en_qtd_reg_blc  => vn_qtde_reg_k300 );
   --
   vn_fase := 8.19;
   --
   vn_qtde_reg_k301 := nvl(fkg_qtde_linha_reg_k301,0);
   --
   pkb_ins_array ( ev_reg_blc      => 'K301'
                 , en_qtd_reg_blc  => vn_qtde_reg_k301 );
   --
   vn_fase := 8.20;
   --
   vn_qtde_reg_k302 := nvl(fkg_qtde_linha_reg_k302,0);
   --
   pkb_ins_array ( ev_reg_blc      => 'K302'
                 , en_qtd_reg_blc  => vn_qtde_reg_k302 );
   --
   vn_fase := 8.21;
   --
   vn_qtde_reg_k990 := nvl(fkg_qtde_linha_reg_k990,0);
   --
   pkb_ins_array ( ev_reg_blc      => 'K990'
                 , en_qtd_reg_blc  => vn_qtde_reg_k990 );
   --
   vn_fase := 9;
   --
   -- BLOCO 1: OUTRAS INFORMAÇÕES
   --
   vn_qtde_reg_1001 := nvl(fkg_qtde_linha_reg_1001,0);
   --
   pkb_ins_array ( ev_reg_blc      => '1001'
                 , en_qtd_reg_blc  => vn_qtde_reg_1001 );
   --
   vn_fase := 9.1;
   --
   vn_qtde_reg_1010 := nvl(fkg_qtde_linha_reg_1010,0);
   --
   pkb_ins_array ( ev_reg_blc      => '1010'
                 , en_qtd_reg_blc  => vn_qtde_reg_1010 );
   --
   vn_fase := 9.2;
   --
   vn_qtde_reg_1100 := nvl(fkg_qtde_linha_reg_1100,0);
   --
   pkb_ins_array ( ev_reg_blc      => '1100'
                 , en_qtd_reg_blc  => vn_qtde_reg_1100 );
   --
   vn_fase := 9.3;
   --
   vn_qtde_reg_1105 := nvl(fkg_qtde_linha_reg_1105,0);
   --
   pkb_ins_array ( ev_reg_blc      => '1105'
                 , en_qtd_reg_blc  => vn_qtde_reg_1105 );
   --
   vn_fase := 9.4;
   --
   vn_qtde_reg_1110 := nvl(fkg_qtde_linha_reg_1110,0);
   --
   pkb_ins_array ( ev_reg_blc      => '1110'
                 , en_qtd_reg_blc  => vn_qtde_reg_1110 );
   --
   vn_fase := 9.5;
   --
   vn_qtde_reg_1200 := nvl(fkg_qtde_linha_reg_1200,0);
   --
   pkb_ins_array ( ev_reg_blc      => '1200'
                 , en_qtd_reg_blc  => vn_qtde_reg_1200 );
   --
   vn_fase := 9.6;
   --
   vn_qtde_reg_1210 := nvl(fkg_qtde_linha_reg_1210,0);
   --
   pkb_ins_array ( ev_reg_blc      => '1210'
                 , en_qtd_reg_blc  => vn_qtde_reg_1210 );
   --
   vn_fase := 9.7;
   --
   vn_qtde_reg_1300 := nvl(fkg_qtde_linha_reg_1300,0);
   --
   pkb_ins_array ( ev_reg_blc      => '1300'
                 , en_qtd_reg_blc  => vn_qtde_reg_1300 );
   --
   vn_fase := 9.8;
   --
   vn_qtde_reg_1310 := nvl(fkg_qtde_linha_reg_1310,0);
   --
   pkb_ins_array ( ev_reg_blc      => '1310'
                 , en_qtd_reg_blc  => vn_qtde_reg_1310 );
   --
   vn_fase := 9.9;
   --
   vn_qtde_reg_1320 := nvl(fkg_qtde_linha_reg_1320,0);
   --
   pkb_ins_array ( ev_reg_blc      => '1320'
                 , en_qtd_reg_blc  => vn_qtde_reg_1320 );
   --
   vn_fase := 9.10;
   --
   vn_qtde_reg_1350 := nvl(fkg_qtde_linha_reg_1350,0);
   --
   pkb_ins_array ( ev_reg_blc      => '1350'
                 , en_qtd_reg_blc  => vn_qtde_reg_1350 );
   --
   vn_fase := 9.11;
   --
   vn_qtde_reg_1360 := nvl(fkg_qtde_linha_reg_1360,0);
   --
   pkb_ins_array ( ev_reg_blc      => '1360'
                 , en_qtd_reg_blc  => vn_qtde_reg_1360 );
   --
   vn_fase := 9.12;
   --
   vn_qtde_reg_1370 := nvl(fkg_qtde_linha_reg_1370,0);
   --
   pkb_ins_array ( ev_reg_blc      => '1370'
                 , en_qtd_reg_blc  => vn_qtde_reg_1370 );
   --
   vn_fase := 9.13;
   --
   vn_qtde_reg_1390 := nvl(fkg_qtde_linha_reg_1390,0);
   --
   pkb_ins_array ( ev_reg_blc      => '1390'
                 , en_qtd_reg_blc  => vn_qtde_reg_1390 );
   --
   vn_fase := 9.14;
   --
   vn_qtde_reg_1391 := nvl(fkg_qtde_linha_reg_1391,0);
   --
   pkb_ins_array ( ev_reg_blc      => '1391'
                 , en_qtd_reg_blc  => vn_qtde_reg_1391 );
   --
   vn_fase := 9.15;
   --
   vn_qtde_reg_1400 := nvl(fkg_qtde_linha_reg_1400,0);
   --
   pkb_ins_array ( ev_reg_blc      => '1400'
                 , en_qtd_reg_blc  => vn_qtde_reg_1400 );
   --
   vn_fase := 9.16;
   --
   vn_qtde_reg_1500 := nvl(fkg_qtde_linha_reg_1500,0);
   --
   pkb_ins_array ( ev_reg_blc      => '1500'
                 , en_qtd_reg_blc  => vn_qtde_reg_1500 );
   --
   vn_fase := 9.17;
   --
   vn_qtde_reg_1510 := nvl(fkg_qtde_linha_reg_1510,0);
   --
   pkb_ins_array ( ev_reg_blc      => '1510'
                 , en_qtd_reg_blc  => vn_qtde_reg_1510 );
   --
   vn_fase := 9.18;
   --
   vn_qtde_reg_1600 := nvl(fkg_qtde_linha_reg_1600,0);
   --
   pkb_ins_array ( ev_reg_blc      => '1600'
                 , en_qtd_reg_blc  => vn_qtde_reg_1600 );
   --
   vn_fase := 9.19;
   --
   vn_qtde_reg_1700 := nvl(fkg_qtde_linha_reg_1700,0);
   --
   pkb_ins_array ( ev_reg_blc      => '1700'
                 , en_qtd_reg_blc  => vn_qtde_reg_1700 );
   --
   vn_fase := 9.20;
   --
   vn_qtde_reg_1710 := nvl(fkg_qtde_linha_reg_1710,0);
   --
   pkb_ins_array ( ev_reg_blc      => '1710'
                 , en_qtd_reg_blc  => vn_qtde_reg_1710 );
   --
   vn_fase := 9.21;
   --
   vn_qtde_reg_1800 := nvl(fkg_qtde_linha_reg_1800,0);
   --
   pkb_ins_array ( ev_reg_blc      => '1800'
                 , en_qtd_reg_blc  => vn_qtde_reg_1800 );
   --
   vn_fase := 9.22;
   --
   vn_qtde_reg_1900 := nvl(fkg_qtde_linha_reg_1900,0);
   --
   pkb_ins_array ( ev_reg_blc      => '1900'
                 , en_qtd_reg_blc  => vn_qtde_reg_1900 );
   --
   vn_fase := 9.23;
   --
   vn_qtde_reg_1910 := nvl(fkg_qtde_linha_reg_1910,0);
   --
   pkb_ins_array ( ev_reg_blc      => '1910'
                 , en_qtd_reg_blc  => vn_qtde_reg_1910 );
   --
   vn_fase := 9.24;
   --
   vn_qtde_reg_1920 := nvl(fkg_qtde_linha_reg_1920,0);
   --
   pkb_ins_array ( ev_reg_blc      => '1920'
                 , en_qtd_reg_blc  => vn_qtde_reg_1920 );
   --
   vn_fase := 9.25;
   --
   vn_qtde_reg_1921 := nvl(fkg_qtde_linha_reg_1921,0);
   --
   pkb_ins_array ( ev_reg_blc      => '1921'
                 , en_qtd_reg_blc  => vn_qtde_reg_1921 );
   --
   vn_fase := 9.26;
   --
   vn_qtde_reg_1922 := nvl(fkg_qtde_linha_reg_1922,0);
   --
   pkb_ins_array ( ev_reg_blc      => '1922'
                 , en_qtd_reg_blc  => vn_qtde_reg_1922 );
   --
   vn_fase := 9.27;
   --
   vn_qtde_reg_1923 := nvl(fkg_qtde_linha_reg_1923,0);
   --
   pkb_ins_array ( ev_reg_blc      => '1923'
                 , en_qtd_reg_blc  => vn_qtde_reg_1923 );
   --
   vn_fase := 9.28;
   --
   vn_qtde_reg_1925 := nvl(fkg_qtde_linha_reg_1925,0);
   --
   pkb_ins_array ( ev_reg_blc      => '1925'
                 , en_qtd_reg_blc  => vn_qtde_reg_1925 );
   --
   vn_fase := 9.29;
   --
   vn_qtde_reg_1926 := nvl(fkg_qtde_linha_reg_1926,0);
   --
   pkb_ins_array ( ev_reg_blc      => '1926'
                 , en_qtd_reg_blc  => vn_qtde_reg_1926 );
   --
   vn_fase := 9.30;
   --
   vn_qtde_reg_1960 := nvl(fkg_qtde_linha_reg_1960,0);
   --
   pkb_ins_array ( ev_reg_blc      => '1960'
                 , en_qtd_reg_blc  => vn_qtde_reg_1960 );
   --
   vn_fase := 9.31;
   --
   vn_qtde_reg_1970 := nvl(fkg_qtde_linha_reg_1970,0);
   --
   pkb_ins_array ( ev_reg_blc      => '1970'
                 , en_qtd_reg_blc  => vn_qtde_reg_1970 );
   --
   vn_fase := 9.32;
   --
   vn_qtde_reg_1975 := nvl(fkg_qtde_linha_reg_1975,0);
   --
   pkb_ins_array ( ev_reg_blc      => '1975'
                 , en_qtd_reg_blc  => vn_qtde_reg_1975 );
   --  
   vn_fase := 9.33;
   --
   vn_qtde_reg_1980 := nvl(fkg_qtde_linha_reg_1980,0);
   --
   pkb_ins_array ( ev_reg_blc      => '1980'
                 , en_qtd_reg_blc  => vn_qtde_reg_1980 );
   --           
   vn_fase := 9.34;
   --
   vn_qtde_reg_1990 := nvl(fkg_qtde_linha_reg_1990,0);
   --
   pkb_ins_array ( ev_reg_blc      => '1990'
                 , en_qtd_reg_blc  => vn_qtde_reg_1990 );
   --
   vn_fase := 10;
   --
   -- BLOCO 9: CONTROLE E ENCERRAMENTO DO ARQUIVO DIGITAL
   --
   vn_qtde_reg_9001 := nvl(fkg_qtde_linha_reg_9001,0);
   --
   pkb_ins_array ( ev_reg_blc      => '9001'
                 , en_qtd_reg_blc  => vn_qtde_reg_9001 );
   --
   vn_fase := 10.1;
   --
   vn_qtde_reg_9900 := nvl(fkg_qtde_linha_reg_9900,0) + 3; -- "3" corresponde aos registro 9001, 9990 e 9999
   --
   pkb_ins_array ( ev_reg_blc      => '9900'
                 , en_qtd_reg_blc  => vn_qtde_reg_9900 );
   --
   vn_fase := 10.2;
   -- Monta o REGISTRO 9990: ENCERRAMENTO DO BLOCO 9
   vt_tab_reg_9990(1).reg := '9990';
   vt_tab_reg_9990(1).qtd_lin_9 := nvl(vn_qtde_reg_9900,0) + 3; -- "3" corresponde aos registro 9001, 9990 e 9999
   --
   vn_fase := 10.3;
   --
   vn_qtde_reg_9990 := nvl(fkg_qtde_linha_reg_9990,0);
   --
   pkb_ins_array ( ev_reg_blc      => '9990'
                 , en_qtd_reg_blc  => vn_qtde_reg_9990 );
   --
   vn_fase := 10.4;
   -- Monta o REGISTRO 9999: ENCERRAMENTO DO ARQUIVO DIGITAL
   vt_tab_reg_9999(1).reg := '9999';
   vt_tab_reg_9999(1).qtd_lin := 0;
   --
   vn_qtde_reg_9999 := nvl(fkg_qtde_linha_reg_9999,0);
   --
   pkb_ins_array ( ev_reg_blc      => '9999'
                 , en_qtd_reg_blc  => vn_qtde_reg_9999 );
   --
   vn_fase := 11;
   --
   begin
      --
      vn_qtd_lin_0 := nvl(vt_tab_reg_0990(1).qtd_lin_0,0);
      --
   exception
      when others then
         vn_qtd_lin_0 := 0;
   end;
   --
   begin
      --
      vn_qtd_lin_b := nvl(vt_tab_reg_b990(1).qtd_lin_b,0);
      --
   exception
      when others then
         vn_qtd_lin_b := 0;
   end;
   --   
   begin
      --
      vn_qtd_lin_c := nvl(vt_tab_reg_c990(1).qtd_lin_c,0);
      --
   exception
      when others then
         vn_qtd_lin_c := 0;
   end;
   --
   begin
      --
      vn_qtd_lin_d := nvl(vt_tab_reg_d990(1).qtd_lin_d,0);
      --
   exception
      when others then
         vn_qtd_lin_d := 0;
   end;
   --
   begin
      --
      vn_qtd_lin_e := nvl(vt_tab_reg_e990(1).qtd_lin_e,0);
      --
   exception
      when others then
         vn_qtd_lin_e := 0;
   end;
   --
   begin
      --
      vn_qtd_lin_g := nvl(vt_tab_reg_g990(1).qtd_lin_g,0);
      --
   exception
      when others then
         vn_qtd_lin_g := 0;
   end;
   --
   begin
      --
      vn_qtd_lin_h := nvl(vt_tab_reg_h990(1).qtd_lin_h,0);
      --
   exception
      when others then
         vn_qtd_lin_h := 0;
   end;
   --
   begin
      --
      vn_qtd_lin_k := nvl(vt_tab_reg_k990(1).qtd_lin_k,0);
      --
   exception
      when others then
         vn_qtd_lin_k := 0;
   end;
   --
   begin
      --
      vn_qtd_lin_1 := nvl(vt_tab_reg_1990(1).qtd_lin_1,0);
      --
   exception
      when others then
         vn_qtd_lin_1 := 0;
   end;
   --
   begin
      --
      vn_qtd_lin_9 := nvl(vt_tab_reg_9990(1).qtd_lin_9,0);
      --
   exception
      when others then
         vn_qtd_lin_9 := 0;
   end;
   --
   vn_fase := 11;
   --
   vt_tab_reg_9999(1).qtd_lin := nvl(vn_qtd_lin_0,0)
                                 + nvl(vn_qtd_lin_b,0)
                                 + nvl(vn_qtd_lin_c,0)
                                 + nvl(vn_qtd_lin_d,0)
                                 + nvl(vn_qtd_lin_e,0)
                                 + nvl(vn_qtd_lin_g,0)
                                 + nvl(vn_qtd_lin_h,0)
                                 + nvl(vn_qtd_lin_k,0)
                                 + nvl(vn_qtd_lin_1,0)
                                 + nvl(vn_qtd_lin_9,0);
   --
exception
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_monta_reg_9900 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end pkb_monta_reg_9900;

-------------------------------------------------------------------------------------------------------

-- Monta o REGISTRO 9001: ABERTURA DO BLOCO 9
procedure pkb_monta_reg_9001
is
   --
begin
   --
   vt_tab_reg_9001(1).reg      := '9001';
   vt_tab_reg_9001(1).ind_mov  := 0;
   --
exception
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_monta_reg_9001: ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end pkb_monta_reg_9001;

-------------------------------------------------------------------------------------------------------

-- procedimento monta os registros do BLOCO 9: CONTROLE E ENCERRAMENTO DO ARQUIVO DIGITAL
procedure pkb_monta_bloco_9
is
   --
   vn_fase  number := 0;
   --
begin
   --
   vn_fase := 1;
   -- Monta o REGISTRO 9001: ABERTURA DO BLOCO 9
   pkb_monta_reg_9001;
   --
   vn_fase := 2;
   -- Monta o REGISTRO 9900: REGISTROS DO ARQUIVO
   pkb_monta_reg_9900;
   --
exception
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_monta_bloco_9 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end pkb_monta_bloco_9;

-------------------------------------------------------------------------------------------------------

-- monta o REGISTRO 0990: ENCERRAMENTO DO BLOCO 0
procedure pkb_monta_reg_0990
is
   --
begin
   --
   vt_tab_reg_0990(1).reg := '0990';
   vt_tab_reg_0990(1).qtd_lin_0 := nvl(fkg_qtde_linha_reg_0000,0)
                                   + nvl(fkg_qtde_linha_reg_0001,0)
                                   + nvl(fkg_qtde_linha_reg_0002,0)
                                   + nvl(fkg_qtde_linha_reg_0005,0)
                                   + nvl(fkg_qtde_linha_reg_0015,0)
                                   + nvl(fkg_qtde_linha_reg_0100,0)
                                   + nvl(fkg_qtde_linha_reg_0150,0)
                                   + nvl(fkg_qtde_linha_reg_0175,0)
                                   + nvl(fkg_qtde_linha_reg_0190,0)
                                   + nvl(fkg_qtde_linha_reg_0200,0)
                                   + nvl(fkg_qtde_linha_reg_0205,0)
                                   + nvl(fkg_qtde_linha_reg_0206,0)
                                   + nvl(fkg_qtde_linha_reg_0210,0)
                                   + nvl(fkg_qtde_linha_reg_0220,0)
                                   + nvl(fkg_qtde_linha_reg_0300,0)
                                   + nvl(fkg_qtde_linha_reg_0305,0)
                                   + nvl(fkg_qtde_linha_reg_0400,0)
                                   + nvl(fkg_qtde_linha_reg_0450,0)
                                   + nvl(fkg_qtde_linha_reg_0460,0)
                                   + nvl(fkg_qtde_linha_reg_0500,0)
                                   + nvl(fkg_qtde_linha_reg_0600,0)
                                   + 1; -- "1" representa o registro 0990
   --
exception
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_monta_reg_0990: ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end pkb_monta_reg_0990;

-------------------------------------------------------------------------------------------------------

-- Monta o REGISTRO 0600: CENTRO DE CUSTOS
-- A rotina foi alterada para utilizar um indexador sequencial devido as situações:
-- Se a rotina utilizava o ID do centro de custo como indexador, ocorriam repetições por possuírem COD_CCUS iguais em empresas diferentes.
-- Se a rotina utilizava o ID do centro de custo como indexador, ocorriam erros devido a qtde de carateres numéricos, pois a variável aceita até 9 caracteres.
-- Se a rotina utilizava o COD_CCUS como indexador, ocorriam erros pois podem existir caracteres letras ou passar do tamanho de 9 caracteres.
-- Para verificar esses processos, as versões anteriores estão no repositório.
--
procedure pkb_monta_reg_0600 ( en_centrocusto_id  centro_custo.id%TYPE )
is
   --
   vn_fase     number := 0;
   i           pls_integer;
   vv_cod_ccus centro_custo.cod_ccus%type;
   --
   cursor c_ccus is
   select cc.cod_ccus
     from centro_custo cc
    where cc.id = en_centrocusto_id;
   --
   cursor c_0600 is
   select '0600' tp_reg
        , cc.id centrocusto_id
        , cc.dt_inc_alt
        , cc.cod_ccus
        , cc.descr_ccus
     from centro_custo cc
    where cc.id = en_centrocusto_id;
   --
begin
   --
   vn_fase := 1;
   --
   open c_ccus;
   fetch c_ccus into vv_cod_ccus;
   close c_ccus;
   --
   vn_fase := 2;
   --
   i := nvl(vt_tab_reg_0600.first,0);
   --
   vn_fase := 3;
   --
   loop
      --
      vn_fase := 4;
      --
      if nvl(i,0) = 0 then
         --
         vn_fase := 5;
         --
         i := i + 1;
         --
         open c_0600;
         fetch c_0600 into vt_tab_reg_0600(i).reg
                         , vt_tab_reg_0600(i).centrocusto_id
                         , vt_tab_reg_0600(i).dt_alt
                         , vt_tab_reg_0600(i).cod_ccus
                         , vt_tab_reg_0600(i).ccus;
         close c_0600;
         --
         vn_fase := 6;
         --
         exit;
         --
      end if;
      --
      vn_fase := 7;
      --
      if vt_tab_reg_0600(i).cod_ccus = vv_cod_ccus then
         --
         vn_fase := 8;
         --
         exit;
         --
      end if;
      --
      vn_fase := 9;
      --
      if i = vt_tab_reg_0600.last then
         --
         vn_fase := 10;
         --
         i := i + 1;
         --
         open c_0600;
         fetch c_0600 into vt_tab_reg_0600(i).reg
                         , vt_tab_reg_0600(i).centrocusto_id
                         , vt_tab_reg_0600(i).dt_alt
                         , vt_tab_reg_0600(i).cod_ccus
                         , vt_tab_reg_0600(i).ccus;
         close c_0600;
         --
         vn_fase := 11;
         --
         exit;
         --
      else
         --
         vn_fase := 12;
         --
         i := vt_tab_reg_0600.next(i);
         --
      end if;
      --
   end loop;
   --
exception
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_monta_reg_0600 fase('||vn_fase||'): '||sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end pkb_monta_reg_0600;

-------------------------------------------------------------------------------------------------------

-- Monta o REGISTRO 0500: PLANO DE CONTAS CONTÁBEIS
-- A rotina foi alterada para utilizar um indexador sequencial devido as situações:
-- Se a rotina utilizava o ID do plano de conta como indexador, ocorriam contas repetidas por possuírem COD_CTA iguais em empresas diferentes.
-- Se a rotina utilizava o ID do plano de conta como indexador, ocorriam erros devido a qtde de carateres numéricos, pois a variável aceita até 9 caracteres.
-- Se a rotina utilizava o COD_CTA como indexador, ocorriam erros pois podem existir caracteres letras ou passar do tamanho de 9 caracteres.
-- Para verificar esses processos, as versões estão no repositório.
--
procedure pkb_monta_reg_0500 ( en_planoconta_id plano_conta.id%TYPE )
is
   --
   vn_fase    number := 0;
   i          pls_integer;
   vv_cod_cta plano_conta.cod_cta%type;
   --
   cursor c_cta is
   select pc.cod_cta
     from plano_conta pc
    where pc.id = en_planoconta_id;
   --
   cursor c_0500 is
   select '0500' tp_reg
        , pc.id planoconta_id
        , pc.dt_inc_alt
        , substr(cn.cod_nat,1,2) cod_nat
        , pc.dm_ind_cta
        , pc.nivel
        , pc.cod_cta
        , pc.descr_cta
     from plano_conta pc
        , cod_nat_pc  cn
    where pc.id = en_planoconta_id
      and cn.id = pc.codnatpc_id;
   --
begin
   --
   vn_fase := 1;
   --
   open c_cta;
   fetch c_cta into vv_cod_cta;
   close c_cta;
   --
   vn_fase := 2;
   --
   i := nvl(vt_tab_reg_0500.first,0);
   --
   vn_fase := 3;
   --
   loop
      --
      vn_fase := 4;
      --
      if nvl(i,0) = 0 then
         --
         vn_fase := 5;
         --
         i := i + 1;
         --
         open c_0500;
         fetch c_0500 into vt_tab_reg_0500(i).reg
                         , vt_tab_reg_0500(i).planoconta_id
                         , vt_tab_reg_0500(i).dt_alt
                         , vt_tab_reg_0500(i).cod_nat_cc
                         , vt_tab_reg_0500(i).ind_cta
                         , vt_tab_reg_0500(i).nivel
                         , vt_tab_reg_0500(i).cod_cta
                         , vt_tab_reg_0500(i).nome_cta;
         close c_0500;
         --
         vn_fase := 6;
         --
         exit;
         --
      end if;
      --
      vn_fase := 7;
      --
      if vt_tab_reg_0500(i).cod_cta = vv_cod_cta then
         --
         vn_fase := 8;
         --
         exit;
         --
      end if;
      --
      vn_fase := 9;
      --
      if i = vt_tab_reg_0500.last then
         --
         vn_fase := 10;
         --
         i := i + 1;
         --
         open c_0500;
         fetch c_0500 into vt_tab_reg_0500(i).reg
                         , vt_tab_reg_0500(i).planoconta_id
                         , vt_tab_reg_0500(i).dt_alt
                         , vt_tab_reg_0500(i).cod_nat_cc
                         , vt_tab_reg_0500(i).ind_cta
                         , vt_tab_reg_0500(i).nivel
                         , vt_tab_reg_0500(i).cod_cta
                         , vt_tab_reg_0500(i).nome_cta;
         close c_0500;
         --
         vn_fase := 11;
         --
         exit;
         --
      else
         --
         vn_fase := 12;
         --
         i := vt_tab_reg_0500.next(i);
         --
      end if;
      --
   end loop;
   --
exception
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_monta_reg_0500 fase('||vn_fase||'): '||sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end pkb_monta_reg_0500;

-------------------------------------------------------------------------------------------------------

-- monta o REGISTRO 0460: TABELA DE OBSERVAÇÕES DO LANÇAMENTO FISCAL
procedure pkb_monta_reg_0460 (en_obslanctofiscal_id  obs_lancto_fiscal.id%TYPE)
is
   --
   vn_fase  number := 0;
   i        pls_integer;
   --
   cursor c_obs is
   select distinct olf.*
     from obs_lancto_fiscal olf
    where id = en_obslanctofiscal_id
    order by olf.cod_obs;
   --
begin
   --
   vn_fase := 1;
   --
   i := 0;
   --
   if not vt_tab_reg_0460.exists(en_obslanctofiscal_id) then
      --
      vn_fase := 2;
      --
      for rec in c_obs loop
         exit when c_obs%notfound or (c_obs%notfound) is null;
         --
         vn_fase := 3;
         --
         i := en_obslanctofiscal_id;
         --
         vn_fase := 4;
         --
         vt_tab_reg_0460(i).reg                  := '0460';
         vt_tab_reg_0460(i).obslanctofiscal_id   := rec.id;
         vt_tab_reg_0460(i).cod_obs              := rec.cod_obs;
         vt_tab_reg_0460(i).txt                  := rec.txt;
         --
      end loop;
      --
   end if;
   --
exception
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_monta_reg_0460 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end pkb_monta_reg_0460;

-------------------------------------------------------------------------------------------------------

-- monta o REGISTRO 0450: TABELA DE INFORMAÇÃO COMPLEMENTAR DO DOCUMENTO FISCAL
procedure pkb_monta_reg_0450(en_notafiscal_id     nota_fiscal.id%type default null,
                             en_infcompdctofis_id infor_comp_dcto_fiscal.id%type default null,
                             en_cod_inf           number default null,
                             ev_txt_compl         varchar2 default null,
                             ev_reg_cod_inf       varchar2 default null) is
  --
  vn_fase       number := 0;
  i             pls_integer;
  vn_existe     number;
  vv_gerou_c110 varchar2(1) := 'S';
  vv_gera_reg   varchar2(1) := 'S';
  --
  cursor c_obs is
    select distinct icdf.cod_infor, 
           icdf.txt
      from infor_comp_dcto_fiscal icdf
     where icdf.id = en_infcompdctofis_id
     order by icdf.cod_infor;
  --
  cursor c_obs_c110 is
    select ad.notafiscal_id
         ,'C110'||rownum COD_INF
         ,ROWNUM SEQUENCIA
      from TMP_NOTA_FISCAL nf,
           mod_fiscal mf, 
           nfinfor_adic ad
     where nf.id            = en_notafiscal_id
       and nf.dm_st_proc    in (4, 6, 7, 8)
       and mf.id            = nf.modfiscal_id
       and mf.cod_mod       in ('01', '1B', '04', '55')
       and ad.notafiscal_id = nf.id
       --and ad.dm_tipo       = 0 -- Contribuinte
       and ad.campo         is null
    union
    select NF.ID NOTAFISCAL_ID
         ,'C110'||rownum COD_INF
         ,ROWNUM SEQUENCIA
      from TMP_NOTA_FISCAL nf,
           mod_fiscal mf, 
           sit_docto sd
     where nf.id          = en_notafiscal_id
       and nf.dm_st_proc  in (4, 7, 8)
       and nf.dm_ind_emit = 0 -- Emissão própria
       and mf.id          = nf.modfiscal_id
       and mf.cod_mod     in ('01', '1B', '04')
       and sd.id          = nf.sitdocto_id
       and sd.cd          = '08' -- Documento Fiscal emitido com base em Regime Especial ou Norma Específica
       and gn_versao     >= 104;
  --
  cursor c_obs_c111 is
    select distinct 1
      from TMP_NOTA_FISCAL nf,
           mod_fiscal mf, 
           nfinfor_adic ad, 
           orig_proc op
     where nf.id            = en_notafiscal_id
       and nf.dm_st_proc    in (4, 6, 7, 8)
       and mf.id            = nf.modfiscal_id
       and mf.cod_mod       in ('01', '1B', '04', '55')
       and ad.dm_tipo       = 2 -- processo
       and ad.notafiscal_id = nf.id
       and op.id            = ad.origproc_id;
  --
  cursor c_obs_c112 is
    select distinct 1
      from TMP_NOTA_FISCAL nf,
           mod_fiscal mf, 
           nota_fiscal_fisco nff
     where nf.id             = en_notafiscal_id
       and nf.dm_st_proc     in (4, 6, 7, 8)
       and mf.id             = nf.modfiscal_id
       and mf.cod_mod        in ('01', '1B', '04', '55')
       and nff.notafiscal_id = nf.id;
  --
  cursor c_obs_c113 is
    select distinct 1
      from TMP_NOTA_FISCAL nf,
           mod_fiscal mf, 
           nota_fiscal_referen nfr
     where nf.id             = en_notafiscal_id
       and nf.dm_st_proc     in (4, 6, 7, 8)
       -- and nf.dm_ind_emit = 1 -- Terceiro
       and mf.id             = nf.modfiscal_id
       and mf.cod_mod        in ('01', '1B', '04', '55')
       and nfr.notafiscal_id = nf.id;

--       
  cursor c_obs_c114 is
    select distinct 1
      from TMP_NOTA_FISCAL nf,
           mod_fiscal mf, 
           cupom_fiscal_ref cfr
     where nf.id             = en_notafiscal_id
       and nf.dm_st_proc     in (4, 6, 7, 8)
       and mf.id             = nf.modfiscal_id
       and mf.cod_mod        in ('01', '1B', '04', '55')
       and cfr.notafiscal_id = nf.id;
  --
  --Deixei o existe pois está dando problema durante o exportação.
  cursor c_obs_c115 is
    select distinct 1
      from TMP_NOTA_FISCAL nf, mod_fiscal mf
     where nf.id = en_notafiscal_id
       and nf.dm_ind_oper = 1 -- Saída
       and nf.dm_st_proc in (4, 7, 8)
       and mf.id = nf.modfiscal_id
       and mf.cod_mod in ('01', '1B', '04')
       and exists (select 1
                     from TMP_NOTA_FISCAL nf2
                    where nf2.id = nf.id
                      and exists (select 1
                                    from nota_fiscal_local lc
                                   where lc.notafiscal_id = nf2.id
                                     and lc.dm_tipo_local = 0
                                     and lc.dm_ind_carga  is not null
                                     and lc.cidade_ibge   is not null) -- Coleta
                      and exists (select 1
                                    from nota_fiscal_local le
                                   where le.notafiscal_id = nf2.id
                                     and le.dm_tipo_local = 1
                                     and le.cidade_ibge   is not null)); -- Entrega
  --
  cursor c_obs_c116 is
    select distinct 1
      from TMP_NOTA_FISCAL nf,
           mod_fiscal mf, 
           cfe_ref cfer
     where nf.id              = en_notafiscal_id
       and nf.dm_st_proc      in (4, 6, 7, 8)
       and mf.id              = nf.modfiscal_id
       and mf.cod_mod         in ('01', '1B', '04', '55')
       and cfer.notafiscal_id = nf.id;
  --
begin
  --
  vn_fase := 1;
  --
  i := 0;
  --
  -- Só vai entrar no cursor observação se parametro en_infcompdctofis_id foi fornecido
  if nvl(en_infcompdctofis_id, 0) > 0 then
    --
    vn_fase := 2;
    --
    -- Só irá continuar a armazenar os registros no vetor caso o código ainda não exista.
    if not vt_tab_reg_0450.exists(en_infcompdctofis_id) then
      --
      vn_fase := 3;
      --
      -- Só irá entrar no for do cursor se o select retornar registros
      for rec in c_obs loop
        exit when c_obs%notfound or(c_obs%notfound) is null;
        --
        vn_fase := 3.1;
        --
        i := en_infcompdctofis_id;
        --
        vn_fase := 3.2;
        --
        vt_tab_reg_0450(i).reg     := '0450';
        vt_tab_reg_0450(i).cod_inf := trim(rec.cod_infor);
        vt_tab_reg_0450(i).txt     := rec.txt;
        --
      end loop;
      ---
    end if;
    --
  end if;
  --
  vn_fase := 4;
  --
  -- Só vai entrar no cursor observação se parametro do id da nota foi fornecido
  if nvl(en_notafiscal_id, 0) > 0 then
    --
    vn_fase := 5;
    --
    vv_gerou_c110 := 'N';
    --
    -- Monta informação complementar referente ao registro C110
    if ev_txt_compl is null then
      -- se vier com 'C110' o registro não deverá ser montado
      --
      for x in c_obs_c110
      loop
        --
        vn_fase := 5.1;
        --
        -- Só irá continuar a armazenar os registros no vetor caso o código ainda não exista
        if not vt_tab_reg_0450.exists(110) or vv_gera_reg = 'S' then
          --
          vn_fase := 5.2;
          --
          i := X.SEQUENCIA;
          --
          vt_tab_reg_0450(i).reg     := '0450';
          vt_tab_reg_0450(i).cod_inf := X.COD_INF;
          vt_tab_reg_0450(i).txt     := 'INFORMACAO COMPLEMENTAR';
          --
          vv_gerou_c110 := 'S';
          --
        end if;
        --
      end loop;
      
      --
     /* open c_obs_c110;
      fetch c_obs_c110
        into vn_existe;
      --
      if c_obs_c110%found then
        --
        vn_fase := 5.1;
        --
        -- Só irá continuar a armazenar os registros no vetor caso o código ainda não exista
        if not vt_tab_reg_0450.exists(110) or vv_gera_reg = 'S' then
          --
          vn_fase := 5.2;
          --
          i := 110;
          --
          vt_tab_reg_0450(i).reg     := '0450';
          vt_tab_reg_0450(i).cod_inf := 'C110';
          vt_tab_reg_0450(i).txt     := 'INFORMACAO COMPLEMENTAR';
          --
          vv_gerou_c110 := 'S';
          --
        end if;
        --
      end if;
      --
      close c_obs_c110;*/
      --
    end if;
    --
    vn_fase := 6;
    --
    -- Monta as informações complementares referente aos registros C111, C112, C113, C114 e C115
    open c_obs_c111;
    fetch c_obs_c111
      into vn_existe;
    --
    if c_obs_c111%found then
      --
      vn_fase := 6.1;
      --
      -- Só irá continuar a armazenar os registros no vetor caso o código ainda não exista
      if not vt_tab_reg_0450.exists(111) or vv_gera_reg = 'S' then
        --
        vn_fase := 6.2;
        --
        i := 111;
        --
        vt_tab_reg_0450(i).reg     := '0450';
        vt_tab_reg_0450(i).cod_inf := 'C111';
        vt_tab_reg_0450(i).txt     := 'PROCESSO REFERENCIADO';
        --
      end if;
      --
    end if;
    --
    close c_obs_c111;
    --
    vn_fase := 7;
    --
    open c_obs_c112;
    fetch c_obs_c112
      into vn_existe;
    --
    if c_obs_c112%found then
      --
      vn_fase := 7.1;
      --
      -- Só irá continuar a armazenar os registros no vetor caso o código ainda não exista
      if not vt_tab_reg_0450.exists(112) or vv_gera_reg = 'S' then
        --
        vn_fase := 7.2;
        --
        i := 112;
        --
        vt_tab_reg_0450(i).reg     := '0450';
        vt_tab_reg_0450(i).cod_inf := 'C112';
        vt_tab_reg_0450(i).txt     := 'DOCUMENTO DE ARRECADAÇÃO REFERENCIADO';
        --
      end if;
      --
    end if;
    --
    close c_obs_c112;
    --
    vn_fase := 8;
    --
    --if vv_gerou_c110 = 'N' then
    --
    vn_fase := 8.1;
    --
    open c_obs_c113;
    fetch c_obs_c113
      into vn_existe;
    -- 
    if c_obs_c113%found then
      --
      vn_fase := 8.2;
      --
      -- Só irá continuar a armazenar os registros no vetor caso o código ainda não exista
      if not vt_tab_reg_0450.exists(113) or vv_gera_reg = 'S' then
        --
        vn_fase := 8.3;
        --
        i := 113;
        --
        vt_tab_reg_0450(i).reg     := '0450';
        vt_tab_reg_0450(i).cod_inf := 'C113';
        vt_tab_reg_0450(i).txt     := 'DOCUMENTO FISCAL REFERENCIADO';
        --
      end if;
      --
    end if;
    --
    close c_obs_c113;
    --
    --end if;
    --
    vn_fase := 9;
    --
    open c_obs_c114;
    fetch c_obs_c114
      into vn_existe;
    --
    if c_obs_c114%found then
      --
      vn_fase := 9.1;
      --
      -- Só irá continuar a armazenar os registros no vetor caso o código ainda não exista
      if not vt_tab_reg_0450.exists(114) or vv_gera_reg = 'S' then
        --
        vn_fase := 9.2;
        --
        i := 114;
        --
        vt_tab_reg_0450(i).reg     := '0450';
        vt_tab_reg_0450(i).cod_inf := 'C114';
        vt_tab_reg_0450(i).txt     := 'CUPOM FISCAL REFERENCIADO';
        --
      end if;
      --
    end if;
    --
    close c_obs_c114;
    --
    vn_fase := 10;
    --
    open c_obs_c115;
    fetch c_obs_c115
      into vn_existe;
    --
    if c_obs_c115%found then
      --
      vn_fase := 10.1;
      --
      -- Só irá continuar a armazenar os registros no vetor caso o código ainda não exista
      if not vt_tab_reg_0450.exists(115) or vv_gera_reg = 'S' then
        --
        vn_fase := 10.2;
        --
        i := 115;
        --
        vt_tab_reg_0450(i).reg     := '0450';
        vt_tab_reg_0450(i).cod_inf := 'C115';
        vt_tab_reg_0450(i).txt     := 'LOCAL DA COLETA E/OU ENTREGA';
        --
      end if;
      --
    end if;
    --
    close c_obs_c115;
    --
    vn_fase := 11;
    --
    open c_obs_c116;
    fetch c_obs_c116
      into vn_existe;
    --
    if c_obs_c116%found then
      --
      vn_fase := 11.1;
      --
      -- Só irá continuar a armazenar os registros no vetor caso o código ainda não exista
      if not vt_tab_reg_0450.exists(116) or vv_gera_reg = 'S' then
        --
        vn_fase := 11.2;
        --
        i := 116;
        --
        vt_tab_reg_0450(i).reg     := '0450';
        vt_tab_reg_0450(i).cod_inf := 'C116';
        vt_tab_reg_0450(i).txt     := 'CUPOM FISCAL ELETRONICO REFERENCIADO';
        --
      end if;
      --
    end if;
    --
    close c_obs_c116;
    --
  end if;
  --
  vn_fase := 12;
  --
  -- Só vai entrar na montagem se código de informação for fornecido - parâmetro
  if nvl(en_cod_inf, 0) > 0 then
    --
    vn_fase := 12.1;
    --
    -- Só irá continuar a armazenar os registros no vetor caso o código ainda não exista
    if not vt_tab_reg_0450.exists(en_cod_inf) then
      --
      vn_fase := 12.2;
      --
      i := en_cod_inf;
      --
      vt_tab_reg_0450(i).reg     := '0450';
      vt_tab_reg_0450(i).cod_inf := en_cod_inf;
      if trim(ev_txt_compl) is null then
        if ev_reg_cod_inf = 'C110' then
          vt_tab_reg_0450(i).txt     := 'INFORMACAO COMPLEMENTAR';
        elsif ev_reg_cod_inf = 'C111' then
          vt_tab_reg_0450(i).txt     := 'PROCESSO REFERENCIADO';
        elsif ev_reg_cod_inf = 'C112' then
          vt_tab_reg_0450(i).txt     := 'DOCUMENTO DE ARRECADAÇÃO REFERENCIADO';
        elsif ev_reg_cod_inf = 'C113' then
          vt_tab_reg_0450(i).txt     := 'DOCUMENTO FISCAL REFERENCIADO';
        elsif ev_reg_cod_inf = 'C114' then
          vt_tab_reg_0450(i).txt     := 'CUPOM FISCAL REFERENCIADO';
        elsif ev_reg_cod_inf = 'C115' then
          vt_tab_reg_0450(i).txt     := 'LOCAL DA COLETA E/OU ENTREGA';
        elsif ev_reg_cod_inf = 'C116' then
          vt_tab_reg_0450(i).txt     := 'CUPOM FISCAL ELETRONICO REFERENCIADO'; 
        end if;                                      
      else
      vt_tab_reg_0450(i).txt     := trim(ev_txt_compl);
      end if;
      --
    end if;
    --
  end if;
  --
exception
  when others then
    --
    gv_mensagem_log := 'Erro na pkb_monta_reg_0450 fase(' || vn_fase || '): ' || sqlerrm;
    --
    declare
      vn_loggenerico_id Log_Generico.id%TYPE;
    begin
      --
      pk_log_generico.pkb_log_generico(sn_loggenerico_id => vn_loggenerico_id,
                                       ev_mensagem       => gv_mensagem_log,
                                       ev_resumo         => gv_mensagem_log,
                                       en_tipo_log       => erro_de_sistema,
                                       en_referencia_id  => gt_row_abertura_efd.id,
                                       ev_obj_referencia => 'ABERTURA_EFD');
      --
    exception
      when others then
        null;
    end;
    --
    raise_application_error(-20101, gv_mensagem_log);
    --
end pkb_monta_reg_0450;
-------------------------------------------------------------------------------------------------------

-- monta o REGISTRO 0400: TABELA DE NATUREZA DA OPERAÇÃO/PRESTAÇÃO
procedure pkb_monta_reg_0400 ( en_natoper_id  nat_oper.id%type )
is
   --
   vn_fase  number := 0;
   i        pls_integer;
   --
   cursor c_natoper is
   select nop.*
     from nat_oper nop
    where nop.id = en_natoper_id;
   --
begin
   --
   vn_fase := 1;
   --
   i := 0;
   --
   if not vt_tab_reg_0400.exists(en_natoper_id) then
      --
      vn_fase := 2;
      --
      for rec in c_natoper loop
         exit when c_natoper%notfound or (c_natoper%notfound) is null;
         --
         vn_fase := 3;
         --
         i := en_natoper_id;
         --
         vn_fase := 4;
         --
         vt_tab_reg_0400(i).reg         := '0400';
         vt_tab_reg_0400(i).natoper_id  := rec.id;
         vt_tab_reg_0400(i).cod_nat     := rec.cod_nat;
         vt_tab_reg_0400(i).descr_nat   := rec.descr_nat;
         --
      end loop;
      --
   end if;
   --
exception
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_monta_reg_0400 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end pkb_monta_reg_0400;

-------------------------------------------------------------------------------------------------------

-- monta o REGISTRO 0300: CADASTRO DE BENS OU COMPONENTES DO ATIVO IMOBILIZADO
procedure pkb_monta_reg_0300 ( en_bemativoimob_id bem_ativo_imob.id%type )
is
   --
   vn_fase           number := 0;
   vn_planoconta_id  number;
   vn_centrocusco_id number;
   i                 pls_integer;
   j                 pls_integer;
   --
   cursor c_0300 is
   select b.id
        , b.cod_ind_bem
        , b.dm_ident_merc
        , b.descr_item
        , b.cod_cta
        , b.nr_parc
        , b.ar_bemativoimob_id
     from bem_ativo_imob b
    where b.id         = en_bemativoimob_id;
   --
   cursor c_0305 (en_bemativoimob_id bem_ativo_imob.id%type) is
   select iub.id
        , iub.cod_ccus
        , iub.func
        , iub.vida_util
     from infor_util_bem iub
    where iub.bemativoimob_id = en_bemativoimob_id;
   --
begin
   --
   vn_fase := 1;
   --
   i := 0;
   --
   if not vt_tab_reg_0300.exists(en_bemativoimob_id) then
      --
      vn_fase := 2;
      --
      for rec_0300 in c_0300 loop
         exit when c_0300%notfound or (c_0300%notfound) is null;
         --
         vn_fase := 3;
         --
         i := en_bemativoimob_id;
         --
         vn_fase := 4;
         --
         vt_tab_reg_0300(i).reg          := '0300';
         vt_tab_reg_0300(i).cod_ind_bem  := rec_0300.cod_ind_bem;
         vt_tab_reg_0300(i).ident_merc   := rec_0300.dm_ident_merc;
         vt_tab_reg_0300(i).descr_item   := trim( pk_csf.fkg_converte( rec_0300.descr_item )  );
         vt_tab_reg_0300(i).cod_prnc     := pk_csf_efd.fkg_bem_ativo_imob_cod_ind_bem(rec_0300.ar_bemativoimob_id);
         vt_tab_reg_0300(i).cod_cta      := rec_0300.cod_cta;
         vt_tab_reg_0300(i).nr_parc      := rec_0300.nr_parc;
         --
         vn_fase := 5;
         -- Busca Plano de Conta id
         vn_planoconta_id := pk_csf.fkg_Plano_Conta_id (rec_0300.cod_cta, gt_row_abertura_efd.empresa_id);
         --
         vn_fase := 6;
         --
         --Montar arquivo auxiliar para plano de conta
         if nvl( vn_planoconta_id, 0) > 0 then
            --
            vn_fase := 7;
            --
            pkb_monta_reg_0500 ( en_planoconta_id => vn_planoconta_id);
            --
         end if;
         --
         vn_fase := 8;
         -- monta o REGISTRO 0305 - INFORMAÇÃO SOBRE A UTILIZAÇÃO DO BEM
         j := 0;
         --
         for rec_0305 in c_0305(rec_0300.id) loop
            exit when c_0305%notfound or (c_0305%notfound) is null;
            --
            vn_fase := 9;
            --
            j := nvl(j,0) + 1;
            --
            vn_fase := 10;
            --
            vt_bi_tab_reg_0305(i)(j).reg        := '0305';
            vt_bi_tab_reg_0305(i)(j).cod_ccus   := rec_0305.cod_ccus;
            vt_bi_tab_reg_0305(i)(j).func       := rec_0305.func;
            vt_bi_tab_reg_0305(i)(j).vida_util  := rec_0305.vida_util;
            --
            vn_fase := 11;
            -- Busca o ID do Centro de Custo
            vn_centrocusco_id := pk_csf.fkg_Centro_Custo_id (rec_0305.cod_ccus, gt_row_abertura_efd.empresa_id);
            --
            vn_fase := 12;
            --
            --Montar arquivo auxiliar para centro de custo
            if nvl(vn_centrocusco_id, 0) > 0 then
               --
               vn_fase := 13;
               --
               pkb_monta_reg_0600 ( en_centrocusto_id => vn_centrocusco_id );
               --
            end if;
            --
         end loop;
         --
         vn_fase := 14;
         -- Se o ativo imobilizado for um componente (dm_ind_merc = 2) obrigatoria tem que
         -- gerar um registro 0300 para o "Pai" desse componente através do campo  ar_bemativoimob_id
         if nvl(rec_0300.dm_ident_merc, 0) = 2 then
            --
            vn_fase := 15;
            --
            --Montar "Pai" do registro 0300
            if nvl( rec_0300.ar_bemativoimob_id, 0) > 0 then
               --
               vn_fase := 16;
               --
               pkb_monta_reg_0300 ( en_bemativoimob_id => rec_0300.ar_bemativoimob_id);
               --
            end if;
            --
         end if;
         --
      end loop;
      --
   end if;
   --
exception
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_monta_reg_0300 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end pkb_monta_reg_0300;

-------------------------------------------------------------------------------------------------------

-- monta o REGISTRO 0190: IDENTIFICAÇÃO DAS UNIDADES DE MEDIDA
procedure pkb_monta_reg_0190 ( en_unidade_id unidade.id%TYPE )
is
   --
   vn_fase  number := 0;
   i        varchar2(6) := null;
   --
   cursor c_unid is
   select u.*
     from unidade u
    where id = en_unidade_id
    order by u.sigla_unid;
   --
begin
   --
   vn_fase := 1;
   --
   i := null;
   --
   for rec in c_unid loop
      exit when c_unid%notfound or (c_unid%notfound) is null;
      --
      vn_fase := 2;
      -- não é possível repetir a sigla, por isso o índice passou a ser a sigla e com letra maiúscula, para evitar repetir com letras diferentes
      if not vt_tab_reg_0190.exists(upper(rec.sigla_unid)) then
         --
         i := upper(rec.sigla_unid);
         --
         vn_fase := 3;
         --
         vt_tab_reg_0190(i).reg        := '0190';
         vt_tab_reg_0190(i).unidade_id := rec.id;
         vt_tab_reg_0190(i).unid       := upper(rec.sigla_unid);
         vt_tab_reg_0190(i).descr      := rec.descr;
         --
      end if;
      --
   end loop;
   --
exception
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_monta_reg_0190 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end pkb_monta_reg_0190;

-------------------------------------------------------------------------------------------------------

-- monta o REGISTRO 0220: FATORES DE CONVERSÃO DE UNIDADES
procedure pkb_monta_reg_0220 ( en_item_id item.id%TYPE
                             , en_unidade_id unidade.id%TYPE)
is
   --
   vn_fase              number := 0;
   i                    pls_integer := 0;
   j                    pls_integer := 0;
   vb_achou             boolean := false;
   --
   vn_item_id           item.id%type;
   vv_cod_item          item.cod_item%type;
   vn_unidade_id        unidade.id%type;
   vv_sigla_unid_item   unidade.sigla_unid%type;
   vv_sigla_unid_conv   unidade.sigla_unid%type;
   --
   cursor c_conv_unid( en_item_id    in number
                     , en_unidade_id in number
                     ) is
   select distinct
          cu.fat_conv
        , cu.unidade_id
     from conversao_unidade cu
    where cu.item_id    = en_item_id
      --and cu.unidade_id = en_unidade_id
    order by cu.unidade_id;
   --
begin
   --
   vn_fase := 1;
   --
   begin
      vb_achou := vt_bi_tab_reg_0220(en_item_id).exists(en_unidade_id);
   exception
      when others then
         vb_achou := false;
   end;
   --
   vn_fase := 2;
   --
   if not vb_achou then
      --
      vn_fase       := 3;
      vn_item_id    := en_item_id;
      vn_unidade_id := en_unidade_id;
      --
      begin
         select it.cod_item
           into vv_cod_item
           from item it
          where it.id = en_item_id;
      exception
         when others then
            vv_cod_item := null;
      end;
      --
      vn_fase := 4;
      --
      i := nvl(vt_tab_reg_0200.first,0);
      --
      loop
         --
         vn_fase := 5;
         --
         if nvl(i,0) = 0 then
            --
            vn_fase := 6;
            exit;
            --
         end if;
         --
         vn_fase := 7;
         --
         if trim(vt_tab_reg_0200(i).cod_item) = trim(vv_cod_item) then
            --
            vn_fase    := 8;
            vn_item_id := i; -- identificador do item
            --
            begin
               select un.id
                 into vn_unidade_id
                 from unidade un
                where un.sigla_unid = vt_tab_reg_0200(i).unid_inv;
            exception
               when others then
                  vn_unidade_id := 0;
            end;
            --
            vn_fase := 9;
            exit;
            --
         end if;
         --
         vn_fase := 10;
         --
         if i = vt_tab_reg_0200.last then
            --
            vn_fase := 11;
            exit;
            --
         else
            --
            vn_fase := 12;
            i := vt_tab_reg_0200.next(i);
            --
         end if;
         --
      end loop;
      --
   end if;
   --
   vn_fase := 13;
   -- REGISTRO 0220: FATORES DE CONVERSÃO DE UNIDADES
   if not vb_achou then
      --
      vn_fase := 14;
      --
      for rec_cu in c_conv_unid( en_item_id    => vn_item_id
                               , en_unidade_id => vn_unidade_id )
      loop
         --
         exit when c_conv_unid%notfound or (c_conv_unid%notfound) is null;
         --
         vn_fase := 15;
         --
         begin
            select u.sigla_unid
              into vv_sigla_unid_item
              from item i
                 , unidade u
             where i.id = vn_item_id
               and u.id = i.unidade_id;
         exception
            when others then
               vv_sigla_unid_item := null;
         end;
         --
         vv_sigla_unid_conv := pk_csf.fkg_unidade_sigla (rec_cu.unidade_id);
         --
         i := vn_item_id;
         --j := vn_unidade_id;
         j := rec_cu.unidade_id;
         --
         vt_bi_tab_reg_0220(i)(j).reg       := '0220';
         vt_bi_tab_reg_0220(i)(j).unid_conv := vv_sigla_unid_conv;
         vt_bi_tab_reg_0220(i)(j).fat_conv  := rec_cu.fat_conv;
         --
         vn_fase := 16;
         --
         -- Monta registros para a unidade do fator de conversao
         if nvl(rec_cu.unidade_id,0) > 0 then
            --
            vn_fase := 17;
            --
            pkb_monta_reg_0190 (en_unidade_id => rec_cu.unidade_id);
            --
         end if;
         --
      end loop;
      --
   end if;
   --
exception
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_monta_reg_0220 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end pkb_monta_reg_0220;

-------------------------------------------------------------------------------------------------------

-- monta o REGISTRO 0200: TABELA DE IDENTIFICAÇÃO DO ITEM (PRODUTO E SERVIÇOS)
procedure pkb_monta_reg_0200 ( en_item_id     in item.id%type
                             , en_item_id_ins in item.id%type default null )
is
   --
   vn_fase  number := 0;
   i        pls_integer;
   j        pls_integer;
   --
   vv_cod_item      item.cod_item%type;
   vv_cod_item_ins  item.cod_item%type;
   vn_qtde_reg_0210 number := 0;
   --
   cursor c_dado is
   select trim(it.cod_item)
     from item it
    where it.id = en_item_id;
   --
   cursor c_ins is
   select trim(it.cod_item)
     from item it
    where it.id = en_item_id_ins;
   --
   procedure pkb_cria_0200 ( en_item_id     item.id%type
                           , en_item_id_ins item.id%type default null )
   is
      --
      cursor c_item is
      select i.id                 item_id
           , trim(i.cod_item)     cod_item
           , trim(i.descr_item)   descr_item
           , trim(i.cod_barra)    cod_barra
           , trim(i.cod_ant_item) cod_ant_item
           , i.tipoitem_id
           , i.ncm_id
           , i.extipi_id
           , i.tpservico_id
           , i.aliq_icms
           , i.unidade_id
           , i.cest_id
        from item i
       where i.id = en_item_id
       order by i.cod_item;
      --
      cursor c_alter ( en_item_id  item.id%type ) is
      select ai.descr_ant_item
           , ai.dt_ini
           , ai.dt_fim
           , ai.cod_ant_item
        from alter_item ai
       where ai.item_id        = en_item_id
       --  and trunc(ai.dt_ini) >= gt_row_abertura_efd.dt_ini
         and trunc(ai.dt_fim) <= gt_row_abertura_efd.dt_fim;
      --
      cursor c_anp ( en_item_id  item.id%type ) is
      select cod_prod_anp
        from item_anp
       where item_id = en_item_id;
      --
      cursor c_ins ( en_item_id     in item.id%type
                   , en_item_id_ins in item.id%type ) is
      select trim(ie.cod_item) cod_item_ins
           , ii.qtd_comp
           , ii.perda
        from item_insumo ii
           , item        ie
       where ii.item_id     = en_item_id
         and ii.item_id_ins = en_item_id_ins
         and ie.id          = ii.item_id_ins
       order by ie.cod_item;
      --
   begin
      --
      for rec_it in c_item loop
         exit when c_item%notfound or (c_item%notfound) is null;
         --
         vn_fase := 2;
         --
         i := en_item_id;
         --
         vn_fase := 3;
         --
         vt_tab_reg_0200(i).reg        := '0200';
         vt_tab_reg_0200(i).item_id    := rec_it.item_id;
         vt_tab_reg_0200(i).cod_item   := rec_it.cod_item;
         vt_tab_reg_0200(i).descr_item := rec_it.descr_item;
         vt_tab_reg_0200(i).cod_barra  := rec_it.cod_barra;
         --
         if gn_versao >= 107 then -- versão a partir de 01/01/2014
            vt_tab_reg_0200(i).cod_ant_item := null;
         else
            vt_tab_reg_0200(i).cod_ant_item := rec_it.cod_ant_item;
         end if;
         --
         vn_fase := 3.1;
         --
         vt_tab_reg_0200(i).unid_inv  := pk_csf.fkg_Unidade_sigla (rec_it.unidade_id);
         --
         vn_fase := 3.2;
         --
         vt_tab_reg_0200(i).tipo_item := pk_csf.fkg_cd_tipo_item_id ( en_tipoitem_id => rec_it.tipoitem_id );
         --
         vn_fase := 3.3;
         --
         if vt_tab_reg_0200(i).tipo_item in ('07', '08', '09', '10', '99') then -- Para esses tipo de item, não preenche os dados
            --
            vt_tab_reg_0200(i).cod_ncm := null;
            vt_tab_reg_0200(i).ex_ipi  := null;
            vt_tab_reg_0200(i).cod_gen := null;
            --
         else
            --
            vt_tab_reg_0200(i).cod_ncm := pk_csf.fkg_cod_ncm_id ( en_ncm_id => rec_it.ncm_id );
            vt_tab_reg_0200(i).ex_ipi  := pk_csf.fkg_ex_tipi_cod ( en_extipi_id => rec_it.extipi_id );
            vt_tab_reg_0200(i).cod_gen := substr(vt_tab_reg_0200(i).cod_ncm, 1, 2);
            --
         end if;
         --
         vn_fase := 3.4;
         --
         if gn_versao >= 108 then
            --
            vt_tab_reg_0200(i).cod_lst := lpad(trim(pk_csf.fkg_Tipo_Servico_cod ( en_tpservico_id => rec_it.tpservico_id )),5,'0');
            --
         else
            --
            vt_tab_reg_0200(i).cod_lst := lpad(trim(replace(pk_csf.fkg_Tipo_Servico_cod ( en_tpservico_id => rec_it.tpservico_id ), '.', '')), 4, '0');
            --
         end if;
         --
         vn_fase := 3.5;
         --
         vt_tab_reg_0200(i).aliq_icms := rec_it.aliq_icms;
         --
         vn_fase := 3.51;
         --
         vt_tab_reg_0200(i).cest := pk_csf.fkg_cd_cest_id( en_cest_id => rec_it.cest_id );
         --
         vn_fase := 3.6;
         --
         -- Monta registro para unidade do produto
         if nvl(rec_it.unidade_id, 0) > 0 then
            --
            vn_fase := 3.7;
            --
            pkb_monta_reg_0190 (en_unidade_id => rec_it.unidade_id);
            --
         end if;
         --
         vn_fase := 4;
         --
         j := 0;
         -- monta o REGISTRO 0205: ALTERAÇÃO DO ITEM
         for rec_al in c_alter(rec_it.item_id) loop
            exit when c_alter%notfound or (c_alter%notfound) is null;
            --
            vn_fase := 5;
            --
            j := nvl(j,0) + 1;
            --
            vn_fase := 6;
            --
            vt_bi_tab_reg_0205(i)(j).reg             := '0205';
            vt_bi_tab_reg_0205(i)(j).descr_ant_item  := rec_al.descr_ant_item;
            vt_bi_tab_reg_0205(i)(j).dt_ini          := rec_al.dt_ini;
            vt_bi_tab_reg_0205(i)(j).dt_fim          := rec_al.dt_fim;
            vt_bi_tab_reg_0205(i)(j).cod_ant_item    := rec_al.cod_ant_item;
            --
         end loop;
         --
         vn_fase := 7;
         --
         j := 0;
         -- monta o REGISTRO 0206: CÓDIGO DE PRODUTO CONFORME TABELA PUBLICADA PELA ANP (COMBUSTÍVEIS)
         for rec_anp in c_anp(rec_it.item_id) loop
            exit when c_anp%notfound or (c_anp%notfound) is null;
            --
            vn_fase := 8;
            --
            j := nvl(j,0) + 1;
            --
            vn_fase := 9;
            --
            vt_bi_tab_reg_0206(i)(j).reg       := '0206';
            vt_bi_tab_reg_0206(i)(j).cod_comb  := rec_anp.cod_prod_anp;
            --
         end loop;
         --
         vn_fase := 10;
         --
         -- monta registro 0220: FATORES DE CONVERSÃO DE UNIDADES
         if nvl(rec_it.item_id, 0) > 0 and nvl(rec_it.unidade_id, 0) > 0 then
            --
            vn_fase := 10.1;
            --
            pkb_monta_reg_0220 ( en_item_id    => rec_it.item_id
                               , en_unidade_id => rec_it.unidade_id);
            --
            vn_fase := 10.2;
            --
         end if;
         --
         vn_fase := 11;
         --
         -- monta o REGISTRO 0210: CONSUMO ESPECÍFICO PADRONIZADO
         for rec_ins in c_ins( en_item_id     => rec_it.item_id
                             , en_item_id_ins => en_item_id_ins )
         loop
            --
            exit when c_ins%notfound or (c_ins%notfound) is null;
            --
            vn_fase := 11.1;
            --
            j := en_item_id_ins;
            --
            vn_fase := 11.2;
            --
            vt_bi_tab_reg_0210(i)(j).reg           := '0210';
            vt_bi_tab_reg_0210(i)(j).cod_item_comp := rec_ins.cod_item_ins;
            vt_bi_tab_reg_0210(i)(j).qtd_comp      := rec_ins.qtd_comp;
            vt_bi_tab_reg_0210(i)(j).perda         := rec_ins.perda;
            --
         end loop;
         --
      end loop;
      --
   end pkb_cria_0200;
   --
begin
   --
   vn_fase := 1;
   --
   if nvl(en_item_id,0) > 0 then
      --
      vn_fase := 1.1;
      --
      open c_dado;
      fetch c_dado into vv_cod_item;
      close c_dado;
      --
      vn_fase := 1.2;
      i := nvl(vt_tab_reg_0200.first,0);
      --
      loop
         --
         vn_fase := 1.3;
         --
         if nvl(i,0) = 0 then
            --
            vn_fase := 1.4;
            --
            pkb_cria_0200 ( en_item_id     => en_item_id
                          , en_item_id_ins => en_item_id_ins );
            --
            exit;
            --
         end if;
         --
         vn_fase := 1.5;
         --
         if trim(vt_tab_reg_0200(i).cod_item) = trim(vv_cod_item) then
            --
            vn_fase := 1.6;
            --
            if nvl(en_item_id_ins,0) > 0 then
               --
               vn_fase := 1.7;
               --
               begin
                  vn_qtde_reg_0210 := nvl(vt_bi_tab_reg_0210(i).count,0);
               exception
                  when others then
                     vn_qtde_reg_0210 := 0;
               end;
               --
               vn_fase := 1.8;
               --
               if nvl(vn_qtde_reg_0210,0) > 0 then
                  --
                  vn_fase := 1.9;
                  --
                  j := nvl(vt_bi_tab_reg_0210(i).first,0);
                  --
                  loop
                     --
                     vn_fase := 1.10;
                     --
                     if nvl(j,0) = 0 then
                        --
                        vn_fase := 1.11;
                        --
                        pkb_cria_0200 ( en_item_id     => en_item_id
                                      , en_item_id_ins => en_item_id_ins );
                        --
                        exit;
                        --
                     end if;
                     --
                     vn_fase := 1.12;
                     --
                     open c_ins;
                     fetch c_ins into vv_cod_item_ins;
                     close c_ins;
                     --
                     vn_fase := 1.13;
                     --
                     if trim(vt_bi_tab_reg_0210(i)(j).cod_item_comp) = trim(vv_cod_item_ins) then
                        --
                        vn_fase := 1.14;
                        exit;
                        --
                     end if;
                     --
                     vn_fase := 1.15;
                     --
                     if j = vt_bi_tab_reg_0210(i).last then
                        --
                        vn_fase := 1.16;
                        --
                        pkb_cria_0200 ( en_item_id     => en_item_id
                                      , en_item_id_ins => en_item_id_ins );
                        --
                        exit;
                        --
                     else
                        --
                        vn_fase := 1.17;
                        j := vt_bi_tab_reg_0210(i).next(j);
                        --
                     end if;
                     --
                  end loop;
                  --
               else
                  --
                  vn_fase := 1.18;
                  --
                  pkb_cria_0200 ( en_item_id     => en_item_id
                                , en_item_id_ins => en_item_id_ins );
                  --
                  exit;
                  --
               end if;
               --
            else
               --
               vn_fase := 1.19;
               exit;
               --
            end if;
            --
         end if;
         --
         vn_fase := 1.20;
         --
         if i = vt_tab_reg_0200.last then
            --
            vn_fase := 1.21;
            --
            pkb_cria_0200 ( en_item_id     => en_item_id
                          , en_item_id_ins => en_item_id_ins );
            --
            exit;
            --
         else
            --
            vn_fase := 1.22;
            i := vt_tab_reg_0200.next(i);
            --
         end if;
         --
      end loop;
      --
   end if;
   --
exception
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_monta_reg_0200 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end pkb_monta_reg_0200;

-------------------------------------------------------------------------------------------------------

-- monta o REGISTRO 0150: TABELA DE CADASTRO DO PARTICIPANTE
procedure pkb_monta_reg_0150 ( en_pessoa_id        Pessoa.id%TYPE
                             , en_notafiscal_id    nota_fiscal.id%TYPE  DEFAULT NULL 
                             , en_conhectransp_id  conhec_transp.id%TYPE  DEFAULT NULL 
                             , en_chv_eletronica   mov_atperm_doc_fiscal.chv_nfe_cte%TYPE DEFAULT NULL  )               
is
   --
   vn_fase  number := 0;
   i        pls_integer;
   j        pls_integer;
   v        pls_integer;   
   --
   vb_achou          boolean := false;   
   vv_cont_ant       alter_pessoa.cont_ant%type;   
   vv_cod_part_docto Pessoa.cod_part%type;
   vn_tipo_retorna   number; 
   --
   cursor c_part is
   /*select p.id             pessoa_id
        , trim(p.cod_part) cod_part
        , trim(p.nome)     nome
        , p.pais_id
        , p.cidade_id
        , trim(p.lograd)   lograd
        , substr(trim(p.nro), 1, 10)      nro
        , trim(p.compl)    compl
        , trim(p.bairro)   bairro
     from pessoa p
    where p.id                  = en_pessoa_id  
    order by p.cod_part; */
   select 0                           origem_dado_pessoa
        , p.id                        pessoa_id
        , trim(p.cod_part)            cod_part
        , trim(p.nome)                nome
        , p.pais_id
        , p.cidade_id
        , trim(p.lograd)              lograd
        , substr(trim(p.nro), 1, 10)  nro
        , trim(p.compl)               compl
        , trim(p.bairro)              bairro
        , null                        cpf
        , null                        ie
        , null                        suframa  
        , null                        cod_pais    
     from pessoa p
    where p.id                   = en_pessoa_id
      and gn_origem_dado_pessoa  = 0 -- Padrão  
      union
    select 0                      origem_dado_pessoa
        , p.id                        pessoa_id
        , trim(p.cod_part)            cod_part
        , trim(p.nome)                nome
        , p.pais_id
        , p.cidade_id
        , trim(p.lograd)              lograd
        , substr(trim(p.nro), 1, 10)  nro
        , trim(p.compl)               compl
        , trim(p.bairro)              bairro
        , null                        cpf
        , null                        ie
        , null                        suframa  
        , null                        cod_pais    
     from pessoa p,
          mov_atperm_doc_fiscal m
    where p.id                   = en_pessoa_id
      and gn_origem_dado_pessoa     = 1     
      --AND m.chv_nfe_cte          = en_chv_eletronica
      and m.pessoa_id            = p.id 
    union   
   select 1                           origem_dado_pessoa
        , n.id                        pessoa_id
        , trim(d.cnpj)                cod_part
        , trim(substr(d.nome,1,100))  nome
        , p.id                        pais_id
        , c.id                        cidade_id
        , trim(substr(d.lograd,1,60)) lograd
        , substr(trim(d.nro), 1, 10)  nro
        , trim(d.compl)               compl
        , trim(d.bairro)              bairro
        , d.cpf                       cpf
        , d.ie                        ie
        , d.suframa                   suframa
        , d.cod_pais  
     from TMP_NOTA_FISCAL      n
        , mod_fiscal       m   
        , nota_fiscal_dest d
        , pais             p 
        , cidade           c
    where gn_origem_dado_pessoa = 1 -- Documento Fiscal   
      and n.id                  = en_notafiscal_id
      and n.dm_ind_emit         = 0 -- Emissão Propria
      and m.id                  = n.modfiscal_id
      and m.cod_mod             not in ('21', '22')  -- Telecomunicação       
      and d.notafiscal_id       = n.id
      and p.cod_siscomex        = d.cod_pais
      and c.ibge_cidade         = d.cidade_ibge 
    union  
   select 1                           origem_dado_pessoa
        , n.id                        pessoa_id
        , trim(e.cnpj)                cod_part
        , trim(e.nome)                nome
        , p.id                        pais_id
        , c.id                        cidade_id
        , trim(e.lograd)              lograd
        , substr(trim(e.nro), 1, 10)  nro
        , trim(e.compl)               compl
        , trim(e.bairro)              bairro
        , e.cpf                       cpf
        , e.ie                        ie
        , e.suframa                   suframa
        , e.cod_pais           
     from TMP_NOTA_FISCAL      n
        , mod_fiscal       m   
        , nota_fiscal_emit e
        , pais             p 
        , cidade           c
    where gn_origem_dado_pessoa = 1 -- Documento Fiscal   
      and n.id                  = en_notafiscal_id
      and n.dm_ind_emit         = 1 -- Emissão Terceiro
      and m.id                  = n.modfiscal_id
      and m.cod_mod             not in ('21', '22', '99')  -- Telecomunicação / Serviços    
      and e.notafiscal_id       = n.id
      and p.cod_siscomex        = e.cod_pais 
      and c.ibge_cidade         = e.cidade_ibge 
    union
   select 0                           origem_dado_pessoa  -- Tratar como padrão
        , p.id                        pessoa_id
        , trim(p.cod_part)            cod_part
        , trim(p.nome)                nome
        , p.pais_id
        , p.cidade_id
        , trim(p.lograd)              lograd
        , substr(trim(p.nro), 1, 10)  nro
        , trim(p.compl)               compl
        , trim(p.bairro)              bairro
        , null                        cpf
        , null                        ie
        , null                        suframa  
        , null                        cod_pais 
     from TMP_nota_fiscal  n
        , pessoa           p
        , mod_fiscal       m
    where gn_origem_dado_pessoa  = 1 -- Documento Fiscal   
      and n.id                   = en_notafiscal_id
      and n.dm_ind_emit          = 1 --  Emissão Terceiro
      and m.id                   = n.modfiscal_id
      and m.cod_mod              in ('21', '22', '99')  -- Telecomunicação / Serviços
      and p.id                   = n.pessoa_id  
  union
   select 1                           origem_dado_pessoa
        , t.id                        pessoa_id
        , trim(d.cnpj)                cod_part
        , trim(d.nome)                nome
        , p.id                        pais_id
        , c.id                        cidade_id
        , trim(d.lograd)              lograd
        , substr(trim(d.nro), 1, 10)  nro
        , trim(d.compl)               compl
        , trim(d.bairro)              bairro
        , d.cpf                       cpf
        , d.ie                        ie
        , to_char(d.suframa)          suframa
        , d.cod_pais  
     from TMP_CONHEC_TRANSP      t
        , conhec_transp_dest d
        , pais               p 
        , cidade             c
    where gn_origem_dado_pessoa = 1 -- Documento Fiscal   
      and t.id                  = en_conhectransp_id
      and t.dm_ind_emit         = 0 -- Emissão Propria
      and d.conhectransp_id     = t.id
      and p.cod_siscomex        = d.cod_pais
      and c.ibge_cidade         = d.ibge_cidade   
    union    
   select 1                           origem_dado_pessoa
        , t.id                        pessoa_id
        , trim(e.cnpj)                cod_part
        , trim(e.nome)                nome
        , p.id                        pais_id
        , c.id                        cidade_id
        , trim(e.lograd)              lograd
        , substr(trim(e.nro), 1, 10)  nro
        , trim(e.compl)               compl
        , trim(e.bairro)              bairro
        , null                        cpf
        , e.ie                        ie
        , null                        suframa
        , e.cod_pais           
     from TMP_CONHEC_TRANSP      t
        , conhec_transp_emit e
        , pais               p 
        , cidade             c
    where gn_origem_dado_pessoa = 1 -- Documento Fiscal   
      and t.id                  = en_conhectransp_id
      and t.dm_ind_emit         = 1 -- Emissão Terceiro
      and e.conhectransp_id     = t.id
      and p.cod_siscomex        = e.cod_pais 
      and c.ibge_cidade         = e.ibge_cidade 
    order by 3;  
   --
   cursor c_alter ( en_pessoa_id  pessoa.id%type ) is
      select max(ap.id)       id
           , trunc(ap.dt_alt) dt_alt
           , ap.nr_campo
        from alter_pessoa  ap
       where ap.pessoa_id     = en_pessoa_id
         and trunc(ap.dt_alt) between gt_row_abertura_efd.dt_ini and gt_row_abertura_efd.dt_fim
         and ap.nr_campo      between '03' and '13'
    group by trunc(ap.dt_alt)
           , ap.nr_campo
    order by trunc(ap.dt_alt) desc
           , ap.nr_campo;
   --
begin
   --
   vn_fase := 1;
   -- 
   vn_tipo_retorna := 0;  -- Pessoa_id (default)
   --   
   if gn_origem_dado_pessoa = 1 then
      --   
      vn_tipo_retorna := 1;
      --    
   end if;
   --    
   vv_cod_part_docto :=  pk_csf_api_efd.fkb_ret_cnpjcpj_ibge_cod_part ( en_pessoa_id          => en_pessoa_id
                                                                      , en_tipo_retorna       => vn_tipo_retorna  -- 0-Pessoa_id / 1-Cod_Part    
                                                                      , en_origem_dado_pessoa => gn_origem_dado_pessoa                                    
                                                                      , en_notafiscal_id      => en_notafiscal_id
                                                                      , en_conhectransp_id    => en_conhectransp_id );
                                                                       
   -- 
   i := 0;
   v := 0;
   --
   vb_achou := false;
   --   
   if nvl(vt_tab_reg_0150.count,0) > 0 then
      -- 
      for v in vt_tab_reg_0150.first..vt_tab_reg_0150.last loop
         --   
         if (gn_origem_dado_pessoa = 0 and vt_tab_reg_0150(v).pessoa_id = vv_cod_part_docto) or (gn_origem_dado_pessoa = 1 and vt_tab_reg_0150(v).cod_part = vv_cod_part_docto) then
            vb_achou := true;
            exit;
         end if;
         --    
         if gn_origem_dado_pessoa = 1 and vt_tab_reg_0150(v).cod_part = vv_cod_part_docto then
            vb_achou := true; 
            exit;   
         end if;
         --
      end loop;
      --   
   end if;
   --
   --if not vt_tab_reg_0150.exists(vv_cod_part_docto) then
   if not vb_achou then   
      --
      vn_fase := 1.1;
      --
    i := vt_tab_reg_0150.count;
    
      for rec_part in c_part loop
         exit when c_part%notfound or (c_part%notfound) is null;
         --
         vn_fase := 2;
         --
         i := nvl(i,0) + 1;
         --
         vn_fase := 3;
         --
         vt_tab_reg_0150(i).reg        := '0150';
         vt_tab_reg_0150(i).pessoa_id  := rec_part.pessoa_id;
         if rec_part.origem_dado_pessoa = 0 then     
            vt_tab_reg_0150(i).cod_part := rec_part.cod_part;
         else
            vt_tab_reg_0150(i).cod_part := vv_cod_part_docto; 
         end if;      
         vt_tab_reg_0150(i).nome       := rec_part.nome;
         if rec_part.origem_dado_pessoa = 0 then
            vt_tab_reg_0150(i).cod_pais   := pk_csf.fkg_cod_siscomex_pais_id ( en_pais_id => rec_part.pais_id );
         else
            vt_tab_reg_0150(i).cod_pais   := rec_part.cod_pais;
         end if;     
         --
         vn_fase := 3.1;
         --
         if nvl(vt_tab_reg_0150(i).cod_pais,0) <= 0 then
            vt_tab_reg_0150(i).cod_pais := 1058;
         end if;
         --
         vn_fase := 3.2;
         --
         vt_tab_reg_0150(i).cnpj       := null;
         vt_tab_reg_0150(i).cpf        := null;
         vt_tab_reg_0150(i).ie         := null;
         vt_tab_reg_0150(i).suframa    := null;
         --
         if rec_part.origem_dado_pessoa = 0 then
            --        
            begin
               --
               select ( lpad(f.num_cpf, 9, '0') || lpad(f.dig_cpf, 2, '0') ) cpf_cnpj
                    , trim(f.inscr_prod) ie
                 into vt_tab_reg_0150(i).cpf
                    , vt_tab_reg_0150(i).ie
                 from fisica f
                where f.pessoa_id = rec_part.pessoa_id;
               --
            exception
               when others then
                  vt_tab_reg_0150(i).cpf := null;
                  vt_tab_reg_0150(i).ie  := null;
            end;
            --
            vn_fase := 3.3;
            --
            if trim(vt_tab_reg_0150(i).cpf) is null then
               --
               begin
                  --
                  select ( lpad(j.num_cnpj, 8, '0') || lpad(j.num_filial, 4, '0') || lpad(j.dig_cnpj, 2, '0') ) cpf_cnpj
                       , trim(j.ie)  ie
                       , lpad(j.suframa, 9, '0') suframa
                    into vt_tab_reg_0150(i).cnpj
                       , vt_tab_reg_0150(i).ie
                       , vt_tab_reg_0150(i).suframa
                    from juridica j
                   where j.pessoa_id = rec_part.pessoa_id;
                  --
               exception
                  when others then
                     vt_tab_reg_0150(i).cnpj       := null;
                     vt_tab_reg_0150(i).cpf        := null;
                     vt_tab_reg_0150(i).ie         := null;
                     vt_tab_reg_0150(i).suframa    := null;
               end;
               --
            end if;
            --      
         else
            --     
            vt_tab_reg_0150(i).cnpj       := rec_part.cod_part;
            vt_tab_reg_0150(i).cpf        := rec_part.cpf;
            vt_tab_reg_0150(i).ie         := rec_part.ie;
            vt_tab_reg_0150(i).suframa    := rec_part.suframa;
            --      
         end if;     
         --
         vn_fase := 3.4;
         --
         if trim(vt_tab_reg_0150(i).ie) like 'ISENT%' then
            vt_tab_reg_0150(i).ie := null;
         end if;
         --
         vn_fase := 3.5;
         --
         vt_tab_reg_0150(i).cod_mun    := pk_csf.fkg_ibge_cidade_id ( en_cidade_id => rec_part.cidade_id );
         vt_tab_reg_0150(i).lograd     := rec_part.lograd;
         vt_tab_reg_0150(i).num        := trim(rec_part.nro);
         vt_tab_reg_0150(i).compl      := rec_part.compl;
         vt_tab_reg_0150(i).bairro     := rec_part.bairro;
         --
         if rec_part.origem_dado_pessoa = 0 then
            --     
            vn_fase := 4;
            -- monta o REGISTRO 0175: ALTERAÇÃO DA TABELA DE CADASTRO DE PARTICIPANTE
            j := 0;
            --
            for rec_al in c_alter( rec_part.pessoa_id ) loop
               exit when c_alter%notfound or (c_alter%notfound) is null;
               --
               vn_fase := 5;
               --
               if gn_versao >= 107 and -- versão a partir de 01/01/2014
                  rec_al.nr_campo = '07' then -- não registrar
                  --
                  null;
                  --
               else
                  --
                  j := nvl(j,0) + 1;
                  --
                  vn_fase := 6;
                  --
                  vv_cont_ant := trim(pk_csf_efd.fkg_cont_ant_id ( en_alterpessoa_id => rec_al.id));
                  --
                  if rec_al.nr_campo <> '07' then
                     vt_bi_tab_reg_0175(i)(j).reg      := '0175';
                     vt_bi_tab_reg_0175(i)(j).dt_alt   := rec_al.dt_alt;
                     vt_bi_tab_reg_0175(i)(j).nr_campo := rec_al.nr_campo;
                     vt_bi_tab_reg_0175(i)(j).cont_ant := vv_cont_ant;
                  end if;
                  --
               end if;
               --
            end loop;
            --
         end if;
         --     
      end loop;
      --
   end if;
   --
exception
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_monta_reg_0150 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end pkb_monta_reg_0150;

-------------------------------------------------------------------------------------------------------

-- monta o REGISTRO 0100: DADOS DO CONTABILISTA
procedure pkb_monta_reg_0100
is
   --
   cursor c_contador is
   select '0100' reg
        , p.nome
        , ( lpad(f.num_cpf, 9, '0') || lpad(f.dig_cpf, 2, '0') ) cpf
        , c.crc
        , ( lpad(j.num_cnpj, 8, '0') || lpad(j.num_filial, 4, '0') || lpad(j.dig_cnpj, 2, '0') ) cnpj
        , lpad(p.cep, 8, '0') cep
        , trim(p.lograd)      lograd
        , substr(trim(p.nro), 1, 10) nro
        , trim(p.compl)       compl
        , trim(p.bairro)      bairro
        , trim(substr(p.fone, 1, 11)) fone
        , trim(substr(p.fax, 1, 11)) fax
        , trim(p.email)       email
        , ci.ibge_cidade
     from contador  c
        , pessoa    p
        , cidade    ci
        , fisica    f
        , juridica  j
    where c.id           = gt_row_abertura_efd.contador_id
      and p.id           = c.pessoa_id
      and ci.id          = p.cidade_id
      and f.pessoa_id(+) = p.id
      and j.pessoa_id(+) = p.id;
   --
begin
   --
   open c_contador;
   fetch c_contador into vt_tab_reg_0100(1).reg
                       , vt_tab_reg_0100(1).nome
                       , vt_tab_reg_0100(1).cpf
                       , vt_tab_reg_0100(1).crc
                       , vt_tab_reg_0100(1).cnpj
                       , vt_tab_reg_0100(1).cep
                       , vt_tab_reg_0100(1).lograd
                       , vt_tab_reg_0100(1).num
                       , vt_tab_reg_0100(1).compl
                       , vt_tab_reg_0100(1).bairro
                       , vt_tab_reg_0100(1).fone
                       , vt_tab_reg_0100(1).fax
                       , vt_tab_reg_0100(1).email
                       , vt_tab_reg_0100(1).cod_mun;
   close c_contador;
   --
   if instr(vt_tab_reg_0100(1).email, '@') = 0 then
      vt_tab_reg_0100(1).email := null;
   end if;
   --
   if trim(vt_tab_reg_0100(1).email) = '@' then
      vt_tab_reg_0100(1).email := null;
   end if;
   --
exception
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_monta_reg_0100: ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end pkb_monta_reg_0100;

-------------------------------------------------------------------------------------------------------

-- monta o REGISTRO 0015: DADOS DO CONTRIBUINTE SUBSTITUTO OU RESPONSÁVEL PELO ICMS DESTINO
procedure pkb_monta_reg_0015 
is
   --
   vn_fase        number := 0;
   v_existe_e200  number := 0;
   i              pls_integer;
   --
   cursor c_iest is
   select es.sigla_estado
        , iest.iest
     from ie_subst  iest
        , estado    es
    where iest.empresa_id  = gt_row_abertura_efd.empresa_id
      and es.id            = iest.estado_id;
   --
   cursor c_existe_E200( en_sigla_estado in estado.sigla_estado%type ) is 
   select count(1)
     from per_apur_icms_st  p
        , apuracao_icms_st  ai
        , estado            es
    where p.empresa_id        = gt_row_abertura_efd.empresa_id
      and trunc(p.dt_inicio) >= gt_row_abertura_efd.dt_ini
      and trunc(p.dt_fim)    <= gt_row_abertura_efd.dt_fim
      and ai.perapuricmsst_id = p.id
      and ai.dm_situacao      = 3 -- Processada   
      and es.id               = ai.estado_id
      and es.sigla_estado     = en_sigla_estado;
begin
   --
   vn_fase := 1;
   --
   i := 0;
   for rec in c_iest loop
      exit when c_iest%notfound or (c_iest%notfound) is null;
      --
      vn_fase := 2;
      --
      v_existe_e200  := 0;
      --    
      open c_existe_E200(en_sigla_estado => rec.sigla_estado);
      fetch c_existe_E200 into v_existe_e200;
      close c_existe_E200;
      --
      if nvl(v_existe_e200,0) > 0 then    
       --
         vn_fase := 3; 
         --    
         i := nvl(i,0) + 1;
         --
         vn_fase := 4;
         --
         vt_tab_reg_0015(i).reg    := '0015';
         vt_tab_reg_0015(i).uf_st  := rec.sigla_estado;
         vt_tab_reg_0015(i).ie_st  := rec.iest;
         --
      end if;    
   end loop;
   --
exception
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_monta_reg_0015 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end pkb_monta_reg_0015;

-------------------------------------------------------------------------------------------------------

-- monta o REGISTRO 0005: DADOS COMPLEMENTARES DA ENTIDADE
procedure pkb_monta_reg_0005
is
   --
   cursor c_dados is
   select '0005'      reg
        , trim(p.fantasia)    fantasia
        , lpad(p.cep, 8, '0') cep
        , trim(p.lograd)      lograd
        , substr(trim(p.nro), 1, 10) nro
        , trim(p.compl)       compl
        , trim(p.bairro)      bairro
        , trim(substr(p.fone, 1, 11)) fone
        , trim(substr(p.fax, 1, 11)) fax
        , trim(p.email)       email
     from pessoa   p
        , empresa  e
    where e.id     = gt_row_abertura_efd.empresa_id
      and p.id     = e.pessoa_id;
   --
begin
   --
   open c_dados;
   fetch c_dados into vt_tab_reg_0005(1).reg
                    , vt_tab_reg_0005(1).fantasia
                    , vt_tab_reg_0005(1).cep
                    , vt_tab_reg_0005(1).lograd
                    , vt_tab_reg_0005(1).num
                    , vt_tab_reg_0005(1).compl
                    , vt_tab_reg_0005(1).bairro
                    , vt_tab_reg_0005(1).fone
                    , vt_tab_reg_0005(1).fax
                    , vt_tab_reg_0005(1).email;
   close c_dados;
   --
exception
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_monta_reg_0005: ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end pkb_monta_reg_0005;

-------------------------------------------------------------------------------------------------------

-- monta o REGISTRO 0002: DADOS COMPLEMENTARES DA ENTIDADE
procedure pkb_monta_reg_0002
is
   --
   cursor c_dados is
   select '0002'      reg
        , p.dm_class_contrb_ipi contrb       
     from param_efd_icms_ipi p
    where  p.empresa_id    = gt_row_abertura_efd.empresa_id;
   --
   cursor c_dados2 is
   select  a.dm_ind_ativ
     from param_efd_icms_ipi p,
          abertura_efd a
    where p.empresa_id    = a.empresa_id
    and p.empresa_id    = gt_row_abertura_efd.empresa_id
    and a.id = gt_row_abertura_efd.id;   
   --
begin
   --       
    open c_dados;
    fetch c_dados into vt_tab_reg_0002(1).reg
                     , vt_tab_reg_0002(1).contrb;
    close c_dados;
   --
exception
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_monta_reg_0002: ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end pkb_monta_reg_0002;

-------------------------------------------------------------------------------------------------------


-- monta o REGISTRO 0001: ABERTURA DO BLOCO 0
procedure pkb_monta_reg_0001
is
   --
begin
   --
   vt_tab_reg_0001(1).reg      := '0001';
   vt_tab_reg_0001(1).ind_mov  := 0;
   --
exception
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_monta_reg_0001: ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end pkb_monta_reg_0001;

-------------------------------------------------------------------------------------------------------

-- monta o REGISTRO 0000: ABERTURA DO ARQUIVO DIGITAL E IDENTIFICAÇÃO DA ENTIDADE
procedure pkb_monta_reg_0000
is
   --
   vn_fase  number := 0;
   i        pls_integer;
   --
   cursor c_efd is
   select efd.id
        , efd.empresa_id
        , efd.dm_cod_fin
        , efd.dt_ini
        , efd.dt_fim
        , efd.nome
        , efd.cnpj
        , efd.cpf
        , efd.uf
        , efd.ie
        , efd.cidade_ibge
        , efd.im
        , efd.suframa
        , efd.dm_ind_perfil
        , efd.dm_ind_ativ
        , efd.dm_situacao
        , efd.contador_id
        , lpad(vl.cd, 3, '0') versao
     from abertura_efd      efd
        , versao_layout_efd vl
    where efd.id = gt_row_abertura_efd.id
      and vl.id  = efd.verslayoutefd_id;
   --
begin
   --
   vn_fase := 1;
   --
   i := 0;
   for rec in c_efd loop
      exit when c_efd%notfound or (c_efd%notfound) is null;
      --
      vn_fase := 2;
      --
      i := nvl(i,0) + 1;
      --
      vn_fase := 3;
      --
      vt_tab_reg_0000(i).reg         := '0000';
      vt_tab_reg_0000(i).cod_ver     := lpad(rec.versao,3,'0');
      vt_tab_reg_0000(i).cod_fin     := rec.dm_cod_fin;
      vt_tab_reg_0000(i).dt_ini      := rec.dt_ini;
      vt_tab_reg_0000(i).dt_fin      := rec.dt_fim;
      vt_tab_reg_0000(i).nome        := rec.nome;
      vt_tab_reg_0000(i).cnpj        := rec.cnpj;
      vt_tab_reg_0000(i).cpf         := rec.cpf;
      vt_tab_reg_0000(i).uf          := rec.uf;
      vt_tab_reg_0000(i).ie          := rec.ie;
      vt_tab_reg_0000(i).cod_mun     := rec.cidade_ibge;
      vt_tab_reg_0000(i).im          := rec.im;
      vt_tab_reg_0000(i).suframa     := lpad(rec.suframa, 9,'0');
      vt_tab_reg_0000(i).ind_perfil  := rec.dm_ind_perfil;
      -- #69103 valida se dm_ind_ativ = '2', grava fixo "1-Outros"
      if gt_row_abertura_efd.dm_ind_ativ = '2' then
       vt_tab_reg_0000(i).ind_ativ    := '1' ;
      else          
       vt_tab_reg_0000(i).ind_ativ    := rec.dm_ind_ativ;
      end if;
      --
   end loop;
   --
exception
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_monta_reg_0000 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end pkb_monta_reg_0000;

-------------------------------------------------------------------------------------------------------

-- procedimento monta registros do BLOCO 0: ABERTURA, IDENTIFICAÇÃO E REFERÊNCIAS.
procedure pkb_monta_bloco_0
is
   --
   vn_fase  number := 0;
   --
begin
   --
   vn_fase := 1;
   -- monta o REGISTRO 0000: ABERTURA DO ARQUIVO DIGITAL E IDENTIFICAÇÃO DA ENTIDADE
   pkb_monta_reg_0000;
   --
   vn_fase := 2;
   -- monta o REGISTRO 0001: ABERTURA DO BLOCO 0
   pkb_monta_reg_0001;
   --
   vn_fase := 2.1;
   -- monta o REGISTRO 0002: DADOS COMPLEMENTARES DA ENTIDADE
   pkb_monta_reg_0002;
   --
   vn_fase := 3;
   -- monta o REGISTRO 0005: DADOS COMPLEMENTARES DA ENTIDADE
   pkb_monta_reg_0005;
   --
   vn_fase := 4;
   -- monta o REGISTRO 0015: DADOS DO CONTRIBUINTE SUBSTITUTO
   pkb_monta_reg_0015;
   --
   vn_fase := 5;
   -- monta o REGISTRO 0100: DADOS DO CONTABILISTA
   pkb_monta_reg_0100;
   --
   vn_fase := 6;
   -- monta o REGISTRO 0990: ENCERRAMENTO DO BLOCO 0
   pkb_monta_reg_0990;
   --
exception
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_monta_bloco_0 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end pkb_monta_bloco_0;

-------------------------------------------------------------------------------------------------------

-- Monta o REGISTRO 1990: ENCERRAMENTO DO BLOCO 1
procedure pkb_monta_reg_1990
is
   --
begin
   --
   vt_tab_reg_1990(1).reg := '1990';
   vt_tab_reg_1990(1).qtd_lin_1 := nvl(fkg_qtde_linha_reg_1001,0)
                                    + nvl(fkg_qtde_linha_reg_1010,0)
                                    + nvl(fkg_qtde_linha_reg_1100,0)
                                    + nvl(fkg_qtde_linha_reg_1105,0)
                                    + nvl(fkg_qtde_linha_reg_1110,0)
                                    + nvl(fkg_qtde_linha_reg_1200,0)
                                    + nvl(fkg_qtde_linha_reg_1210,0)
                                    + nvl(fkg_qtde_linha_reg_1300,0)
                                    + nvl(fkg_qtde_linha_reg_1310,0)
                                    + nvl(fkg_qtde_linha_reg_1320,0)
                                    + nvl(fkg_qtde_linha_reg_1350,0)
                                    + nvl(fkg_qtde_linha_reg_1360,0)
                                    + nvl(fkg_qtde_linha_reg_1370,0)
                                    + nvl(fkg_qtde_linha_reg_1390,0)
                                    + nvl(fkg_qtde_linha_reg_1391,0)
                                    + nvl(fkg_qtde_linha_reg_1400,0)
                                    + nvl(fkg_qtde_linha_reg_1500,0)
                                    + nvl(fkg_qtde_linha_reg_1600,0)
                                    + nvl(fkg_qtde_linha_reg_1700,0)
                                    + nvl(fkg_qtde_linha_reg_1710,0)
                                    + nvl(fkg_qtde_linha_reg_1800,0)
                                    + nvl(fkg_qtde_linha_reg_1900,0)
                                    + nvl(fkg_qtde_linha_reg_1910,0)
                                    + nvl(fkg_qtde_linha_reg_1920,0)
                                    + nvl(fkg_qtde_linha_reg_1921,0)
                                    + nvl(fkg_qtde_linha_reg_1922,0)
                                    + nvl(fkg_qtde_linha_reg_1923,0)
                                    + nvl(fkg_qtde_linha_reg_1925,0)
                                    + nvl(fkg_qtde_linha_reg_1926,0)
                                    + nvl(fkg_qtde_linha_reg_1960,0)
                                    + nvl(fkg_qtde_linha_reg_1970,0)
                                    + nvl(fkg_qtde_linha_reg_1975,0)
                                    + nvl(fkg_qtde_linha_reg_1980,0)
                                    + 1; -- "1" Representa o registro 1990
   --
exception
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_monta_reg_1990: ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end pkb_monta_reg_1990;

-------------------------------------------------------------------------------------------------------
-- monta o REGISTRO 1980: GIAF 4 GUIA DE INFORMAÇÃO E APURAÇÃO DE INCENTIVOS FISCAIS E FINANCEIROS: CENTRAL DE DISTRIBUIÇÃO (ENTRADAS/SAÍDAS)
procedure pkb_monta_reg_1980
is
   --
   vn_fase  number := 0;
   i        pls_integer;
   --
   cursor c_1980 is
    select cis.cd_ind_ap ,
           gc.g4_01,
           gc.g4_02,
           gc.g4_03,
           gc.g4_04,
           gc.g4_05,
           gc.g4_06,
           gc.g4_07,
           gc.g4_08,
           gc.g4_09,
           gc.g4_10,
           gc.g4_11,
           gc.g4_12
    from COD_IND_SBAPUR cis, GIAF_CENTRAL gc
    where cis.id      = gc.codindsbapur_id
    and gc.dm_st_proc = 1
    and gc.empresa_id = gt_row_abertura_efd.empresa_id
    and trunc(gc.dt_refer ) between gt_row_abertura_efd.dt_ini and gt_row_abertura_efd.dt_fim;
   --
begin
   --
   vn_fase := 1;
   --
   i := 0;
   --
   for rec_1980 in c_1980
   loop
      --
      exit when c_1980%notfound or (c_1980%notfound) is null;
      --
      vn_fase := 2;
      --
      i := nvl(i,0) + 1;
      --
      vn_fase := 3;
      -- Registro 1980: GIAF 4 GUIA DE INFORMAÇÃO E APURAÇÃO DE INCENTIVOS
      -- FISCAIS E FINANCEIROS: CENTRAL DE DISTRIBUIÇÃO (ENTRADAS/SAÍDAS)
      vt_tab_reg_1980(i).reg    := '1980';
      vt_tab_reg_1980(i).IND_AP := rec_1980.cd_ind_ap;
      vt_tab_reg_1980(i).G4_01  := rec_1980.G4_01;
      vt_tab_reg_1980(i).G4_02  := rec_1980.G4_02;
      vt_tab_reg_1980(i).G4_03  := rec_1980.G4_03;
      vt_tab_reg_1980(i).G4_04  := rec_1980.G4_04;
      vt_tab_reg_1980(i).G4_05  := rec_1980.G4_05;
      vt_tab_reg_1980(i).G4_06  := rec_1980.G4_06;
      vt_tab_reg_1980(i).G4_07  := rec_1980.G4_07;
      vt_tab_reg_1980(i).G4_08  := rec_1980.G4_08;
      vt_tab_reg_1980(i).G4_09  := rec_1980.G4_09;
      vt_tab_reg_1980(i).G4_10  := rec_1980.G4_10;
      vt_tab_reg_1980(i).G4_11  := rec_1980.G4_11;
      vt_tab_reg_1980(i).G4_12  := rec_1980.G4_12;
      --
   end loop;
   --
exception
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_monta_reg_1980 fase('||vn_fase||'): '||sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end pkb_monta_reg_1980;

-------------------------------------------------------------------------------------------------------

-- monta o REGISTRO 1970: GIAF 3 - GUIA DE INFORMAÇÃO E APURAÇÃO DE INCENTIVOS FISCAIS E FINANCEIROS: IMPORTAÇÃO (DIFERIMENTO NA ENTRADA E CRÉDITO PRESUMIDO NA SAÍDA SUBSEQUENTE)
procedure pkb_monta_reg_1970
is
   --
   vn_fase  number := 0;
   i        pls_integer;
   j        pls_integer;
   --
   cursor c_1970 is
    select cis.cd_ind_ap ,
           gimp.g3_01 ,
           gimp.g3_02 ,
           gimp.g3_03 ,
           gimp.g3_04 ,
           gimp.g3_05 ,
           gimp.g3_06 ,
           gimp.g3_07 ,
           gimp.g3_t  ,
           gimp.g3_08 ,
           gimp.g3_09 ,
           gimp.id
    from COD_IND_SBAPUR cis, GIAF_IMPORTACAO gimp
    where cis.id          = gimp.codindsbapur_id
      and gimp.dm_st_proc = 1
      and gimp.empresa_id = gt_row_abertura_efd.empresa_id
      and trunc(gimp.dt_refer ) between gt_row_abertura_efd.dt_ini and gt_row_abertura_efd.dt_fim;
   -------
   cursor c_1975( en_giafimportacao_id in GIAF_IMPORTACAO.id%type ) is
    select gia.aliq_imp_base ,
           gia.g3_10,
           gia.g3_11,
           gia.g3_12
       from GIAF_IMPORT_ALIQ gia
       where gia.giafimportacao_id = en_giafimportacao_id;
   -------
begin
   --
   vn_fase := 1;
   --
   i := 0;
   --
   for rec_1970 in c_1970
   loop
      --
      exit when c_1970%notfound or (c_1970%notfound) is null;
      --
      vn_fase := 2;
      --
      i := nvl(i,0) + 1;
      --
      vn_fase := 3;
      -- Registro GIAF 3 - GUIA DE INFORMAÇÃO E APURAÇÃO DE INCENTIVOS FISCAIS E FINANCEIROS:
      -- IMPORTAÇÃO (DIFERIMENTO NA ENTRADA E CRÉDITO PRESUMIDO NA SAÍDA SUBSEQUENTE)
      vt_tab_reg_1970(i).reg    := '1970';
      vt_tab_reg_1970(i).IND_AP := rec_1970.cd_ind_ap;
      vt_tab_reg_1970(i).G3_01  := rec_1970.G3_01;
      vt_tab_reg_1970(i).G3_02  := rec_1970.G3_02;
      vt_tab_reg_1970(i).G3_03  := rec_1970.G3_03;
      vt_tab_reg_1970(i).G3_04  := rec_1970.G3_04;
      vt_tab_reg_1970(i).G3_05  := rec_1970.G3_05;
      vt_tab_reg_1970(i).G3_06  := rec_1970.G3_06;
      vt_tab_reg_1970(i).G3_07  := rec_1970.G3_07;
      vt_tab_reg_1970(i).G3_T   := rec_1970.G3_T;
      vt_tab_reg_1970(i).G3_08  := rec_1970.G3_08;
      vt_tab_reg_1970(i).G3_09  := rec_1970.G3_09;
      --
      j       := 0;
      vn_fase := 4;
      --
      for rec_1975 in c_1975(rec_1970.id)
      loop
         --
         exit when c_1975%notfound or (c_1975%notfound) is null;
         --
         vn_fase := 5;
         --
         j := nvl(j,0) + 1;
         --
         vn_fase := 6;
         --Registro 1975: GIAF 3 - GUIA DE INFORMAÇÃO E APURAÇÃO DE INCENTIVOS
         --FISCAIS E FINANCEIROS: IMPORTAÇÃO (SAÍDAS INTERNAS POR FAIXA DE ALÍQUOTA)
         vt_bi_tab_reg_1975(i)(j).REG          := '1975';
         vt_bi_tab_reg_1975(i)(j).ALIQ_IMP_BASE:= rec_1975.ALIQ_IMP_BASE;
         vt_bi_tab_reg_1975(i)(j).G3_10        := rec_1975.G3_10;
         vt_bi_tab_reg_1975(i)(j).G3_11        := rec_1975.G3_11;
         vt_bi_tab_reg_1975(i)(j).G3_12        := rec_1975.G3_12;
         --
      end loop;
      --
   end loop;
   --
exception
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_monta_reg_1970 fase('||vn_fase||'): '||sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end pkb_monta_reg_1970;

-------------------------------------------------------------------------------------------------------

-- monta o REGISTRO 1960: GIAF 1 - GUIA DE INFORMAÇÃO E APURAÇÃO DE INCENTIVOS FISCAIS E FINANCEIROS: INDÚSTRIA (CRÉDITO PRESUMIDO)
procedure pkb_monta_reg_1960
is
   --
   vn_fase  number := 0;
   i        pls_integer;
   --
   cursor c_1960 is
   select cis.cd_ind_ap ,
    gi.g1_01,
    gi.g1_02,
    gi.g1_03,
    gi.g1_04,
    gi.g1_05,
    gi.g1_06,
    gi.g1_07,
    gi.g1_08,
    gi.g1_09,
    gi.g1_10,
    gi.g1_11
    from COD_IND_SBAPUR cis, GIAF_INDUSTRIA gi
    where cis.id         = gi.codindsbapur_id
      and gi.dm_st_proc  = 1
      and gi.empresa_id  = gt_row_abertura_efd.empresa_id
      and trunc(gi.dt_refer ) between gt_row_abertura_efd.dt_ini and gt_row_abertura_efd.dt_fim;
   --
begin
   --
   vn_fase := 1;
   --
   i := 0;
   --
   for rec_1960 in c_1960
   loop
      --
      exit when c_1960%notfound or (c_1960%notfound) is null;
      --
      vn_fase := 2;
      --
      i := nvl(i,0) + 1;
      --
      vn_fase := 3;
      -- Registro 1960: GIAF 1 - GUIA DE INFORMAÇÃO E APURAÇÃO DE INCENTIVOS FISCAIS E FINANCEIROS: INDÚSTRIA (CRÉDITO PRESUMIDO)
      vt_tab_reg_1960(i).reg    := '1960';
      vt_tab_reg_1960(i).IND_AP := rec_1960.cd_ind_ap;
      vt_tab_reg_1960(i).G1_01  := rec_1960.G1_01;
      vt_tab_reg_1960(i).G1_02  := rec_1960.G1_02;
      vt_tab_reg_1960(i).G1_03  := rec_1960.G1_03;
      vt_tab_reg_1960(i).G1_04  := rec_1960.G1_04;
      vt_tab_reg_1960(i).G1_05  := rec_1960.G1_05;
      vt_tab_reg_1960(i).G1_06  := rec_1960.G1_06;
      vt_tab_reg_1960(i).G1_07  := rec_1960.G1_07;
      vt_tab_reg_1960(i).G1_08  := rec_1960.G1_08;
      vt_tab_reg_1960(i).G1_09  := rec_1960.G1_09;
      vt_tab_reg_1960(i).G1_10  := rec_1960.G1_10;
      vt_tab_reg_1960(i).G1_11  := rec_1960.G1_11;
      --
   end loop;
   --
exception
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_monta_reg_1960 fase('||vn_fase||'): '||sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end pkb_monta_reg_1960;

-------------------------------------------------------------------------------------------------------

-- monta o REGISTRO 1900: INDICADOR DE SUB-APURAÇÃO DO ICMS
procedure pkb_monta_reg_1900
is
   --
   vn_fase  number := 0;
   i        pls_integer;
   j        pls_integer;
   k        pls_integer;
   --
   cursor c_1900 is
   select si.id subapuricms_id
        , si.dt_ini
        , si.dt_fin
        , si.dm_ind_apur_icms
        , si.descr_compl
        , si.vl_tot_transf_debitos_oa
        , si.vl_tot_aj_debitos_oa
        , si.vl_estornos_cred_oa
        , si.vl_tot_transf_creditos_oa
        , si.vl_tot_aj_creditos_oa
        , si.vl_estornos_deb_oa
        , si.vl_sld_credor_ant_oa
        , si.vl_sld_apurado_oa
        , si.vl_tot_ded
        , si.vl_icms_recolher_oa
        , si.vl_sld_credor_transp_oa
        , si.vl_deb_esp_oa
     from subapur_icms si
    where si.empresa_id  = gt_row_abertura_efd.empresa_id
      and si.dm_situacao = 3 -- processada
      and si.dt_ini     >= gt_row_abertura_efd.dt_ini
      and si.dt_fin     <= gt_row_abertura_efd.dt_fim;
   --
   cursor c_1921( en_subapuricms_id in subapur_icms.id%type ) is
   select ai.id ajustsubapuricms_id
        , ai.codajsaldoapuricms_id
        , ai.descr_compl_aj
        , ai.vl_aj_apur
     from ajust_subapur_icms ai
    where ai.subapuricms_id = en_subapuricms_id;
   --
   cursor c_1922( en_ajustsubapuricms_id in ajust_subapur_icms.id%type ) is
   select ia.num_da
        , ia.num_proc
        , ia.origproc_id
        , ia.descr_proc
        , ia.txt_compl
     from inf_ajust_subapur_icms ia
    where ia.ajustsubapuricms_id = en_ajustsubapuricms_id;
 --  
   cursor c_1923( en_ajustsubapuricms_id in ajust_subapur_icms.id%type ) is
   select nf.id  notafiscal_id
        , nf.pessoa_id
        , nf.modfiscal_id
        , nf.serie
        , nf.nro_nf
        , nf.dt_emiss
        , nf.nro_chave_nfe
        , it.item_id
        , it.cod_item
        , ia.vl_aj_item
     from inf_ajust_subapur_icms_nf   ia
        , tmp_nota_fiscal             nf
        , tmp_item_nota_fiscal        it
    where ia.ajustsubapuricms_id = en_ajustsubapuricms_id
      and nf.id                  = ia.referencia_id
      and it.id(+)               = ia.itemnf_id 
      and ia.obj_referencia      = 'NOTA_FISCAL'   
      union
       select ct.id  notafiscal_id
        , ct.pessoa_id
        , ct.modfiscal_id
        , ct.serie
        , ct.nro_ct
        , ct.dt_hr_emissao
        , ct.nro_chave_cte
        , cti.item_id
        , '' cod_item
        , ia.vl_aj_item
     from inf_ajust_subapur_icms_nf  ia
        , tmp_conhec_transp          ct
        , conhec_transp_item         cti
    where ia.ajustsubapuricms_id = en_ajustsubapuricms_id
      and ct.id                  = ia.referencia_id
      and ct.id                  = cti.conhectransp_id(+)
      and ia.obj_referencia      = 'CONHEC_TRANSP';
   --
   cursor c_1925( en_subapuricms_id in subapur_icms.id%type ) is
   select ii.codinfadicvlrdecl_id
        , ii.vl_inf_adic
        , ii.descr_compl_aj
     from infadic_subapur_icms ii
    where ii.subapuricms_id = en_subapuricms_id;
   --
   cursor c_1926( en_subapuricms_id in subapur_icms.id%type ) is
   select os.ajobrigrec_id
        , os.vl_or
        , os.dt_vcto
        , cur.cod_rec
        , os.num_proc
        , os.origproc_id
        , os.descr_proc
        , os.txt_compl
        , os.mes_ref
     from obrig_rec_subapur_icms os
        , cod_rec_uf             cur
    where cur.id         (+)= os.codrecuf_id
      and os.subapuricms_id = en_subapuricms_id;
   --
begin
   --
   vn_fase := 1;
   --
   i := 0;
   --
   for rec_1900 in c_1900
   loop
      --
      exit when c_1900%notfound or (c_1900%notfound) is null;
      --
      vn_fase := 2;
      --
      i := nvl(i,0) + 1;
      --
      vn_fase := 3;
      -- Registro 1900: Indicador de sub-apuração do icms
      vt_tab_reg_1900(i).reg                  := '1900';
      vt_tab_reg_1900(i).ind_apur_icms        := rec_1900.dm_ind_apur_icms;
      vt_tab_reg_1900(i).descr_compl_out_apur := rec_1900.descr_compl;
      --
      vn_fase := 4;
      -- Registro 1910: Período da sub-apuração do icms
      vt_tab_reg_1910(i).reg    := '1910';
      vt_tab_reg_1910(i).dt_ini := rec_1900.dt_ini;
      vt_tab_reg_1910(i).dt_fin := rec_1900.dt_fin;
      --
      vn_fase := 5;
      -- Registro 1920: Sub-apuração do icms
      vt_tab_reg_1920(i).reg                       := '1920';
      vt_tab_reg_1920(i).vl_tot_transf_debitos_oa  := rec_1900.vl_tot_transf_debitos_oa;
      vt_tab_reg_1920(i).vl_tot_aj_debitos_oa      := rec_1900.vl_tot_aj_debitos_oa;
      vt_tab_reg_1920(i).vl_estornos_cred_oa       := rec_1900.vl_estornos_cred_oa;
      vt_tab_reg_1920(i).vl_tot_transf_creditos_oa := rec_1900.vl_tot_transf_creditos_oa;
      vt_tab_reg_1920(i).vl_tot_aj_creditos_oa     := rec_1900.vl_tot_aj_creditos_oa;
      vt_tab_reg_1920(i).vl_estornos_deb_oa        := rec_1900.vl_estornos_deb_oa;
      vt_tab_reg_1920(i).vl_sld_credor_ant_oa      := rec_1900.vl_sld_credor_ant_oa;
      vt_tab_reg_1920(i).vl_sld_apurado_oa         := rec_1900.vl_sld_apurado_oa;
      vt_tab_reg_1920(i).vl_tot_ded                := rec_1900.vl_tot_ded;
      vt_tab_reg_1920(i).vl_icms_recolher_oa       := rec_1900.vl_icms_recolher_oa;
      vt_tab_reg_1920(i).vl_sld_credor_transp_oa   := rec_1900.vl_sld_credor_transp_oa;
      vt_tab_reg_1920(i).vl_deb_esp_oa             := rec_1900.vl_deb_esp_oa;
      --
      vn_fase := 6;
      --
      j := 0;
      -- Registro 1921: Ajuste/benefício/incentivo da sub-apuração do icms
      for rec_1921 in c_1921( en_subapuricms_id => rec_1900.subapuricms_id )
      loop
         --
         exit when c_1921%notfound or (c_1921%notfound) is null;
         --
         vn_fase := 7;
         --
         j := nvl(j,0) + 1;
         --
         vn_fase := 8;
         --
         vt_bi_tab_reg_1921(i)(j).reg            := '1921';
         vt_bi_tab_reg_1921(i)(j).cod_aj_apur    := pk_csf_efd.fkg_cod_codajsaldoapuricms(en_codajsaldoapuricms_id => rec_1921.codajsaldoapuricms_id);
         vt_bi_tab_reg_1921(i)(j).descr_compl_aj := rec_1921.descr_compl_aj;
         vt_bi_tab_reg_1921(i)(j).vl_aj_apur     := rec_1921.vl_aj_apur;
         --
         vn_fase := 9;
         --
         k := 0;
         -- Registro 1922: Informações adicionais dos ajustes da sub-apuração do icms
         for rec_1922 in c_1922( en_ajustsubapuricms_id => rec_1921.ajustsubapuricms_id )
         loop
            --
            exit when c_1922%notfound or (c_1922%notfound) is null;
            --
            vn_fase := 10;
            --
            k := nvl(k,0) + 1;
            --
            vn_fase := 11;
            --
            vt_tri_tab_reg_1922(i)(j)(k).reg       := '1922';
            vt_tri_tab_reg_1922(i)(j)(k).num_da    := rec_1922.num_da;
            vt_tri_tab_reg_1922(i)(j)(k).num_proc  := rec_1922.num_proc;
            vt_tri_tab_reg_1922(i)(j)(k).ind_proc  := pk_csf.fkg_orig_proc_cd(en_origproc_id => rec_1922.origproc_id);
            vt_tri_tab_reg_1922(i)(j)(k).proc      := rec_1922.descr_proc;
            vt_tri_tab_reg_1922(i)(j)(k).txt_compl := rec_1922.txt_compl;
            --
         end loop;
         --
         vn_fase := 12;
         --
         k := 0;
         -- Registro 1923: Informações adicionais dos ajustes da sub-apuração do icms - identificação dos documentos fiscais
         for rec_1923 in c_1923( en_ajustsubapuricms_id => rec_1921.ajustsubapuricms_id )
         loop
            --
            exit when c_1923%notfound or (c_1923%notfound) is null;
            --
            vn_fase := 13;
            --
            k := nvl(k,0) + 1;
            --
            vn_fase := 14;
            --
            vt_tri_tab_reg_1923(i)(j)(k).reg        := '1923';    
            --vt_tri_tab_reg_1923(i)(j)(k).cod_part   := pk_csf.fkg_pessoa_cod_part(en_pessoa_id => rec_1923.pessoa_id);
            vt_tri_tab_reg_1923(i)(j)(k).cod_part :=  pk_csf_api_efd.fkb_ret_cnpjcpj_ibge_cod_part ( en_pessoa_id          => rec_1923.pessoa_id
                                                                                                   , en_tipo_retorna       => 1  -- 0-Pessoa_id / 1-Cod_Part    
                                                                                                   , en_origem_dado_pessoa => gn_origem_dado_pessoa                                                   
                                                                                                   , en_notafiscal_id      => rec_1923.notafiscal_id );        
            vt_tri_tab_reg_1923(i)(j)(k).cod_mod    := pk_csf.fkg_cod_mod_id(en_modfiscal_id => rec_1923.modfiscal_id);
            vt_tri_tab_reg_1923(i)(j)(k).ser        := rec_1923.serie;
            vt_tri_tab_reg_1923(i)(j)(k).sub        := null;
            vt_tri_tab_reg_1923(i)(j)(k).num_doc    := rec_1923.nro_nf;
            vt_tri_tab_reg_1923(i)(j)(k).dt_doc     := rec_1923.dt_emiss;
            vt_tri_tab_reg_1923(i)(j)(k).cod_item   := rec_1923.cod_item;
            vt_tri_tab_reg_1923(i)(j)(k).vl_aj_item := rec_1923.vl_aj_item;
            vt_tri_tab_reg_1923(i)(j)(k).chv_doce   := rec_1923.nro_chave_nfe;
            --
            vn_fase := 15;
            --
            if nvl(rec_1923.pessoa_id,0) > 0 then
               --
               vn_fase := 16;
               pkb_monta_reg_0150( en_pessoa_id     => rec_1923.pessoa_id 
                                 , en_notafiscal_id => rec_1923.notafiscal_id );
               --
            end if;
            --
            vn_fase := 17;
            --
            if nvl(rec_1923.item_id, 0) > 0 then
               --
               vn_fase := 18;
               pkb_monta_reg_0200( en_item_id => rec_1923.item_id);
               --
            end if;
            --
         end loop;
         --
      end loop;
      --
      vn_fase := 19;
      --
      j := nvl(j,0); -- continuar a contagem do registro 1921
      -- Registro 1925: Informações adicionais da sub-apuração - valores declaratórios
      for rec_1925 in c_1925( en_subapuricms_id => rec_1900.subapuricms_id )
      loop
         --
         exit when c_1925%notfound or (c_1925%notfound) is null;
         --
         vn_fase := 20;
         --
         j := nvl(j,0) + 1;
         --
         vn_fase := 21;
         --
         vt_bi_tab_reg_1925(i)(j).reg            := '1925';
         vt_bi_tab_reg_1925(i)(j).cod_inf_adic   := pk_csf_efd.fkg_cod_codinfadicvlrdecl(en_codinfadicvlrdecl_id => rec_1925.codinfadicvlrdecl_id);
         vt_bi_tab_reg_1925(i)(j).vl_inf_adic    := rec_1925.vl_inf_adic;
         vt_bi_tab_reg_1925(i)(j).descr_compl_aj := rec_1925.descr_compl_aj;
         --
      end loop;
      --
      vn_fase := 22;
      --
      j := nvl(j,0); -- continuar a contagem do registro 1925
      -- Registro 1926: Obrigações do icms a recolher - operações referentes à sub-apuração
      for rec_1926 in c_1926( en_subapuricms_id => rec_1900.subapuricms_id )
      loop
         --
         exit when c_1926%notfound or (c_1926%notfound) is null;
         --
         vn_fase := 23;
         --
         j := nvl(j,0) + 1;
         --
         vn_fase := 24;
         --
         vt_bi_tab_reg_1926(i)(j).reg       := '1926';
         vt_bi_tab_reg_1926(i)(j).cod_or    := pk_csf.fkg_cd_ajobrigrec(en_ajobrigrec_id => rec_1926.ajobrigrec_id);
         vt_bi_tab_reg_1926(i)(j).vl_or     := rec_1926.vl_or;
         vt_bi_tab_reg_1926(i)(j).dt_vcto   := rec_1926.dt_vcto;
         vt_bi_tab_reg_1926(i)(j).cod_rec   := rec_1926.cod_rec;
         vt_bi_tab_reg_1926(i)(j).num_proc  := rec_1926.num_proc;
         vt_bi_tab_reg_1926(i)(j).ind_proc  := pk_csf.fkg_orig_proc_cd(en_origproc_id => rec_1926.origproc_id);
         vt_bi_tab_reg_1926(i)(j).proc      := rec_1926.descr_proc;
         vt_bi_tab_reg_1926(i)(j).txt_compl := rec_1926.txt_compl;
         vt_bi_tab_reg_1926(i)(j).mes_ref   := rec_1926.mes_ref;
         --
      end loop;
      --
   end loop;
   --
exception
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_monta_reg_1900 fase('||vn_fase||'): '||sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end pkb_monta_reg_1900;

-------------------------------------------------------------------------------------------------------

-- monta o REGISTRO 1800 - DCTA - DEMONSTRATIVO DE CRÉDITO DO ICMS SOBRE TRANSPORTE AÉREO
procedure pkb_monta_reg_1800
is
   --
   vn_fase  number := 0;
   i        pls_integer;
   --
   cursor c_1800 is
   select d.id
        , d.ano
        , d.mes
        , d.vl_carga
        , d.vl_pass
        , d.vl_fat
        , d.ind_rat
        , d.vl_icms_ant
        , d.vl_bc_icms
        , d.vl_icms_apur
        , d.vl_bc_icms_apur
        , d.vl_dif
     from dem_cred_icms_transp_aereo d
    where d.empresa_id = gt_row_abertura_efd.empresa_id
      and d.ano        = to_number(to_char(gt_row_abertura_efd.dt_ini, 'rrrr'))
      and d.mes        = to_number(to_char(gt_row_abertura_efd.dt_ini, 'mm'));
   --
begin
   --
   vn_fase := 1;
   --
   i := 0;
   for rec_1800 in c_1800 loop
      exit when c_1800%notfound or (c_1800%notfound) is null;
      --
      vn_fase := 2;
      --
      i := nvl(i,0) + 1;
      --
      vn_fase := 3;
      --
      vt_tab_reg_1800(i).reg              := '1800';
      vt_tab_reg_1800(i).vl_carga         := rec_1800.vl_carga;
      vt_tab_reg_1800(i).vl_pass          := rec_1800.vl_pass;
      vt_tab_reg_1800(i).vl_fat           := rec_1800.vl_fat;
      vt_tab_reg_1800(i).ind_rat          := rec_1800.ind_rat;
      vt_tab_reg_1800(i).vl_icms_ant      := rec_1800.vl_icms_ant;
      vt_tab_reg_1800(i).vl_bc_icms       := rec_1800.vl_bc_icms;
      vt_tab_reg_1800(i).vl_icms_apur     := rec_1800.vl_icms_apur;
      vt_tab_reg_1800(i).vl_bc_icms_apur  := rec_1800.vl_bc_icms_apur;
      vt_tab_reg_1800(i).vl_dif           := rec_1800.vl_dif;
      --
   end loop;
   --
exception
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_monta_reg_1800 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end pkb_monta_reg_1800;

-------------------------------------------------------------------------------------------------------

-- monta o REGISTRO 1700 - DOCUMENTOS FISCAIS UTILIZADOS
procedure pkb_monta_reg_1700
is
   --
   vn_fase  number := 0;
   --
begin
   --
   vn_fase := 1;
   --
exception
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_monta_reg_1700 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end pkb_monta_reg_1700;

-------------------------------------------------------------------------------------------------------

-- Monta o REGISTRO 1600: TOTAL DAS OPERAÇÕES COM CARTÃO DE CRÉDITO E/OU DÉBITO
procedure pkb_monta_reg_1600
is
   --
   vn_fase  number := 0;
   i        pls_integer;
   --
   cursor c_1600 is
   select t.id
        , t.ano
        , t.mes
        , t.empresa_id
        , t.tot_credito
        , t.tot_debito
        , t.pessoa_id
     from total_oper_cartao t
    where t.empresa_id = gt_row_abertura_efd.empresa_id
      and t.ano        = to_number(to_char(gt_row_abertura_efd.dt_ini, 'rrrr'))
      and t.mes        = to_number(to_char(gt_row_abertura_efd.dt_ini, 'mm'))
    order by t.pessoa_id;
   --
begin
   --
   vn_fase := 1;
   --
   i := 0;
   for rec_1600 in c_1600 loop
      exit when c_1600%notfound or (c_1600%notfound) is null;
      --
      vn_fase := 2;
      --
      i := nvl(i,0) + 1;
      --
      vn_fase := 3;
      --
      vt_tab_reg_1600(i).reg            := '1600';
      vt_tab_reg_1600(i).cod_part       := pk_csf.fkg_pessoa_cod_part (rec_1600.pessoa_id);
      vt_tab_reg_1600(i).tot_credito    := rec_1600.tot_credito;
      vt_tab_reg_1600(i).tot_debito     := rec_1600.tot_debito;
      --
      vn_fase := 4;
      --Monta arquivo auxiliar
      if nvl(rec_1600.pessoa_id, 0) > 0 then
         --
         vn_fase := 5;
         --
         pkb_monta_reg_0150( en_pessoa_id => rec_1600.pessoa_id);
         --
      end if;
      --
   end loop;
   --
exception
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_monta_reg_1600 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end pkb_monta_reg_1600;

-------------------------------------------------------------------------------------------------------

-- Monta o REGISTRO 1400: INFORMAÇÃO SOBRE VALORES AGREGADOS
procedure pkb_monta_reg_1400 
is
   --
   vn_fase           number := 0;
   i                 pls_integer;
   vv_cod_item       varchar2(60) := null;
   vv_cod_item_ipm   varchar2(60) := null;
   vn_valor_mun      number;   
   --
    cursor c_1400 is
   /*select c.ibge_cidade mun
        , iva.item_id   item_id
        , nvl(sum(nvl(iva.valor,0)),0) valor
        , c.estado_id
     from inf_valor_agreg iva
        , cidade          c
    where iva.empresa_id = gt_row_abertura_efd.empresa_id
      and iva.ano        = to_number(to_char(gt_row_abertura_efd.dt_ini, 'RRRR'))
      and iva.mes        = to_number(to_char(gt_row_abertura_efd.dt_ini, 'MM'))
      and iva.dm_st_proc in (1,3) -- 0-Não validada, 1-Validada, 2-Erro de validação, 3-Inserido pelo portal
      and c.id           = iva.cidade_id
    group by c.ibge_cidade
        , iva.item_id, c.estado_id;*/
    select cod_dipam
          ,item_id
          ,mun          
          ,valor
          ,estado_id
      from ( select a.cod_dipam
                  , a.item_id
                  , a.mun                  
                  , sum(a.valor) valor
                  , a.estado_id
               from ( select c.ibge_cidade    mun
                           , iva.item_id      item_id
                           , nvl(iva.valor,0) valor
                           , (pk_csf_efd.fkg_recup_cod_ipm_item( iva.empresa_id
                                                               , iva.item_id
                                                               , c.estado_id )) cod_dipam
                           , c.estado_id
                        from inf_valor_agreg  iva
                           , cidade           c
                       where iva.empresa_id = gt_row_abertura_efd.empresa_id
                         and iva.ano        = to_number(to_char(gt_row_abertura_efd.dt_ini, 'RRRR'))
                         and iva.mes        = to_number(to_char(gt_row_abertura_efd.dt_ini, 'MM'))
                         -- and iva.dm_st_proc in (1,3) -- 0-Não validada, 1-Validada, 2-Erro de validação, 3-Inserido pelo portal
                         and iva.dm_st_proc = 1  -- Validada
                         and nvl(iva.valor,0) > 0
                         and c.id           = iva.cidade_id
                    ) a
                group by a.mun
                       , a.item_id
                       , a.cod_dipam
                       , a.estado_id
              union -- Origem_dado_pessoa (Padrão) - Cadastro Pessoal
              select case 
                       when coddip_empresa = '2.2' then
                         'SPDIPAM22' 
                       else
                         null
                     end cod_dipam  
                   , item_id		   
                   , municipio_empresa
                   , round(sum(valor),2) valor
                   , estado_id
               from (select nf.empresa_id, nf.pessoa_id,
                            dg.cd coddip_empresa,
                            null item_id,
                            case
                              when trim(dg.cd) = '2.5' then
                                ci.ibge_cidade
                               else
                                decode(nf.dm_ind_emit, 0, cid.ibge_cidade, ci.ibge_cidade)
                            end municipio_empresa,                   
                            sum(case
                                  when trim(dg.cd) = '2.5' then
                                   case
                                     when es.sigla_estado = 'SP' then
                                      case
                                        when et.sigla_estado = 'SP' then
                                         inf.vl_item_bruto
                                        else
                                         1
                                      end
                                     else
                                      0
                                   end
                                  else
                                   case
                                     when (nvl(pdg.perc_rateio_item, 0) = 0 
                                           and (c.tipooperacao_id not in (select t.id from tipo_operacao t where t.cd = 3)
                                               and nf.dm_fin_nfe in (1,2) --NF-e normal NF-e complementar --#74544
                                               )
                                           ) then
                                            (nvl(inf.vl_item_bruto, 0) +
                                             nvl(inf.vl_frete, 0) +
                                             nvl(inf.vl_seguro, 0) + nvl(inf.vl_outro, 0) +
                                             (select nvl(sum(nvl(imp.vl_imp_trib, 0)), 0)
                                                from imp_itemnf imp, tipo_imposto ti
                                               where imp.itemnf_id = inf.id
                                                 and imp.tipoimp_id = ti.id
                                                 and ti.cd in (2, 3, 7))) -
                                                   nvl(inf.vl_desc, 0)
                                     when (c.tipooperacao_id not in (select t.id from tipo_operacao t where t.cd = 3)
                                           and nf.dm_fin_nfe in (1,2) --NF-e normal NF-e complementar --#74544
                                           ) then 
                                            ((nvl(inf.vl_item_bruto, 0) +
                                              nvl(inf.vl_frete, 0) + nvl(inf.vl_seguro, 0) +
                                              nvl(inf.vl_outro, 0) +
                                              (select nvl(sum(nvl(imp.vl_imp_trib, 0)), 0)
                                                 from imp_itemnf imp, tipo_imposto ti
                                                where imp.itemnf_id = inf.id
                                                  and imp.tipoimp_id = ti.id
                                                  and ti.cd in (2, 3, 7))) -
                                              nvl(inf.vl_desc, 0)) *
                                                    nvl(pdg.perc_rateio_item, 0) / 100
                                     else
                                      0
                                   end
                                end)
                            -
                            sum(case
                                  when trim(dg.cd) = '2.5' then
                                   case
                                     when es.sigla_estado = 'SP' then
                                      case
                                        when et.sigla_estado = 'SP' then
                                         inf.vl_item_bruto
                                        else
                                         1
                                      end
                                     else
                                      0
                                   end
                                  else
                                   case
                                     when (nvl(pdg.perc_rateio_item, 0) = 0 
                                           and (c.tipooperacao_id in (select t.id from tipo_operacao t where t.cd = 3)
                                             or nf.dm_fin_nfe = 4 --NF-e normal NF-e complementar --#74544
                                             )
                                           ) then
                                            (nvl(inf.vl_item_bruto, 0) +
                                             nvl(inf.vl_frete, 0) +
                                             nvl(inf.vl_seguro, 0) + nvl(inf.vl_outro, 0) +
                                             (select nvl(sum(nvl(imp.vl_imp_trib, 0)), 0)
                                                from imp_itemnf imp, tipo_imposto ti
                                               where imp.itemnf_id = inf.id
                                                 and imp.tipoimp_id = ti.id
                                                 and ti.cd in (2, 3, 7))) -
                                                   nvl(inf.vl_desc, 0)
                                              when (c.tipooperacao_id in (select t.id from tipo_operacao t where t.cd = 3)
                                             or nf.dm_fin_nfe = 4 --NF-e normal NF-e complementar --#74544
                                             ) then
                                            ((nvl(inf.vl_item_bruto, 0) +
                                              nvl(inf.vl_frete, 0) + nvl(inf.vl_seguro, 0) +
                                              nvl(inf.vl_outro, 0) +
                                              (select nvl(sum(nvl(imp.vl_imp_trib, 0)), 0)
                                                 from imp_itemnf imp, tipo_imposto ti
                                                where imp.itemnf_id = inf.id
                                                  and imp.tipoimp_id = ti.id
                                                  and ti.cd in (2, 3, 7))) -
                                              nvl(inf.vl_desc, 0)) *
                                                    nvl(pdg.perc_rateio_item, 0) / 100
                                     else
                                      0
                                   end
                                 end) valor,
                                 es.id estado_id
                       from TMP_NOTA_FISCAL      nf,
                            mod_fiscal           mf,
                            TMP_ITEM_NOTA_FISCAL inf,
                            param_dipamgia       pdg,
                            dipam_gia            dg,
                            pessoa               p,
                            cidade               cid,
                            estado               es,
                            cidade_tipo_cod_arq  ct1,
                            tipo_cod_arq         tc1,
                            empresa              em,
                            pessoa               ps,
                            cidade               ci,
                            estado               et,
                            cidade_tipo_cod_arq  ct,
                            tipo_cod_arq         tc,
                            cfop                 c
                      where gn_origem_dado_pessoa = 0 -- Dados da pessoa da nota_fiscal cadastro (Padrão)
                        and nf.empresa_id       = gt_row_abertura_efd.empresa_id
                        and nf.dm_arm_nfe_terc  = 0
                        and nf.dm_st_proc       = 4 -- Autorizada
                        and ((nf.dm_ind_emit = 1 and trunc(nvl(nf.dt_sai_ent, nf.dt_emiss)) between gt_row_abertura_efd.dt_ini and gt_row_abertura_efd.dt_fim)
                              or
                             (nf.dm_ind_emit = 0 and nf.dm_ind_oper = 1 and trunc(nf.dt_emiss) between gt_row_abertura_efd.dt_ini and gt_row_abertura_efd.dt_fim)
                              or
                             (nf.dm_ind_emit = 0 and nf.dm_ind_oper = 0 and gn_dm_dt_escr_dfepoe = 0 and trunc(nf.dt_emiss) between gt_row_abertura_efd.dt_ini and gt_row_abertura_efd.dt_fim)
                              or
                             (nf.dm_ind_emit = 0 and nf.dm_ind_oper = 0 and gn_dm_dt_escr_dfepoe = 1 and trunc(nvl(nf.dt_sai_ent, nf.dt_emiss)) between gt_row_abertura_efd.dt_ini and gt_row_abertura_efd.dt_fim))
                        and mf.id               = nf.modfiscal_id
                        and mf.cod_mod          in ('01', '1B', '04', '55', '65')
                        and inf.notafiscal_id   = nf.id
                        and pdg.empresa_id      = nf.empresa_id
                        and pdg.cfop_id         = inf.cfop_id
                        and (pdg.item_id = inf.item_id or pdg.ncm_id in (select n.id from ncm n where n.cod_ncm = inf.cod_ncm))
                        and dg.id               = pdg.dipamgia_id
                        and p.id                = nf.pessoa_id
                        and cid.id              = p.cidade_id
                        and es.id               = cid.estado_id
                        and ct1.cidade_id       = cid.id
                        and tc1.id              = ct1.tipocodarq_id
                        and tc1.cd              = '1' -- GIA-SP
                        and em.id               = nf.empresa_id
                        and ps.id               = em.pessoa_id
                        and ci.id               = ps.cidade_id
                        and et.id               = ci.estado_id
                        and ct.cidade_id        = ci.id
                        and tc.id               = ct.tipocodarq_id
                        and tc.cd               = '1' -- GIA-SP
                        and inf.cfop_id         = c.id
                        -- Para não considerar os registros relacionados à tabela inf_valor_agreg.
                        and not exists (select 1
                                          from inf_valor_agreg iva, item i
                                         where iva.item_id    = i.id
                                           and i.id           = inf.item_id
                                           and iva.dm_st_proc = 1)
                      group by nf.empresa_id, nf.pessoa_id,
                               dg.cd,
                               ci.ibge_cidade,
                               decode(nf.dm_ind_emit, 0, cid.ibge_cidade, ci.ibge_cidade),
                               es.id
                     --
                     UNION  -- Origem_dado_pessoa - Documento Fiscal
                     --
                     select nf.empresa_id, nf.pessoa_id,
                            dg.cd coddip_empresa,
                            null item_id,
                            case
                              when trim(dg.cd) = '2.5' then
                                ci.ibge_cidade
                               else
                                decode(nf.dm_ind_emit, 0, cid.ibge_cidade, ci.ibge_cidade)
                            end municipio_empresa,                   
                            sum(case
                                  when trim(dg.cd) = '2.5' then
                                   case
                                     when es.sigla_estado = 'SP' then
                                      case
                                        when et.sigla_estado = 'SP' then
                                         inf.vl_item_bruto
                                        else
                                         1
                                      end
                                     else
                                      0
                                   end
                                  else
                                   case
                                     when (nvl(pdg.perc_rateio_item, 0) = 0 
                                           and (c.tipooperacao_id not in (select t.id from tipo_operacao t where t.cd = 3)
                                               and nf.dm_fin_nfe in (1,2) --NF-e normal NF-e complementar --#74544
                                               )
                                           ) then  
                                            (nvl(inf.vl_item_bruto, 0) +
                                             nvl(inf.vl_frete, 0) +
                                             nvl(inf.vl_seguro, 0) + nvl(inf.vl_outro, 0) +
                                             (select nvl(sum(nvl(imp.vl_imp_trib, 0)), 0)
                                                from imp_itemnf imp, tipo_imposto ti
                                               where imp.itemnf_id = inf.id
                                                 and imp.tipoimp_id = ti.id
                                                 and ti.cd in (2, 3, 7))) -
                                                   nvl(inf.vl_desc, 0)
                                     when (c.tipooperacao_id not in (select t.id from tipo_operacao t where t.cd = 3)
                                           and nf.dm_fin_nfe in (1,2) --NF-e normal NF-e complementar --#74544
                                           ) then 
                                            ((nvl(inf.vl_item_bruto, 0) +
                                              nvl(inf.vl_frete, 0) + nvl(inf.vl_seguro, 0) +
                                              nvl(inf.vl_outro, 0) +
                                              (select nvl(sum(nvl(imp.vl_imp_trib, 0)), 0)
                                                 from imp_itemnf imp, tipo_imposto ti
                                                where imp.itemnf_id = inf.id
                                                  and imp.tipoimp_id = ti.id
                                                  and ti.cd in (2, 3, 7))) -
                                              nvl(inf.vl_desc, 0)) *
                                                    nvl(pdg.perc_rateio_item, 0) / 100
                                     else
                                      0
                                   end
                                end)
                            -
                            sum(case
                                  when trim(dg.cd) = '2.5' then
                                   case
                                     when es.sigla_estado = 'SP' then
                                      case
                                        when et.sigla_estado = 'SP' then
                                         inf.vl_item_bruto
                                        else
                                         1
                                      end
                                     else
                                      0
                                   end
                                  else
                                   case
                                     when (nvl(pdg.perc_rateio_item, 0) = 0 
                                           and (c.tipooperacao_id in (select t.id from tipo_operacao t where t.cd = 3)
                                             or nf.dm_fin_nfe = 4 --NF-e normal NF-e complementar --#74544
                                             )
                                           ) then
                                            (nvl(inf.vl_item_bruto, 0) +
                                             nvl(inf.vl_frete, 0) +
                                             nvl(inf.vl_seguro, 0) + nvl(inf.vl_outro, 0) +
                                             (select nvl(sum(nvl(imp.vl_imp_trib, 0)), 0)
                                                from imp_itemnf imp, tipo_imposto ti
                                               where imp.itemnf_id = inf.id
                                                 and imp.tipoimp_id = ti.id
                                                 and ti.cd in (2, 3, 7))) -
                                                   nvl(inf.vl_desc, 0)
                                     when (c.tipooperacao_id in (select t.id from tipo_operacao t where t.cd = 3)
                                             or nf.dm_fin_nfe = 4 --NF-e normal NF-e complementar --#74544
                                             ) then
                                            ((nvl(inf.vl_item_bruto, 0) +
                                              nvl(inf.vl_frete, 0) + nvl(inf.vl_seguro, 0) +
                                              nvl(inf.vl_outro, 0) +
                                              (select nvl(sum(nvl(imp.vl_imp_trib, 0)), 0)
                                                 from imp_itemnf imp, tipo_imposto ti
                                                where imp.itemnf_id = inf.id
                                                  and imp.tipoimp_id = ti.id
                                                  and ti.cd in (2, 3, 7))) -
                                              nvl(inf.vl_desc, 0)) *
                                                    nvl(pdg.perc_rateio_item, 0) / 100
                                     else
                                      0
                                   end
                                      end) valor,
                            es.id estado_id                         
                       from TMP_NOTA_FISCAL      nf,
                            nota_fiscal_dest     nfd,
                            mod_fiscal           mf,
                            TMP_ITEM_NOTA_FISCAL inf,
                            param_dipamgia       pdg,
                            dipam_gia            dg,
                            cidade               cid,
                            estado               es,
                            cidade_tipo_cod_arq  ct1,
                            tipo_cod_arq         tc1,
                            empresa              em,
                            pessoa               ps,
                            cidade               ci,
                            estado               et,
                            cidade_tipo_cod_arq  ct,
                            tipo_cod_arq         tc,
                            cfop                 c
                      where gn_origem_dado_pessoa = 1 -- Dados da nota_fiscal_dest
                        and nf.empresa_id       = gt_row_abertura_efd.empresa_id
                        and nf.dm_arm_nfe_terc  = 0
                        and nf.dm_st_proc       = 4 -- Autorizada
                        and ((nf.dm_ind_emit = 1 and trunc(nvl(nf.dt_sai_ent, nf.dt_emiss)) between gt_row_abertura_efd.dt_ini and gt_row_abertura_efd.dt_fim)
                              or
                             (nf.dm_ind_emit = 0 and nf.dm_ind_oper = 1 and trunc(nf.dt_emiss) between gt_row_abertura_efd.dt_ini and gt_row_abertura_efd.dt_fim)
                              or
                             (nf.dm_ind_emit = 0 and nf.dm_ind_oper = 0 and gn_dm_dt_escr_dfepoe = 0 and trunc(nf.dt_emiss) between gt_row_abertura_efd.dt_ini and gt_row_abertura_efd.dt_fim)
                              or
                             (nf.dm_ind_emit = 0 and nf.dm_ind_oper = 0 and gn_dm_dt_escr_dfepoe = 1 and trunc(nvl(nf.dt_sai_ent, nf.dt_emiss)) between gt_row_abertura_efd.dt_ini and gt_row_abertura_efd.dt_fim))
                        and mf.id               = nf.modfiscal_id
                        and mf.cod_mod          in ('01', '1B', '04', '55', '65')
                        and inf.notafiscal_id   = nf.id
                        and pdg.empresa_id      = nf.empresa_id
                        and pdg.cfop_id         = inf.cfop_id
                        and (pdg.item_id = inf.item_id or pdg.ncm_id in (select n.id from ncm n where n.cod_ncm = inf.cod_ncm))
                        and dg.id               = pdg.dipamgia_id
                        and nfd.notafiscal_id   = nf.id
                        and cid.ibge_cidade     = nfd.cidade_ibge
                        and es.id               = cid.estado_id
                        and ct1.cidade_id       = cid.id
                        and tc1.id              = ct1.tipocodarq_id
                        and tc1.cd              = '1' -- GIA-SP
                        and em.id               = nf.empresa_id
                        and ps.id               = em.pessoa_id
                        and ci.id               = ps.cidade_id
                        and et.id               = ci.estado_id
                        and ct.cidade_id        = ci.id
                        and tc.id               = ct.tipocodarq_id
                        and tc.cd               = '1' -- GIA-SP
                        and inf.cfop_id         = c.id
                        -- Para não considerar os registros relacionados à tabela inf_valor_agreg.
                        and not exists (select 1
                                          from inf_valor_agreg iva, item i
                                         where iva.item_id    = i.id
                                           and i.id           = inf.item_id
                                           and iva.dm_st_proc = 1)
                      group by nf.empresa_id, nf.pessoa_id,
                               dg.cd,
                               ci.ibge_cidade,
                               decode(nf.dm_ind_emit, 0, cid.ibge_cidade, ci.ibge_cidade),
                               es.id
                    )
              where pk_csf_gia.fkg_dipam_22_pessoa_juridica( coddip_empresa, empresa_id, pessoa_id ) = 1
              group by coddip_empresa, municipio_empresa, estado_id, item_id
             --
             union
             -- Conhecimento de Transporte
             -- cursor c_cr_30_ct is   /*GIA SP*/
             select 'SPDIPAM23' cod_dipam,
                    null item_id,
                    c.ibge_cidade  mun,
                    sum(  case
                              when ct.dm_ind_emit = 0 and
                                  (
                                     ( cfop.cd between 5351 and 5399 ) or
                                     ( cfop.cd between 6351 and 6399 ) or
                                     ( cfop.cd between 7351 and 7399 )
                                  )
                              then ctv.vl_prest_serv else 0
                           end
                        )/*vlr_part_1*/ -
                --
                     sum(  case
                              when ct.dm_ind_emit = 1 and
                                   cfop.cd in (1351, 1932, 2351, 3351)
                              then ctv.vl_prest_serv else 0
                           end
                        )/*vlr_part_2*/ valor,
                    null estado_id
                --
                from TMP_CONHEC_TRANSP         ct,
                     mod_fiscal                mf,
                     TMP_CONHEC_TRANSP_VLPREST ctv,
                     cidade                    c,
                     tipo_cod_arq              tc,
                     cidade_tipo_cod_arq       ctc,
                     ct_reg_anal               ctr,
                     cfop                      cfop
             where ct.modfiscal_id         = mf.id
               and ctv.conhectransp_id     = ct.id
               --and c.ibge_cidade           = ct.ibge_cidade_ini
               and ((gn_origem_dado_pessoa = 0 and c.ibge_cidade = ct.ibge_cidade_ini)
                     or
                    (gn_origem_dado_pessoa = 1 and c.ibge_cidade = ct.ibge_cidade_fim))
               and tc.cd                   = '1' -- GIA SP (UK)
               and ctc.cidade_id           = c.id
               and ctc.tipocodarq_id       = tc.id
               and ctr.conhectransp_id     = ct.id
               and cfop.id                 = ctr.cfop_id
               --
               and mf.cod_mod              in ('08', '09', '10', '11', '26', '57', '63', '67')
               and ct.dm_arm_cte_terc      = 0
               --
               and ct.dm_st_proc           = 4 --#55532
               --
               and ct.empresa_id           = gt_row_abertura_efd.empresa_id
               and ((ct.dm_ind_emit = 1 and trunc(nvl(ct.dt_sai_ent,ct.dt_hr_emissao)) between gt_row_abertura_efd.dt_ini and gt_row_abertura_efd.dt_fim )
                     or
                    (ct.dm_ind_emit = 0 and ct.dm_ind_oper = 1 and trunc(ct.dt_hr_emissao) between gt_row_abertura_efd.dt_ini and gt_row_abertura_efd.dt_fim )
                     or
                    (ct.dm_ind_emit = 0 and ct.dm_ind_oper = 0 and gn_dm_dt_escr_dfepoe = 0 and trunc(ct.dt_hr_emissao) between gt_row_abertura_efd.dt_ini and gt_row_abertura_efd.dt_fim )
                     or
                    (ct.dm_ind_emit = 0 and ct.dm_ind_oper = 0 and gn_dm_dt_escr_dfepoe = 1 and trunc(nvl(ct.dt_sai_ent, ct.dt_hr_emissao)) between gt_row_abertura_efd.dt_ini and gt_row_abertura_efd.dt_fim ) )
               --
               and (  -- parte 1
                      ( cfop.cd between 5351 and 5399 ) or
                      ( cfop.cd between 6351 and 6399 ) or
                      ( cfop.cd between 7351 and 7399 ) or
                      -- parte 2
                      ( cfop.cd in (1351, 1932, 2351, 3351) )
                   )
             group by c.ibge_cidade
          )
       --where nvl(valor,0) > 0  -- Retirado pois valores zerados ou negativos são tratados po municipio na gravação. #76194
       order by mun;
   --
begin
   --
   vn_fase := 1;
   --
   for rec_1400 in c_1400 loop
      exit when c_1400%notfound or (c_1400%notfound) is null;
      --
      vn_fase := 2;
      --
      vv_cod_item     := null;
      vv_cod_item_ipm := null;
      --
      vv_cod_item_ipm :=  rec_1400.cod_dipam;
      --
      if vv_cod_item_ipm is null then -- não encontrou código IPM relacionado ao código do Item/Produto
         vv_cod_item := pk_csf.fkg_item_cod( en_item_id => rec_1400.item_id );
      end if;
      --
      vn_fase := 3;
      --
      i := 0;
      --
      begin
         --
         loop
            --
            vn_fase := 4;
            --
            i := nvl(i,0) + 1;
            --
            if vt_tab_reg_1400(i).cod_item_ipm = nvl(vv_cod_item_ipm,vv_cod_item) and
               vt_tab_reg_1400(i).mun = rec_1400.mun then
               --
               vn_fase := 5;
               --
               vn_valor_mun := 0;
               vn_valor_mun := rec_1400.valor;
               --
               vn_fase := 5.1;
               -- 			    
               if vv_cod_item_ipm = 'SPDIPAM22' then      -- NF
                  --			   
                  if nvl(vn_valor_mun, 0) <= 0 then
                     vn_valor_mun := '0,01';
                  end if; 
                  --				  
               elsif vv_cod_item_ipm = 'SPDIPAM23' then   -- CT
                  --			   
                  if nvl(vn_valor_mun,0) <= 0 then
                     vn_valor_mun := 1;
                  end if;
                  --				  
               end if;			   
               --			   
               vt_tab_reg_1400(i).valor := nvl(vt_tab_reg_1400(i).valor,0) + nvl(vn_valor_mun,0);
               exit;
               --
            end if;
            --
         end loop;
         --
      exception
         when no_data_found then
            vn_fase := 6;
            vt_tab_reg_1400(i).reg          := '1400';
            vt_tab_reg_1400(i).cod_item_ipm := nvl(vv_cod_item_ipm,vv_cod_item);
            vt_tab_reg_1400(i).mun          := rec_1400.mun;
            --
            vn_fase := 6.1;
            --			
            vn_valor_mun := 0;
            vn_valor_mun := rec_1400.valor;
            --
            vn_fase := 6.2;
            -- 			    
            if vv_cod_item_ipm = 'SPDIPAM22' then      -- NF
               --			   
               if nvl(vn_valor_mun, 0) <= 0 then
                  vn_valor_mun := '0,01';
               end if; 
               --				  
            elsif vv_cod_item_ipm = 'SPDIPAM23' then   -- CT
               --			   
               if nvl(vn_valor_mun,0) <= 0 then
                  vn_valor_mun := 1;
               end if;
               --				  
            end if;			   
            -- 			
            vt_tab_reg_1400(i).valor        := vn_valor_mun;
         when others then
            null;
      end;
      --
      vn_fase := 7;
      -- Monta arquivo auxiliar produto
      if vv_cod_item is not null and
         nvl(rec_1400.item_id,0) > 0 then
         --
         vn_fase := 8;
         --
         pkb_monta_reg_0200( en_item_id => rec_1400.item_id);
         --
      end if;
      --
   end loop;
   --
exception
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_monta_reg_1400 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end pkb_monta_reg_1400;

-------------------------------------------------------------------------------------------------------
-- Monta o REGISTRO 1390: CONTROLE DE PRODUÇÃO DE USINA
procedure pkb_monta_reg_1390 is 
  --
  vn_fase            number := 0;
  i                  pls_integer;
  j                  pls_integer;
  vv_dm_cod_prod_old prod_dia_usina.dm_cod_prod%type := '04';
  --
  cursor c_1390 is
    select pdu.dm_cod_prod,
           pdu.dt_prod,
           pdu.qtd_moid,
           pdu.estq_ini,
           pdu.qtd_produz,
           pdu.ent_anid_hid,
           pdu.outr_entr,
           pdu.perda,
           pdu.cons,
           pdu.sai_ani_hid,
           pdu.saidas,
           pdu.estq_fin,
           pdu.estq_ini_mel,
           pdu.prod_dia_mel,
           pdu.util_mel,
           pdu.prod_alc_mel,
           pdu.obs,
           i.cod_item,  -- pdu.item_id,    --#67592
           pdu.dm_tp_residuo,
           pdu.qtd_residuo
      from prod_dia_usina pdu
         , item i                         --#67592
     where i.id = item_id                 --#67592
       and i.empresa_id = pdu.empresa_id  --#67592
       and pdu.empresa_id = gt_row_abertura_efd.empresa_id
       and trunc(pdu.dt_prod) between gt_row_abertura_efd.dt_ini and gt_row_abertura_efd.dt_fim
       and pdu.dm_st_proc = 1 -- Validado
     order by pdu.dm_cod_prod, 
              pdu.dt_prod;
  --
begin
  --
  vn_fase := 1;
  --
  i := 0;
  --
  for rec_1390 in c_1390 loop
    exit when c_1390%notfound or(c_1390%notfound) is null;
    --
    vn_fase := 2;
    --
    -- Verifica se cria o registro 1390
    if vv_dm_cod_prod_old <> rec_1390.dm_cod_prod then
      --
      vv_dm_cod_prod_old := rec_1390.dm_cod_prod;
      --
      i := nvl(i, 0) + 1;
      --
      vt_tab_reg_1390(i).reg := '1390';
      vt_tab_reg_1390(i).cod_prod := rec_1390.dm_cod_prod;
      --
      j := 0;
      --
    end if;
    --
    vn_fase := 3;
    --
    j := nvl(j, 0) + 1;
    --
    -- Monta o registro 1391
    vt_bi_tab_reg_1391(i)(j).reg           := '1391';
    vt_bi_tab_reg_1391(i)(j).dt_registro   := to_char(rec_1390.dt_prod, 'ddmmrrrr');
    vt_bi_tab_reg_1391(i)(j).qtd_moid      := nvl(rec_1390.qtd_moid, 0);
    vt_bi_tab_reg_1391(i)(j).estq_ini      := nvl(rec_1390.estq_ini, 0);
    vt_bi_tab_reg_1391(i)(j).qtd_produz    := nvl(rec_1390.qtd_produz, 0);
    vt_bi_tab_reg_1391(i)(j).ent_anid_hid  := nvl(rec_1390.ent_anid_hid, 0);
    vt_bi_tab_reg_1391(i)(j).outr_entr     := nvl(rec_1390.outr_entr, 0);
    vt_bi_tab_reg_1391(i)(j).perda         := nvl(rec_1390.perda, 0);
    vt_bi_tab_reg_1391(i)(j).cons          := nvl(rec_1390.cons, 0);
    vt_bi_tab_reg_1391(i)(j).sai_ani_hid   := nvl(rec_1390.sai_ani_hid, 0);
    vt_bi_tab_reg_1391(i)(j).saidas        := nvl(rec_1390.saidas, 0);
    vt_bi_tab_reg_1391(i)(j).estq_fin      := nvl(rec_1390.estq_fin, 0);
    vt_bi_tab_reg_1391(i)(j).estq_ini_mel  := nvl(rec_1390.estq_ini_mel, 0);
    vt_bi_tab_reg_1391(i)(j).prod_dia_mel  := nvl(rec_1390.prod_dia_mel, 0);
    vt_bi_tab_reg_1391(i)(j).util_mel      := nvl(rec_1390.util_mel, 0);
    vt_bi_tab_reg_1391(i)(j).prod_alc_mel  := nvl(rec_1390.prod_alc_mel, 0);
    vt_bi_tab_reg_1391(i)(j).obs           := trim(rec_1390.obs);
    --vt_bi_tab_reg_1391(i)(j).item_id       := trim(rec_1390.item_id); -- #67592
    vt_bi_tab_reg_1391(i)(j).cod_item      := trim(rec_1390.cod_item);  -- #67592
    vt_bi_tab_reg_1391(i)(j).dm_tp_residuo := trim(rec_1390.dm_tp_residuo);
    vt_bi_tab_reg_1391(i)(j).qtd_residuo   := trim(nvl(rec_1390.qtd_residuo, 0));
    --
  end loop;
  --
exception
  when others then
    --
    gv_mensagem_log := 'Erro na pkb_monta_reg_1390 fase(' || vn_fase || '): ' || sqlerrm;
    --
    declare
      vn_loggenerico_id log_generico.id%type;
    begin
      --
      pk_log_generico.pkb_log_generico(sn_loggenerico_id => vn_loggenerico_id,
                                       ev_mensagem       => gv_mensagem_log,
                                       ev_resumo         => gv_mensagem_log,
                                       en_tipo_log       => erro_de_sistema,
                                       en_referencia_id  => gt_row_abertura_efd.id,
                                       ev_obj_referencia => 'ABERTURA_EFD');
      --
    exception
      when others then
        null;
    end;
    --
    raise_application_error(-20101, gv_mensagem_log);
    --
end pkb_monta_reg_1390;

-------------------------------------------------------------------------------------------------------
-- Monta o REGISTRO 1350: BOMBAS
procedure pkb_monta_reg_1350
is
   --
   vn_fase  number := 0;
   i        pls_integer;
   j        pls_integer;
   --
   cursor c_1350 is
   select bc.id            bombacomb_id
        , bc.serie
        , bc.fabricante
        , bc.modelo
        , bc.dm_tipo_medicao tipo_medicao
     from bomba_comb  bc
    where bc.empresa_id   = gt_row_abertura_efd.empresa_id
      and bc.dm_situacao  = 1; -- Ativo
   --
   cursor c_1360 ( en_bombacomb_id bomba_comb.id%type ) is
   select l.num_lacre
        , l.dt_aplicacao
     from bomba_comb_lacre l
    where l.bombacomb_id = en_bombacomb_id;
   --
   cursor c_1370 ( en_bombacomb_id bomba_comb.id%type ) is
   select b.num_bico
        , b.num_tanque
        , b.item_id
     from bomba_comb_bico  b
    where b.bombacomb_id   = en_bombacomb_id;
   --
begin
   --
   vn_fase := 1;
   --
   i := 0;
   for rec_1350 in c_1350 loop
      exit when c_1350%notfound or (c_1350%notfound) is null;
      --
      vn_fase := 2;
      --
      i := nvl(i,0) + 1;
      --
      vt_tab_reg_1350(i).reg           := '1350';
      vt_tab_reg_1350(i).serie         := rec_1350.serie;
      vt_tab_reg_1350(i).fabricante    := rec_1350.fabricante;
      vt_tab_reg_1350(i).modelo        := rec_1350.modelo;
      vt_tab_reg_1350(i).tipo_medicao  := rec_1350.tipo_medicao;
      --
      vn_fase := 3;
      -- Monta o REGISTRO 1360: LACRES DA BOMBA
      j := 0;
      for rec_1360 in c_1360( rec_1350.bombacomb_id ) loop
         exit when c_1360%notfound or (c_1360%notfound) is null;
         --
         vn_fase := 4;
         --
         j := nvl(j,0) + 1;
         --
         vt_bi_tab_reg_1360(i)(j).reg           := '1360';
         vt_bi_tab_reg_1360(i)(j).num_lacre     := rec_1360.num_lacre;
         vt_bi_tab_reg_1360(i)(j).dt_aplicacao  := rec_1360.dt_aplicacao;
         --
      end loop;
      --
      vn_fase := 5;
      -- Monta o REGISTRO 1370: BICOS DA BOMBA
      j := 0;
      for rec_1370 in c_1370( rec_1350.bombacomb_id ) loop
         exit when c_1370%notfound or (c_1370%notfound) is null;
         --
         vn_fase := 6;
         --
         j := nvl(j,0) + 1;
         --
         vt_bi_tab_reg_1370(i)(j).reg          := '1370';
         vt_bi_tab_reg_1370(i)(j).num_bico     := rec_1370.num_bico;
         vt_bi_tab_reg_1370(i)(j).cod_item     := pk_csf.fkg_Item_cod (rec_1370.item_id);
         vt_bi_tab_reg_1370(i)(j).num_tanque   := rec_1370.num_tanque;
         --
         vn_fase := 6.1;
         --
         --Monta arquivo auxiliar produto
         if nvl(rec_1370.item_id, 0) > 0 then
            --
            vn_fase := 6.2;
            --
            pkb_monta_reg_0200( en_item_id => rec_1370.item_id);
            --
         end if;
         --
      end loop;
      --
   end loop; -- fim c_1350
   --
exception
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_monta_reg_1350 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end pkb_monta_reg_1350;

-------------------------------------------------------------------------------------------------------

-- Monta o REGISTRO 1300: MOVIMENTAÇÃO DIÁRIA DE COMBUSTÍVEIS
procedure pkb_monta_reg_1300
is
   --
   vn_fase  number := 0;
   i        pls_integer;
   j        pls_integer;
   k        pls_integer;
   --
   cursor c_1300 is
   select mdc.id           movdiariacomb_id
        , mdc.dt_fech
        , mdc.estq_abert
        , mdc.vol_entr
        , mdc.vol_disp
        , mdc.vol_saidas
        , mdc.estq_escr
        , mdc.val_aj_perda
        , mdc.val_aj_ganho
        , mdc.fech_fisico
        , mdc.item_id
     from mov_diaria_comb  mdc
    where mdc.empresa_id   = gt_row_abertura_efd.empresa_id
      and mdc.dt_fech between gt_row_abertura_efd.dt_ini and gt_row_abertura_efd.dt_fim
      and mdc.dm_st_proc   = 1; -- Validada
   --
   cursor c_1310 ( en_movdiariacomb_id mov_diaria_comb.id%type ) is
   select t.id             movdiariacombtanque_id
        , t.num_tanque
        , t.estq_abert
        , t.vol_entr
        , t.vol_disp
        , t.vol_saidas
        , t.estq_escr
        , t.val_aj_perda
        , t.val_aj_ganho
        , t.fech_fisico
     from mov_diaria_comb_tanque t
    where t.movdiariacomb_id     = en_movdiariacomb_id;
   --
   cursor c_1320 ( en_movdiariacombtanque_id mov_diaria_comb_tanque.id%type ) is
   select vv.num_bico
        , vv.nr_interv
        , vv.mot_interv
        , vv.nom_interv
        , vv.cnpj_interv
        , vv.cpf_interv
        , vv.val_fecha
        , vv.val_abert
        , vv.vol_aferi
        , vv.vol_vendas
     from mov_dia_comb_tan_vol_venda vv
    where vv.movdiariacombtanque_id  = en_movdiariacombtanque_id;
   --
begin
   --
   vn_fase := 1;
   --
   i := 0;
   for rec_1300 in c_1300 loop
      exit when c_1300%notfound or (c_1300%notfound) is null;
      --
      vn_fase := 2;
      --
      i := nvl(i,0) + 1;
      --
      vn_fase := 3;
      --
      vt_tab_reg_1300(i).reg           := '1300';
      vt_tab_reg_1300(i).cod_item      := pk_csf.fkg_Item_cod (rec_1300.item_id);
      vt_tab_reg_1300(i).dt_fech       := rec_1300.dt_fech;
      vt_tab_reg_1300(i).estq_abert    := rec_1300.estq_abert;
      vt_tab_reg_1300(i).vol_entr      := rec_1300.vol_entr;
      vt_tab_reg_1300(i).vol_disp      := rec_1300.vol_disp;
      vt_tab_reg_1300(i).vol_saidas    := rec_1300.vol_saidas;
      vt_tab_reg_1300(i).estq_escr     := rec_1300.estq_escr;
      vt_tab_reg_1300(i).val_aj_perda  := rec_1300.val_aj_perda;
      vt_tab_reg_1300(i).val_aj_ganho  := rec_1300.val_aj_ganho;
      vt_tab_reg_1300(i).fech_fisico   := rec_1300.fech_fisico;
      --
      vn_fase := 4;
      --
      --Monta arquivo auxiliar produto
      if nvl(rec_1300.item_id, 0) > 0 then
         --
         vn_fase := 5;
         --
         pkb_monta_reg_0200( en_item_id => rec_1300.item_id);
         --
      end if;
      --
      vn_fase := 6;
      -- monta o REGISTRO 1310: MOVIMENTAÇÃO DIÁRIA DE COMBUSTÍVEIS POR TANQUE
      j := 0;
      for rec_1310 in c_1310( rec_1300.movdiariacomb_id ) loop
         exit when c_1310%notfound or (c_1310%notfound) is null;
         --
         vn_fase := 7;
         --
         j := nvl(j,0) + 1;
         --
         vt_bi_tab_reg_1310(i)(j).reg           := '1310';
         vt_bi_tab_reg_1310(i)(j).num_tanque    := rec_1310.num_tanque;
         vt_bi_tab_reg_1310(i)(j).estq_abert    := rec_1310.estq_abert;
         vt_bi_tab_reg_1310(i)(j).vol_entr      := rec_1310.vol_entr;
         vt_bi_tab_reg_1310(i)(j).vol_disp      := rec_1310.vol_disp;
         vt_bi_tab_reg_1310(i)(j).vol_saidas    := rec_1310.vol_saidas;
         vt_bi_tab_reg_1310(i)(j).estq_escr     := rec_1310.estq_escr;
         vt_bi_tab_reg_1310(i)(j).val_aj_perda  := rec_1310.val_aj_perda;
         vt_bi_tab_reg_1310(i)(j).val_aj_ganho  := rec_1310.val_aj_ganho;
         vt_bi_tab_reg_1310(i)(j).fech_fisico   := rec_1310.fech_fisico;
         --
         vn_fase := 8;
         -- Monta o REGISTRO 1320: VOLUME DE VENDAS
         k := 0;
         for rec_1320 in c_1320( rec_1310.movdiariacombtanque_id ) loop
            exit when c_1320%notfound or (c_1320%notfound) is null;
            --
            vn_fase := 9;
            --
            k := nvl(k,0) + 1;
            --
            vt_tri_tab_reg_1320(i)(j)(k).reg          := '1320';
            vt_tri_tab_reg_1320(i)(j)(k).num_bico     := rec_1320.num_bico;
            vt_tri_tab_reg_1320(i)(j)(k).nr_interv    := rec_1320.nr_interv;
            vt_tri_tab_reg_1320(i)(j)(k).mot_interv   := rec_1320.mot_interv;
            vt_tri_tab_reg_1320(i)(j)(k).nom_interv   := rec_1320.nom_interv;
            vt_tri_tab_reg_1320(i)(j)(k).cnpj_interv  := rec_1320.cnpj_interv;
            vt_tri_tab_reg_1320(i)(j)(k).cpf_interv   := rec_1320.cpf_interv;
            vt_tri_tab_reg_1320(i)(j)(k).val_fecha    := rec_1320.val_fecha;
            vt_tri_tab_reg_1320(i)(j)(k).val_abert    := rec_1320.val_abert;
            vt_tri_tab_reg_1320(i)(j)(k).vol_aferi    := rec_1320.vol_aferi;
            vt_tri_tab_reg_1320(i)(j)(k).vol_vendas   := rec_1320.vol_vendas;
            --
         end loop;
         --
      end loop; -- fim c_1310
      --
   end loop; -- fim c_1300
   --
exception
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_monta_reg_1300 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end pkb_monta_reg_1300;

-------------------------------------------------------------------------------------------------------

-- Monta o REGISTRO 1200: CONTROLE DE CRÉDITOS FISCAIS - ICMS
procedure pkb_monta_reg_1200
is
   --
   vn_fase  number := 0;
   i        pls_integer;
   j        pls_integer;
   --
   cursor c_1200 is
   select ctrl.id                 contrcredfiscalicms_id
        , cod.cod_aj_apur         cod_aj_apur
        , ctrl.saldo_cred         sld_cred
        , ctrl.cred_apr           cred_apr
        , ctrl.cred_receb         cred_receb
        , ctrl.cred_util          cred_util
        , ctrl.saldo_cred_fim     sld_cred_fim
     from contr_cred_fiscal_icms  ctrl
        , cod_aj_saldo_apur_icms  cod
    where ctrl.empresa_id = gt_row_abertura_efd.empresa_id
      and ctrl.ano        = to_number(to_char(gt_row_abertura_efd.dt_ini, 'RRRR'))
      and ctrl.mes        = to_number(to_char(gt_row_abertura_efd.dt_ini, 'MM'))
      and cod.id          = ctrl.codajsaldoapuricms_id;
   --
   cursor c_1210 ( en_contrcredfiscalicms_id contr_cred_fiscal_icms.id%type ) is
   select tu.cd                   tipo_util
        , ucfi.nr_doc             nr_doc
        , ucfi.vl_cred_util       vl_cred_util
        , ucfi.chv_doce
     from util_cred_fiscal_icms   ucfi
        , tipo_util               tu
    where ucfi.contrcredfiscalicms_id = en_contrcredfiscalicms_id
      and tu.id                       = ucfi.tipoutil_id;
   --
begin
   --
   vn_fase := 1;
   --
   i := 0;
   for rec_1200 in c_1200 loop
      exit when c_1200%notfound or (c_1200%notfound) is null;
      --
      vn_fase := 2;
      --
      i := nvl(i,0) + 1;
      --
      vt_tab_reg_1200(i).reg           := '1200';
      vt_tab_reg_1200(i).cod_aj_apur   := rec_1200.cod_aj_apur;
      vt_tab_reg_1200(i).sld_cred      := rec_1200.sld_cred;
      vt_tab_reg_1200(i).cred_apr      := rec_1200.cred_apr;
      vt_tab_reg_1200(i).cred_receb    := rec_1200.cred_receb;
      vt_tab_reg_1200(i).cred_util     := rec_1200.cred_util;
      vt_tab_reg_1200(i).sld_cred_fim  := rec_1200.sld_cred_fim;
      --
      vn_fase := 3;
      -- monta o REGISTRO 1210: UTILIZAÇÃO DE CRÉDITOS FISCAIS - ICMS
      j := 0;
      for rec_1210 in c_1210( rec_1200.contrcredfiscalicms_id ) loop
         exit when c_1210%notfound or (c_1210%notfound) is null;
         --
         vn_fase := 4;
         --
         j := nvl(j,0) + 1;
         --
         vt_bi_tab_reg_1210(i)(j).reg           := '1210';
         vt_bi_tab_reg_1210(i)(j).tipo_util     := rec_1210.tipo_util;
         vt_bi_tab_reg_1210(i)(j).nr_doc        := rec_1210.nr_doc;
         vt_bi_tab_reg_1210(i)(j).vl_cred_util  := rec_1210.vl_cred_util;
         --
         vt_bi_tab_reg_1210(i)(j).chv_doce  := rec_1210.chv_doce;
         --
      end loop;
      --
   end loop;
   --
exception
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_monta_reg_1200 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end pkb_monta_reg_1200;

-------------------------------------------------------------------------------------------------------

-- Monta o REGISTRO 1100: REGISTRO DE INFORMAÇÕES SOBRE EXPORTAÇÃO
procedure pkb_monta_reg_1100
is
   --
   vn_fase  number := 0;
   i        pls_integer;
   j        pls_integer;
   k        pls_integer;
   --
   cursor c_1100 is
   select ie.id               inforexportacao_id
        , ie.dm_ind_doc       ind_doc
        , ie.nro_de           nro_de
        , ie.dt_de            dt_de
        , ie.dm_nat_exp       nat_exp
        , ie.nro_re           nro_re
        , ie.dt_re            dt_re
        , ie.chc_emb          chc_emb
        , ie.dt_chc           dt_chc
        , ie.dt_avb           dt_avb
        , ie.dm_tp_chc        tp_chc
        , ptca.cd             pais
     from infor_exportacao ie
        , pais_tipo_cod_arq ptca
        , tipo_cod_arq      tca
    where ie.empresa_id = gt_row_abertura_efd.empresa_id
      and trunc(ie.dt_avb) between gt_row_abertura_efd.dt_ini and gt_row_abertura_efd.dt_fim
      --and ((trunc(ie.dt_de) between gt_row_abertura_efd.dt_ini and gt_row_abertura_efd.dt_fim)
      --      or
      --     (trunc(ie.dt_re) between gt_row_abertura_efd.dt_ini and gt_row_abertura_efd.dt_fim)
      --      or
      --     (trunc(ie.dt_chc) between gt_row_abertura_efd.dt_ini and gt_row_abertura_efd.dt_fim)
      --      or
      --     (trunc(ie.dt_avb) between gt_row_abertura_efd.dt_ini and gt_row_abertura_efd.dt_fim))
      and ie.dm_st_proc = 1 -- Validada
      and ptca.pais_id = ie.pais_id
      and ptca.tipocodarq_id = tca.id
      and tca.cd = '18';
   --
   cursor c_1105 ( en_inforexportacao_id infor_exportacao.id%type ) is
   select inf.id                          inforexportnotafiscal_id
        , mf.cod_mod                      cod_mod
        , nf.serie                        serie
        , nf.nro_nf                       num_doc
        , nf.nro_chave_nfe                chv_nfe
        , nf.dt_emiss                     dt_doc
        , it.item_id                      item_id
     from infor_export_nota_fiscal inf
        , NOTA_FISCAL              nf
        , mod_fiscal               mf
        , ITEM_NOTA_FISCAL         it
    where inf.inforexportacao_id = en_inforexportacao_id
      and nf.id                  = inf.notafiscal_id
      and mf.id                  = nf.modfiscal_id
      and it.id                  = inf.itemnf_id;
   --
   cursor c_1110 ( en_inforexportnotafiscal_id infor_export_nota_fiscal.id%type ) is
   select mf.cod_mod               cod_mod
        , nf.id                    notafiscal_id   
        , nf.serie                 ser
        , nf.nro_nf                num_doc
        , nf.dt_emiss              dt_doc
        , nf.nro_chave_nfe         chv_nfe
        , oper.nr_memo             nr_memo
        , oper.qtd                 qtd
        , nf.pessoa_id             pessoa_id
        , oper.unidade_id
     from oper_export_ind_nf       oper
        , NOTA_FISCAL              nf
        , mod_fiscal               mf
    where oper.inforexportnotafiscal_id = en_inforexportnotafiscal_id
      and nf.id                         = oper.notafiscal_id
      and mf.id                         = nf.modfiscal_id;
   --
begin
   --
   vn_fase := 1;
   --
   i := 0;
   for rec_1100 in c_1100 loop
      --
      vn_fase := 2;
      --
      i := nvl(i,0) + 1;
      --
      vn_fase := 3;
      --
      vt_tab_reg_1100(i).reg      := '1100';
      vt_tab_reg_1100(i).ind_doc  := rec_1100.ind_doc;
      vt_tab_reg_1100(i).nro_de   := rec_1100.nro_de;
      vt_tab_reg_1100(i).dt_de    := rec_1100.dt_de;
      vt_tab_reg_1100(i).nat_exp  := rec_1100.nat_exp;
      vt_tab_reg_1100(i).nro_re   := rec_1100.nro_re;
      vt_tab_reg_1100(i).dt_re    := rec_1100.dt_re;
      vt_tab_reg_1100(i).chc_emb  := rec_1100.chc_emb;
      vt_tab_reg_1100(i).dt_chc   := rec_1100.dt_chc;
      vt_tab_reg_1100(i).dt_avb   := rec_1100.dt_avb;
      vt_tab_reg_1100(i).tp_chc   := rec_1100.tp_chc;
      vt_tab_reg_1100(i).pais     := to_number(rec_1100.pais);
      --
      vn_fase := 4;
      -- Monta o REGISTRO 1105: DOCUMENTOS FISCAIS DE EXPORTAÇÃO
      j := 0;
      for rec_1105 in c_1105( rec_1100.inforexportacao_id ) loop
         --
         vn_fase := 5;
         --
         j := nvl(j,0) + 1;
         --
         vt_bi_tab_reg_1105(i)(j).reg       := '1105';
         vt_bi_tab_reg_1105(i)(j).cod_mod   := rec_1105.cod_mod;
         vt_bi_tab_reg_1105(i)(j).serie     := rec_1105.serie;
         vt_bi_tab_reg_1105(i)(j).num_doc   := rec_1105.num_doc;
         vt_bi_tab_reg_1105(i)(j).chv_nfe   := rec_1105.chv_nfe;
         vt_bi_tab_reg_1105(i)(j).dt_doc    := rec_1105.dt_doc;
         vt_bi_tab_reg_1105(i)(j).cod_item  := pk_csf.fkg_Item_cod(rec_1105.item_id);
         --
         vn_fase := 6;
         --
         --Monta arquivo auxiliar produto
         if nvl(rec_1105.item_id, 0) > 0 then
            --
            vn_fase := 7;
            --
            pkb_monta_reg_0200( en_item_id => rec_1105.item_id);
            --
         end if;
         --
         vn_fase := 8;
         -- NOVO TÍTULO: REGISTRO 1110: OPERAÇÕES DE EXPORTAÇÃO INDIRETA - MERCADORIAS DE TERCEIROS
         -- REGISTRO 1110: OPERAÇÕES DE EXPORTAÇÃO INDIRETA DE PRODUTOS NÃO INDUSTRIALIZADOS PELO ESTABELECIMENTO EMITENTE
         k := 0;
         for rec_1110 in c_1110( rec_1105.inforexportnotafiscal_id ) loop
            --
            vn_fase := 9;
            --
            k := nvl(k,0) + 1;
            --
            vt_tri_tab_reg_1110(i)(j)(k).reg       := '1110';
            --vt_tri_tab_reg_1110(i)(j)(k).cod_part  := pk_csf.fkg_pessoa_cod_part (rec_1110.pessoa_id);
            vt_tri_tab_reg_1110(i)(j)(k).cod_part :=  pk_csf_api_efd.fkb_ret_cnpjcpj_ibge_cod_part ( en_pessoa_id          => rec_1110.pessoa_id
                                                                                                   , en_tipo_retorna       => 1  -- 0-Pessoa_id / 1-Cod_Part    
                                                                                                   , en_origem_dado_pessoa => gn_origem_dado_pessoa                                                   
                                                                                                   , en_notafiscal_id      => rec_1110.notafiscal_id );        
            vt_tri_tab_reg_1110(i)(j)(k).cod_mod   := rec_1110.cod_mod;
            vt_tri_tab_reg_1110(i)(j)(k).ser       := rec_1110.ser;
            vt_tri_tab_reg_1110(i)(j)(k).num_doc   := rec_1110.num_doc;
            vt_tri_tab_reg_1110(i)(j)(k).dt_doc    := rec_1110.dt_doc;
            vt_tri_tab_reg_1110(i)(j)(k).chv_nfe   := rec_1110.chv_nfe;
            vt_tri_tab_reg_1110(i)(j)(k).nr_memo   := rec_1110.nr_memo;
            vt_tri_tab_reg_1110(i)(j)(k).qtd       := rec_1110.qtd;
            vt_tri_tab_reg_1110(i)(j)(k).unid      := pk_csf.fkg_Unidade_sigla (rec_1110.unidade_id);
            --
            vn_fase := 10;
            --
            --Monta arquivo auxiliar
            if nvl(rec_1110.pessoa_id, 0) > 0 then
               --
               vn_fase := 11;
               --
               pkb_monta_reg_0150( en_pessoa_id     => rec_1110.pessoa_id
                                 , en_notafiscal_id => rec_1110.notafiscal_id );
               --
            end if;
            --
            vn_fase := 12;
            --
            -- Monta arquivo auxiliar para unidade
            if nvl(rec_1110.unidade_id, 0) > 0 then
               --
               vn_fase := 13;
               --
               pkb_monta_reg_0190( en_unidade_id => rec_1110.unidade_id);
               --
            end if;
            --
            vn_fase := 14;
            --
            --Monta arquivo auxiliar para conversao de unidade
            if nvl(rec_1105.item_id, 0) > 0 and nvl(rec_1110.unidade_id, 0) > 0 then
               --
               vn_fase := 15;
               --
               pkb_monta_reg_0220 ( en_item_id => rec_1105.item_id
                                  , en_unidade_id => rec_1110.unidade_id );
               --
            end if;
            --
         end loop;
         --
      end loop; -- fim c_1105
      --
   end loop;  -- fim c_1100
   --
exception
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_monta_reg_1100 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end pkb_monta_reg_1100;

-------------------------------------------------------------------------------------------------------

-- Monta o REGISTRO 1010: OBRIGATORIEDADE DE REGISTROS DO BLOCO 1
procedure pkb_monta_reg_1010
is
   --
   vn_fase  number := 0;
   i        pls_integer := 1;
   --
   vn_qtde_ind_exp    number;
   vn_qtde_ind_ccrf   number;
   vn_qtde_ind_comb   number;
   vn_qtde_ind_usina  number;
   vn_qtde_ind_va     number;
   vn_qtde_ind_ee     number;
   vn_qtde_ind_cart   number;
   vn_qtde_ind_form   number;
   vn_qtde_ind_aer    number;
   vn_qtde_ind_giaf1  number;
   vn_qtde_ind_giaf3  number;
   vn_qtde_ind_giaf4  number;
   --
begin
   --
   vn_fase := 1;
   --
   --#69103
   if gt_row_abertura_efd.dm_ind_ativ = '2' then
     --
     vn_qtde_ind_exp   := 0 ; 
     vn_qtde_ind_ccrf  := 0 ; 
     vn_qtde_ind_comb  := 0 ; 
     vn_qtde_ind_usina := 0 ; 
     vn_qtde_ind_va    := 0 ; 
     vn_qtde_ind_ee    := 0 ; 
     vn_qtde_ind_cart  := 0 ; 
     vn_qtde_ind_form  := 0 ; 
     vn_qtde_ind_aer   := 0 ; 
     vn_qtde_ind_giaf1 := 0 ; 
     vn_qtde_ind_giaf3 := 0 ; 
     vn_qtde_ind_giaf4 := 0 ; 
     --
   else
     --
     -- Soma qtde registros de exportação
     begin
        --
        select count(1)
          into vn_qtde_ind_exp
          from infor_exportacao ie
             , pais             p
         where ie.empresa_id   = gt_row_abertura_efd.empresa_id
           and trunc(ie.dt_avb) between gt_row_abertura_efd.dt_ini and gt_row_abertura_efd.dt_fim
           --and trunc(ie.dt_de) between gt_row_abertura_efd.dt_ini and gt_row_abertura_efd.dt_fim
           and ie.dm_st_proc   = 1 -- Validada
           and p.id            = ie.pais_id;
        --
     exception
        when others then
           vn_qtde_ind_exp := 0;
     end;
     --
     vn_fase := 1.1;
     -- Soma qtde registros de crédito fiscal de icms
     begin
        --
        select count(1)
          into vn_qtde_ind_ccrf
          from contr_cred_fiscal_icms ctrl
             , cod_aj_saldo_apur_icms cod
         where ctrl.empresa_id = gt_row_abertura_efd.empresa_id
           and ctrl.ano        = to_number(to_char(gt_row_abertura_efd.dt_ini, 'RRRR'))
           and ctrl.mes        = to_number(to_char(gt_row_abertura_efd.dt_ini, 'MM'))
          -- and ctrl.dm_situacao      = 1 -- Validado
           and cod.id          = ctrl.codajsaldoapuricms_id;
        --
     exception
        when others then
           vn_qtde_ind_ccrf := 0;
     end;
     --
     vn_fase := 1.2;
     -- Soma qtde registros de movimentação diária de combustíveis
     begin
        --
        select count(1)
          into vn_qtde_ind_comb
          from mov_diaria_comb mdc
         where mdc.empresa_id = gt_row_abertura_efd.empresa_id
           and mdc.dt_fech    between gt_row_abertura_efd.dt_ini and gt_row_abertura_efd.dt_fim
           and mdc.dm_st_proc = 1; -- Validada
        --
     exception
        when others then
           vn_qtde_ind_comb := 0;
     end;
     --
     vn_fase := 1.3;
     -- Soma qtde registros de produção diária de usina
     begin
        --
        select count(1)
          into vn_qtde_ind_usina
          from prod_dia_usina pdu
         where pdu.empresa_id = gt_row_abertura_efd.empresa_id
           and pdu.dt_prod    between gt_row_abertura_efd.dt_ini and gt_row_abertura_efd.dt_fim
           and pdu.dm_st_proc = 1; -- Validada
        --
     exception
        when others then
           vn_qtde_ind_usina := 0;
     end;
     --
     vn_fase := 1.4;
     -- Soma qtde registros de valores agregados
     begin
        --
        select sum(nvl(qtde,0))
          into vn_qtde_ind_va
          from ( select count(1) qtde
                   from inf_valor_agreg iva
                      , cidade          c
                  where iva.empresa_id = gt_row_abertura_efd.empresa_id
                    and iva.ano        = to_number(to_char(gt_row_abertura_efd.dt_ini, 'RRRR'))
                    and iva.mes        = to_number(to_char(gt_row_abertura_efd.dt_ini, 'MM'))
                    and iva.dm_st_proc = 1 -- Validado
                    and c.id           = iva.cidade_id
                  union 
                 select count(1)
                   from TMP_NOTA_FISCAL       nf,
                        mod_fiscal            mf,
                        TMP_ITEM_NOTA_FISCAL  inf,
                        param_dipamgia        pdg,
                        dipam_gia             dg,
                        pessoa                p,
                        cidade                cid,
                        estado                es,
                        cidade_tipo_cod_arq   ct1,
                        tipo_cod_arq          tc1,
                        empresa               em,
                        pessoa                ps,
                        cidade                ci,
                        estado                et,
                        cidade_tipo_cod_arq   ct,
                        tipo_cod_arq          tc
                  where nf.empresa_id      = gt_row_abertura_efd.empresa_id
                    and nf.dm_arm_nfe_terc = 0
                    and nf.dm_st_proc      = 4 -- Autorizada
                    and ((nf.dm_ind_emit = 1 and trunc(nvl(nf.dt_sai_ent,nf.dt_emiss)) between trunc(gt_row_abertura_efd.dt_ini) and trunc(gt_row_abertura_efd.dt_fim) )
                          or
                         (nf.dm_ind_emit = 0 and nf.dm_ind_oper = 1 and trunc(nf.dt_emiss) between trunc(gt_row_abertura_efd.dt_ini) and trunc(gt_row_abertura_efd.dt_fim) )
                          or
                         (nf.dm_ind_emit = 0 and nf.dm_ind_oper = 0 and gn_dm_dt_escr_dfepoe = 0 and trunc(nf.dt_emiss) between trunc(gt_row_abertura_efd.dt_ini) and trunc(gt_row_abertura_efd.dt_fim) )
                          or
                         (nf.dm_ind_emit = 0 and nf.dm_ind_oper = 0 and gn_dm_dt_escr_dfepoe = 1 and trunc(nvl(nf.dt_sai_ent,nf.dt_emiss)) between trunc(gt_row_abertura_efd.dt_ini) and trunc(gt_row_abertura_efd.dt_fim) ))
                    and mf.id             = nf.modfiscal_id
                    and mf.cod_mod        in ('01', '1B', '04', '55', '65')
                    and inf.notafiscal_id = nf.id
                    and pdg.empresa_id    = nf.empresa_id
                    and pdg.cfop_id       = inf.cfop_id
                    and (pdg.item_id = inf.item_id or pdg.ncm_id in (select n.id from ncm n where n.cod_ncm = inf.cod_ncm))
                    and dg.id             = pdg.dipamgia_id
                    and p.id              = nf.pessoa_id
                    and cid.id            = p.cidade_id
                    and es.id             = cid.estado_id
                    and ct1.cidade_id     = cid.id
                    and tc1.id            = ct1.tipocodarq_id
                    and tc1.cd            = '1' -- GIA-SP
                    and em.id             = nf.empresa_id
                    and ps.id             = em.pessoa_id
                    and ci.id             = ps.cidade_id
                    and et.id             = ci.estado_id
                    and ct.cidade_id      = ci.id
                    and tc.id             = ct.tipocodarq_id
                    and tc.cd             = '1' -- GIA-SP
                    /* Para não considerar os registros relacionados à tabela inf_valor_agreg. */
                    and not exists (select 1
                                      from inf_valor_agreg iva,
                                           item i
                                     where iva.item_id    = i.id
                                       and i.id           = inf.item_id
                                       and iva.dm_st_proc = 1)
                  union
                 select count(1)
                   from TMP_CONHEC_TRANSP         ct,
                        mod_fiscal                mf,
                        TMP_CONHEC_TRANSP_VLPREST ctv,
                        cidade                    c,
                        tipo_cod_arq              tc,
                        cidade_tipo_cod_arq       ctc,
                        ct_reg_anal               ctr,
                        cfop                      cfop
                  where ct.modfiscal_id         = mf.id
                    and ctv.conhectransp_id     = ct.id
                    and ((gn_origem_dado_pessoa = 0 and c.ibge_cidade = ct.ibge_cidade_ini)
                          or
                         (gn_origem_dado_pessoa = 1 and c.ibge_cidade = ct.ibge_cidade_fim))
                    and tc.cd                   = '1' -- GIA SP (UK)
                    and ctc.cidade_id           = c.id
                    and ctc.tipocodarq_id       = tc.id
                    and ctr.conhectransp_id     = ct.id
                    and cfop.id                 = ctr.cfop_id
                    and mf.cod_mod              in ('08', '09', '10', '11', '26', '57', '63', '67')
                    and ct.dm_arm_cte_terc      = 0
                    and ct.dm_st_proc           = 4
                    and ct.empresa_id           = gt_row_abertura_efd.empresa_id
                    and ((ct.dm_ind_emit = 1 and trunc(nvl(ct.dt_sai_ent,ct.dt_hr_emissao)) between trunc(gt_row_abertura_efd.dt_ini) and trunc(gt_row_abertura_efd.dt_fim) )
                          or
                         (ct.dm_ind_emit = 0 and ct.dm_ind_oper = 1 and trunc(ct.dt_hr_emissao) between trunc(gt_row_abertura_efd.dt_ini) and trunc(gt_row_abertura_efd.dt_fim) )
                          or
                         (ct.dm_ind_emit = 0 and ct.dm_ind_oper = 0 and gn_dm_dt_escr_dfepoe = 0 and trunc(ct.dt_hr_emissao) between trunc(gt_row_abertura_efd.dt_ini) and trunc(gt_row_abertura_efd.dt_fim) )
                          or
                         (ct.dm_ind_emit = 0 and ct.dm_ind_oper = 0 and gn_dm_dt_escr_dfepoe = 1 and trunc(nvl(ct.dt_sai_ent, ct.dt_hr_emissao)) between trunc(gt_row_abertura_efd.dt_ini) and trunc(gt_row_abertura_efd.dt_fim) ) )
                    and (  -- parte 1
                           ( cfop.cd between 5351 and 5399 ) or
                           ( cfop.cd between 6351 and 6399 ) or
                           ( cfop.cd between 7351 and 7399 ) or
                           -- parte 2
                           ( cfop.cd in (1351, 1932, 2351, 3351) )
                        )
               );		
        --
     exception
        when others then
           vn_qtde_ind_va := 0;
     end;
     --
     vn_fase := 1.5;
     -- Soma qtde registros de energia eletrica
     vn_qtde_ind_ee := 0;
     --
     vn_fase := 1.6;
     -- Soma qtde registro de cartão
     begin
        --
        select count(1)
          into vn_qtde_ind_cart
          from total_oper_cartao t
         where t.empresa_id = gt_row_abertura_efd.empresa_id
           and t.ano        = to_number(to_char(gt_row_abertura_efd.dt_ini, 'rrrr'))
           and t.mes        = to_number(to_char(gt_row_abertura_efd.dt_ini, 'mm'));
        --
     exception
        when others then
           vn_qtde_ind_cart := 0;
     end;
     --
     vn_fase := 1.7;
     -- Soma qtde registro de Formularios
     vn_qtde_ind_form := 0;
     --
     vn_fase := 1.8;
     -- Soma qtde registro de aereos
     begin
        --
        select count(1)
          into vn_qtde_ind_aer
          from dem_cred_icms_transp_aereo d
         where d.empresa_id = gt_row_abertura_efd.empresa_id
           and d.ano        = to_number(to_char(gt_row_abertura_efd.dt_ini, 'rrrr'))
           and d.mes        = to_number(to_char(gt_row_abertura_efd.dt_ini, 'mm'));
        --
     exception
        when others then
           vn_qtde_ind_aer := 0;
     end;
     --
     vn_fase := 1.9;
     --Soma qtde registro de GIAF1
     begin
        --
        select count(1)
           into vn_qtde_ind_giaf1
           from COD_IND_SBAPUR cis, GIAF_INDUSTRIA gi
        where cis.id         = gi.codindsbapur_id
          and gi.dm_st_proc  = 1
          and gi.empresa_id  = gt_row_abertura_efd.empresa_id
          and trunc(gi.dt_refer ) between gt_row_abertura_efd.dt_ini and gt_row_abertura_efd.dt_fim;
        --
     exception
        when others then
           vn_qtde_ind_giaf1 := 0;
     end;
     --
     vn_fase := 2;
     --Soma qtde registro de GIAF3
     begin
        --
       select count(1)
          into vn_qtde_ind_giaf3
          from COD_IND_SBAPUR cis, GIAF_IMPORTACAO gimp
       where cis.id          = gimp.codindsbapur_id
         and gimp.dm_st_proc = 1
         and gimp.empresa_id = gt_row_abertura_efd.empresa_id
         and trunc(gimp.dt_refer ) between gt_row_abertura_efd.dt_ini and gt_row_abertura_efd.dt_fim;
        --
     exception
        when others then
           vn_qtde_ind_giaf3 := 0;
     end;
     --
     vn_fase := 2.1;
     --Soma qtde registro de GIAF4
     begin
        --
       select count(1)
          into vn_qtde_ind_giaf4
          from COD_IND_SBAPUR cis, GIAF_CENTRAL gc
       where cis.id      = gc.codindsbapur_id
         and gc.dm_st_proc = 1
         and gc.empresa_id = gt_row_abertura_efd.empresa_id
         and trunc(gc.dt_refer ) between gt_row_abertura_efd.dt_ini and gt_row_abertura_efd.dt_fim;
        --
     exception
        when others then
           vn_qtde_ind_giaf4 := 0;
     end;
     --
   end if;
   --
   vn_fase := 3;
   --
   -- monta o registro
   vt_tab_reg_1010(i).reg        := '1010';
   vt_tab_reg_1010(i).ind_exp    := case when nvl(vn_qtde_ind_exp,0) = 0 then 'N' else 'S' end;
   vt_tab_reg_1010(i).ind_ccrf   := case when nvl(vn_qtde_ind_ccrf,0) = 0 then 'N' else 'S' end;
   vt_tab_reg_1010(i).ind_comb   := case when nvl(vn_qtde_ind_comb,0) = 0 then 'N' else 'S' end;
   vt_tab_reg_1010(i).ind_usina  := case when nvl(vn_qtde_ind_usina,0) = 0 then 'N' else 'S' end;
   vt_tab_reg_1010(i).ind_va     := case when nvl(vn_qtde_ind_va,0) = 0 then 'N' else 'S' end;
   vt_tab_reg_1010(i).ind_ee     := case when nvl(vn_qtde_ind_ee,0) = 0 then 'N' else 'S' end;
   vt_tab_reg_1010(i).ind_cart   := case when nvl(vn_qtde_ind_cart,0) = 0 then 'N' else 'S' end;
   vt_tab_reg_1010(i).ind_form   := case when nvl(vn_qtde_ind_form,0) = 0 then 'N' else 'S' end;
   vt_tab_reg_1010(i).ind_aer    := case when nvl(vn_qtde_ind_aer,0) = 0 then 'N' else 'S' end;
   --
   if gn_versao >= 112 then -- versão a partir de 01/01/2019
      --
      vt_tab_reg_1010(i).ind_giaf1  := case when nvl(vn_qtde_ind_giaf1,0) = 0 then 'N' else 'S' end;
      vt_tab_reg_1010(i).ind_giaf3  := case when nvl(vn_qtde_ind_giaf3,0) = 0 then 'N' else 'S' end;
      vt_tab_reg_1010(i).ind_giaf4  := case when nvl(vn_qtde_ind_giaf4,0) = 0 then 'N' else 'S' end;
      --
   end if;
   --
   if gn_versao >= 113 then -- versão válida a partir de 01/01/2020
      --   
      vt_tab_reg_1010(i).ind_rest_ressarc_compl_icms := 'N';
      --
   end if;    
   --
exception
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_monta_reg_1010 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end pkb_monta_reg_1010;

-------------------------------------------------------------------------------------------------------

-- Monta o REGISTRO 1001: ABERTURA DO BLOCO 1
procedure pkb_monta_reg_1001
is
   --
   vn_fase  number := 0;
   --
begin
   --
   vn_fase := 1;
   --
   vt_tab_reg_1001(1).reg := '1001';
   --
   vn_fase := 2;
   --
   if nvl(vt_tab_reg_1010.count,0) > 0
      or nvl(vt_tab_reg_1100.count,0) > 0
      or nvl(vt_tab_reg_1200.count,0) > 0
      or nvl(vt_tab_reg_1300.count,0) > 0
      or nvl(vt_tab_reg_1350.count,0) > 0
      or nvl(vt_tab_reg_1390.count,0) > 0
      or nvl(vt_tab_reg_1400.count,0) > 0
      or nvl(vt_tab_reg_1500.count,0) > 0
      or nvl(vt_tab_reg_1600.count,0) > 0
      or nvl(vt_tab_reg_1700.count,0) > 0
      or nvl(vt_tab_reg_1800.count,0) > 0
      or nvl(vt_tab_reg_1900.count,0) > 0
      then
      --
      vt_tab_reg_1001(1).ind_mov := 0;
      --
   else
      --
      vt_tab_reg_1001(1).ind_mov := 1;
      --
   end if;
   --
exception
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_monta_reg_1001 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end pkb_monta_reg_1001;

-------------------------------------------------------------------------------------------------------

-- procedimento monta os registro do BLOCO 1: OUTRAS INFORMAÇÕES
procedure pkb_monta_bloco_1
is
   --
   vn_fase  number := 0;
   --
begin
   --
   vn_fase := 1;
   --
   if gn_versao >= 105 then -- versão válida a partir de julho/2012
      --
      vn_fase := 2;
      --| Monta o REGISTRO 1010: OBRIGATORIEDADE DE REGISTROS DO BLOCO 1
      pkb_monta_reg_1010;
      --
   end if;
   --
   vn_fase := 3;
   -- Monta o REGISTRO 1100: REGISTRO DE INFORMAÇÕES SOBRE EXPORTAÇÃO
   pkb_monta_reg_1100;
   --
   vn_fase := 4;
   -- Monta o REGISTRO 1200: CONTROLE DE CRÉDITOS FISCAIS - ICMS
   pkb_monta_reg_1200;
   --
   vn_fase := 5;
   -- Monta o REGISTRO 1300: MOVIMENTAÇÃO DIÁRIA DE COMBUSTÍVEIS
   pkb_monta_reg_1300;
   --
   vn_fase := 6;
   -- Monta o REGISTRO 1350: BOMBAS
   pkb_monta_reg_1350;
   --
   vn_fase := 7;
   --
   if gn_versao >= 105 then -- versão válida a partir de julho/2012
      --
      vn_fase := 8;
      -- Monta o REGISTRO 1390: CONTROLE DE PRODUÇÃO DE USINA
      pkb_monta_reg_1390;
      --
   end if;
   --
   vn_fase := 9;
   -- Monta o REGISTRO 1400: INFORMAÇÃO SOBRE VALORES AGREGADOS
   pkb_monta_reg_1400;
   --
   vn_fase := 10;
   -- Monta o REGISTRO 1600: TOTAL DAS OPERAÇÕES COM CARTÃO DE CRÉDITO E/OU DÉBITO
   pkb_monta_reg_1600;
   --
   vn_fase := 11;
   -- monta o REGISTRO 1700 - DOCUMENTOS FISCAIS UTILIZADOS
   pkb_monta_reg_1700;
   --
   vn_fase := 12;
   -- monta o REGISTRO 1800 - DCTA - DEMONSTRATIVO DE CRÉDITO DO ICMS SOBRE TRANSPORTE AÉREO
   pkb_monta_reg_1800;
   --
   vn_fase := 13;
   --
   if gn_versao >= 107 then -- versão válida a partir de 01/01/2014
      --
      vn_fase := 14;
      -- montar REGISTRO 1900: INDICADOR DE SUB-APURAÇÃO DO ICMS
      pkb_monta_reg_1900;
      --
   end if;
   --
   vn_fase := 15;
   -- Monta o REGISTRO 1001: ABERTURA DO BLOCO 1
   pkb_monta_reg_1001;
   --
   vn_fase := 16;
   --
   if gn_versao >= 112 then -- versão a partir de 01/01/2019
      -- monta o REGISTRO 1960: GIAF 1 - GUIA DE INFORMAÇÃO E APURAÇÃO DE INCENTIVOS FISCAIS E FINANCEIROS: INDÚSTRIA (CRÉDITO PRESUMIDO)
      pkb_monta_reg_1960;
      --
   end if;
   --
   vn_fase := 17;
   --
   if gn_versao >= 112 then -- versão a partir de 01/01/2019
      -- monta o REGISTRO 1970: GIAF 3 - GUIA DE INFORMAÇÃO E APURAÇÃO DE INCENTIVOS FISCAIS E FINANCEIROS: IMPORTAÇÃO (DIFERIMENTO NA ENTRADA E CRÉDITO PRESUMIDO NA SAÍDA SUBSEQUENTE)
      pkb_monta_reg_1970;
      --
   end if;
   --
   vn_fase := 18;
   --
   if gn_versao >= 112 then -- versão a partir de 01/01/2019
      -- monta o REGISTRO 1980: GIAF 4 GUIA DE INFORMAÇÃO E APURAÇÃO DE INCENTIVOS FISCAIS E FINANCEIROS: CENTRAL DE DISTRIBUIÇÃO (ENTRADAS/SAÍDAS)
      pkb_monta_reg_1980;
      --
   end if;
   --
   vn_fase := 19;
   -- Monta o REGISTRO 1990: ENCERRAMENTO DO BLOCO 1
   pkb_monta_reg_1990;
   --
exception
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_monta_bloco_1 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end pkb_monta_bloco_1;

-------------------------------------------------------------------------------------------------------

-- Monta o REGISTRO K990: ENCERRAMENTO DO BLOCO K
procedure pkb_monta_reg_k990
is
   --
begin
   --
   vt_tab_reg_k990(1).reg := 'K990';
   vt_tab_reg_k990(1).qtd_lin_k := nvl(fkg_qtde_linha_reg_k001,0) +
                                   nvl(fkg_qtde_linha_reg_k100,0) +
                                   nvl(fkg_qtde_linha_reg_k200,0) +
                                   nvl(fkg_qtde_linha_reg_k210,0) +
                                   nvl(fkg_qtde_linha_reg_k215,0) +
                                   nvl(fkg_qtde_linha_reg_k220,0) +
                                   nvl(fkg_qtde_linha_reg_k230,0) +
                                   nvl(fkg_qtde_linha_reg_k235,0) +
                                   nvl(fkg_qtde_linha_reg_k250,0) +
                                   nvl(fkg_qtde_linha_reg_k255,0) +
                                   nvl(fkg_qtde_linha_reg_k260,0) +
                                   nvl(fkg_qtde_linha_reg_k265,0) +
                                   nvl(fkg_qtde_linha_reg_k270,0) +
                                   nvl(fkg_qtde_linha_reg_k275,0) +
                                   nvl(fkg_qtde_linha_reg_k280,0) +
                                   nvl(fkg_qtde_linha_reg_k290,0) +
                                   nvl(fkg_qtde_linha_reg_k291,0) +
                                   nvl(fkg_qtde_linha_reg_k292,0) +
                                   nvl(fkg_qtde_linha_reg_k300,0) +
                                   nvl(fkg_qtde_linha_reg_k301,0) + 
                                   nvl(fkg_qtde_linha_reg_k302,0) +                                   
                                   nvl(fkg_qtde_linha_reg_k990,0);
   --
exception
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_monta_reg_k990: '||sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id => vn_loggenerico_id
                                          , ev_mensagem       => gv_mensagem_log
                                          , ev_resumo         => null
                                          , en_tipo_log       => erro_de_sistema
                                          , en_referencia_id  => gt_row_abertura_efd.id
                                          , ev_obj_referencia => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end pkb_monta_reg_k990;

-------------------------------------------------------------------------------------------------------

-- REGISTRO K302: PRODUÇÃO CONJUNTA ¿ INDUSTRIALIZAÇÃO EFETUADA POR TERCEIROS ¿ INSUMOS CONSUMIDOS
procedure pkb_monta_reg_k302( en_prodcjtaindterc_id  in prod_cjta_indterc.id%type
                            , en_indx_k100           in number
                            , en_indx_k300           in number )
is
   --
   vn_fase   number;
   i         pls_integer;
   --
   cursor c_pcic is
   select pcic.item_id ,
          pcic.qtd
   from prod_cjta_indterc_ic pcic where pcic.prodcjtaindterc_id = en_prodcjtaindterc_id;
   --
begin
   --
   vn_fase := 1;
   --
   i := 0;
   --
   for r_pcic in c_pcic
   loop
      --
      exit when c_pcic%notfound or (c_pcic%notfound) is null;
      --
      vn_fase := 2;
      --
      i := nvl(i,0) + 1;
      --
      vt_tri_tab_reg_k302(en_indx_k100)(en_indx_k300)(i).reg           := 'K302';
      vt_tri_tab_reg_k302(en_indx_k100)(en_indx_k300)(i).cod_item      := pk_csf.fkg_Item_cod ( en_item_id => r_pcic.item_id) ;
      vt_tri_tab_reg_k302(en_indx_k100)(en_indx_k300)(i).qtd           := r_pcic.qtd;
      --
   end loop;
   --
exception
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_monta_reg_k302 fase('||vn_fase||'): '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico.id%type;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end pkb_monta_reg_k302;

-------------------------------------------------------------------------------------------------------

-- REGISTRO K301: PRODUÇÃO CONJUNTA ¿ INDUSTRIALIZAÇÃO EFETUADA POR TERCEIROS ¿ ITENS PRODUZIDOS
procedure pkb_monta_reg_k301( en_prodcjtaindterc_id  in prod_cjta_indterc.id%type
                            , en_indx_k100           in number
                            , en_indx_k300           in number )
is
   --
   vn_fase   number;
   i         pls_integer;
   --
   cursor c_pcip is
   select pcip.item_id ,
          pcip.qtd
   from prod_cjta_indterc_ip pcip 
   where pcip.prodcjtaindterc_id = en_prodcjtaindterc_id;
   --
begin
   --
   vn_fase := 1;
   --
   i := 0;
   --
   for r_pcip in c_pcip
   loop
      --
      exit when c_pcip%notfound or (c_pcip%notfound) is null;
      --
      vn_fase := 2;
      --
      i := nvl(i,0) + 1;
      --
      vt_tri_tab_reg_k301(en_indx_k100)(en_indx_k300)(i).reg           := 'K301';
      vt_tri_tab_reg_k301(en_indx_k100)(en_indx_k300)(i).cod_item      := pk_csf.fkg_Item_cod (r_pcip.item_id);
      vt_tri_tab_reg_k301(en_indx_k100)(en_indx_k300)(i).qtd           := r_pcip.qtd;
      --
   end loop;
   --
exception
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_monta_reg_k301 fase('||vn_fase||'): '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico.id%type;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end pkb_monta_reg_k301;

-------------------------------------------------------------------------------------------------------

-- Procedimento monta o REGISTRO K300: PRODUÇÃO CONJUNTA ¿ INDUSTRIALIZAÇÃO EFETUADA POR TERCEIROS
procedure pkb_monta_reg_k300( en_percontrprodestq_id in repr_repa_prod_ins.id%type
                            , en_indx_k100           in number )
is
   --
   vn_fase   number;
   i         pls_integer;
   --
   cursor c_pcit is
   select pcit.id prodcjtaindterc_id,
          pcit.dt_prod
   from prod_cjta_indterc pcit
   where pcit.percontrprodestq_id = en_percontrprodestq_id;
   --
begin
   --
   vn_fase := 1;
   --
   i := 0;
   --
   for r_pcit in c_pcit
   loop
      --
      exit when c_pcit%notfound or (c_pcit%notfound) is null;
      --
      vn_fase := 2;
      --
      i := nvl(i,0) + 1;
      --
      vt_bi_tab_reg_k300(en_indx_k100)(i).reg        := 'K300';
      vt_bi_tab_reg_k300(en_indx_k100)(i).dt_prod    := r_pcit.dt_prod;
      --
      vn_fase := 3;
      --
      -- REGISTRO K301: PRODUÇÃO CONJUNTA ¿ INDUSTRIALIZAÇÃO EFETUADA POR TERCEIROS ¿ ITENS PRODUZIDOS
      pkb_monta_reg_k301( en_prodcjtaindterc_id  => r_pcit.prodcjtaindterc_id
                        , en_indx_k100           => en_indx_k100
                        , en_indx_k300           => i );
      --
      vn_fase := 4;  
      --          
      -- REGISTRO K302: PRODUÇÃO CONJUNTA ¿ INDUSTRIALIZAÇÃO EFETUADA POR TERCEIROS ¿ INSUMOS CONSUMIDOS
      pkb_monta_reg_k302( en_prodcjtaindterc_id  => r_pcit.prodcjtaindterc_id
                        , en_indx_k100           => en_indx_k100
                        , en_indx_k300           => i );
      --
   end loop;
   --
exception
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_monta_reg_k300 fase('||vn_fase||'): '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico.id%type;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end pkb_monta_reg_k300;
-------------------------------------------------------------------------------------------------------

-- REGISTRO K292: PRODUÇÃO CONJUNTA ¿ INSUMOS CONSUMIDOS
procedure pkb_monta_reg_k292( en_prodcjtaordprod_id  in prod_cjta_ordprod.id%type
                            , en_indx_k100           in number
                            , en_indx_k290           in number )
is
   --
   vn_fase   number;
   i         pls_integer;
   --
   cursor c_pcic is
    select pcic.item_id ,
           pcic.qtd
    from prod_cjta_inscons pcic
    where pcic.prodcjtaordprod_id = en_prodcjtaordprod_id;
   --
begin
   --
   vn_fase := 1;
   --
   i := 0;
   --
   for r_pcic in c_pcic
   loop
      --
      exit when c_pcic%notfound or (c_pcic%notfound) is null;
      --
      vn_fase := 2;
      --
      i := nvl(i,0) + 1;
      --
      vt_tri_tab_reg_k292(en_indx_k100)(en_indx_k290)(i).reg           := 'K292';
      vt_tri_tab_reg_k292(en_indx_k100)(en_indx_k290)(i).cod_item      := pk_csf.fkg_Item_cod ( en_item_id => r_pcic.item_id) ;
      vt_tri_tab_reg_k292(en_indx_k100)(en_indx_k290)(i).qtd           := r_pcic.qtd;
      --
   end loop;
   --
exception
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_monta_reg_k292 fase('||vn_fase||'): '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico.id%type;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end pkb_monta_reg_k292;

-------------------------------------------------------------------------------------------------------

-- REGISTRO K291: PRODUÇÃO CONJUNTA ¿ ITENS PRODUZIDOS
procedure pkb_monta_reg_k291( en_prodcjtaordprod_id  in prod_cjta_ordprod.id%type
                            , en_indx_k100           in number
                            , en_indx_k290           in number )
is
   --
   vn_fase   number;
   i         pls_integer;
   --
   cursor c_pcip is
    select pcip.item_id ,
           pcip.qtd
    from prod_cjta_itemprod pcip
    where pcip.prodcjtaordprod_id = en_prodcjtaordprod_id;
   --
begin
   --
   vn_fase := 1;
   --
   i := 0;
   --
   for r_pcip in c_pcip
   loop
      --
      exit when c_pcip%notfound or (c_pcip%notfound) is null;
      --
      vn_fase := 2;
      --
      i := nvl(i,0) + 1;
      --
      vt_tri_tab_reg_k291(en_indx_k100)(en_indx_k290)(i).reg           := 'K291';
      vt_tri_tab_reg_k291(en_indx_k100)(en_indx_k290)(i).cod_item      := pk_csf.fkg_Item_cod (r_pcip.item_id);
      vt_tri_tab_reg_k291(en_indx_k100)(en_indx_k290)(i).qtd           := r_pcip.qtd;
      --
   end loop;
   --
exception
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_monta_reg_k291 fase('||vn_fase||'): '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico.id%type;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end pkb_monta_reg_k291;

-------------------------------------------------------------------------------------------------------

-- Procedimento monta o REGISTRO K290: PRODUÇÃO CONJUNTA ¿ ORDEM DE PRODUÇÃO
procedure pkb_monta_reg_k290( en_percontrprodestq_id in repr_repa_prod_ins.id%type
                            , en_indx_k100           in number )
is
   --
   vn_fase   number;
   i         pls_integer;
   --
   cursor c_pco is
   select pco.id as prodcjtaordprod_id ,
          pco.dt_ini_op,
          pco.dt_fin_op,
          pco.cod_doc_op
   from prod_cjta_ordprod pco
   where pco.percontrprodestq_id  = en_percontrprodestq_id;
   --
begin
   --
   vn_fase := 1;
   --
   i := 0;
   --
   for r_pco in c_pco
   loop
      --
      exit when c_pco%notfound or (c_pco%notfound) is null;
      --
      vn_fase := 2;
      --
      i := nvl(i,0) + 1;
      --
      vt_bi_tab_reg_k290(en_indx_k100)(i).reg          := 'K290';
      vt_bi_tab_reg_k290(en_indx_k100)(i).dt_ini_op    := r_pco.dt_ini_op;
      vt_bi_tab_reg_k290(en_indx_k100)(i).dt_fin_op    := r_pco.dt_fin_op;
      vt_bi_tab_reg_k290(en_indx_k100)(i).cod_doc_op   := r_pco.cod_doc_op;
      --
      vn_fase := 3;
      --
      -- REGISTRO K291: PRODUÇÃO CONJUNTA ¿ ITENS PRODUZIDOS
      pkb_monta_reg_k291( en_prodcjtaordprod_id  => r_pco.prodcjtaordprod_id
                        , en_indx_k100           => en_indx_k100
                        , en_indx_k290           => i );
      --
      vn_fase := 4; 
      --           
      -- REGISTRO K292: PRODUÇÃO CONJUNTA ¿ INSUMOS CONSUMIDOS
      pkb_monta_reg_k292( en_prodcjtaordprod_id  => r_pco.prodcjtaordprod_id
                        , en_indx_k100           => en_indx_k100
                        , en_indx_k290           => i );
      --
   end loop;
   --
exception
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_monta_reg_k290 fase('||vn_fase||'): '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico.id%type;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end pkb_monta_reg_k290;

-------------------------------------------------------------------------------------------------------

-- Procedimento monta o REGISTRO K270: CORREÇÃO DE APONTAMENTO DOS REGISTROS K210, K220, K230, K250 E K260
procedure pkb_monta_reg_k280( en_percontrprodestq_id in repr_repa_prod_ins.id%type
                            , en_indx_k100 in number )
is
   --
   vn_fase number;
   i pls_integer;
   --
   cursor c_cae is
      select cae.dt_est
           , it.cod_item
           , cae.qtd_cor_pos
           , cae.qtd_cor_neg
           , cae.dm_ind_est
           , p.cod_part
           , cae.item_id
        from tipo_item      ti
           , corr_apont_est cae
           , item           it
           , pessoa         p
       where 1=1
         and ti.cd                  in ('00','01','02','03','04','05','06','10')
         and it.tipoitem_id          = ti.id
         and cae.percontrprodestq_id = en_percontrprodestq_id
         and it.id                   = cae.item_id
         and p.id                (+) = cae.pessoa_id;
--
begin
   --
   vn_fase := 1;
   --
   i := 0;
   --
   for r_cae in c_cae
   loop
      --
      exit when c_cae%notfound or (c_cae%notfound) is null;
      --
      vn_fase := 2;
      --
      i := nvl(i,0) + 1;
      --
      vt_bi_tab_reg_k280(en_indx_k100)(i).reg         := 'K280';
      vt_bi_tab_reg_k280(en_indx_k100)(i).dt_est      := r_cae.dt_est;
      vt_bi_tab_reg_k280(en_indx_k100)(i).cod_item    := r_cae.cod_item;
      vt_bi_tab_reg_k280(en_indx_k100)(i).qtd_cor_pos := r_cae.qtd_cor_pos;
      vt_bi_tab_reg_k280(en_indx_k100)(i).qtd_cor_neg := r_cae.qtd_cor_neg;
      vt_bi_tab_reg_k280(en_indx_k100)(i).ind_est     := r_cae.dm_ind_est;
      vt_bi_tab_reg_k280(en_indx_k100)(i).cod_part    := r_cae.cod_part;
      --
      if nvl(r_cae.item_id, 0) > 0 then
         --
         vn_fase := 3;
         pkb_monta_reg_0200( en_item_id => r_cae.item_id);
         --
      end if;
      --
   end loop;
   --
exception
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_monta_reg_k280 fase('||vn_fase||'): '||sqlerrm;
      --
      declare
         vn_loggenerico_id log_generico.id%type;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id => vn_loggenerico_id
                                          , ev_mensagem       => gv_mensagem_log
                                          , ev_resumo         => gv_mensagem_log
                                          , en_tipo_log       => erro_de_sistema
                                          , en_referencia_id  => gt_row_abertura_efd.id
                                          , ev_obj_referencia => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (20101, gv_mensagem_log);
      --
end pkb_monta_reg_k280;

-------------------------------------------------------------------------------------------------------

-- REGISTRO K275: CORREÇÃO DE APONTAMENTO E RETORNO DE INSUMOS DOS REGISTROS K215, K220, K235, K255 E K265.
procedure pkb_monta_reg_k275( en_corrapontreg_id  in corr_apont_reg.id%type
                            , en_indx_k100        in number
                            , en_indx_k270        in number )
is
   --
   vn_fase   number;
   i         pls_integer;
   --
   cursor c_cari is
   select it.cod_item
        , ca.qtd_cor_pos
        , ca.qtd_cor_neg
        , ca.item_id_ins_subs
        , ca.item_id
     from corr_apont_ret_ins ca
        , item               it
    where ca.corrapontreg_id = en_corrapontreg_id
      and it.id              = ca.item_id;
   --
begin
   --
   vn_fase := 1;
   --
   i := 0;
   --
   for r_cari in c_cari
   loop
      --
      exit when c_cari%notfound or (c_cari%notfound) is null;
      --
      vn_fase := 2;
      --
      i := nvl(i,0) + 1;
      --
      vt_tri_tab_reg_k275(en_indx_k100)(en_indx_k270)(i).reg           := 'K275';
      vt_tri_tab_reg_k275(en_indx_k100)(en_indx_k270)(i).cod_item      := r_cari.cod_item;
      vt_tri_tab_reg_k275(en_indx_k100)(en_indx_k270)(i).qtd_cor_pos   := r_cari.qtd_cor_pos;
      vt_tri_tab_reg_k275(en_indx_k100)(en_indx_k270)(i).qtd_cor_neg   := r_cari.qtd_cor_neg;
      vt_tri_tab_reg_k275(en_indx_k100)(en_indx_k270)(i).cod_ins_subst := pk_csf.fkg_Item_cod ( en_item_id => r_cari.item_id_ins_subs);
      --
      if nvl(r_cari.item_id, 0) > 0 then
         --
         vn_fase := 3;
         pkb_monta_reg_0200( en_item_id => r_cari.item_id);
         --
      end if;
      --
   end loop;
   --
exception
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_monta_reg_k275 fase('||vn_fase||'): '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico.id%type;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end pkb_monta_reg_k275;

-------------------------------------------------------------------------------------------------------

-- Procedimento monta o REGISTRO K270: CORREÇÃO DE APONTAMENTO DOS REGISTROS K210, K220, K230, K250 E K260
procedure pkb_monta_reg_k270( en_percontrprodestq_id in repr_repa_prod_ins.id%type
                            , en_indx_k100           in number )
is
   --
   vn_fase   number;
   i         pls_integer;
   --
   cursor c_car is
   select ca.id   corrapontreg_id
        , ca.dt_ini_ap
        , ca.dt_fin_ap
        , ca.cod_op_os
        , it.cod_item
        , ca.qtd_cor_pos
        , ca.qtd_cor_neg
        , ca.dm_origem
     from corr_apont_reg ca
        , item           it
    where ca.percontrprodestq_id = en_percontrprodestq_id
      and ca.item_id             = it.id;
   --
begin
   --
   vn_fase := 1;
   --
   i := 0;
   --
   for r_car in c_car
   loop
      --
      exit when c_car%notfound or (c_car%notfound) is null;
      --
      vn_fase := 2;
      --
      i := nvl(i,0) + 1;
      --
      vt_bi_tab_reg_k270(en_indx_k100)(i).reg          := 'K270';
      vt_bi_tab_reg_k270(en_indx_k100)(i).dt_ini_ap    := r_car.dt_ini_ap;
      vt_bi_tab_reg_k270(en_indx_k100)(i).dt_fin_ap    := r_car.dt_fin_ap;
      vt_bi_tab_reg_k270(en_indx_k100)(i).cod_op_os    := r_car.cod_op_os;
      vt_bi_tab_reg_k270(en_indx_k100)(i).cod_item     := r_car.cod_item;
      vt_bi_tab_reg_k270(en_indx_k100)(i).qtd_cor_pos  := r_car.qtd_cor_pos;
      vt_bi_tab_reg_k270(en_indx_k100)(i).qtd_cor_neg  := r_car.qtd_cor_neg;
      vt_bi_tab_reg_k270(en_indx_k100)(i).origem       := r_car.dm_origem;
      --
      vn_fase := 3;
      --
      -- REGISTRO K275: CORREÇÃO DE APONTAMENTO E RETORNO DE INSUMOS DOS REGISTROS K215, K220, K235, K255 E K265.
      pkb_monta_reg_k275( en_corrapontreg_id  => r_car.corrapontreg_id
                        , en_indx_k100        => en_indx_k100
                        , en_indx_k270        => i );
      --
   end loop;
   --
exception
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_monta_reg_k270 fase('||vn_fase||'): '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico.id%type;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end pkb_monta_reg_k270;

-------------------------------------------------------------------------------------------------------

-- Procedimento monta o REGISTRO K265: REPROCESSAMENTO/REPARO - MERCADORIAS CONSUMIDAS E/OU RETORNADAS
procedure pkb_monta_reg_k265( en_reprrepaprodins_id in repr_repa_prod_ins.id%type
                            , en_indx_k100          in number
                            , en_indx_k260          in number )
is
   --
   vn_fase   number;
   i         pls_integer;
   --
   cursor c_rrmec is
   select rr.qtd_cons
        , it.cod_item
        , rr.qtd_ret
     from repr_repa_merc_cons_ret  rr
        , item it
    where rr.reprrepaprodins_id = en_reprrepaprodins_id
      and rr.item_id_ret        = it.id;
   --
begin
   --
   vn_fase := 1;
   --
   i := 0;
   --
   for r_rrmec in c_rrmec
   loop
      --
      exit when c_rrmec%notfound or (c_rrmec%notfound) is null;
      --
      vn_fase := 2;
      --
      i := nvl(i,0) + 1;
      --
      vt_tri_tab_reg_k265(en_indx_k100)(en_indx_k260)(i).reg      := 'K265';
      vt_tri_tab_reg_k265(en_indx_k100)(en_indx_k260)(i).cod_item := r_rrmec.cod_item;
      vt_tri_tab_reg_k265(en_indx_k100)(en_indx_k260)(i).qtd_cons := r_rrmec.qtd_cons;
      vt_tri_tab_reg_k265(en_indx_k100)(en_indx_k260)(i).qtd_ret  := r_rrmec.qtd_ret;
      --
   end loop;
   --
exception
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_monta_reg_k265 fase('||vn_fase||'): '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico.id%type;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end pkb_monta_reg_k265;

-------------------------------------------------------------------------------------------------------

-- Procedimento monta o REGISTRO K260: REPROCESSAMENTO/REPARO DE PRODUTO/INSUMO
procedure pkb_monta_reg_k260( en_percontrprodestq_id in repr_repa_prod_ins.id%type
                            , en_indx_k100           in number )
is
   --
   vn_fase   number;
   i         pls_integer;
   --
   cursor c_rrprod is
   select rr.id reprrepaprodins_id
        , rr.cod_op_os
        , it.cod_item
        , rr.dt_saida
        , rr.qtd_saida
        , rr.dt_ret
        , rr.qtd_ret
     from repr_repa_prod_ins rr
        , item it
    where rr.percontrprodestq_id = en_percontrprodestq_id
      and it.id                  = rr.item_id;
   --
begin
   --
   vn_fase := 1;
   i := 0;
   --
   for r_rrprod in c_rrprod
   loop
      --
      exit when c_rrprod%notfound or (c_rrprod%notfound) is null;
      --
      vn_fase := 2;
      --
      i := nvl(i,0) + 1;
      --
      vt_bi_tab_reg_k260(en_indx_k100)(i).reg       := 'K260';
      vt_bi_tab_reg_k260(en_indx_k100)(i).cod_op_os := r_rrprod.cod_op_os;
      vt_bi_tab_reg_k260(en_indx_k100)(i).cod_item  := r_rrprod.cod_item;
      vt_bi_tab_reg_k260(en_indx_k100)(i).dt_saida  := r_rrprod.dt_saida;
      vt_bi_tab_reg_k260(en_indx_k100)(i).qtd_saida := r_rrprod.qtd_saida;
      vt_bi_tab_reg_k260(en_indx_k100)(i).dt_ret    := r_rrprod.dt_ret;
      vt_bi_tab_reg_k260(en_indx_k100)(i).qtd_ret   := r_rrprod.qtd_ret;
      --
      vn_fase := 3;
      --
      -- REGISTRO K265: REPROCESSAMENTO/REPARO - MERCADORIAS CONSUMIDAS E/OU RETORNADAS
      pkb_monta_reg_k265( en_reprrepaprodins_id => r_rrprod.reprrepaprodins_id
                        , en_indx_k100          => en_indx_k100
                        , en_indx_k260          => i );
      --
   end loop;
   --
exception
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_monta_reg_k260 fase('||vn_fase||'): '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico.id%type;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end pkb_monta_reg_k260;

-------------------------------------------------------------------------------------------------------

-- Procedimento monta o REGISTRO K255: INDUSTRIALIZAÇÃO EM TERCEIROS - INSUMOS CONSUMIDOS
procedure pkb_monta_reg_k255( en_industrporterc_id in industr_por_terc.id%type
                            , en_indx_k100         in number
                            , en_indx_k250         in number )
is
   --
   vn_fase   number;
   i         pls_integer;
   --
   cursor c_ind_em is
   select ie.dt_cons
        , ie.item_id
        , ie.qtd
        , ie.item_id_ins
     from industr_em_terc ie
    where ie.industrporterc_id = en_industrporterc_id;
   --
begin
   --
   vn_fase := 1;
   --
   i := 0;
   --
   for r_ind_em in c_ind_em
   loop
      --
      exit when c_ind_em%notfound or (c_ind_em%notfound) is null;
      --
      vn_fase := 2;
      --
      i := nvl(i,0) + 1;
      --
      vt_tri_tab_reg_k255(en_indx_k100)(en_indx_k250)(i).reg           := 'K255';
      vt_tri_tab_reg_k255(en_indx_k100)(en_indx_k250)(i).dt_cons       := r_ind_em.dt_cons;
      vt_tri_tab_reg_k255(en_indx_k100)(en_indx_k250)(i).cod_item      := pk_csf.fkg_item_cod(en_item_id => r_ind_em.item_id);
      vt_tri_tab_reg_k255(en_indx_k100)(en_indx_k250)(i).qtd           := nvl(r_ind_em.qtd,0);
      vt_tri_tab_reg_k255(en_indx_k100)(en_indx_k250)(i).cod_ins_subst := pk_csf.fkg_item_cod(en_item_id => r_ind_em.item_id_ins);
      --
      vn_fase := 3;
      -- Monta arquivo auxiliar produto
      if nvl(r_ind_em.item_id,0) > 0 then
         --
         vn_fase := 3.1;
         pkb_monta_reg_0200(en_item_id => r_ind_em.item_id);
         --
      end if;
      --
      vn_fase := 4;
      -- Monta arquivo auxiliar produto
      if nvl(r_ind_em.item_id_ins,0) > 0 then
         --
         vn_fase := 4.1;
         pkb_monta_reg_0200( en_item_id     => r_ind_em.item_id
                           , en_item_id_ins => r_ind_em.item_id_ins );
         --
      end if;
      --
   end loop;
   --
exception
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_monta_reg_k255 fase('||vn_fase||'): '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico.id%type;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end pkb_monta_reg_k255;

-------------------------------------------------------------------------------------------------------

-- Procedimento monta o REGISTRO K250: INDUSTRIALIZAÇÃO EFETUADA POR TERCEIROS - ITENS PRODUZIDOS
procedure pkb_monta_reg_k250( en_percontrprodestq_id in per_contr_prod_estq.id%type
                            , en_indx_k100           in number )
is
   --
   vn_fase   number;
   i         pls_integer;
   vv_gerou  varchar2(1) := 'N';
   --
   cursor c_ind_por is
   select ip.id industrporterc_id
        , ip.dt_prod
        , ip.item_id
        , ip.qtd
     from industr_por_terc ip
    where ip.percontrprodestq_id = en_percontrprodestq_id;
   --
   cursor c_ind_terc( en_industrporterc_id in industr_por_terc.id%type ) is
   select ie.item_id item_id_ins_subst
     from industr_em_terc ie
    where ie.industrporterc_id = en_industrporterc_id
      and ie.item_id_ins      is null;
   --
begin
   --
   vn_fase := 1;
   --
   i := 0;
   --
   for r_ind_por in c_ind_por
   loop
      --
      exit when c_ind_por%notfound or (c_ind_por%notfound) is null;
      --
      vn_fase := 2;
      --
      i := nvl(i,0) + 1;
      --
      vt_bi_tab_reg_k250(en_indx_k100)(i).reg      := 'K250';
      vt_bi_tab_reg_k250(en_indx_k100)(i).dt_prod  := r_ind_por.dt_prod;
      vt_bi_tab_reg_k250(en_indx_k100)(i).cod_item := pk_csf.fkg_item_cod(en_item_id => r_ind_por.item_id);
      vt_bi_tab_reg_k250(en_indx_k100)(i).qtd      := nvl(r_ind_por.qtd,0);
      --
      vn_fase := 3;
      -- Monta arquivo auxiliar produto
      if nvl(r_ind_por.item_id,0) > 0 then
         --
         vn_fase := 3.1;
         --
         vv_gerou := 'N';
         --
         for r_ind_terc in c_ind_terc( en_industrporterc_id => r_ind_por.industrporterc_id )
         loop
            --
            exit when c_ind_terc%notfound or (c_ind_terc%notfound) is null;
            --
            vn_fase := 3.2;
            --
            vv_gerou := 'S';
            pkb_monta_reg_0200( en_item_id     => r_ind_por.item_id
                              , en_item_id_ins => r_ind_terc.item_id_ins_subst );
            --
         end loop;
         --
         vn_fase := 3.3;
         --
         if vv_gerou = 'N' then
            --
            vn_fase := 3.4;
            --
            pkb_monta_reg_0200(en_item_id => r_ind_por.item_id);
            --
         end if;
         --
      end if;
      --
      vn_fase := 4;
      -- Monta o REGISTRO K255: INDUSTRIALIZAÇÃO EM TERCEIROS - INSUMOS CONSUMIDOS
      pkb_monta_reg_k255( en_industrporterc_id => r_ind_por.industrporterc_id
                        , en_indx_k100         => en_indx_k100
                        , en_indx_k250         => i );
      --
   end loop;
   --
exception
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_monta_reg_k250 fase('||vn_fase||'): '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico.id%type;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end pkb_monta_reg_k250;

-------------------------------------------------------------------------------------------------------

-- Procedimento monta o REGISTRO K235: INSUMOS CONSUMIDOS
procedure pkb_monta_reg_k235( en_itemproduz_id in item_produz.id%type
                            , en_indx_k100     in number
                            , en_indx_k230     in number )
is
   --
   vn_fase   number;
   i         pls_integer;
   --
   cursor c_ins is
   select ic.dt_saida
        , ic.item_id
        , ic.qtd
        , ic.item_id_ins
     from insumo_cons ic
    where ic.itemproduz_id = en_itemproduz_id;
   --
begin
   --
   vn_fase := 1;
   --
   i := 0;
   --
   for r_ins in c_ins
   loop
      --
      exit when c_ins%notfound or (c_ins%notfound) is null;
      --
      vn_fase := 2;
      --
      i := nvl(i,0) + 1;
      --
      vt_tri_tab_reg_k235(en_indx_k100)(en_indx_k230)(i).reg           := 'K235';
      vt_tri_tab_reg_k235(en_indx_k100)(en_indx_k230)(i).dt_saida      := r_ins.dt_saida;
      vt_tri_tab_reg_k235(en_indx_k100)(en_indx_k230)(i).cod_item      := pk_csf.fkg_item_cod(en_item_id => r_ins.item_id);
      vt_tri_tab_reg_k235(en_indx_k100)(en_indx_k230)(i).qtd           := nvl(r_ins.qtd,0);
      vt_tri_tab_reg_k235(en_indx_k100)(en_indx_k230)(i).cod_ins_subst := pk_csf.fkg_item_cod(en_item_id => r_ins.item_id_ins);
      --
      -- Os itens que devem estar nos registros 0200 e 0210, já foram montados na rotina anterior pkb_monta_reg_k230
      --
   end loop;
   --
exception
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_monta_reg_k235 fase('||vn_fase||'): '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico.id%type;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id => vn_loggenerico_id
                                          , ev_mensagem       => gv_mensagem_log
                                          , ev_resumo         => null
                                          , en_tipo_log       => erro_de_sistema
                                          , en_referencia_id  => gt_row_abertura_efd.id
                                          , ev_obj_referencia => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end pkb_monta_reg_k235;

-------------------------------------------------------------------------------------------------------

-- Procedimento monta o REGISTRO K230: ITENS PRODUZIDOS
procedure pkb_monta_reg_k230( en_percontrprodestq_id in per_contr_prod_estq.id%type
                            , en_indx_k100           in number )
is
   --
   vn_fase   number;
   i         pls_integer;
   --
   cursor c_it_prod is
   select ip.id itemproduz_id
        , ip.dt_ini_op
        , ip.dt_fin_op
        , ip.cod_doc_op
        , ip.item_id
        , ip.qtd_enc
     from item_produz ip
    where ip.percontrprodestq_id = en_percontrprodestq_id;
   --
   cursor c_ins_cons( en_itemproduz_id in item_produz.id%type ) is
   select ic.item_id item_id_cons
        , ic.item_id_ins item_id_ins
     from insumo_cons ic
    where ic.itemproduz_id = en_itemproduz_id;
   --
begin
   --
   vn_fase := 1;
   --
   i := 0;
   --
   for r_it_prod in c_it_prod
   loop
      --
      exit when c_it_prod%notfound or (c_it_prod%notfound) is null;
      --
      vn_fase := 2;
      --
      i := nvl(i,0) + 1;
      --
      vt_bi_tab_reg_k230(en_indx_k100)(i).reg        := 'K230';
      vt_bi_tab_reg_k230(en_indx_k100)(i).dt_ini_op  := r_it_prod.dt_ini_op;
      vt_bi_tab_reg_k230(en_indx_k100)(i).dt_fin_op  := r_it_prod.dt_fin_op;
      vt_bi_tab_reg_k230(en_indx_k100)(i).cod_doc_op := r_it_prod.cod_doc_op;
      vt_bi_tab_reg_k230(en_indx_k100)(i).cod_item   := pk_csf.fkg_item_cod(en_item_id => r_it_prod.item_id);
      vt_bi_tab_reg_k230(en_indx_k100)(i).qtd_enc    := nvl(r_it_prod.qtd_enc,0);
      --
      vn_fase := 3;
      -- Montar no registro 0200 o item principal
      pkb_monta_reg_0200(en_item_id => r_it_prod.item_id);
      --
      vn_fase := 4;
      -- Verificar se existem itens consumidos e gerar os registros 0200 e 0210
      for r_ins_cons in c_ins_cons( en_itemproduz_id => r_it_prod.itemproduz_id )
      loop
         --
         exit when c_ins_cons%notfound or (c_ins_cons%notfound) is null;
         --
         vn_fase := 5.1;
         -- Montar no registro 0200 o item consumido
         pkb_monta_reg_0200(en_item_id => r_ins_cons.item_id_cons);
         --
         vn_fase := 5.2;
         -- Montar no registro 0210 o item consumido vinculado com o item principal
         pkb_monta_reg_0200( en_item_id     => r_it_prod.item_id
                           , en_item_id_ins => r_ins_cons.item_id_cons );
         --
         vn_fase := 5.3;
         --
         if nvl(r_ins_cons.item_id_ins,0) <> 0 then
            --
            vn_fase := 5.4;
            -- Montar no registro 0200 o item consumido substituto
            pkb_monta_reg_0200( en_item_id => r_ins_cons.item_id_ins );
            --
            vn_fase := 5.5;
            -- Montar no registro 0210 o item consumido substituto vinculado com o item principal
            pkb_monta_reg_0200( en_item_id     => r_it_prod.item_id
                              , en_item_id_ins => r_ins_cons.item_id_ins );
            --
            vn_fase := 5.6;
            -- Montar no registro 0210 o item consumido substituto vinculado com o item consumido
            pkb_monta_reg_0200( en_item_id     => r_ins_cons.item_id_cons
                              , en_item_id_ins => r_ins_cons.item_id_ins );
            --
         end if;
         --
      end loop;
      --
      vn_fase := 6;
      -- Monta o REGISTRO K235: INSUMOS CONSUMIDOS
      pkb_monta_reg_k235( en_itemproduz_id => r_it_prod.itemproduz_id
                        , en_indx_k100     => en_indx_k100
                        , en_indx_k230     => i );
      --
   end loop;
   --
exception
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_monta_reg_k230 fase('||vn_fase||'): '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico.id%type;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id => vn_loggenerico_id
                                          , ev_mensagem       => gv_mensagem_log
                                          , ev_resumo         => null
                                          , en_tipo_log       => erro_de_sistema
                                          , en_referencia_id  => gt_row_abertura_efd.id
                                          , ev_obj_referencia => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end pkb_monta_reg_k230;

-------------------------------------------------------------------------------------------------------

-- Procedimento monta o REGISTRO K220: OUTRAS MOVIMENTAÇÕES INTERNAS ENTRE MERCADORIAS
procedure pkb_monta_reg_k220( en_percontrprodestq_id in per_contr_prod_estq.id%type
                            , en_indx_k100           in number )
is
   --
   vn_fase   number;
   i         pls_integer;
   --
   cursor c_outr is
   select om.dt_mov
        , om.item_id_orig
        , om.item_id_dest
        , om.qtd
        , om.qtd_dest
     from outr_movto_inter_merc om
    where om.percontrprodestq_id = en_percontrprodestq_id;
   --
begin
   --
   vn_fase := 1;
   --
   i := 0;
   --
   for r_outr in c_outr
   loop
      --
      exit when c_outr%notfound or (c_outr%notfound) is null;
      --
      vn_fase := 2;
      --
      i := nvl(i,0) + 1;
      --
      vt_bi_tab_reg_k220(en_indx_k100)(i).reg           := 'K220';
      vt_bi_tab_reg_k220(en_indx_k100)(i).dt_mov        := r_outr.dt_mov;
      vt_bi_tab_reg_k220(en_indx_k100)(i).cod_item_orig := pk_csf.fkg_item_cod(en_item_id => r_outr.item_id_orig);
      vt_bi_tab_reg_k220(en_indx_k100)(i).cod_item_dest := pk_csf.fkg_item_cod(en_item_id => r_outr.item_id_dest);
      vt_bi_tab_reg_k220(en_indx_k100)(i).qtd           := nvl(r_outr.qtd,0);
      vt_bi_tab_reg_k220(en_indx_k100)(i).qtd_dest      := nvl(r_outr.qtd_dest,0);
      --
      vn_fase := 3;
      -- Monta arquivo auxiliar produto
      if nvl(r_outr.item_id_orig,0) > 0 then
         --
         vn_fase := 3.1;
         pkb_monta_reg_0200(en_item_id => r_outr.item_id_orig);
         --
      end if;
      --
      vn_fase := 4;
      -- Monta arquivo auxiliar produto
      if nvl(r_outr.item_id_dest,0) > 0 then
         --
         vn_fase := 4.1;
         pkb_monta_reg_0200(en_item_id => r_outr.item_id_dest);
         --
      end if;
      --
   end loop;
   --
exception
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_monta_reg_k220 fase('||vn_fase||'): '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico.id%type;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id => vn_loggenerico_id
                                          , ev_mensagem       => gv_mensagem_log
                                          , ev_resumo         => null
                                          , en_tipo_log       => erro_de_sistema
                                          , en_referencia_id  => gt_row_abertura_efd.id
                                          , ev_obj_referencia => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end pkb_monta_reg_k220;

-------------------------------------------------------------------------------------------------------

-- Procedimento monta o REGISTRO K215: DESMONTAGEM DE MERCADORIAS - ITENS DE DESTINO
procedure pkb_monta_reg_k215( en_desmonmercitemorig_id in desmon_merc_item_orig.id%type
                            , en_indx_k100             in number
                            , en_indx_k210             in number )
is
   --
   vn_fase   number;
   i         pls_integer;
   --
   cursor c_dest is
   select it.cod_item
        , dm.qtd_des
     from desmon_merc_item_dest dm
        , item it
    where dm.desmonmercitemorig_id = en_desmonmercitemorig_id
      and dm.item_id_dest    = it.id;
   --
begin
   --
   vn_fase := 1;
   --
   i := 0;
   --
   for r_dest in c_dest
   loop
      --
      exit when c_dest%notfound or (c_dest%notfound) is null;
      --
      vn_fase := 2;
      --
      i := nvl(i,0) + 1;
      --
      vt_tri_tab_reg_k215(en_indx_k100)(en_indx_k210)(i).reg          := 'K215';
      vt_tri_tab_reg_k215(en_indx_k100)(en_indx_k210)(i).cod_item_des := r_dest.cod_item;
      vt_tri_tab_reg_k215(en_indx_k100)(en_indx_k210)(i).qtd_des      := r_dest.qtd_des;
      --
   end loop;
   --
exception
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_monta_reg_k215 fase('||vn_fase||'): '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico.id%type;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id => vn_loggenerico_id
                                          , ev_mensagem       => gv_mensagem_log
                                          , ev_resumo         => null
                                          , en_tipo_log       => erro_de_sistema
                                          , en_referencia_id  => gt_row_abertura_efd.id
                                          , ev_obj_referencia => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end pkb_monta_reg_k215;

-------------------------------------------------------------------------------------------------------

-- Procedimento monta o REGISTRO K210:  DESMONTAGEM DE MERCADORIAS - ITEM DE ORIGEM
procedure pkb_monta_reg_k210 ( en_percontrprodestq_id in per_contr_prod_estq.id%type
                             , en_indx_k100           in number )
is
   --
   vn_fase   number;
   i         pls_integer;
   --
   cursor c_desm is
   select dm.id desmonmercitemorig_id
        , dm.dt_ini_os
        , dm.dt_fin_os
        , dm.cod_doc_os
        , it.cod_item
        , dm.qtd_orig
     from desmon_merc_item_orig dm
        , item it
    where dm.percontrprodestq_id  = en_percontrprodestq_id
      and it.id                   = dm.item_id_orig;
   --
begin
   --
   vn_fase := 1;
   --
   i := 0;
   --
   for r_desm in c_desm
   loop
      --
      exit when c_desm%notfound or (c_desm%notfound) is null;
      --
      vn_fase := 2;
      --
      i := nvl(i,0) + 1;
      --
      vt_bi_tab_reg_k210(en_indx_k100)(i).reg           := 'K210';
      vt_bi_tab_reg_k210(en_indx_k100)(i).dt_ini_os     := r_desm.dt_ini_os;
      vt_bi_tab_reg_k210(en_indx_k100)(i).dt_fin_os     := r_desm.dt_fin_os;
      vt_bi_tab_reg_k210(en_indx_k100)(i).cod_doc_os    := r_desm.cod_doc_os;
      vt_bi_tab_reg_k210(en_indx_k100)(i).cod_item_ori  := r_desm.cod_item;
      vt_bi_tab_reg_k210(en_indx_k100)(i).qtd_ori       := r_desm.qtd_orig;
      --
      vn_fase := 3;
      --
      -- Monta o REGISTRO K215:  DESMONTAGEM DE MERCADORIAS - ITENS DE DESTINO
      pkb_monta_reg_k215( en_desmonmercitemorig_id => r_desm.desmonmercitemorig_id
                        , en_indx_k100             => en_indx_k100
                        , en_indx_k210             => i );
      --
   end loop;
   --
exception
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_monta_reg_k210 fase('||vn_fase||'): '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico.id%type;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id => vn_loggenerico_id
                                          , ev_mensagem       => gv_mensagem_log
                                          , ev_resumo         => null
                                          , en_tipo_log       => erro_de_sistema
                                          , en_referencia_id  => gt_row_abertura_efd.id
                                          , ev_obj_referencia => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end pkb_monta_reg_k210;
-------------------------------------------------------------------------------------------------------

-- Procedimento monta o REGISTRO K200: ESTOQUE ESCRITURADO
procedure pkb_monta_reg_k200( en_percontrprodestq_id in per_contr_prod_estq.id%type
                            , en_indx_k100           in number )
is
   --
   vn_fase   number;
   i         pls_integer;
   --
   cursor c_estq is
   select ee.dt_est
        , ee.item_id
        , ee.qtd
        , ee.dm_ind_est
        , ee.pessoa_id
     from estq_escrit ee
    where ee.percontrprodestq_id = en_percontrprodestq_id;
   --
begin
   --
   vn_fase := 1;
   --
   i := 0;
   --
   for r_estq in c_estq
   loop
      --
      exit when c_estq%notfound or (c_estq%notfound) is null;
      --
      vn_fase := 2;
      --
      i := nvl(i,0) + 1;
      --
      vt_bi_tab_reg_k200(en_indx_k100)(i).reg      := 'K200';
      vt_bi_tab_reg_k200(en_indx_k100)(i).dt_est   := r_estq.dt_est;
      vt_bi_tab_reg_k200(en_indx_k100)(i).cod_item := pk_csf.fkg_item_cod(en_item_id => r_estq.item_id);
      vt_bi_tab_reg_k200(en_indx_k100)(i).qtd      := nvl(r_estq.qtd,0);
      vt_bi_tab_reg_k200(en_indx_k100)(i).ind_est  := r_estq.dm_ind_est;
      vt_bi_tab_reg_k200(en_indx_k100)(i).cod_part := pk_csf.fkg_pessoa_cod_part(en_pessoa_id => r_estq.pessoa_id);
      --
      vn_fase := 3;
      -- Monta arquivo auxiliar produto
      if nvl(r_estq.item_id,0) > 0 then
         --
         vn_fase := 3.1;
         pkb_monta_reg_0200(en_item_id => r_estq.item_id);
         --
      end if;
      --
      vn_fase := 4;
      -- Monta arquivo auxiliar
      if nvl(r_estq.pessoa_id,0) > 0 then
         --
         vn_fase := 4.1;
         pkb_monta_reg_0150(en_pessoa_id => r_estq.pessoa_id);
         --
      end if;
      --
   end loop;
   --
exception
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_monta_reg_k200 fase('||vn_fase||'): '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico.id%type;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id => vn_loggenerico_id
                                          , ev_mensagem       => gv_mensagem_log
                                          , ev_resumo         => null
                                          , en_tipo_log       => erro_de_sistema
                                          , en_referencia_id  => gt_row_abertura_efd.id
                                          , ev_obj_referencia => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end pkb_monta_reg_k200;

-------------------------------------------------------------------------------------------------------

-- Procedimento monta o REGISTRO K100: PERÍODO DE APURAÇÃO DO ICMS/IPI
procedure pkb_monta_reg_k100
is
   --
   vn_fase   number;
   i         pls_integer;
   --
   cursor c_per is
   select pc.id percontrprodestq_id
        , pc.dt_ini
        , pc.dt_fin
     from per_contr_prod_estq pc
    where pc.empresa_id = gt_row_abertura_efd.empresa_id
      and pc.dt_ini    >= gt_row_abertura_efd.dt_ini
      and pc.dt_fin    <= gt_row_abertura_efd.dt_fim
      and pc.dm_st_proc = 1; -- 0-Não validado, 1-Validado, 2-Erro de Validação
   --
begin
   --
   vn_fase := 1;
   --
   i := 0;
   --
   for r_per in c_per
   loop
      --
      exit when c_per%notfound or (c_per%notfound) is null;
      --
      vn_fase := 2;
      --
      i := nvl(i,0) + 1;
      --
      vt_tab_reg_k100(i).reg    := 'K100';
      vt_tab_reg_k100(i).dt_ini := r_per.dt_ini;
      vt_tab_reg_k100(i).dt_fin := r_per.dt_fin;
      --
      vt_tab_reg_k001(1).ind_mov := 0; -- 0-com dados, 1-sem dados
      --
      vn_fase := 3;
      -- Monta o REGISTRO K200: ESTOQUE ESCRITURADO
      pkb_monta_reg_k200( en_percontrprodestq_id => r_per.percontrprodestq_id
                        , en_indx_k100           => i );
      --
      vn_fase := 4;
      -- Monta o REGISTRO K210: DESMONTAGEM DE MERCADORIAS - ITEM DE ORIGEM
      pkb_monta_reg_k210( en_percontrprodestq_id => r_per.percontrprodestq_id
                        , en_indx_k100           => i );
      --
      vn_fase := 5;
      -- Monta o REGISTRO K220: OUTRAS MOVIMENTAÇÕES INTERNAS ENTRE MERCADORIAS
      pkb_monta_reg_k220( en_percontrprodestq_id => r_per.percontrprodestq_id
                        , en_indx_k100           => i );
      --
      vn_fase := 6;
      -- Monta o REGISTRO K230: ITENS PRODUZIDOS
      pkb_monta_reg_k230( en_percontrprodestq_id => r_per.percontrprodestq_id
                        , en_indx_k100           => i );
      --
      vn_fase := 7;
      -- Monta o REGISTRO K250: INDUSTRIALIZAÇÃO EFETUADA POR TERCEIROS - ITENS PRODUZIDOS
      pkb_monta_reg_k250( en_percontrprodestq_id => r_per.percontrprodestq_id
                        , en_indx_k100           => i );
      --
      vn_fase := 8;
      -- Monta o REGISTRO K260:
      pkb_monta_reg_k260( en_percontrprodestq_id => r_per.percontrprodestq_id
                        , en_indx_k100           => i );
      --
      vn_fase := 9;
      -- Monta o REGISTRO K270:
      pkb_monta_reg_k270( en_percontrprodestq_id => r_per.percontrprodestq_id
                        , en_indx_k100           => i );
      --
      vn_fase := 10;
      -- Monta o REGISTRO K280:
      pkb_monta_reg_k280( en_percontrprodestq_id => r_per.percontrprodestq_id
                        , en_indx_k100           => i );
      --
      vn_fase := 11;
      if gn_versao >= 112 then -- versão a partir de 01/01/2019
        -- Monta o REGISTRO K290:
        pkb_monta_reg_k290( en_percontrprodestq_id => r_per.percontrprodestq_id
                          , en_indx_k100           => i );
        --
      end if;                        
      --
      vn_fase := 12;
      if gn_versao >= 112 then -- versão a partir de 01/01/2019
        -- Monta o REGISTRO K300:
        pkb_monta_reg_k300( en_percontrprodestq_id => r_per.percontrprodestq_id
                          , en_indx_k100           => i );
        --                        
      end if;
      --
   end loop;
   --
exception
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_monta_reg_k100 fase('||vn_fase||'): '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico.id%type;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id => vn_loggenerico_id
                                          , ev_mensagem       => gv_mensagem_log
                                          , ev_resumo         => null
                                          , en_tipo_log       => erro_de_sistema
                                          , en_referencia_id  => gt_row_abertura_efd.id
                                          , ev_obj_referencia => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end pkb_monta_reg_k100;

-------------------------------------------------------------------------------------------------------

-- Procedimento monta o REGISTRO K001: ABERTURA DO BLOCO K
procedure pkb_monta_reg_k001
is
   --
   vn_fase   number;
   --
begin
   --
   vn_fase := 1;
   vt_tab_reg_k001(1).reg     := 'K001';
   vt_tab_reg_k001(1).ind_mov := 1; -- 0-com dados, 1-sem dados
   -- #69103
   if gt_row_abertura_efd.dm_ind_ativ = '2' then
   --
     vt_tab_reg_k001(1).ind_mov := 1;
     --
   end if;
   --
exception
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_monta_reg_k001 fase('||vn_fase||'): '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico.id%type;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id => vn_loggenerico_id
                                          , ev_mensagem       => gv_mensagem_log
                                          , ev_resumo         => null
                                          , en_tipo_log       => erro_de_sistema
                                          , en_referencia_id  => gt_row_abertura_efd.id
                                          , ev_obj_referencia => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end pkb_monta_reg_k001;

-------------------------------------------------------------------------------------------------------

-- procedimento monta os registros do BLOCO K: CONTROLE DA PRODUÇÃO E DO ESTOQUE
procedure pkb_monta_bloco_k
is
   --
   vn_fase  number := 0;
   --
begin
   --
   vn_fase := 1;
   -- Monta o REGISTRO K001: ABERTURA DO BLOCO K
   pkb_monta_reg_k001;
   --
   -- #69103
   if gt_row_abertura_efd.dm_ind_ativ <> '2' then
     --
     vn_fase := 2;
     -- Monta o REGISTRO K100: PERÍODO DE APURAÇÃO DO ICMS/IPI
     pkb_monta_reg_k100;
     --
   end if;
   --  
   vn_fase := 3;
   -- Monta o REGISTRO K990: ENCERRAMENTO DO BLOCO K
   pkb_monta_reg_k990;
   --
exception
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_monta_bloco_k fase('||vn_fase||'): '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico.id%type;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id => vn_loggenerico_id
                                          , ev_mensagem       => gv_mensagem_log
                                          , ev_resumo         => null
                                          , en_tipo_log       => erro_de_sistema
                                          , en_referencia_id  => gt_row_abertura_efd.id
                                          , ev_obj_referencia => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end pkb_monta_bloco_k;

-------------------------------------------------------------------------------------------------------

-- Monta o REGISTRO H990: ENCERRAMENTO DO BLOCO H
procedure pkb_monta_reg_H990
is
   --
begin
   --
   vt_tab_reg_h990(1).reg := 'H990';
   vt_tab_reg_h990(1).qtd_lin_h := nvl(fkg_qtde_linha_reg_h001,0)
                                   + nvl(fkg_qtde_linha_reg_h005,0)
                                   + nvl(fkg_qtde_linha_reg_h010,0)
                                   + nvl(fkg_qtde_linha_reg_h020,0)
                                   + nvl(fkg_qtde_linha_reg_h990,0);
   --
exception
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_monta_reg_H990: ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end pkb_monta_reg_H990;

-------------------------------------------------------------------------------------------------------
-- Monta o REGISTRO H010: INVENTÁRIO
procedure pkb_monta_reg_H010(en_i in number, ed_dt_inv in date) is
  --
  vn_fase number := 0;
  i       pls_integer;
  j       pls_integer;
  k       pls_integer;
  --
  cursor c_inv is
    select inv.id id,
           inv.item_id item_id,
           inv.unidade_id unidade_id,
           inv.qtde qtd,
           nvl(inv.vl_unit, 0) vl_unit,
           nvl(inv.vl_item, 0) vl_item,
           inv.dm_ind_prop ind_prop,
           inv.pessoa_id,
           trim(inv.txt_compl) txt_compl,
           trim(inv.cod_cta) cod_cta,
           inv.dm_mot_inv,
           nvl(inv.vl_item_ir, 0) vl_item_ir
      from inventario inv
      
     where inv.empresa_id = gt_row_abertura_efd.empresa_id
       and nvl(trunc(inv.dt_ref), trunc(inv.dt_inventario)) between gt_row_abertura_efd.dt_ini and gt_row_abertura_efd.dt_fim
       and last_day(trunc(inv.dt_inventario)) = ed_dt_inv
       and nvl(inv.vl_item, 0) > 0
       and inv.dm_st_proc = 1 -- Validado
     order by inv.dt_inventario, inv.item_id;
  --
  cursor c_h020(en_inventario_id in number) is
    select inv_cst.*
      from invent_cst inv_cst
     where inv_cst.inventario_id = en_inventario_id
     order by inv_cst.id;
  --
begin
  --
  vn_fase := 1;
  --
  i := en_i;
  j := 0;
  --
  for rec_inv in c_inv loop
    exit when c_inv%notfound or(c_inv%notfound) is null;
    --
    vn_fase := 2;
    -- Se o valor do inventario for maior que zero gera o h010.
    --
    vn_fase := 3;
    --
    j := nvl(j, 0) + 1;
    --
    -- Monta o REGISTRO H010: INVENTÁRIO
    vt_bi_tab_reg_h010(i)(j).reg       := 'H010';
    vt_bi_tab_reg_h010(i)(j).cod_item  := pk_csf.fkg_Item_cod(rec_inv.item_id);
    vt_bi_tab_reg_h010(i)(j).unid      := pk_csf.fkg_Unidade_sigla(rec_inv.unidade_id);
    vt_bi_tab_reg_h010(i)(j).qtd       := rec_inv.qtd;
    vt_bi_tab_reg_h010(i)(j).vl_unit   := rec_inv.vl_unit;
    vt_bi_tab_reg_h010(i)(j).vl_item   := rec_inv.vl_item;
    vt_bi_tab_reg_h010(i)(j).ind_prop  := rec_inv.ind_prop;
    vt_bi_tab_reg_h010(i)(j).cod_part  := pk_csf.fkg_pessoa_cod_part(rec_inv.pessoa_id);
    vt_bi_tab_reg_h010(i)(j).txt_compl := rec_inv.txt_compl;
    vt_bi_tab_reg_h010(i)(j).cod_cta   := rec_inv.cod_cta;
    --
    if gn_versao >= 108 then
      vt_bi_tab_reg_h010(i)(j).vl_item_ir :=  rec_inv.vl_item_ir;    
    end if;
    --
    vn_fase := 4;
    --
    if (rec_inv.dm_mot_inv in ('02', '03', '04', '05')) then
      --
      k := 0;
      --
      for rec_inv_cst in c_h020(rec_inv.id) loop
        exit when c_h020%notfound or(c_h020%notfound) is null;
        --
        vn_fase := 5;
        --
        -- Monta o REGISTRO H020: INFORMACOES COMPLEMENTARES DO INVENTÁRIO
        k := nvl(k, 0) + 1;
        --
        vt_tri_tab_reg_h020(i)(j)(k).reg        := 'H020';
        vt_tri_tab_reg_h020(i)(j)(k).cod_st     := rpad(pk_csf.fkg_cod_st_cod(en_id_st => rec_inv_cst.codst_id), 3, '0');
        vt_tri_tab_reg_h020(i)(j)(k).vl_bc_icms := rec_inv_cst.vl_bc_icms;
        vt_tri_tab_reg_h020(i)(j)(k).vl_icms    := rec_inv_cst.vl_icms;
        --
      end loop;
      --
    end if;
    --
    vn_fase := 6;
    --Monta arquivo auxiliar
    if nvl(rec_inv.pessoa_id, 0) > 0 then
      --
      vn_fase := 7;
      --
      pkb_monta_reg_0150(en_pessoa_id => rec_inv.pessoa_id);
      --
    end if;
    --
    vn_fase := 8;
    --
    --Monta arquivo auxiliar produto
    if nvl(rec_inv.item_id, 0) > 0 then
      --
      vn_fase := 9;
      --
      pkb_monta_reg_0200(en_item_id => rec_inv.item_id);
      --
    end if;
    --
    vn_fase := 10;
    --
    --Monta arquivo auxiliar unidade
    if nvl(rec_inv.unidade_id, 0) > 0 then
      --
      vn_fase := 11;
      --
      pkb_monta_reg_0190(en_unidade_id => rec_inv.unidade_id);
      --
    end if;
    --
  end loop;
  --
exception
  when others then
    --
    gv_mensagem_log := 'Erro na pkb_monta_reg_H010 fase(' || vn_fase || '): ' || sqlerrm;
    --
    declare
      vn_loggenerico_id Log_Generico.id%TYPE;
    begin
      --
      pk_log_generico.pkb_log_generico(sn_loggenerico_id => vn_loggenerico_id,
                                       ev_mensagem       => gv_mensagem_log,
                                       ev_resumo         => gv_mensagem_log,
                                       en_tipo_log       => erro_de_sistema,
                                       en_referencia_id  => gt_row_abertura_efd.id,
                                       ev_obj_referencia => 'ABERTURA_EFD');
      --
    exception
      when others then
        null;
    end;
    --
    raise_application_error(-20101, gv_mensagem_log);
    --
end pkb_monta_reg_H010;
-------------------------------------------------------------------------------------------------------

-- Monta o REGISTRO H005: TOTAIS DO INVENTÁRIO
procedure pkb_monta_reg_H005
is
   --
   vn_fase          number := 0;
   i                pls_integer;
   vn_qtde_reg_h005 number;
   --
   cursor c_inv is
   select last_day(trunc(inv.dt_inventario)) dt_inv
        , nvl(sum(nvl(inv.vl_item,0)),0)     vl_item
        , inv.dm_mot_inv                     dm_mot_inv
     from inventario inv
    where inv.empresa_id     = gt_row_abertura_efd.empresa_id
      and nvl(trunc(inv.dt_ref), trunc(inv.dt_inventario)) between gt_row_abertura_efd.dt_ini and gt_row_abertura_efd.dt_fim
      and nvl(inv.vl_item,0) > 0
      and inv.dm_st_proc     = 1 -- Validado
    group by last_day(trunc(inv.dt_inventario))
           , inv.dm_mot_inv
    order by 1;
   --
begin
   --
   vn_fase := 1;
   --
   -- #69103 
   if (gt_row_abertura_efd.dm_ind_ativ = '2'  
      and to_char(gt_row_abertura_efd.dt_fim, 'MM') <> '02' ) then  
     --
     vn_fase := 2;
     --
     goto sair;
     --
   end if;
   --
   vn_fase := 3;
   --
   i := 0;
   --
   vn_qtde_reg_h005 := 0;
   --
   for rec_inv in c_inv loop
      exit when c_inv%notfound or (c_inv%notfound) is null;
      --
      vn_fase := 4;
      --
      -- Monta o REGISTRO H005: TOTAIS DO INVENTÁRIO
      i := nvl(i,0) + 1;
      --
      if gn_versao >= 105 then -- versão válida a partir de julho/2012
      --
        vt_tab_reg_h005(i).reg         := 'H005';
        vt_tab_reg_h005(i).dt_inv      := rec_inv.dt_inv;
        vt_tab_reg_h005(i).vl_inv      := rec_inv.vl_item;
        vt_tab_reg_h005(i).dm_mot_inv  := rec_inv.dm_mot_inv;
      --
      else
      --
        vt_tab_reg_h005(i).reg         := 'H005';
        vt_tab_reg_h005(i).dt_inv      := rec_inv.dt_inv;
        vt_tab_reg_h005(i).vl_inv      := rec_inv.vl_item;
      --
      end if;
      --
      vn_fase := 5;
      --
      if nvl(rec_inv.vl_item, 0) > 0 then
         --
         vn_fase := 6;
         --#69103 se for dm_ind_ativ = 2 nao faz o H010
         if gt_row_abertura_efd.dm_ind_ativ <> '2' then
           --
           pkb_monta_reg_H010( en_i => i
                             , ed_dt_inv => rec_inv.dt_inv);
           --
         end if;
         --
      end if;
      --
   end loop;
   --
   vn_fase := 7;
   --
   -- Tratamento para gerar registro H005 quando não houver movimentação no mês de fevereiro.
   begin
      vn_qtde_reg_h005 := vt_tab_reg_h005.count;
   exception
       when others then
          vn_qtde_reg_h005 := 0;
   end;
   --
   vn_fase := 8;
   -- Monta o REGISTRO H005: TOTAIS DO INVENTÁRIO QUANDO MÊS EM QUESTÃO FOR FEVERIRO
   if nvl(vn_qtde_reg_h005, 0) = 0
      and to_char(gt_row_abertura_efd.dt_fim, 'MM') = '02' then
      --
      vn_fase := 9;
      --
      i := nvl(i,0) + 1;
      --
      if gn_versao >= 105 then
        --
        vt_tab_reg_h005(i).reg     := 'H005';
        vt_tab_reg_h005(i).dt_inv  := ADD_MONTHS(last_day(gt_row_abertura_efd.dt_fim),-2);
        vt_tab_reg_h005(i).vl_inv  := 0;
        vt_tab_reg_h005(i).dm_mot_inv := '01'; -- No final no período
         --
      else
        --
        vt_tab_reg_h005(i).reg     := 'H005';
        vt_tab_reg_h005(i).dt_inv  := gt_row_abertura_efd.dt_fim;
        vt_tab_reg_h005(i).vl_inv  := 0;
        --
      end if;
      --
   end if;
   --
   --#69103
   <<sair>>
   null;
   --
exception
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_monta_reg_H005 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end pkb_monta_reg_H005;

-------------------------------------------------------------------------------------------------------

-- Monta o REGISTRO H001: ABERTURA DO BLOCO H
procedure pkb_monta_reg_H001
is
   --
begin
   --
   vt_tab_reg_h001(1).reg := 'H001';
   --
   if nvl(vt_tab_reg_h005.count,0) > 0 then
      --
      vt_tab_reg_h001(1).ind_mov := 0;
      --
   else
      --
      vt_tab_reg_h001(1).ind_mov := 1;
      --
   end if;
   -- #69103
   if gt_row_abertura_efd.dm_ind_ativ = '2' then
     --
     vt_tab_reg_h001(1).ind_mov := 1;
     --
   end if;
   --
exception
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_monta_reg_H001: ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end pkb_monta_reg_H001;

-------------------------------------------------------------------------------------------------------

-- procedimento monta os registros do BLOCO H: INVENTÁRIO FÍSICO
procedure pkb_monta_bloco_h
is
   --
   vn_fase  number := 0;
   --
begin
   --
   vn_fase := 1;
   -- Monta o REGISTRO H005: TOTAIS DO INVENTÁRIO
   pkb_monta_reg_H005;
   --
   vn_fase := 2;
   -- Monta o REGISTRO H001: ABERTURA DO BLOCO H
   pkb_monta_reg_H001;
   --
   vn_fase := 3;
   -- Monta o REGISTRO H990: ENCERRAMENTO DO BLOCO H
   pkb_monta_reg_H990;
   --
exception
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_monta_bloco_h fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end pkb_monta_bloco_h;

-------------------------------------------------------------------------------------------------------

-- monta o REGISTRO G990: ENCERRAMENTO DO BLOCO G
procedure pkb_monta_reg_g990
is
   --
begin
   --
   vt_tab_reg_g990(1).reg := 'G990';
   vt_tab_reg_g990(1).qtd_lin_g := nvl(fkg_qtde_linha_reg_g001, 0)
                                   + nvl(fkg_qtde_linha_reg_g110, 0)
                                   + nvl(fkg_qtde_linha_reg_g125, 0)
                                   + nvl(fkg_qtde_linha_reg_g126, 0)
                                   + nvl(fkg_qtde_linha_reg_g130, 0)
                                   + nvl(fkg_qtde_linha_reg_g140, 0)
                                   + 1; -- "1" representa o registro G990
   --
exception
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_monta_reg_g990: ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end pkb_monta_reg_g990;

-------------------------------------------------------------------------------------------------------
-- Monta Registro G110 - ICMS - ATIVO PERMANENTE - CIAP
procedure pkb_monta_reg_g110 is
   --
   vn_fase  number := 0;
   i        pls_integer;
   j        pls_integer;
   k        pls_integer;
   l        pls_integer;
   --
  vn_dm_doc_fiscal param_efd_icms_ipi.dm_doc_fiscal%type;
  --
   cursor c_g110 is
   select iac.id
        , iac.empresa_id
        , iac.dt_ini
        , iac.dt_fin
        , iac.vl_saldo_in_icms
        , iac.vl_som_parc
        , iac.vl_trib_exp
        , iac.vl_total
        , iac.vl_icms_aprop
        , iac.ind_per_sai
        , iac.vl_som_icms_oc
     from icms_atperm_ciap iac
    where iac.empresa_id      = gt_row_abertura_efd.empresa_id
      and (trunc(iac.dt_ini) >= gt_row_abertura_efd.dt_ini and trunc(iac.dt_fin) <= gt_row_abertura_efd.dt_fim)
      and iac.dm_st_proc      = 1 -- Validado
    order by iac.dt_ini;
   --
   cursor c_g125( en_icmsatpermciap_id icms_atperm_ciap.id%type ) is
   select ma.id
        , ma.dt_mov
        , ma.dm_tipo_mov
        , ma.vl_imob_icms_op
        , ma.vl_imob_icms_st
        , ma.vl_imob_icms_frt
        , ma.vl_imob_icms_dif
        , ma.num_parc
        , ma.vl_parc_pass
        , ma.bemativoimob_id bemativoimob_id
     from mov_atperm      ma
    where ma.icmsatpermciap_id = en_icmsatpermciap_id
    order by ma.dt_mov;
   --
   cursor c_g126( en_movatperm_id mov_atperm.id%type ) is
   select occ.id
        , occ.dt_ini
        , occ.dt_fim
        , occ.num_parc
        , occ.vl_parc_pass
        , occ.vl_trib_oc
        , occ.vl_total
        , occ.ind_per_sai
        , occ.vl_parc_aprop
     from outro_cred_ciap occ
    where occ.movatperm_id      = en_movatperm_id
    order by occ.id;
   --
   cursor c_g130( en_movatperm_id mov_atperm.id%type ) is
   select madf.id
        , madf.dm_ind_emit
        , madf.modfiscal_id
        , madf.serie
        , madf.num_doc
        , madf.chv_nfe_cte
        , madf.dt_doc
        , madf.pessoa_id
        , madf.num_da    
     from mov_atperm_doc_fiscal  madf
    where madf.movatperm_id      = en_movatperm_id;
   --
   cursor c_g140( en_movatpermdocfiscal_id mov_atperm_doc_fiscal.id%type ) is
   select m.id
        , m.num_item
        , m.item_id
        , m.qtde
        , m.unidade_id
        , m.vl_icms_op_aplicado
        , m.vl_icms_st_aplicado
        , m.vl_icms_frt_aplicado
        , m.vl_icms_dif_aplicado    
     from mov_atperm_doc_fiscal_item m
    where m.movatpermdocfiscal_id = en_movatpermdocfiscal_id
    order by m.num_item;
   --
begin
  --
  vn_fase := 1;
  --
  -- Verifica se o parâmetro documentos fiscais 
  -- encontra-se habilitado para a empresa
  begin
    select p.dm_doc_fiscal
      into vn_dm_doc_fiscal
      from param_efd_icms_ipi p
     where p.empresa_id = gt_row_abertura_efd.empresa_id;
  exception
    when others then
      vn_dm_doc_fiscal := 0;
  end;
  --
  vn_fase := 2;
  --
  i := 0;
  --
  -- Monta Registro G110 - ICMS ¿ Ativo Permanente ¿ CIAP
  for rec_g110 in c_g110 loop
     exit when c_g110%notfound or (c_g110%notfound) is null;
     --
    vn_fase := 2.1;
     --
     i := nvl(i,0) + 1;
     --
    vn_fase := 2.2;
     --
     vt_tab_reg_g110(i).reg            := 'G110';
     vt_tab_reg_g110(i).dt_ini         := rec_g110.dt_ini;
     vt_tab_reg_g110(i).dt_fin         := rec_g110.dt_fin;
     vt_tab_reg_g110(i).saldo_in_icms  := rec_g110.vl_saldo_in_icms;
     vt_tab_reg_g110(i).som_parc       := rec_g110.vl_som_parc;
     vt_tab_reg_g110(i).vl_trib_exp    := rec_g110.vl_trib_exp;
     vt_tab_reg_g110(i).vl_total       := rec_g110.vl_total;
     vt_tab_reg_g110(i).ind_per_sai    := rec_g110.ind_per_sai;
     vt_tab_reg_g110(i).icms_aprop     := rec_g110.vl_icms_aprop;
     vt_tab_reg_g110(i).som_icms_oc    := rec_g110.vl_som_icms_oc;
     --
    vn_fase := 2.3;
    --
     j := 0;
    --
    vn_fase := 3;
    --
    -- Monta Registro G125 - Movimentação de Bem ou Componente do Ativo Imobilizado
     for rec_g125 in c_g125(rec_g110.id) loop
        exit when c_g125%notfound or (c_g125%notfound) is null;
        --
      vn_fase := 3.1;
        --
        j := nvl(j,0) + 1;
        --
      vn_fase := 3.2;
        --
        vt_bi_tab_reg_g125(i)(j).reg               := 'G125';
        vt_bi_tab_reg_g125(i)(j).cod_ind_bem       := pk_csf_ciap.fkg_bemativoimob_cd (rec_g125.bemativoimob_id);
        vt_bi_tab_reg_g125(i)(j).dt_mov            := rec_g125.dt_mov;
        vt_bi_tab_reg_g125(i)(j).tipo_mov          := rec_g125.dm_tipo_mov;
        vt_bi_tab_reg_g125(i)(j).vl_imob_icms_op   := rec_g125.vl_imob_icms_op;
        vt_bi_tab_reg_g125(i)(j).vl_imob_icms_st   := rec_g125.vl_imob_icms_st;
        vt_bi_tab_reg_g125(i)(j).vl_imob_icms_frt  := rec_g125.vl_imob_icms_frt;
        vt_bi_tab_reg_g125(i)(j).vl_imob_icms_dif  := rec_g125.vl_imob_icms_dif;
        vt_bi_tab_reg_g125(i)(j).num_parc          := rec_g125.num_parc;
        vt_bi_tab_reg_g125(i)(j).vl_parc_pass      := rec_g125.vl_parc_pass;
        --
      vn_fase := 3.3;
        --
        --Monta arquivo auxiliar cadastro do imobilizado
        if nvl(rec_g125.bemativoimob_id, 0) > 0 then
           --
        vn_fase := 3.4;
           --
           pkb_monta_reg_0300( en_bemativoimob_id => rec_g125.bemativoimob_id);
           --
        end if;
        --
      vn_fase := 3.5;
        --
        k := 0;
      --
      vn_fase := 4;
      --
      -- Monta Registro G126 - Outros Créditos CIAP
        for rec_g126 in c_g126(rec_g125.id) loop
           exit when c_g126%notfound or (c_g126%notfound) is null;
           --
        vn_fase := 4.1;
           --
           k := nvl(k,0) + 1;
           --
           vt_tri_tab_reg_g126(i)(j)(k).reg               := 'G126';
           vt_tri_tab_reg_g126(i)(j)(k).dt_ini            := rec_g126.dt_ini;
           vt_tri_tab_reg_g126(i)(j)(k).dt_fim            := rec_g126.dt_fim;
           vt_tri_tab_reg_g126(i)(j)(k).num_parc          := rec_g126.num_parc;
           vt_tri_tab_reg_g126(i)(j)(k).vl_parc_pass      := rec_g126.vl_parc_pass;
           vt_tri_tab_reg_g126(i)(j)(k).vl_trib_oc        := rec_g126.vl_trib_oc;
           vt_tri_tab_reg_g126(i)(j)(k).vl_total          := rec_g126.vl_total;
           vt_tri_tab_reg_g126(i)(j)(k).ind_per_sai       := rec_g126.ind_per_sai;
           vt_tri_tab_reg_g126(i)(j)(k).vl_parc_aprop     := rec_g126.vl_parc_aprop;
           --
        end loop;
        --
      vn_fase := 4.2;
      --
        k := 0;
      --
      vn_fase := 5;
      --
      -- Caso o parâmetro documentos fiscais esteja como "NÃO (0)",
      -- não gera os registros G130 e G140
      if (vn_dm_doc_fiscal = 1) or ((vn_dm_doc_fiscal = 0) and rec_g125.dm_tipo_mov in ('MC','IM','IA','AT'))then
        --
        -- Monta Registro G130 - Identificação do Documento Fiscal
        for rec_g130 in c_g130(rec_g125.id) loop
           exit when c_g130%notfound or (c_g130%notfound) is null;
           --
          vn_fase := 5.1;
           --
           k := nvl(k,0) + 1;
           --
          vn_fase := 5.2;
           --
           vt_tri_tab_reg_g130(i)(j)(k).reg               := 'G130';
           vt_tri_tab_reg_g130(i)(j)(k).ind_emit          := rec_g130.dm_ind_emit;
           vt_tri_tab_reg_g130(i)(j)(k).cod_part          := pk_csf.fkg_pessoa_cod_part (rec_g130.pessoa_id);
           vt_tri_tab_reg_g130(i)(j)(k).cod_mod           := pk_csf.fkg_cod_mod_id (rec_g130.modfiscal_id);
           vt_tri_tab_reg_g130(i)(j)(k).serie             := rec_g130.serie;
           vt_tri_tab_reg_g130(i)(j)(k).num_doc           := rec_g130.num_doc;
           vt_tri_tab_reg_g130(i)(j)(k).chv_nfe_cte       := rec_g130.chv_nfe_cte;
           vt_tri_tab_reg_g130(i)(j)(k).dt_doc            := rec_g130.dt_doc;
           --  
          vn_fase := 5.3;
           --        
          -- Versão válida a partir de 01/janeiro/2020      
          if gn_versao >= 113 then
              --       
              vt_tri_tab_reg_g130(i)(j)(k).num_da         := rec_g130.num_da;       
              --
            vn_fase := 5.4;
            --
           end if;        
           --
          vn_fase := 5.5;
           --
           --Monta arquivo auxiliar
           if nvl(rec_g130.pessoa_id, 0) > 0 then
              --
            vn_fase := 5.6;
              --
              pkb_monta_reg_0150( rec_g130.pessoa_id, null, null, rec_g130.chv_nfe_cte);
               --
           end if;
           --
          vn_fase := 5.7;
          --
           l := 0;
          --
          vn_fase := 6;
          --
          -- Monta Registro G140 - Identificação do Item do Documento Fiscal
           for rec_g140 in c_g140(rec_g130.id) loop
              exit when c_g140%notfound or (c_g140%notfound) is null;
              --
            vn_fase := 6.1;
              --
              l := nvl(l,0) + 1;
              --
            vn_fase := 6.2;
              --
              vt_tetra_tab_reg_g140(i)(j)(k)(l).reg               := 'G140';
              vt_tetra_tab_reg_g140(i)(j)(k)(l).num_item          := rec_g140.num_item;
              vt_tetra_tab_reg_g140(i)(j)(k)(l).cod_item          := pk_csf.fkg_Item_cod (rec_g140.item_id);
              --  
            vn_fase := 6.3;
              --        
            -- Versão válida a partir de 01/janeiro/2020        
            if gn_versao >= 113 then
                 --
                 vt_tetra_tab_reg_g140(i)(j)(k)(l).qtde                  := rec_g140.qtde;
                 vt_tetra_tab_reg_g140(i)(j)(k)(l).sigla_unid            := pk_csf.fkg_Unidade_sigla (rec_g140.unidade_id);
                 vt_tetra_tab_reg_g140(i)(j)(k)(l).vl_icms_op_aplicado   := nvl(rec_g140.vl_icms_op_aplicado,0);
                 vt_tetra_tab_reg_g140(i)(j)(k)(l).vl_icms_st_aplicado   := nvl(rec_g140.vl_icms_st_aplicado,0);
                 vt_tetra_tab_reg_g140(i)(j)(k)(l).vl_icms_frt_aplicado  := nvl(rec_g140.vl_icms_frt_aplicado,0);
                 vt_tetra_tab_reg_g140(i)(j)(k)(l).vl_icms_dif_aplicado  := nvl(rec_g140.vl_icms_dif_aplicado,0);
                 --         
              vn_fase := 6.4;
              --     
              end if;
              --        
            vn_fase := 6.5;
              --
              --Monta arquivo auxiliar produto
              if nvl(rec_g140.item_id, 0) > 0 then
                 --
              vn_fase := 6.6;
                 --
                 pkb_monta_reg_0200( en_item_id => rec_g140.item_id);
                 --
              end if;
              --
          end loop; -- c_g140
           --
        end loop; -- c_g130
        --
      end if;
     --
    end loop; -- c_g125
  --
  end loop; -- c_g110
  --
exception
   when others then
      --
    gv_mensagem_log := 'Erro na pk_gera_arq_efd.pkb_monta_reg_g110 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
      vn_loggenerico_id log_generico.id%type;
      begin
         --
      pk_log_generico.pkb_log_generico(sn_loggenerico_id => vn_loggenerico_id,
                                       ev_mensagem       => gv_mensagem_log,
                                       ev_resumo         => gv_mensagem_log,
                                       en_tipo_log       => erro_de_sistema,
                                       en_referencia_id  => gt_row_abertura_efd.id,
                                       ev_obj_referencia => 'ABERTURA_EFD');
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end pkb_monta_reg_g110;

-------------------------------------------------------------------------------------------------------

-- monta o REGISTRO G001: ABERTURA DO BLOCO G
procedure pkb_monta_reg_g001
is
   --
begin
   --
   vt_tab_reg_g001(1).reg := 'G001';
   --
   if nvl(vt_tab_reg_g110.count,0) > 0 then
      --
      vt_tab_reg_g001(1).ind_mov := 0;
      --
   else
      --
      vt_tab_reg_g001(1).ind_mov := 1;
      --
   end if;
   -- #69103
   if gt_row_abertura_efd.dm_ind_ativ = '2' then
     --
     vt_tab_reg_g001(1).ind_mov := 1;
     --
   end if;
   --
exception
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_monta_reg_g001: ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end pkb_monta_reg_g001;

-------------------------------------------------------------------------------------------------------

-- Procedimento monta os registro do BLOCO G - CONTROLE DO CRÉDITO DE ICMS DO ATIVO PERMANENTE - CIAP - modelos -C- e -D-
procedure pkb_monta_bloco_g
is
   --
   vn_fase  number := 0;
   --
begin
   --
   vn_fase := 1;
   --
   if gn_versao >= 103 then -- versão válida a partir de janeiro/2011
      --
      -- #69103
      if gt_row_abertura_efd.dm_ind_ativ <> '2' then
        --
        vn_fase := 2;
        -- monta o REGISTRO G110 - ICMS - ATIVO PERMANENTE - CIAP
        pkb_monta_reg_g110;
        --
      end if;
      --
      vn_fase := 3;
      -- monta o REGISTRO G001: ABERTURA DO BLOCO G
      pkb_monta_reg_g001;
      --
      vn_fase := 4;
      -- monta o REGISTRO G990: ENCERRAMENTO DO BLOCO G
      pkb_monta_reg_g990;
      --
   end if;
   --
exception
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_monta_bloco_g fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end pkb_monta_bloco_g;

-------------------------------------------------------------------------------------------------------

-- Monta o REGISTRO E990: ENCERRAMENTO DO BLOCO E
procedure pkb_monta_reg_E990
is
   --
begin
   --
   vt_tab_reg_e990(1).reg := 'E990';
   vt_tab_reg_e990(1).qtd_lin_e := nvl(fkg_qtde_linha_reg_e001, 0)
                                   + nvl(fkg_qtde_linha_reg_e100, 0)
                                   + nvl(fkg_qtde_linha_reg_e110, 0)
                                   + nvl(fkg_qtde_linha_reg_e111, 0)
                                   + nvl(fkg_qtde_linha_reg_e112, 0)
                                   + nvl(fkg_qtde_linha_reg_e113, 0)
                                   + nvl(fkg_qtde_linha_reg_e115, 0)
                                   + nvl(fkg_qtde_linha_reg_e116, 0)
                                   + nvl(fkg_qtde_linha_reg_e200, 0)
                                   + nvl(fkg_qtde_linha_reg_e210, 0)
                                   + nvl(fkg_qtde_linha_reg_e220, 0)
                                   + nvl(fkg_qtde_linha_reg_e230, 0)
                                   + nvl(fkg_qtde_linha_reg_e240, 0)
                                   + nvl(fkg_qtde_linha_reg_e250, 0)
                                   + nvl(fkg_qtde_linha_reg_e300, 0)
                                   + nvl(fkg_qtde_linha_reg_e310, 0)
                                   + nvl(fkg_qtde_linha_reg_e311, 0)
                                   + nvl(fkg_qtde_linha_reg_e312, 0)
                                   + nvl(fkg_qtde_linha_reg_e313, 0)
                                   + nvl(fkg_qtde_linha_reg_e316, 0)
                                   + nvl(fkg_qtde_linha_reg_e500, 0)
                                   + nvl(fkg_qtde_linha_reg_e510, 0)
                                   + nvl(fkg_qtde_linha_reg_e520, 0)
                                   + nvl(fkg_qtde_linha_reg_e530, 0)
                                   + nvl(fkg_qtde_linha_reg_e531, 0)
                                   + 1; -- "1" representa o registro E990
   --
exception
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_monta_reg_E990: ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end pkb_monta_reg_E990;

-------------------------------------------------------------------------------------------------------

-- Monta o REGISTRO E500: PERÍODO DE APURAÇÃO DO IPI
procedure pkb_monta_reg_E500
is
   --
   vn_fase  number := 0;
   i        pls_integer;
   j        pls_integer;
   k        pls_integer;
   --
   cursor c_e500 is
   select ai.id                      apuracaoipi_id
        , ai.dm_ind_apur             ind_apur
        , ai.dt_inicio               dt_ini
        , ai.dt_fim                  dt_fin
        , ai.vl_saldo_ant_ipi        vl_sd_ant_ipi
        , ai.vl_debito_ipi           vl_deb_ipi
        , ai.vl_credito_ipi          vl_cred_ipi
        , ai.vl_outro_debito_ipi     vl_od_ipi
        , ai.vl_outro_credito_ipi    vl_oc_ipi
        , ai.vl_saldo_credor_ipi     vl_sc_ipi
        , ai.vl_saldo_devedor_ipi    vl_sd_ipi
     from apuracao_ipi ai
    where ai.empresa_id        = gt_row_abertura_efd.empresa_id
      and trunc(ai.dt_inicio) >= gt_row_abertura_efd.dt_ini
      and trunc(ai.dt_fim)    <= gt_row_abertura_efd.dt_fim
      and ai.dm_situacao       = 3 -- Processada
    order by ai.dt_inicio;
   --
   cursor c_e510 ( en_apuracaoipi_id apuracao_ipi.id%type ) is
   select ac.id                 apurconsolipi_id
        , c.cd                  cfop
        , cst.cod_st            cst_ipi
        , ac.vl_cont_ipi        vl_cont_ipi
        , ac.vl_base_calc_ipi   vl_bc_ipi
        , ac.vl_ipi             vl_ipi
     from apur_consol_ipi    ac
        , cfop               c
        , cod_st             cst
    where ac.apuracaoipi_id  = en_apuracaoipi_id
      and c.id               = ac.cfop_id
      and cst.id             = ac.codst_id
    order by c.cd, cst.cod_st;
   --
   cursor c_e530 ( en_apuracaoipi_id apuracao_ipi.id%type ) is
   select aa.id                ajustapuripi_id
        , aa.dm_ind_aj         ind_aj
        , aa.vl_ajuste         vl_aj
        , cod.cod_aj           cod_aj
        , aa.dm_ind_doc        ind_doc
        , aa.num_doc           num_doc
        , aa.descr_aj          descr_aj
     from ajust_apur_ipi   aa
        , cod_aj_apur_ipi  cod
    where aa.apuracaoipi_id  = en_apuracaoipi_id
      and cod.id             = aa.codajapuripi_id;
   --
   cursor c_e531 ( en_ajustapuripi_id ajust_apur_ipi.id%type ) is
   select pe.id pessoa_id
        , pe.cod_part
        , mf.cod_mod
        , ia.serie
        , ia.sub_serie
        , ia.num_doc
        , ia.dt_doc
        , ie.id item_id
        , ie.cod_item
        , ia.vl_ajust_item
        , ia.chv_nfe
     from infor_ajust_apur_ipi_nf ia
        , pessoa                  pe
        , mod_fiscal              mf
        , item                    ie
    where ia.ajustapuripi_id = en_ajustapuripi_id
      and pe.id(+)           = ia.pessoa_id
      and mf.id              = ia.modfiscal_id
      and ie.id(+)           = ia.item_id;
   --
begin
   --
   vn_fase := 1;
   --
   i := 0;

   for rec_e500 in c_e500 loop
      --
      vn_fase := 2;
      --
      i := nvl(i,0) + 1;
      --
      vt_tab_reg_e500(i).reg       := 'E500';
      vt_tab_reg_e500(i).ind_apur  := rec_e500.ind_apur;
      vt_tab_reg_e500(i).dt_ini    := rec_e500.dt_ini;
      vt_tab_reg_e500(i).dt_fin    := rec_e500.dt_fin;
      --
      vn_fase := 3;
      -- Monta o REGISTRO E520: APURAÇÃO DO IPI
      vt_tab_reg_e520(i).reg            := 'E520';
      vt_tab_reg_e520(i).vl_sd_ant_ipi  := rec_e500.vl_sd_ant_ipi;
      vt_tab_reg_e520(i).vl_deb_ipi     := rec_e500.vl_deb_ipi;
      vt_tab_reg_e520(i).vl_cred_ipi    := rec_e500.vl_cred_ipi;
      vt_tab_reg_e520(i).vl_od_ipi      := rec_e500.vl_od_ipi;
      vt_tab_reg_e520(i).vl_oc_ipi      := rec_e500.vl_oc_ipi;
      vt_tab_reg_e520(i).vl_sc_ipi      := rec_e500.vl_sc_ipi;
      vt_tab_reg_e520(i).vl_sd_ipi      := rec_e500.vl_sd_ipi;
      --
      vn_fase := 4;

      -- Monta o REGISTRO E510: CONSOLIDAÇÃO DOS VALORES DO IPI
      j := 0;
      for rec_e510 in c_e510( rec_e500.apuracaoipi_id ) loop
         --
         vn_fase := 5;
         --
         j := nvl(j,0) + 1;
         --
         vt_bi_tab_reg_e510(i)(j).reg          := 'E510';
         vt_bi_tab_reg_e510(i)(j).cfop         := rec_e510.cfop;
         vt_bi_tab_reg_e510(i)(j).cst_ipi      := rec_e510.cst_ipi;
         vt_bi_tab_reg_e510(i)(j).vl_cont_ipi  := rec_e510.vl_cont_ipi;
         vt_bi_tab_reg_e510(i)(j).vl_bc_ipi    := rec_e510.vl_bc_ipi;
         vt_bi_tab_reg_e510(i)(j).vl_ipi       := rec_e510.vl_ipi;
         --
      end loop;
      --
      vn_fase := 6;
      -- Monta o REGISTRO E530: AJUSTES DA APURAÇÃO DO IPI
      j := 0;
      for rec_e530 in c_e530( rec_e500.apuracaoipi_id ) loop
         --
         vn_fase := 7;
         --
         j := nvl(j,0) + 1;
         --
         vt_bi_tab_reg_e530(i)(j).reg       := 'E530';
         vt_bi_tab_reg_e530(i)(j).ind_aj    := rec_e530.ind_aj;
         vt_bi_tab_reg_e530(i)(j).vl_aj     := rec_e530.vl_aj;
         vt_bi_tab_reg_e530(i)(j).cod_aj    := rec_e530.cod_aj;
         vt_bi_tab_reg_e530(i)(j).ind_doc   := rec_e530.ind_doc;
         vt_bi_tab_reg_e530(i)(j).num_doc   := rec_e530.num_doc;
         vt_bi_tab_reg_e530(i)(j).descr_aj  := rec_e530.descr_aj;
         --
         vn_fase := 8;
         -- Monta o REGISTRO E531: INFORMAÇÕES ADICIONAIS DOS AJUSTES DA APURAÇÃO DO IPI - IDENTIFICAÇÃO DOS DOCUMENTOS FISCAIS (01 e 55)
         k := 0;
         for rec_e531 in c_e531( rec_e530.ajustapuripi_id ) loop
            --
            vn_fase := 9;
            --
            k := nvl(k,0) + 1;
            --
            vt_tri_tab_reg_e531(i)(j)(k).reg        := 'E531';
            vt_tri_tab_reg_e531(i)(j)(k).cod_part   := rec_e531.cod_part;
            vt_tri_tab_reg_e531(i)(j)(k).cod_mod    := rec_e531.cod_mod;
            vt_tri_tab_reg_e531(i)(j)(k).ser        := rec_e531.serie;
            vt_tri_tab_reg_e531(i)(j)(k).sub        := rec_e531.sub_serie;
            vt_tri_tab_reg_e531(i)(j)(k).num_doc    := rec_e531.num_doc;
            vt_tri_tab_reg_e531(i)(j)(k).dt_doc     := rec_e531.dt_doc;
            vt_tri_tab_reg_e531(i)(j)(k).cod_item   := rec_e531.cod_item;
            vt_tri_tab_reg_e531(i)(j)(k).vl_aj_item := rec_e531.vl_ajust_item;
            vt_tri_tab_reg_e531(i)(j)(k).chv_nfe    := rec_e531.chv_nfe;
            --
            vn_fase := 9.1;
            --Monta arquivo auxiliar participante
            if nvl(rec_e531.pessoa_id, 0) > 0 then
               --
               vn_fase := 9.2;
               --
               pkb_monta_reg_0150( en_pessoa_id => rec_e531.pessoa_id);
               --
            end if;
            --
            vn_fase := 9.3;
            --
            --Monta arquivo auxiliar produto
            if nvl(rec_e531.item_id, 0) > 0 then
               --
               vn_fase := 9.4;
               --
               pkb_monta_reg_0200( en_item_id => rec_e531.item_id);
               --
            end if;
            --
         end loop;
         --
      end loop;
      --
   end loop;
   --
exception
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_monta_reg_E500 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end pkb_monta_reg_E500;

-------------------------------------------------------------------------------------------------------

-- Monta o REGISTRO E300: PERÍODO DE APURAÇÃO DO ICMS DIFERENCIAL DE ALÍQUOTA - UF ORIGEM/DESTINO EC 87/15
procedure pkb_monta_reg_E300
is
   --
   vn_fase  number := 0;
   i        pls_integer;
   j        pls_integer;
   k        pls_integer;
   --
   cursor c_300 is
   select p.id                perapuricmsdifal_id
        , p.empresa_id
        , p.dt_inicio
        , p.dt_fim
        , est.sigla_estado
        , ai.id               apuricmsdifal_id
        , ai.estado_id
        , ai.dm_situacao
        , ai.dm_ind_mov_difal
        , ai.vl_sld_cred_ant_difal
        , ai.vl_tot_debitos_difal
        , ai.vl_out_deb_difal
        , ai.vl_tot_deb_fcp
        , ai.vl_tot_creditos_difal
        , ai.vl_tot_cred_fcp
        , ai.vl_out_cred_difal
        , ai.vl_sld_dev_ant_difal
        , ai.vl_deducoes_difal
        , ai.vl_recol
        , ai.vl_sld_cred_transportar
        , ai.vl_deb_esp_difal
        , ai.vl_sld_cred_ant_fcp
        , ai.vl_out_deb_fcp
        , ai.vl_out_cred_fcp
        , ai.vl_sld_dev_ant_fcp
        , ai.vl_deducoes_fcp
        , ai.vl_recol_fcp
        , ai.vl_sld_cred_transportar_fcp
        , ai.vl_deb_esp_fcp
     from per_apur_icms_difal p
        , apur_icms_difal     ai
        , estado              est
    where p.empresa_id        = gt_row_abertura_efd.empresa_id
      and trunc(p.dt_inicio) >= gt_row_abertura_efd.dt_ini
      and trunc(p.dt_fim)    <= gt_row_abertura_efd.dt_fim
      and p.dm_tipo = 0 -- Real
      and ai.perapuricmsdifal_id = p.id
      and ai.dm_situacao      = 3 -- Processada
      and est.id              = ai.estado_id
    order by est.sigla_estado, p.dt_inicio;
   --
   cursor c_e311 ( en_apuricmsdifal_id apur_icms_difal.id%type ) is
   select aai.id                      ajustapuricmsdifal_id
        , cod.cod_aj_apur             cod_aj_apur
        , aai.descr_compl_aj          descr_compl_aj
        , aai.vl_aj_apur              vl_aj_apur
     from ajust_apur_icms_difal   aai
        , cod_aj_saldo_apur_icms  cod
    where aai.apuricmsdifal_id = en_apuricmsdifal_id
      and cod.id               = aai.codajsaldoapuricms_id;
   --
   cursor c_e312 ( en_ajustapuricmsdifal_id ajust_apur_icms_difal.id%type ) is
   select inf.num_da            num_da
        , inf.num_proc          num_proc
        , op.cd                 ind_proc
        , inf.descr_proc        proc
        , inf.txt_compl         txt_compl
     from inf_aj_apur_icms_difal   inf
        , orig_proc                op
    where inf.ajustapuricmsdifal_id = en_ajustapuricmsdifal_id
      and op.id(+)                  = inf.origproc_id;
   --
   cursor c_e313 ( en_ajustapuricmsdifal_id ajust_apur_icms_difal.id%type ) is
   select inf.pessoa_id                pessoa_id
        , mf.cod_mod                   cod_mod
        , inf.serie                    ser
        , inf.subserie                 sub
        , inf.nro_doc                  num_doc
        , inf.chv_doce
        , inf.dt_doc                   dt_doc
        , inf.item_id                  item_id
        , inf.vl_aj_item               vl_aj_item
     from INF_AJ_APUR_ICMS_DIFAL_DF  inf
        , mod_fiscal                 mf
    where inf.ajustapuricmsdifal_id  = en_ajustapuricmsdifal_id
      and mf.id                      = inf.modfiscal_id;
   --
   cursor c_e316 ( en_apuricmsdifal_id apur_icms_difal.id%type ) is
   select aor.cd               cod_or
        , obr.vl_or            vl_or
        , obr.dt_vcto          dt_vcto
        , cur.cod_rec          cod_rec
        , obr.num_proc         num_proc
        , op.cd                ind_proc
        , obr.descr_proc       proc
        , obr.txt_compl        txt_compl
        , obr.mes_ref
     from obr_rec_apur_icms_difal obr
        , aj_obrig_rec            aor
        , orig_proc               op
        , cod_rec_uf              cur
    where obr.apuricmsdifal_id  = en_apuricmsdifal_id
      and aor.id                = obr.ajobrigrec_id
      and op.id(+)              = obr.origproc_id
      and cur.id(+)             = obr.codrecuf_id;
   --
begin
   --
   vn_fase := 1;
   --
   i := 0;
   --
   for rec_300 in c_300 loop
      exit when c_300%notfound or (c_300%notfound) is null;
      --
      vn_fase := 2;
      --
      i := nvl(i,0) + 1;
      --
      vt_tab_reg_e300(i).reg     := 'E300';
      vt_tab_reg_e300(i).uf      := rec_300.sigla_estado;
      vt_tab_reg_e300(i).dt_ini  := rec_300.dt_inicio;
      vt_tab_reg_e300(i).dt_fin  := rec_300.dt_fim;
      --
      vn_fase := 3;
      --
      vt_tab_reg_e310(i).reg                         := 'E310';
      vt_tab_reg_e310(i).ind_mov_difal               := rec_300.dm_ind_mov_difal;
      vt_tab_reg_e310(i).vl_sld_cred_ant_difal       := rec_300.vl_sld_cred_ant_difal;
      vt_tab_reg_e310(i).vl_tot_debitos_difal        := rec_300.vl_tot_debitos_difal;
      vt_tab_reg_e310(i).vl_out_deb_difal            := rec_300.vl_out_deb_difal;
      vt_tab_reg_e310(i).vl_tot_creditos_difal       := rec_300.vl_tot_creditos_difal;
      vt_tab_reg_e310(i).vl_out_cred_difal           := rec_300.vl_out_cred_difal;
      vt_tab_reg_e310(i).vl_sld_dev_ant_difal        := rec_300.vl_sld_dev_ant_difal;
      vt_tab_reg_e310(i).vl_deducoes_difal           := rec_300.vl_deducoes_difal;
      vt_tab_reg_e310(i).vl_recol                    := rec_300.vl_recol;
      vt_tab_reg_e310(i).vl_sld_cred_transportar     := rec_300.vl_sld_cred_transportar;
      vt_tab_reg_e310(i).deb_esp_difal               := rec_300.vl_deb_esp_difal;
      vt_tab_reg_e310(i).vl_sld_cred_ant_fcp         := rec_300.vl_sld_cred_ant_fcp;
      vt_tab_reg_e310(i).vl_tot_deb_fcp              := rec_300.vl_tot_deb_fcp;
      vt_tab_reg_e310(i).vl_out_deb_fcp              := rec_300.vl_out_deb_fcp;
      vt_tab_reg_e310(i).vl_tot_cred_fcp             := rec_300.vl_tot_cred_fcp;
      vt_tab_reg_e310(i).vl_out_cred_fcp             := rec_300.vl_out_cred_fcp;
      vt_tab_reg_e310(i).vl_sld_dev_ant_fcp          := rec_300.vl_sld_dev_ant_fcp;
      vt_tab_reg_e310(i).vl_deducoes_fcp             := rec_300.vl_deducoes_fcp;
      vt_tab_reg_e310(i).vl_recol_fcp                := rec_300.vl_recol_fcp;
      vt_tab_reg_e310(i).vl_sld_cred_transportar_fcp := rec_300.vl_sld_cred_transportar_fcp;
      vt_tab_reg_e310(i).deb_esp_fcp                 := rec_300.vl_deb_esp_fcp;
      --
      vn_fase := 4;
      -- Monta REGISTRO E311: AJUSTE/BENEFÍCIO/INCENTIVO DA APURAÇÃO DO ICMS DIFERENCIAL DE ALÍQUOTA UF ORIGEM/DESTINO EC 87/15.
      j := 0;
      for rec_e311 in c_e311( rec_300.apuricmsdifal_id ) loop
         --
         vn_fase := 5;
         --
         j := nvl(j,0) + 1;
         --
         vt_bi_tab_reg_e311(i)(j).reg             := 'E311';
         vt_bi_tab_reg_e311(i)(j).cod_aj_apur     := rec_e311.cod_aj_apur;
         vt_bi_tab_reg_e311(i)(j).descr_compl_aj  := rec_e311.descr_compl_aj;
         vt_bi_tab_reg_e311(i)(j).vl_aj_apur      := rec_e311.vl_aj_apur;
         --
         vn_fase := 6;
         -- Monta o REGISTRO E312: INFORMAÇÕES ADICIONAIS DOS AJUSTES DA APURAÇÃO DO ICMS DIFERENCIAL DE ALÍQUOTA UF ORIGEM/DESTINO EC 87/15.
         k := 0;
         for rec_e312 in c_e312( rec_e311.ajustapuricmsdifal_id ) loop
            --
            vn_fase := 7;
            --
            k := nvl(k,0) + 1;
            --
            vt_tri_tab_reg_e312(i)(j)(k).reg         := 'E312';
            vt_tri_tab_reg_e312(i)(j)(k).num_da      := rec_e312.num_da;
            vt_tri_tab_reg_e312(i)(j)(k).num_proc    := rec_e312.num_proc;
            vt_tri_tab_reg_e312(i)(j)(k).ind_proc    := rec_e312.ind_proc;
            vt_tri_tab_reg_e312(i)(j)(k).proc        := rec_e312.proc;
            vt_tri_tab_reg_e312(i)(j)(k).txt_compl   := rec_e312.txt_compl;
            --
         end loop;
         --
         vn_fase := 8;
         -- Monta o REGISTRO E313: INFORMAÇÕES ADICIONAIS DOS AJUSTES DA APURAÇÃO DO ICMS DIFERENCIAL DE ALÍQUOTA UF ORIGEM/DESTINO EC 87/15 IDENTIFICAÇÃO DOS DOCUMENTOS FISCAIS
         k := 0;
         for rec_e313 in c_e313( rec_e311.ajustapuricmsdifal_id ) loop
            --
            vn_fase := 9;
            --
            k := nvl(k,0) + 1;
            --
            vt_tri_tab_reg_e313(i)(j)(k).reg         := 'E313';
            --			
            if gt_row_abertura_efd.dt_ini >= '01/01/2021' then			
               vt_tri_tab_reg_e313(i)(j)(k).cod_part    := null;			
               if rec_e313.pessoa_id is not null then			
                  vt_tri_tab_reg_e313(i)(j)(k).cod_part    := pk_csf.fkg_pessoa_cod_part (rec_e313.pessoa_id);
               end if;			   
            else
               vt_tri_tab_reg_e313(i)(j)(k).cod_part    := pk_csf.fkg_pessoa_cod_part (rec_e313.pessoa_id);
            end if;			
            --			
            vt_tri_tab_reg_e313(i)(j)(k).cod_mod     := rec_e313.cod_mod;
            vt_tri_tab_reg_e313(i)(j)(k).ser         := rec_e313.ser;
            vt_tri_tab_reg_e313(i)(j)(k).sub         := rec_e313.sub;
            vt_tri_tab_reg_e313(i)(j)(k).num_doc     := rec_e313.num_doc;
            vt_tri_tab_reg_e313(i)(j)(k).chv_doce    := rec_e313.chv_doce;
            vt_tri_tab_reg_e313(i)(j)(k).dt_doc      := rec_e313.dt_doc;
            vt_tri_tab_reg_e313(i)(j)(k).cod_item    := pk_csf.fkg_Item_cod (rec_e313.item_id);
            vt_tri_tab_reg_e313(i)(j)(k).vl_aj_item  := rec_e313.vl_aj_item;
            --
            vn_fase := 9.1;
            --
            --Monta arquivo auxiliar participante
            if nvl(rec_e313.pessoa_id, 0) > 0 then
               --
               vn_fase := 9.2;
               --
               pkb_monta_reg_0150( en_pessoa_id => rec_e313.pessoa_id);
               --
            end if;
            --
            vn_fase := 9.3;
            --
            --Monta arquivo auxiliar produto
            if nvl(rec_e313.item_id, 0) > 0 then
               --
               vn_fase := 9.4;
               --
               pkb_monta_reg_0200( en_item_id => rec_e313.item_id);
               --
            end if;
            --
         end loop;
         --
      end loop; -- fim rec_e311
      --
      vn_fase := 10;
      -- Monta o REGISTRO E316: OBRIGAÇÕES DO ICMS RECOLHIDO OU A RECOLHER - DIFERENCIAL DE ALÍQUOTA UF ORIGEM/DESTINO EC 87/15
      j := 0;
      for rec_e316 in c_e316( rec_300.apuricmsdifal_id ) loop
         --
         vn_fase := 10.1;
         --
         j := nvl(j,0) + 1;
         --
         vt_bi_tab_reg_e316(i)(j).reg        := 'E316';
         vt_bi_tab_reg_e316(i)(j).cod_or     := rec_e316.cod_or;
         vt_bi_tab_reg_e316(i)(j).vl_or      := rec_e316.vl_or;
         vt_bi_tab_reg_e316(i)(j).dt_vcto    := rec_e316.dt_vcto;
         --
         vn_fase := 10.2;
         --
         vt_bi_tab_reg_e316(i)(j).cod_rec    := rec_e316.cod_rec;
         vt_bi_tab_reg_e316(i)(j).num_proc   := substr(trim(rec_e316.num_proc), 1, 15);
         --
         vn_fase := 10.3;
         --
         vt_bi_tab_reg_e316(i)(j).ind_proc   := rec_e316.ind_proc;
         vt_bi_tab_reg_e316(i)(j).proc       := rec_e316.proc;
         --
         vn_fase := 10.4;
         --
         vt_bi_tab_reg_e316(i)(j).txt_compl  := rec_e316.txt_compl;
         vt_bi_tab_reg_e316(i)(j).mes_ref    := rec_e316.mes_ref;
         --
      end loop;  -- fim c_e316
      --
   end loop;
   --
exception
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_monta_reg_E300 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end pkb_monta_reg_E300;

-------------------------------------------------------------------------------------------------------

-- Monta o REGISTRO E200: PERÍODO DA APURAÇÃO DO ICMS - SUBSTITUIÇÃO TRIBUTÁRIA
procedure pkb_monta_reg_E200
is
   --
   vn_fase  number := 0;
   i        pls_integer;
   j        pls_integer;
   k        pls_integer;
   --
   cursor c_e200 is
   select ai.id                        apuracaoicmsst_id
        , es.sigla_estado              uf
        , p.dt_inicio                  dt_ini
        , p.dt_fim                     dt_fin
        , ai.dm_ind_mov_st             ind_mov_st
        , ai.vl_saldo_cred_ant_st      vl_sld_cred_ant_st
        , ai.vl_devol_st               vl_devol_st
        , ai.vl_ressarc_st             vl_ressarc_st
        , ai.vl_outro_cred_st          vl_out_cred_st
        , ai.vl_aj_credito_st          vl_aj_creditos_st
        , ai.vl_retencao_st            vl_retencao_st
        , ai.vl_out_deb_st             vl_out_deb_st
        , ai.vl_ajust_deb_st           vl_aj_debitos_st
        , ai.vl_saldo_dev_ant_st       vl_sld_dev_ant_st
        , ai.vl_deducao_st             vl_deducoes_st
        , ai.vl_icms_recol_st          vl_icms_recol_st
        , ai.vl_saldo_cred_st_transp   vl_sld_cred_st_transportar
        , ai.vl_deb_esp_st             deb_esp_st
     from per_apur_icms_st  p
        , apuracao_icms_st  ai
        , estado            es
    where p.empresa_id        = gt_row_abertura_efd.empresa_id
      and trunc(p.dt_inicio) >= gt_row_abertura_efd.dt_ini
      and trunc(p.dt_fim)    <= gt_row_abertura_efd.dt_fim
      and ai.perapuricmsst_id = p.id
      and ai.dm_situacao      = 3 -- Processada
      and es.id               = ai.estado_id
    order by p.dt_inicio;
   --
   cursor c_e220 ( en_apuracaoicmsst_id apuracao_icms_st.id%type ) is
   select aai.id                      ajustapuracaoicmsst_id
        , cod.cod_aj_apur             cod_aj_apur
        , aai.descr_compl_aj          descr_compl_aj
        , aai.vl_aj_apur              vl_aj_apur
     from ajust_apuracao_icms_st  aai
        , cod_aj_saldo_apur_icms  cod
    where aai.apuracaoicmsst_id = en_apuracaoicmsst_id
      and cod.id                = aai.codajsaldoapuricms_id;
   --
   cursor c_e230 ( en_ajustapuracaoicmsst_id ajust_apuracao_icms_st.id%type ) is
   select inf.num_da            num_da
        , inf.num_proc          num_proc
        , op.cd                 ind_proc
        , inf.descr_proc        proc
        , inf.txt_compl         txt_compl
     from infor_ajust_apur_icms_st   inf
        , orig_proc                  op
    where inf.ajustapuracaoicmsst_id = en_ajustapuracaoicmsst_id
      and op.id(+)                   = inf.origproc_id;
   --
   cursor c_e240 ( en_ajustapuracaoicmsst_id ajust_apuracao_icms_st.id%type ) is
   select mf.cod_mod                   cod_mod
        , inf.serie                    ser
        , inf.sub_serie                sub
        , inf.num_doc                  num_doc
        , inf.dt_doc                   dt_doc
        , inf.vl_ajust_item            vl_aj_item
        , inf.pessoa_id                pessoa_id
        , inf.item_id                  item_id
        , inf.chv_doce
     from infor_ajust_apur_icms_st_nf  inf
        , mod_fiscal                   mf
    where inf.ajustapuracaoicmsst_id = en_ajustapuracaoicmsst_id
      and mf.id                      = inf.modfiscal_id;
   --
   cursor c_e250 ( en_apuracaoicmsst_id apuracao_icms_st.id%type ) is
   select aor.cd               cod_or
        , obr.vl_orig_rec      vl_or
        , obr.dt_vencto_obrig  dt_vcto
        , cur.cod_rec          cod_rec
        , obr.num_proc         num_proc
        , op.cd                ind_proc
        , obr.descr_proc       proc
        , obr.txt_compl        txt_compl
        , obr.mes_ref
     from obrig_rec_apur_icms_st  obr
        , aj_obrig_rec            aor
        , orig_proc               op
        , cod_rec_uf              cur
    where obr.apuracaoicmsst_id = en_apuracaoicmsst_id
      and aor.id                = obr.ajobrigrec_id
      and op.id(+)              = obr.origproc_id
      and cur.id             (+)= obr.codrecuf_id;
   --
begin
   --
   vn_fase := 1;
   --
   i := 0;
   for rec_e200 in c_e200 loop
      --
      vn_fase := 2;
      --
      i := nvl(i,0) + 1;
      --
      vt_tab_reg_e200(i).reg     := 'E200';
      vt_tab_reg_e200(i).uf      := rec_e200.uf;
      vt_tab_reg_e200(i).dt_ini  := rec_e200.dt_ini;
      vt_tab_reg_e200(i).dt_fin  := rec_e200.dt_fin;
      --
      vn_fase := 3;
      -- Monta o REGISTRO E210: APURAÇÃO DO ICMS - SUBSTITUIÇÃO TRIBUTÁRIA
      vt_tab_reg_e210(i).reg                         := 'E210';
      vt_tab_reg_e210(i).ind_mov_st                  := rec_e200.ind_mov_st;
      vt_tab_reg_e210(i).vl_sld_cred_ant_st          := rec_e200.vl_sld_cred_ant_st;
      vt_tab_reg_e210(i).vl_devol_st                 := rec_e200.vl_devol_st;
      vt_tab_reg_e210(i).vl_ressarc_st               := rec_e200.vl_ressarc_st;
      vt_tab_reg_e210(i).vl_out_cred_st              := rec_e200.vl_out_cred_st;
      vt_tab_reg_e210(i).vl_aj_creditos_st           := rec_e200.vl_aj_creditos_st;
      vt_tab_reg_e210(i).vl_retencao_st              := rec_e200.vl_retencao_st;
      vt_tab_reg_e210(i).vl_out_deb_st               := rec_e200.vl_out_deb_st;
      vt_tab_reg_e210(i).vl_aj_debitos_st            := rec_e200.vl_aj_debitos_st;
      vt_tab_reg_e210(i).vl_sld_dev_ant_st           := rec_e200.vl_sld_dev_ant_st;
      vt_tab_reg_e210(i).vl_deducoes_st              := rec_e200.vl_deducoes_st;
      vt_tab_reg_e210(i).vl_icms_recol_st            := rec_e200.vl_icms_recol_st;
      vt_tab_reg_e210(i).vl_sld_cred_st_transportar  := rec_e200.vl_sld_cred_st_transportar;
      vt_tab_reg_e210(i).deb_esp_st                  := rec_e200.deb_esp_st;
      --
      vn_fase := 4;
      --
      if rec_e200.ind_mov_st = 1 then -- 0-Sem operações com ST, 1-Com operações de ST
         --
         vn_fase := 5;
         -- Monta o REGISTRO E220: AJUSTE/BENEFÍCIO/INCENTIVO DA APURAÇÃO DO ICMS SUBSTITUIÇÃO TRIBUTÁRIA.
         j := 0;
         for rec_e220 in c_e220( rec_e200.apuracaoicmsst_id ) loop
            --
            vn_fase := 6;
            --
            j := nvl(j,0) + 1;
            --
            vt_bi_tab_reg_e220(i)(j).reg             := 'E220';
            vt_bi_tab_reg_e220(i)(j).cod_aj_apur     := rec_e220.cod_aj_apur;
            vt_bi_tab_reg_e220(i)(j).descr_compl_aj  := rec_e220.descr_compl_aj;
            vt_bi_tab_reg_e220(i)(j).vl_aj_apur      := rec_e220.vl_aj_apur;
            --
            vn_fase := 7;
            -- Monta o REGISTRO E230: INFORMAÇÕES ADICIONAIS DOS AJUSTES DA APURAÇÃO DO ICMS SUBSTITUIÇÃO TRIBUTÁRIA
            k := 0;
            for rec_e230 in c_e230( rec_e220.ajustapuracaoicmsst_id ) loop
               --
               vn_fase := 8;
               --
               k := nvl(k,0) + 1;
               --
               vt_tri_tab_reg_e230(i)(j)(k).reg         := 'E230';
               vt_tri_tab_reg_e230(i)(j)(k).num_da      := rec_e230.num_da;
               vt_tri_tab_reg_e230(i)(j)(k).num_proc    := rec_e230.num_proc;
               vt_tri_tab_reg_e230(i)(j)(k).ind_proc    := rec_e230.ind_proc;
               vt_tri_tab_reg_e230(i)(j)(k).proc        := rec_e230.proc;
               vt_tri_tab_reg_e230(i)(j)(k).txt_compl   := rec_e230.txt_compl;
               --
            end loop;
            --
            vn_fase := 9;
            -- Monta o REGISTRO E240: INFORMAÇÕES ADICIONAIS DOS AJUSTES DA APURAÇÃO DO ICMS SUBSTITUIÇÃO TRIBUTÁRIA - IDENTIFICAÇÃO DOS DOCUMENTOS FISCAIS
            k := 0;
            for rec_e240 in c_e240( rec_e220.ajustapuracaoicmsst_id ) loop
               --
               vn_fase := 10;
               --
               k := nvl(k,0) + 1;
               --
               vt_tri_tab_reg_e240(i)(j)(k).reg         := 'E240';
               vt_tri_tab_reg_e240(i)(j)(k).cod_part    := pk_csf.fkg_pessoa_cod_part (rec_e240.pessoa_id);
               vt_tri_tab_reg_e240(i)(j)(k).cod_mod     := rec_e240.cod_mod;
               vt_tri_tab_reg_e240(i)(j)(k).ser         := rec_e240.ser;
               vt_tri_tab_reg_e240(i)(j)(k).sub         := rec_e240.sub;
               vt_tri_tab_reg_e240(i)(j)(k).num_doc     := rec_e240.num_doc;
               vt_tri_tab_reg_e240(i)(j)(k).dt_doc      := rec_e240.dt_doc;
               vt_tri_tab_reg_e240(i)(j)(k).cod_item    := pk_csf.fkg_Item_cod (rec_e240.item_id);
               vt_tri_tab_reg_e240(i)(j)(k).vl_aj_item  := rec_e240.vl_aj_item;
               vt_tri_tab_reg_e240(i)(j)(k).chv_doce  := rec_e240.chv_doce;
               --
               vn_fase := 10.1;
               -- Monta arquivo auxiliar participante
               if nvl(rec_e240.pessoa_id, 0) > 0 then
                  --
                  vn_fase := 10.2;
                  --
                  pkb_monta_reg_0150( en_pessoa_id => rec_e240.pessoa_id);
                  --
               end if;
               --
               vn_fase := 10.3;
               -- Monta arquivo auxiliar produto
               if nvl(rec_e240.item_id, 0) > 0 then
                  --
                  vn_fase := 10.4;
                  --
                  pkb_monta_reg_0200( en_item_id => rec_e240.item_id);
                  --
               end if;
               --
            end loop;
            --
         end loop; -- fim rec_e220
         --
         vn_fase := 11;
         -- Monta o REGISTRO E250: OBRIGAÇÕES DO ICMS A RECOLHER - SUBSTITUIÇÃO TRIBUTÁRIA
         j := 0;
         for rec_e250 in c_e250( rec_e200.apuracaoicmsst_id ) loop
            --
            vn_fase := 11.1;
            --
            j := nvl(j,0) + 1;
            --
            vt_bi_tab_reg_e250(i)(j).reg        := 'E250';
            vt_bi_tab_reg_e250(i)(j).cod_or     := rec_e250.cod_or;
            vt_bi_tab_reg_e250(i)(j).vl_or      := rec_e250.vl_or;
            vt_bi_tab_reg_e250(i)(j).dt_vcto    := rec_e250.dt_vcto;
            vt_bi_tab_reg_e250(i)(j).cod_rec    := rec_e250.cod_rec;
            vt_bi_tab_reg_e250(i)(j).num_proc   := rec_e250.num_proc;
            vt_bi_tab_reg_e250(i)(j).ind_proc   := rec_e250.ind_proc;
            vt_bi_tab_reg_e250(i)(j).proc       := rec_e250.proc;
            vt_bi_tab_reg_e250(i)(j).txt_compl  := rec_e250.txt_compl;
            vt_bi_tab_reg_e250(i)(j).mes_ref    := rec_e250.mes_ref;
            --
         end loop;  -- fim c_e250
         --
      end if; -- rec_e200.ind_mov_st = 1 -- 0-Sem operações com ST, 1-Com operações de ST
      --
   end loop; -- fim rec_e200
   --
exception
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_monta_reg_E200 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end pkb_monta_reg_E200;

-------------------------------------------------------------------------------------------------------

-- Monta o REGISTRO E100: PERÍODO DA APURAÇÃO DO ICMS.
procedure pkb_monta_reg_E100
is
   --
   vn_fase  number := 0;
   i        pls_integer;
   j        pls_integer;
   k        pls_integer;
   vv_volta_origem_dado_pessoa  varchar2(1) := null;   
   --
   cursor c_e100 is
   select ai.id                        apuracaoicms_id
        , ai.dt_inicio                 dt_ini
        , ai.dt_fim                    dt_fin
        , ai.vl_total_debito           vl_tot_debitos
        , ai.vl_ajust_debito           vl_aj_debitos
        , ai.vl_total_ajust_deb        vl_tot_aj_debitos
        , ai.vl_estorno_credito        vl_estornos_cred
        , ai.vl_total_credito          vl_tot_creditos
        , ai.vl_ajust_credito          vl_aj_creditos
        , ai.vl_total_ajust_cred       vl_tot_aj_creditos
        , ai.vl_estorno_debido         vl_estornos_deb
        , ai.vl_saldo_credor_ant       vl_sld_credor_ant
        , ai.vl_saldo_apurado          vl_sld_apurado
        , ai.vl_total_deducao          vl_tot_ded
        , ai.vl_icms_recolher          vl_icms_recolher
        , ai.vl_saldo_credor_transp    vl_sld_credor_transportar
        , ai.vl_deb_esp                deb_esp
     from apuracao_icms  ai
    where ai.empresa_id        = gt_row_abertura_efd.empresa_id
      and trunc(ai.dt_inicio) >= gt_row_abertura_efd.dt_ini
      and trunc(ai.dt_fim)    <= gt_row_abertura_efd.dt_fim
      and ai.dm_situacao       = 3 -- Processada
    order by ai.dt_inicio;
   --
   cursor c_e111 ( en_apuracaoicms_id apuracao_icms.id%type ) is
   select aai.id                      ajustapuracaoicms_id
        , aai.codajsaldoapuricms_id
        , cod.cod_aj_apur             cod_aj_apur
        , aai.descr_compl_aj          descr_compl_aj
        , aai.vl_aj_apur              vl_aj_apur
     from ajust_apuracao_icms     aai
        , cod_aj_saldo_apur_icms  cod
    where aai.apuracaoicms_id     = en_apuracaoicms_id
      and cod.id                  = aai.codajsaldoapuricms_id;
   --
   cursor c_e112 ( en_ajustapuracaoicms_id ajust_apuracao_icms.id%type ) is
   select inf.num_da            num_da
        , inf.num_proc          num_proc
        , inf.origproc_id
        , op.cd                 ind_proc
        , inf.descr_proc        proc
        , inf.txt_compl         txt_compl
     from infor_ajust_apur_icms inf
        , orig_proc             op
    where inf.ajustapuracaoicms_id = en_ajustapuracaoicms_id
      and op.id(+)                 = inf.origproc_id;
   --
   cursor c_e113 ( en_ajustapuracaoicms_id ajust_apuracao_icms.id%type ) is
   select mf.cod_mod                 cod_mod
        , inf.serie                  ser
        , inf.sub_serie              sub
        , inf.num_doc                num_doc
        , inf.dt_doc                 dt_doc
        , inf.vl_ajust_item          vl_aj_item
        , inf.pessoa_id              pessoa_id
        , inf.item_id                item_id
        , inf.chv_doce
     from infor_ajust_apur_icms_nf   inf
        , mod_fiscal                 mf
    where inf.ajustapuracaoicms_id = en_ajustapuracaoicms_id
      and mf.id                    = inf.modfiscal_id;
   --
   cursor c_e115 ( en_apuracaoicms_id apuracao_icms.id%type ) is
   select cod.cod_inf_adic       cod_inf_adic
        , inf.vl_inf_adic        vl_inf_adic
        , inf.descr_compl_aj     descr_compl_aj
     from inforadic_apur_icms    inf
        , cod_inf_adic_vlr_decl  cod
    where inf.apuracaoicms_id    = en_apuracaoicms_id
      and cod.id                 = inf.codinfadicvlrdecl_id;
   --
   cursor c_e116 ( en_apuracaoicms_id apuracao_icms.id%type ) is
   select aor.cd               cod_or
        , obr.vl_orig_rec      vl_or
        , obr.dt_vencto_obrig  dt_vcto
        , cur.cod_rec          cod_rec
        , obr.num_proc         num_proc
        , op.cd                ind_proc
        , obr.descr_proc       proc
        , obr.txt_compl        txt_compl
        , obr.mes_ref
     from obrig_rec_apur_icms  obr
        , aj_obrig_rec         aor
        , orig_proc            op
        , cod_rec_uf           cur
    where obr.apuracaoicms_id  = en_apuracaoicms_id
      and aor.id               = obr.ajobrigrec_id
      and op.id(+)             = obr.origproc_id
      and cur.id            (+)= obr.codrecuf_id;
   --
begin
   --
   vn_fase := 1;
   --
   i := 0;
   --
   for rec_e100 in c_e100 loop
      --
      vn_fase := 2;
      --
      i := nvl(i,0) + 1;
      --
      vt_tab_reg_e100(i).reg := 'E100';
      vt_tab_reg_e100(i).dt_ini := rec_e100.dt_ini;
      vt_tab_reg_e100(i).dt_fin := rec_e100.dt_fin;
      --
      vn_fase := 3;
      --
      --#69103
      if gt_row_abertura_efd.dm_ind_ativ = '2' then
        --
        -- Monta o REGISTRO E110: APURAÇÃO DO ICMS - OPERAÇÕES PRÓPRIAS
        vt_tab_reg_e110(i).reg                        := 'E110';
        vt_tab_reg_e110(i).vl_tot_debitos             := 0;
        vt_tab_reg_e110(i).vl_aj_debitos              := 0;
        vt_tab_reg_e110(i).vl_tot_aj_debitos          := 0;
        vt_tab_reg_e110(i).vl_estornos_cred           := 0;
        vt_tab_reg_e110(i).vl_tot_creditos            := 0;
        vt_tab_reg_e110(i).vl_aj_creditos             := 0;
        vt_tab_reg_e110(i).vl_tot_aj_creditos         := 0;
        vt_tab_reg_e110(i).vl_estornos_deb            := 0;
        vt_tab_reg_e110(i).vl_sld_credor_ant          := 0;
        vt_tab_reg_e110(i).vl_sld_apurado             := 0;
        vt_tab_reg_e110(i).vl_tot_ded                 := 0;
        vt_tab_reg_e110(i).vl_icms_recolher           := 0;
        vt_tab_reg_e110(i).vl_sld_credor_transportar  := 0;
        vt_tab_reg_e110(i).deb_esp                    := rec_e100.deb_esp;
        --
      else 
        -- Monta o REGISTRO E110: APURAÇÃO DO ICMS - OPERAÇÕES PRÓPRIAS
        vt_tab_reg_e110(i).reg                        := 'E110';
        vt_tab_reg_e110(i).vl_tot_debitos             := rec_e100.vl_tot_debitos;
        vt_tab_reg_e110(i).vl_aj_debitos              := rec_e100.vl_aj_debitos;
        vt_tab_reg_e110(i).vl_tot_aj_debitos          := rec_e100.vl_tot_aj_debitos;
        vt_tab_reg_e110(i).vl_estornos_cred           := rec_e100.vl_estornos_cred;
        vt_tab_reg_e110(i).vl_tot_creditos            := rec_e100.vl_tot_creditos;
        vt_tab_reg_e110(i).vl_aj_creditos             := rec_e100.vl_aj_creditos;
        vt_tab_reg_e110(i).vl_tot_aj_creditos         := rec_e100.vl_tot_aj_creditos;
        vt_tab_reg_e110(i).vl_estornos_deb            := rec_e100.vl_estornos_deb;
        vt_tab_reg_e110(i).vl_sld_credor_ant          := rec_e100.vl_sld_credor_ant;
        vt_tab_reg_e110(i).vl_sld_apurado             := rec_e100.vl_sld_apurado;
        vt_tab_reg_e110(i).vl_tot_ded                 := rec_e100.vl_tot_ded;
        vt_tab_reg_e110(i).vl_icms_recolher           := rec_e100.vl_icms_recolher;
        vt_tab_reg_e110(i).vl_sld_credor_transportar  := rec_e100.vl_sld_credor_transportar;
        vt_tab_reg_e110(i).deb_esp                    := rec_e100.deb_esp;
        --
        vn_fase := 4;
        --
        j := 0;
        -- Monta o REGISTRO E111: AJUSTE/BENEFÍCIO/INCENTIVO DA APURAÇÃO DO ICMS.
        for rec_e111 in c_e111( rec_e100.apuracaoicms_id ) loop
           --
           vn_fase := 5;
           --
           j := nvl(j,0) + 1;
           --
           vt_bi_tab_reg_e111(i)(j).reg             := 'E111';
           vt_bi_tab_reg_e111(i)(j).cod_aj_apur     := rec_e111.cod_aj_apur;
           vt_bi_tab_reg_e111(i)(j).descr_compl_aj  := rec_e111.descr_compl_aj;
           vt_bi_tab_reg_e111(i)(j).vl_aj_apur      := rec_e111.vl_aj_apur;
           --
           vn_fase := 6;
           --
           k := 0;
           -- Monta o REGISTRO E112: INFORMAÇÕES ADICIONAIS DOS AJUSTES DA APURAÇÃO DO ICMS
           for rec_e112 in c_e112( rec_e111.ajustapuracaoicms_id ) loop
              --
              vn_fase := 7;
              --
              k := nvl(k,0) + 1;
              --
              vt_tri_tab_reg_e112(i)(j)(k).reg        := 'E112';
              vt_tri_tab_reg_e112(i)(j)(k).num_da     := rec_e112.num_da;
              vt_tri_tab_reg_e112(i)(j)(k).num_proc   := rec_e112.num_proc;
              vt_tri_tab_reg_e112(i)(j)(k).ind_proc   := rec_e112.ind_proc;
              vt_tri_tab_reg_e112(i)(j)(k).proc       := rec_e112.proc;
              vt_tri_tab_reg_e112(i)(j)(k).txt_compl  := rec_e112.txt_compl;
              --
           end loop;
           --
           vn_fase := 8;
           --
           k := 0;
           -- REGISTRO E113: INFORMAÇÕES ADICIONAIS DOS AJUSTES DA APURAÇÃO DO ICMS - IDENTIFICAÇÃO DOS DOCUMENTOS FISCAIS.
           for rec_e113 in c_e113( rec_e111.ajustapuracaoicms_id ) loop
              --
              vn_fase := 9;
              --
              k := nvl(k,0) + 1;
              --
              vt_tri_tab_reg_e113(i)(j)(k).reg         := 'E113';
              --			  
              if gt_row_abertura_efd.dt_ini >= '01/01/2021' then			  
                 vt_tri_tab_reg_e113(i)(j)(k).cod_part    := null;			  
                 if rec_e113.pessoa_id is not null then			  
                    vt_tri_tab_reg_e113(i)(j)(k).cod_part    := pk_csf.fkg_pessoa_cod_part (rec_e113.pessoa_id);
                 end if;				 
              else
                 vt_tri_tab_reg_e113(i)(j)(k).cod_part    := pk_csf.fkg_pessoa_cod_part (rec_e113.pessoa_id);
              end if;
              --			  
              vt_tri_tab_reg_e113(i)(j)(k).cod_mod     := rec_e113.cod_mod;
              vt_tri_tab_reg_e113(i)(j)(k).ser         := rec_e113.ser;
              vt_tri_tab_reg_e113(i)(j)(k).sub         := rec_e113.sub;
              vt_tri_tab_reg_e113(i)(j)(k).num_doc     := rec_e113.num_doc;
              vt_tri_tab_reg_e113(i)(j)(k).dt_doc      := rec_e113.dt_doc;
              vt_tri_tab_reg_e113(i)(j)(k).cod_item    := pk_csf.fkg_Item_cod (rec_e113.item_id );
              vt_tri_tab_reg_e113(i)(j)(k).vl_aj_item  := rec_e113.vl_aj_item;
              vt_tri_tab_reg_e113(i)(j)(k).chv_doce  := rec_e113.chv_doce;
              --
              vn_fase := 9.1;
              --
              --Monta arquivo auxiliar participante
              if nvl(rec_e113.pessoa_id, 0) > 0 then
                 --
                 vn_fase := 9.2;
                 --
                 -- Verificando se o parametro está como "DOCUMENTO_FISCAL" colcoar como "CADASTRO_PESSOA" pois conhecimento
                 -- de transporte deve-se pegar do cadastro de pessoa.		 
                 if gn_origem_dado_pessoa = 1 then
                    --
                    gn_origem_dado_pessoa       := 0;			
                    vv_volta_origem_dado_pessoa := 'S';
                    --
                 end if;
                 --		 
                 pkb_monta_reg_0150( en_pessoa_id => rec_e113.pessoa_id);  
                 --
                 -- Se foi trocado pois o parametro estava "DOCUMENTO_FISCAL" retornar o parametro conforme estava.		 
                 if nvl( vv_volta_origem_dado_pessoa, 'N') = 'S' then
                    --
                    gn_origem_dado_pessoa       := 1;
                    vv_volta_origem_dado_pessoa	:= null;				
                    --
                 end if;
                 --
              end if;
              --
              vn_fase := 9.3;
              --
              --Monta arquivo auxiliar produto
              if nvl(rec_e113.item_id, 0) > 0 then
                 --
                 vn_fase := 9.4;
                 --
                 pkb_monta_reg_0200( en_item_id => rec_e113.item_id);
                 --
              end if;
              --
           end loop;
           --
        end loop; -- fim c_e111
        --
        vn_fase := 10;
        --
        j := 0;
        -- Monta o REGISTRO E115: INFORMAÇÕES ADICIONAIS DA APURAÇÃO - VALORES DECLARATÓRIOS
        for rec_e115 in c_e115( rec_e100.apuracaoicms_id ) loop
           --
           vn_fase := 10.1;
           --
           j := nvl(j,0) + 1;
           --
           vt_bi_tab_reg_e115(i)(j).reg             := 'E115';
           vt_bi_tab_reg_e115(i)(j).cod_inf_adic    := rec_e115.cod_inf_adic;
           vt_bi_tab_reg_e115(i)(j).vl_inf_adic     := rec_e115.vl_inf_adic;
           vt_bi_tab_reg_e115(i)(j).descr_compl_aj  := rec_e115.descr_compl_aj;
           --
        end loop;  -- fim c_e115
        --
        vn_fase := 11;
        --
        j := 0;
        -- Monta o REGISTRO E116: OBRIGAÇÕES DO ICMS A RECOLHER - OPERAÇÕES PRÓPRIAS
        for rec_e116 in c_e116( rec_e100.apuracaoicms_id ) loop
           --
           vn_fase := 12;
           --
           j := nvl(j,0) + 1;
           --
           vt_bi_tab_reg_e116(i)(j).reg       := 'E116';
           vt_bi_tab_reg_e116(i)(j).cod_or    := rec_e116.cod_or;
           vt_bi_tab_reg_e116(i)(j).vl_or     := rec_e116.vl_or;
           vt_bi_tab_reg_e116(i)(j).dt_vcto   := rec_e116.dt_vcto;
           vt_bi_tab_reg_e116(i)(j).cod_rec   := rec_e116.cod_rec;
           vt_bi_tab_reg_e116(i)(j).num_proc  := rec_e116.num_proc;
           vt_bi_tab_reg_e116(i)(j).ind_proc  := rec_e116.ind_proc;
           vt_bi_tab_reg_e116(i)(j).proc      := rec_e116.proc;
           vt_bi_tab_reg_e116(i)(j).txt_compl := rec_e116.txt_compl;
           vt_bi_tab_reg_e116(i)(j).mes_ref   := rec_e116.mes_ref;
           --
        end loop;
        --
     end if;
     --
   end loop; -- fim rec_e100
   --
exception
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_monta_reg_E100 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end pkb_monta_reg_E100;

-------------------------------------------------------------------------------------------------------

-- Monta o REGISTRO E001: ABERTURA DO BLOCO E
procedure pkb_monta_reg_E001
is
   --
begin
   --
   vt_tab_reg_e001(1).reg := 'E001';
   --
   if nvl(vt_tab_reg_e100.count,0) > 0
      or nvl(vt_tab_reg_e200.count,0) > 0
      or nvl(vt_tab_reg_e500.count,0) > 0 then
      --
       vt_tab_reg_e001(1).ind_mov := 0;
      --
   else
      --
       vt_tab_reg_e001(1).ind_mov := 1;
      --
   end if;
   --
exception
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_monta_reg_E001: ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end pkb_monta_reg_E001;

-------------------------------------------------------------------------------------------------------

-- Procedimento monta os registro do BLOCO E: APURAÇÃO DO ICMS E DO IPI
procedure pkb_monta_bloco_e
is
   --
   vn_fase  number := 0;
   --
begin
   --
   vn_fase := 1;
   -- Monta o REGISTRO E100: PERÍODO DA APURAÇÃO DO ICMS.
   pkb_monta_reg_E100;
   --
   --#69103 se for dm_ind_ativ = '2' só envia bloco E001,E100,E110(com zero nos valores) e E990
   if gt_row_abertura_efd.dm_ind_ativ <> '2' then
     --
     vn_fase := 2;
     -- Monta o REGISTRO E200: PERÍODO DA APURAÇÃO DO ICMS - SUBSTITUIÇÃO TRIBUTÁRIA
     pkb_monta_reg_E200;
     --
     vn_fase := 2.1;
     -- Monta o REGISTRO E300: PERÍODO DE APURAÇÃO DO ICMS DIFERENCIAL DE ALÍQUOTA - UF ORIGEM/DESTINO EC 87/15
     pkb_monta_reg_E300;
     --
     if gt_row_abertura_efd.dm_ind_ativ = '0' then
     --
     vn_fase := 3;
     -- Monta o REGISTRO E500: PERÍODO DE APURAÇÃO DO IPI
     pkb_monta_reg_E500;
     --
     end if;
     --
   end if;
   --
   vn_fase := 4;
   -- Monta o REGISTRO E001: ABERTURA DO BLOCO E
   pkb_monta_reg_E001;
   --
   vn_fase := 5;
   -- Monta o REGISTRO E990: ENCERRAMENTO DO BLOCO E
   pkb_monta_reg_E990;
   --
exception
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_monta_bloco_e fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end pkb_monta_bloco_e;

-------------------------------------------------------------------------------------------------------

-- Monta o REGISTRO D990: ENCERRAMENTO DO BLOCO D.
procedure pkb_monta_reg_D990
is
   --
begin
   --
   vt_tab_reg_d990(1).reg := 'D990';
   vt_tab_reg_d990(1).qtd_lin_d := nvl(fkg_qtde_linha_reg_d001,0)
                                   + nvl(fkg_qtde_linha_reg_d100,0)
                                   + nvl(fkg_qtde_linha_reg_d110,0)
                                   + nvl(fkg_qtde_linha_reg_d120,0)
                                   + nvl(fkg_qtde_linha_reg_d130,0)
                                   + nvl(fkg_qtde_linha_reg_d140,0)
                                   + nvl(fkg_qtde_linha_reg_d150,0)
                                   + nvl(fkg_qtde_linha_reg_d160,0)
                                   + nvl(fkg_qtde_linha_reg_d161,0)
                                   + nvl(fkg_qtde_linha_reg_d162,0)
                                   + nvl(fkg_qtde_linha_reg_d170,0)
                                   + nvl(fkg_qtde_linha_reg_d180,0)
                                   + nvl(fkg_qtde_linha_reg_d190,0)
                                   + nvl(fkg_qtde_linha_reg_d195,0)
                                   + nvl(fkg_qtde_linha_reg_d197,0)
                                   + nvl(fkg_qtde_linha_reg_d300,0)
                                   + nvl(fkg_qtde_linha_reg_d301,0)
                                   + nvl(fkg_qtde_linha_reg_d310,0)
                                   + nvl(fkg_qtde_linha_reg_d350,0)
                                   + nvl(fkg_qtde_linha_reg_d355,0)
                                   + nvl(fkg_qtde_linha_reg_d360,0)
                                   + nvl(fkg_qtde_linha_reg_d365,0)
                                   + nvl(fkg_qtde_linha_reg_d370,0)
                                   + nvl(fkg_qtde_linha_reg_d390,0)
                                   + nvl(fkg_qtde_linha_reg_d400,0)
                                   + nvl(fkg_qtde_linha_reg_d410,0)
                                   + nvl(fkg_qtde_linha_reg_d411,0)
                                   + nvl(fkg_qtde_linha_reg_d420,0)
                                   + nvl(fkg_qtde_linha_reg_d500,0)
                                   + nvl(fkg_qtde_linha_reg_d510,0)
                                   + nvl(fkg_qtde_linha_reg_d530,0)
                                   + nvl(fkg_qtde_linha_reg_d590,0)
                                   + nvl(fkg_qtde_linha_reg_d600,0)
                                   + nvl(fkg_qtde_linha_reg_d610,0)
                                   + nvl(fkg_qtde_linha_reg_d690,0)
                                   + nvl(fkg_qtde_linha_reg_d695,0)
                                   + nvl(fkg_qtde_linha_reg_d696,0)
                                   + nvl(fkg_qtde_linha_reg_d697,0)
                                   + 1;
   --
exception
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_monta_reg_D990: ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end pkb_monta_reg_D990;

-------------------------------------------------------------------------------------------------------

-- REGISTRO D695: CONSOLIDAÇÃO DA PRESTAÇÃO DE SERVIÇOS - NOTAS DE SERVIÇO DE COMUNICAÇÃO (CÓDIGO 21) E DE SERVIÇO DE
-- TELECOMUNICAÇÃO (CÓDIGO 22)
procedure pkb_monta_reg_D695
is
   --
   vn_fase  number := 0;
   i        pls_integer;
   j        pls_integer;
   k        pls_integer;
   --
   cursor c_d695 is
   select c.id
        , mf.cod_mod
        , c.serie
        , c.nro_ord_ini
        , c.nro_ord_fin
        , c.dt_doc_ini
        , c.dt_doc_fin
        , c.nom_mest
        , c.chv_cod_dig
     from cons_nf_prest_serv c
        , mod_fiscal         mf
    where c.empresa_id        = gt_row_abertura_efd.empresa_id
      and trunc(c.dt_doc_ini) between gt_row_abertura_efd.dt_ini and gt_row_abertura_efd.dt_fim
      and c.dm_st_proc        = 1 -- Validada
      and mf.id               = c.modfiscal_id
      and mf.cod_mod in ('21', '22')
    order by mf.cod_mod
        , c.serie
        , c.nro_ord_ini;
   --
   cursor c_d696 ( en_consnfprestserv_id cons_nf_prest_serv.id%type ) is
   select r.id
        , st.cod_st
        , c.cd cfop
        , r.aliq_icms
        , r.vl_opr
        , r.vl_bc_icms
        , r.vl_icms
        , r.vl_bc_icms_st
        , r.vl_icms_st
        , r.vl_red_bc
        , r.obslanctofiscal_id
     from reg_an_cons_nf_prest_serv r
        , cod_st                    st
        , cfop                      c
    where r.consnfprestserv_id = en_consnfprestserv_id
      and st.id                = r.codst_id
      and c.id                 = r.cfop_id
    order by st.cod_st
        , c.cd
        , r.aliq_icms;
   --
   cursor c_d697 ( en_reganconsnfprestserv_id reg_an_cons_nf_prest_serv.id%type ) is
   select r.id
        , e.sigla_estado
        , r.vl_bc_icms_st
        , r.vl_icms_st
     from reg_an_cons_nf_ps_st_uf r
        , estado                  e
    where r.reganconsnfprestserv_id = en_reganconsnfprestserv_id
      and e.id                      = r.estado_id
    order by e.sigla_estado;
   --
begin
   --
   vn_fase := 1;
   --
   i := 0;
   for rec_d695 in c_d695 loop
      --
      vn_fase := 2;
      --
      i := nvl(i,0) + 1;
      --
      vn_fase := 3;
      --
      vt_tab_reg_d695(i).reg            := 'D695';
      vt_tab_reg_d695(i).cod_mod        := rec_d695.cod_mod;
      vt_tab_reg_d695(i).ser            := rec_d695.serie;
      vt_tab_reg_d695(i).nro_ord_ini    := rec_d695.nro_ord_ini;
      vt_tab_reg_d695(i).nro_ord_fin    := rec_d695.nro_ord_fin;
      vt_tab_reg_d695(i).dt_doc_ini     := rec_d695.dt_doc_ini;
      vt_tab_reg_d695(i).dt_doc_fin     := rec_d695.dt_doc_fin;
      vt_tab_reg_d695(i).nom_mest       := rec_d695.nom_mest;
      vt_tab_reg_d695(i).chv_cod_dig    := rec_d695.chv_cod_dig;
      --
      vn_fase := 4;
      --
      j := 0;
      for rec_d696 in c_d696(rec_d695.id) loop
         --
         vn_fase := 5;
         --
         j := nvl(j,0) + 1;
         --
         vn_fase := 6;
         --
         vt_bi_tab_reg_d696(i)(j).reg            := 'D696';
         vt_bi_tab_reg_d696(i)(j).cst_icms       := rec_d696.cod_st;
         vt_bi_tab_reg_d696(i)(j).cfop           := rec_d696.cfop;
         vt_bi_tab_reg_d696(i)(j).aliq_icms      := rec_d696.aliq_icms;
         vt_bi_tab_reg_d696(i)(j).vl_opr         := rec_d696.vl_opr;
         vt_bi_tab_reg_d696(i)(j).vl_bc_icms     := rec_d696.vl_bc_icms;
         vt_bi_tab_reg_d696(i)(j).vl_icms        := rec_d696.vl_icms;
         vt_bi_tab_reg_d696(i)(j).vl_bc_icms_st  := rec_d696.vl_bc_icms_st;
         vt_bi_tab_reg_d696(i)(j).vl_icms_st     := rec_d696.vl_icms_st;
         vt_bi_tab_reg_d696(i)(j).vl_red_bc      := rec_d696.vl_red_bc;
         vt_bi_tab_reg_d696(i)(j).cod_obs        := pk_csf.fkg_cd_obs_lancto_fiscal (rec_d696.obslanctofiscal_id);
         --
         vn_fase := 6.1;
         -- Monta arquivo auxiliar 0460
         if nvl(rec_d696.obslanctofiscal_id, 0) > 0 then
            --
            vn_fase := 6.2;
            --
            pkb_monta_reg_0460 (en_obslanctofiscal_id => rec_d696.obslanctofiscal_id);
            --
         end if;
         --
         vn_fase := 7;
         --
         k := 0;
         for rec_d697 in c_d697(rec_d696.id) loop
            --
            vn_fase := 8;
            --
            k := nvl(k,0) + 1;
            --
            vn_fase := 9;
            --
            vt_tri_tab_reg_d697(i)(j)(k).reg            := 'D697';
            vt_tri_tab_reg_d697(i)(j)(k).uf             := rec_d697.sigla_estado;
            vt_tri_tab_reg_d697(i)(j)(k).vl_bc_icms_st  := rec_d697.vl_bc_icms_st;
            vt_tri_tab_reg_d697(i)(j)(k).vl_icms_st     := rec_d697.vl_icms_st;
            --
         end loop;
         --
      end loop;
      --
   end loop;
   --
exception
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_monta_reg_D695 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end pkb_monta_reg_D695;

-------------------------------------------------------------------------------------------------------

-- REGISTRO D600: CONSOLIDAÇÃO DA PRESTAÇÃO DE SERVIÇOS - NOTAS DE SERVIÇO DE COMUNICAÇÃO (CÓDIGO 21) E DE SERVIÇO DE
-- TELECOMUNICAÇÃO (CÓDIGO 22)
procedure pkb_monta_reg_D600
is
   --
   vn_fase  number := 0;
   i        pls_integer;
   j        pls_integer;
   --
   cursor c_d600 is
   select cps.id
        , mf.cod_mod
        , cps.cod_mun_ibge
        , cps.serie
        , cps.subserie
        , ccic.cod_cons
        , cps.qtd_cons
        , cps.dt_doc
        , cps.vl_doc
        , cps.vl_desc
        , cps.vl_serv
        , cps.vl_serv_nt
        , cps.vl_terc
        , cps.vl_da
        , cps.vl_bc_icms
        , cps.vl_icms
        , cps.vl_pis
        , cps.vl_cofins
     from cons_prest_serv  cps
        , mod_fiscal       mf
        , cod_cons_item_cont ccic
    where cps.empresa_id    = gt_row_abertura_efd.empresa_id
      and trunc(cps.dt_doc) between gt_row_abertura_efd.dt_ini and gt_row_abertura_efd.dt_fim
      and cps.dm_st_proc    = 1 -- Validada
      and mf.id             = cps.modfiscal_id
      and mf.cod_mod       in ('21', '22')
      and ccic.id           = cps.codconsitemcont_id
    order by mf.cod_mod
        , cps.serie
        , cps.subserie
        , cps.dt_doc;
   --
   cursor c_d610 ( en_consprestserv_id cons_prest_serv.id%type ) is
   select i.id
        , ccic.cod_class
        , i.qtd
        , i.vl_item
        , i.vl_desc
        , st.cod_st
        , c.cd cfop
        , i.aliq_icms
        , i.vl_bc_icms
        , i.vl_icms
        , i.vl_bc_icms_st
        , i.vl_icms_st
        , i.vl_red_bc
        , i.vl_pis
        , i.vl_cofins
        , i.cod_cta
        , i.item_id
        , i.unidade_id
     from item_cons_prest_serv  i
        , class_cons_item_cont  ccic
        , cod_st                st
        , cfop                  c
    where i.consprestserv_id  = en_consprestserv_id
      and ccic.id             = i.classconsitemcont_id
      and st.id               = i.codst_id
      and c.id                = i.cfop_id
    order by i.item_id;
   --
   cursor c_d690 ( en_consprestserv_id cons_prest_serv.id%type ) is
   select r.id
        , st.cod_st
        , c.cd cfop
        , r.aliq_icms
        , r.vl_opr
        , r.vl_bc_icms
        , r.vl_icms
        , r.vl_bc_icms_st
        , r.vl_icms_st
        , r.vl_red_bc
        , r.obslanctofiscal_id
     from reg_an_cons_prest_serv r
        , cod_st                 st
        , cfop                   c
    where r.consprestserv_id = en_consprestserv_id
      and st.id              = r.codst_id
      and c.id               = r.cfop_id
    order by st.cod_st
        , c.cd
        , r.aliq_icms;
   --
begin
   --
   vn_fase := 1;
   --
   i := 0;
   for rec_d600 in c_d600 loop
      --
      vn_fase := 2;
      --
      i := nvl(i,0) + 1;
      --
      vn_fase := 3;
      --
      vt_tab_reg_d600(i).reg            := 'D600';
      vt_tab_reg_d600(i).cod_mod        := rec_d600.cod_mod;
      vt_tab_reg_d600(i).cod_mun        := rec_d600.cod_mun_ibge;
      vt_tab_reg_d600(i).ser            := rec_d600.serie;
      vt_tab_reg_d600(i).sub            := rec_d600.subserie;
      vt_tab_reg_d600(i).cod_cons       := rec_d600.cod_cons;
      vt_tab_reg_d600(i).qtd_cons       := rec_d600.qtd_cons;
      vt_tab_reg_d600(i).dt_doc         := rec_d600.dt_doc;
      vt_tab_reg_d600(i).vl_doc         := rec_d600.vl_doc;
      vt_tab_reg_d600(i).vl_desc        := rec_d600.vl_desc;
      vt_tab_reg_d600(i).vl_serv        := rec_d600.vl_serv;
      vt_tab_reg_d600(i).vl_serv_nt     := rec_d600.vl_serv_nt;
      vt_tab_reg_d600(i).vl_terc        := rec_d600.vl_terc;
      vt_tab_reg_d600(i).vl_da          := rec_d600.vl_da;
      vt_tab_reg_d600(i).vl_bc_icms     := rec_d600.vl_bc_icms;
      vt_tab_reg_d600(i).vl_icms        := rec_d600.vl_icms;
      vt_tab_reg_d600(i).vl_pis         := rec_d600.vl_pis;
      vt_tab_reg_d600(i).vl_cofins      := rec_d600.vl_cofins;
      --
      vn_fase := 4;
      --
      j := 0;
      for rec_d610 in c_d610(rec_d600.id) loop
         --
         vn_fase := 5;
         --
         j := nvl(j,0) + 1;
         --
         vn_fase := 6;
         --
         vt_bi_tab_reg_d610(i)(j).reg            := 'D610';
         vt_bi_tab_reg_d610(i)(j).cod_class      := rec_d610.cod_class;
         vt_bi_tab_reg_d610(i)(j).cod_item       := pk_csf.fkg_Item_cod (rec_d610.item_id);
         vt_bi_tab_reg_d610(i)(j).qtd            := rec_d610.qtd;
         vt_bi_tab_reg_d610(i)(j).unid           := pk_csf.fkg_Unidade_sigla (rec_d610.unidade_id);
         vt_bi_tab_reg_d610(i)(j).vl_item        := rec_d610.vl_item;
         vt_bi_tab_reg_d610(i)(j).vl_desc        := rec_d610.vl_desc;
         vt_bi_tab_reg_d610(i)(j).cst_icms       := rec_d610.cod_st;
         vt_bi_tab_reg_d610(i)(j).cfop           := rec_d610.cfop;
         vt_bi_tab_reg_d610(i)(j).aliq_icms      := rec_d610.aliq_icms;
         vt_bi_tab_reg_d610(i)(j).vl_bc_icms     := rec_d610.vl_bc_icms;
         vt_bi_tab_reg_d610(i)(j).vl_icms        := rec_d610.vl_icms;
         vt_bi_tab_reg_d610(i)(j).vl_bc_icms_st  := rec_d610.vl_bc_icms_st;
         vt_bi_tab_reg_d610(i)(j).vl_icms_st     := rec_d610.vl_icms_st;
         vt_bi_tab_reg_d610(i)(j).vl_red_bc      := rec_d610.vl_red_bc;
         vt_bi_tab_reg_d610(i)(j).vl_pis         := rec_d610.vl_pis;
         vt_bi_tab_reg_d610(i)(j).vl_cofins      := rec_d610.vl_cofins;
         vt_bi_tab_reg_d610(i)(j).cod_cta        := rec_d610.cod_cta;
         --
         vn_fase := 6.1;
         --
         --Monta arquivo auxiliar unidade
         if nvl(rec_d610.unidade_id, 0) > 0 then
            --
            vn_fase := 6.2;
            --
            pkb_monta_reg_0190( en_unidade_id => rec_d610.unidade_id);
            --
         end if;
         --
         vn_fase := 6.3;
         --
         --Monta arquivo auxiliar produto
         if nvl(rec_d610.item_id, 0) > 0 then
            --
            vn_fase := 6.4;
            --
            pkb_monta_reg_0200( en_item_id => rec_d610.item_id);
            --
         end if;
         --
         vn_fase := 6.5;
            --
            --Monta arquivo auxiliar para conversao de unidade
            if nvl(rec_d610.item_id, 0) > 0 and nvl(rec_d610.unidade_id, 0) > 0 then
               --
               vn_fase := 6.6;
               --
               pkb_monta_reg_0220 ( en_item_id => rec_d610.item_id
                                  , en_unidade_id => rec_d610.unidade_id );
               --
            end if;
         --
      end loop;
      --
      vn_fase := 7;
      --
      j := 0;
      for rec_d690 in c_d690(rec_d600.id) loop
         --
         vn_fase := 8;
         --
         j := nvl(j,0) + 1;
         --
         vn_fase := 9;
         --
         vt_bi_tab_reg_d690(i)(j).reg            := 'D690';
         vt_bi_tab_reg_d690(i)(j).cst_icms       := rec_d690.cod_st;
         vt_bi_tab_reg_d690(i)(j).cfop           := rec_d690.cfop;
         vt_bi_tab_reg_d690(i)(j).aliq_icms      := rec_d690.aliq_icms;
         vt_bi_tab_reg_d690(i)(j).vl_opr         := rec_d690.vl_opr;
         vt_bi_tab_reg_d690(i)(j).vl_bc_icms     := rec_d690.vl_bc_icms;
         vt_bi_tab_reg_d690(i)(j).vl_icms        := rec_d690.vl_icms;
         vt_bi_tab_reg_d690(i)(j).vl_bc_icms_st  := rec_d690.vl_bc_icms_st;
         vt_bi_tab_reg_d690(i)(j).vl_icms_st     := rec_d690.vl_icms_st;
         vt_bi_tab_reg_d690(i)(j).vl_red_bc      := rec_d690.vl_red_bc;
         vt_bi_tab_reg_d690(i)(j).cod_obs        := pk_csf.fkg_cd_obs_lancto_fiscal (rec_d690.obslanctofiscal_id);
         --
         vn_fase := 9.1;
         -- Monta arquivo auxiliar 0460
         if nvl(rec_d690.obslanctofiscal_id, 0) > 0 then
             --
             vn_fase := 9.2;
             --
             pkb_monta_reg_0460 (en_obslanctofiscal_id => rec_d690.obslanctofiscal_id);
             --
         end if;
         --
      end loop;
      --
   end loop;
   --
exception
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_monta_reg_D600 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end pkb_monta_reg_D600;

-------------------------------------------------------------------------------------------------------

-- REGISTRO D500: NOTA FISCAL DE SERVIÇO DE COMUNICAÇÃO (CÓDIGO 21) E NOTA FISCAL DE SERVIÇO DE TELECOMUNICAÇÃO (CÓDIGO 22)
procedure pkb_monta_reg_D500
is
   --
   vn_fase       number := 0;
   vn_unidade_id number;
   i             pls_integer;
   j             pls_integer;
   --
   vv_cod_sit    sit_docto.cd%type;
   --
   cursor c_nf is
   select nf.id                 notafiscal_id
        , nf.dm_ind_oper        ind_oper
        , nf.dm_ind_emit        ind_emit
        , mf.cod_mod            cod_mod
        , nf.sitdocto_id
        , nf.serie              ser
        , nf.sub_serie          sub
        , nf.nro_nf             num_doc
        , nf.dt_emiss           dt_doc
        , nf.dt_sai_ent         dt_a_p
        , t.vl_total_nf         vl_doc
        , t.vl_desconto         vl_desc
        , nvl(t.vl_servico,0)   vl_serv
        , t.vl_serv_nao_trib    vl_serv_nt
        , nvl(t.vl_terc,0)      vl_terc                  
        , t.vl_outra_despesas   vl_da
        , t.vl_base_calc_icms   vl_bc_icms
        , t.vl_imp_trib_icms    vl_icms
        , t.vl_imp_trib_pis     vl_pis
        , t.vl_imp_trib_cofins  vl_cofins
        , nf.cod_cta            cod_cta
        , nf.dm_tp_assinante
        , nf.pessoa_id
     from TMP_NOTA_FISCAL         nf
        , mod_fiscal          mf
        , TMP_NOTA_FISCAL_TOTAL   t
    where nf.empresa_id      = gt_row_abertura_efd.empresa_id
      and nf.dm_st_proc     in (4, 7, 8)
      and nf.dm_arm_nfe_terc = 0
      and ((nf.dm_ind_emit = 1 and trunc(nvl(nf.dt_sai_ent,nf.dt_emiss)) between trunc(gt_row_abertura_efd.dt_ini) and trunc(gt_row_abertura_efd.dt_fim))
            or
           (nf.dm_ind_emit = 0 and nf.dm_ind_oper = 1 and trunc(nf.dt_emiss) between trunc(gt_row_abertura_efd.dt_ini) and trunc(gt_row_abertura_efd.dt_fim))
            or
           (nf.dm_ind_emit = 0 and nf.dm_ind_oper = 0 and gn_dm_dt_escr_dfepoe = 0 and trunc(nf.dt_emiss) between trunc(gt_row_abertura_efd.dt_ini) and trunc(gt_row_abertura_efd.dt_fim))
            or
           (nf.dm_ind_emit = 0 and nf.dm_ind_oper = 0 and gn_dm_dt_escr_dfepoe = 1 and trunc(nvl(nf.dt_sai_ent,nf.dt_emiss)) between trunc(gt_row_abertura_efd.dt_ini) and trunc(gt_row_abertura_efd.dt_fim)))
      and mf.id              = nf.modfiscal_id
      and mf.cod_mod        in ('21', '22')
      and t.notafiscal_id    = nf.id
    order by nf.dm_ind_oper
           , nf.dm_ind_emit
           , mf.cod_mod
           , nf.serie
           , nf.nro_nf;
   --
   cursor c_d510 ( en_notafiscal_id nota_fiscal.id%type ) is
   select it.notafiscal_id     
        , it.id                itemnf_id
        , it.nro_item          num_item
        , ccic.cod_class
        , it.qtde_trib         qtd
        , it.unid_trib         unid
        , it.vl_unit_trib      vl_item
        , it.vl_desc           vl_desc
        , icms.cst_icms
        , it.cfop
        , icms.vl_bc_icms
        , icms.aliq_icms
        , icms.vl_icms
        , icms_st.vl_bc_icms_st
        , icms_st.vl_icms_st
        , it.dm_ind_rec_com
        , pis.vl_pis
        , cofins.vl_cofins
        , it.cod_cta
        , it.pessoa_id
        , it.item_id
     from TMP_ITEM_NOTA_FISCAL     it
        , class_cons_item_cont ccic
        , ( select imp.itemnf_id
                 , lpad(cst.cod_st, 3, '0')  cst_icms
                 , imp.vl_base_calc          vl_bc_icms
                 , imp.aliq_apli             aliq_icms
                 , imp.vl_imp_trib           vl_icms
              from TMP_IMP_ITEMNF    imp
                 , tipo_imposto  ti
                 , cod_st        cst
             where ti.id         = imp.tipoimp_id
               and ti.cd         = 1
               and cst.id        = imp.codst_id ) icms
        , ( select imp.itemnf_id
                 , imp.vl_base_calc          vl_bc_icms_st
                 , imp.aliq_apli             aliq_st
                 , imp.vl_imp_trib           vl_icms_st
              from TMP_IMP_ITEMNF    imp
                 , tipo_imposto  ti
             where ti.id         = imp.tipoimp_id
               and ti.cd         = 2 ) icms_st
        , ( select imp.itemnf_id
                 , lpad(cst.cod_st, 2, '0')  cst_pis
                 , imp.vl_base_calc          vl_bc_pis
                 , imp.aliq_apli             aliq_pis
                 , imp.qtde_base_calc_prod   quant_bc_pis
                 , imp.vl_aliq_prod          vl_aliq_pis
                 , imp.vl_imp_trib           vl_pis
              from TMP_IMP_ITEMNF    imp
                 , tipo_imposto  ti
                 , cod_st        cst
             where ti.id         = imp.tipoimp_id
               and ti.cd         = 4
               and cst.id        = imp.codst_id ) pis
        , ( select imp.itemnf_id
                 , lpad(cst.cod_st, 2, '0')  cst_cofins
                 , imp.vl_base_calc          vl_bc_cofins
                 , imp.aliq_apli             aliq_cofins
                 , imp.qtde_base_calc_prod   quant_bc_cofins
                 , imp.vl_aliq_prod          vl_aliq_cofins
                 , imp.vl_imp_trib           vl_cofins
              from TMP_IMP_ITEMNF    imp
                 , tipo_imposto  ti
                 , cod_st        cst
             where ti.id         = imp.tipoimp_id
               and ti.cd         = 5
               and cst.id        = imp.codst_id ) cofins
    where it.notafiscal_id      = en_notafiscal_id
      and ccic.id               = it.classconsitemcont_id
      and icms.itemnf_id(+)     = it.id
      and icms_st.itemnf_id(+)  = it.id
      and pis.itemnf_id(+)      = it.id
      and cofins.itemnf_id(+)   = it.id
    order by it.nro_item;
   --
   cursor c_d530 ( en_notafiscal_id nota_fiscal.id%type ) is
   select t.id
        , t.dm_ind_serv
        , t.dt_ini_serv
        , t.dt_fin_serv
        , t.per_fiscal
        , t.cod_area
        , t.terminal
     from nf_term_fat t
    where t.notafiscal_id = en_notafiscal_id
    order by t.id;
   --
   cursor c_d590 ( en_notafiscal_id nota_fiscal.id%type ) is
   select (res.dm_orig_merc || cst.cod_st) cst_icms
        , c.cd                     cfop
        , res.aliq_icms            aliq_icms
        , res.vl_operacao          vl_opr
        , res.vl_bc_icms           vl_bc_icms
        , res.vl_icms              vl_icms
        , res.vl_bc_icms_st        vl_bc_icms_st
        , res.vl_icms_st           vl_icms_st
        , res.vl_red_bc_icms       vl_red_bc
        , res.obslanctofiscal_id
     from TMP_NFREGIST_ANALIT    res
        , cod_st             cst
        , cfop               c
    where res.notafiscal_id = en_notafiscal_id
      and cst.id            = res.codst_id
      and c.id              = res.cfop_id
    order by 1, 2, 3;
   --
begin
   --
   vn_fase := 1;
   --
   i := 0;
   --
   for rec_d500 in c_nf loop
      exit when c_nf%notfound or (c_nf%notfound) is null;
      --
      vn_fase := 2;
      --
      i := nvl(i,0) + 1;
      -- -------------------------------------------------------------------------------------------------------
      -- Exceção 1: Para documentos com código de situação (campo COD_SIT) cancelado (código -02-) ou cancelado
      -- extemporâneo (código -03-), preencher somente os campos REG, IND_OPER, IND_EMIT, COD_MOD, COD_SIT, SER,
      -- NUM_DOC e DT_DOC. Demais campos deverão ser informados com conteúdo VAZIO -||-.
      -- -------------------------------------------------------------------------------------------------------
      -- Exceção 2: Notas Fiscais emitidas por regime especial ou norma específica (campo COD_SIT igual a -08-). Para
      -- documentos fiscais emitidos com base em regime especial ou norma específica, deverão ser apresentados os registros D500
      -- e D590, obrigatoriamente, e os demais registros -filhos-, se estes forem exigidos pela legislação fiscal. Nesta situação, no
      -- registro D500, somente os campos REG, IND_OPER, IND_EMIT, COD_PART, COD_MOD, COD_SIT, SER,
      -- NUM_DOC e DT_DOC, são obrigatórios. Os demais campos são facultativos (se forem preenchidos, serão validados e
      -- aplicadas as regras de campos existentes). No registro D590 devrão ser observadas os campos obrigatórios.
      -- -------------------------------------------------------------------------------------------------------
      --
      vv_cod_sit := pk_csf.fkg_Sit_Docto_cd ( en_sitdoc_id => rec_d500.sitdocto_id );
      --
      vn_fase := 3;
      --
      if vv_cod_sit in ('02', '03', '04', '05') then
         --
         vn_fase := 4;
         --
         vt_tab_reg_d500(i).reg         := 'D500';
         vt_tab_reg_d500(i).ind_oper    := rec_d500.ind_oper;
         vt_tab_reg_d500(i).ind_emit    := rec_d500.ind_emit;
         vt_tab_reg_d500(i).cod_part    := null;--pk_csf.fkg_pessoa_cod_part (rec_d500.pessoa_id);
         vt_tab_reg_d500(i).cod_mod     := rec_d500.cod_mod;
         vt_tab_reg_d500(i).cod_sit     := vv_cod_sit;
         vt_tab_reg_d500(i).ser         := rec_d500.ser;
         vt_tab_reg_d500(i).sub         := null;--rec_d500.sub;
         vt_tab_reg_d500(i).num_doc     := rec_d500.num_doc;
         vt_tab_reg_d500(i).dt_doc      := rec_d500.dt_doc;
         vt_tab_reg_d500(i).dt_a_p      := null;
         vt_tab_reg_d500(i).vl_doc      := null;
         vt_tab_reg_d500(i).vl_desc     := null;
         vt_tab_reg_d500(i).vl_serv     := null;
         vt_tab_reg_d500(i).vl_serv_nt  := null;
         vt_tab_reg_d500(i).vl_terc     := null;
         vt_tab_reg_d500(i).vl_da       := null;
         vt_tab_reg_d500(i).vl_bc_icms  := null;
         vt_tab_reg_d500(i).vl_icms     := null;
         vt_tab_reg_d500(i).cod_inf     := null;
         vt_tab_reg_d500(i).vl_pis      := null;
         vt_tab_reg_d500(i).vl_cofins   := null;
         vt_tab_reg_d500(i).cod_cta     := null;
         vt_tab_reg_d500(i).tp_assinante     := null;
         --
      elsif vv_cod_sit in ('06', '07', '08') then
         --
         vn_fase := 5;
         --
         vt_tab_reg_d500(i).reg         := 'D500';
         vt_tab_reg_d500(i).ind_oper    := rec_d500.ind_oper;
         vt_tab_reg_d500(i).ind_emit    := rec_d500.ind_emit;
         --vt_tab_reg_d500(i).cod_part    := pk_csf.fkg_pessoa_cod_part (rec_d500.pessoa_id);
         vt_tab_reg_d500(i).cod_part    := pk_csf_api_efd.fkb_ret_cnpjcpj_ibge_cod_part ( en_pessoa_id          => rec_d500.pessoa_id
                                                                                        , en_tipo_retorna       => 1  -- 0-Pessoa_id / 1-Cod_Part  
                                                                                        , en_origem_dado_pessoa => gn_origem_dado_pessoa
                                                                                        , en_notafiscal_id      => rec_d500.notafiscal_id );     
       
         vt_tab_reg_d500(i).cod_mod     := rec_d500.cod_mod;
         vt_tab_reg_d500(i).cod_sit     := vv_cod_sit;
         vt_tab_reg_d500(i).ser         := rec_d500.ser;
         vt_tab_reg_d500(i).sub         := rec_d500.sub;
         vt_tab_reg_d500(i).num_doc     := rec_d500.num_doc;
         vt_tab_reg_d500(i).dt_doc      := rec_d500.dt_doc;
         vt_tab_reg_d500(i).dt_a_p      := rec_d500.dt_a_p;
         vt_tab_reg_d500(i).vl_doc      := rec_d500.vl_doc;
         vt_tab_reg_d500(i).vl_desc     := rec_d500.vl_desc;
         vt_tab_reg_d500(i).vl_serv     := rec_d500.vl_serv;
         vt_tab_reg_d500(i).vl_serv_nt  := rec_d500.vl_serv_nt;
         vt_tab_reg_d500(i).vl_terc     := rec_d500.vl_terc;
         vt_tab_reg_d500(i).vl_da       := rec_d500.vl_da;
         vt_tab_reg_d500(i).vl_bc_icms  := null;
         vt_tab_reg_d500(i).vl_icms     := null;
         vt_tab_reg_d500(i).cod_inf     := null;
         vt_tab_reg_d500(i).vl_pis      := null;
         vt_tab_reg_d500(i).vl_cofins   := null;
         vt_tab_reg_d500(i).cod_cta     := null;
         vt_tab_reg_d500(i).tp_assinante     := null;
         --
      else
         --
         vn_fase := 6;
         --
         vt_tab_reg_d500(i).reg         := 'D500';
         vt_tab_reg_d500(i).ind_oper    := rec_d500.ind_oper;
         vt_tab_reg_d500(i).ind_emit    := rec_d500.ind_emit;
         --vt_tab_reg_d500(i).cod_part    := pk_csf.fkg_pessoa_cod_part (rec_d500.pessoa_id);
         vt_tab_reg_d500(i).cod_part    := pk_csf_api_efd.fkb_ret_cnpjcpj_ibge_cod_part ( en_pessoa_id          => rec_d500.pessoa_id
                                                                                        , en_tipo_retorna       => 1  -- 0-Pessoa_id / 1-Cod_Part    
                                                                                        , en_origem_dado_pessoa => gn_origem_dado_pessoa                                            
                                                                                        , en_notafiscal_id      => rec_d500.notafiscal_id );                                       
         vt_tab_reg_d500(i).cod_mod     := rec_d500.cod_mod;
         vt_tab_reg_d500(i).cod_sit     := vv_cod_sit;
         vt_tab_reg_d500(i).ser         := rec_d500.ser;
         vt_tab_reg_d500(i).sub         := rec_d500.sub;
         vt_tab_reg_d500(i).num_doc     := rec_d500.num_doc;
         vt_tab_reg_d500(i).dt_doc      := rec_d500.dt_doc;
         vt_tab_reg_d500(i).dt_a_p      := rec_d500.dt_a_p;
         vt_tab_reg_d500(i).vl_doc      := rec_d500.vl_doc;
         vt_tab_reg_d500(i).vl_desc     := rec_d500.vl_desc;
         vt_tab_reg_d500(i).vl_serv     := rec_d500.vl_serv;
         vt_tab_reg_d500(i).vl_serv_nt  := rec_d500.vl_serv_nt;
         vt_tab_reg_d500(i).vl_terc     := rec_d500.vl_terc;
         vt_tab_reg_d500(i).vl_da       := rec_d500.vl_da;
         vt_tab_reg_d500(i).vl_bc_icms  := rec_d500.vl_bc_icms;
         vt_tab_reg_d500(i).vl_icms     := rec_d500.vl_icms;
         vt_tab_reg_d500(i).cod_inf     := null;
         vt_tab_reg_d500(i).vl_pis      := rec_d500.vl_pis;
         vt_tab_reg_d500(i).vl_cofins   := rec_d500.vl_cofins;
         vt_tab_reg_d500(i).cod_cta     := rec_d500.cod_cta;
         vt_tab_reg_d500(i).tp_assinante := rec_d500.dm_tp_assinante;
         --
      end if; -- vv_cod_sit in ('02', '03', '04', '05')
      --
      vn_fase := 7;
      --
      --Monta arquivo auxiliar
      if nvl(rec_d500.pessoa_id, 0) > 0 then
         --
         vn_fase := 7.1;
         --
         pkb_monta_reg_0150( en_pessoa_id     => rec_d500.pessoa_id
                           , en_notafiscal_id => rec_d500.notafiscal_id );
         --
      end if;
      --
      if vv_cod_sit not in ('02', '03', '04', '05') then
         --
         vn_fase := 8;
         --
         if rec_d500.ind_oper = 1 then -- Somente Saída
            --
            j := 0;
            --
            for rec_d510 in c_d510( rec_d500.notafiscal_id ) loop
               exit when c_d510%notfound or (c_d510%notfound) is null;
               --
               vn_fase := 9;
               --
               j := nvl(j,0) + 1;
               --
               vn_fase := 10;
               --
               vt_bi_tab_reg_d510(i)(j).reg            := 'D510';
               vt_bi_tab_reg_d510(i)(j).num_item       := rec_d510.num_item;
               vt_bi_tab_reg_d510(i)(j).cod_item       := pk_csf.fkg_Item_cod (rec_d510.item_id);
               vt_bi_tab_reg_d510(i)(j).cod_class      := rec_d510.cod_class;
               --
               if nvl(rec_d510.qtd,0) <= 0 then
                  vt_bi_tab_reg_d510(i)(j).qtd := 1;
               else
                  vt_bi_tab_reg_d510(i)(j).qtd := rec_d510.qtd;
               end if;
               --
               vt_bi_tab_reg_d510(i)(j).unid           := rec_d510.unid;
               vt_bi_tab_reg_d510(i)(j).vl_item        := rec_d510.vl_item;
               vt_bi_tab_reg_d510(i)(j).vl_desc        := rec_d510.vl_desc;
               vt_bi_tab_reg_d510(i)(j).cst_icms       := rec_d510.cst_icms;
               vt_bi_tab_reg_d510(i)(j).cfop           := rec_d510.cfop;
               vt_bi_tab_reg_d510(i)(j).vl_bc_icms     := rec_d510.vl_bc_icms;
               vt_bi_tab_reg_d510(i)(j).aliq_icms      := rec_d510.aliq_icms;
               vt_bi_tab_reg_d510(i)(j).vl_icms        := rec_d510.vl_icms;
               vt_bi_tab_reg_d510(i)(j).vl_bc_icms_st  := rec_d510.vl_bc_icms_st;
               vt_bi_tab_reg_d510(i)(j).vl_icms_st     := rec_d510.vl_icms_st;
               vt_bi_tab_reg_d510(i)(j).ind_rec        := rec_d510.dm_ind_rec_com;
               --vt_bi_tab_reg_d510(i)(j).cod_part       := pk_csf.fkg_pessoa_cod_part (rec_d510.pessoa_id);
               vt_bi_tab_reg_d510(i)(j).cod_part       := pk_csf_api_efd.fkb_ret_cnpjcpj_ibge_cod_part ( en_pessoa_id          => rec_d510.pessoa_id
                                                                                                       , en_tipo_retorna       => 1  -- 0-Pessoa_id / 1-Cod_Part    
                                                                                                       , en_origem_dado_pessoa => gn_origem_dado_pessoa                                                     
                                                                                                       , en_notafiscal_id      => rec_d510.notafiscal_id );
               vt_bi_tab_reg_d510(i)(j).vl_pis         := rec_d510.vl_pis;
               vt_bi_tab_reg_d510(i)(j).vl_cofins      := rec_d510.vl_cofins;
               vt_bi_tab_reg_d510(i)(j).cod_cta        := rec_d510.cod_cta;
               --
               vn_fase := 10.1;
               --
               --Monta arquivo auxiliar participante
               if nvl(rec_d510.pessoa_id, 0) > 0 then
                  --
                  vn_fase := 10.2;
                  --
                  pkb_monta_reg_0150( en_pessoa_id     => rec_d510.pessoa_id
                                    , en_notafiscal_id => rec_d510.notafiscal_id );           
                  --
               end if;
               --
               vn_fase := 10.3;
               -- Busca unidade id
               vn_unidade_id := pk_csf.fkg_Unidade_id ( en_multorg_id => pk_csf.fkg_multorg_id_empresa( en_empresa_id => gt_row_abertura_efd.empresa_id)
                                                      , ev_sigla_unid => rec_d510.unid);
               --
               --Monta arquivo auxiliar unidade
               if nvl(vn_unidade_id, 0) > 0 then
                  --
                  vn_fase := 10.4;
                  --
                  pkb_monta_reg_0190( en_unidade_id => vn_unidade_id);
                  --
               end if;
               --
               vn_fase := 10.5;
               --
               --Monta arquivo auxiliar produto
               if nvl(rec_d510.item_id, 0) > 0 then
                  --
                  vn_fase := 10.6;
                  --
                  pkb_monta_reg_0200( en_item_id => rec_d510.item_id);
                  --
               end if;
               --
               vn_fase := 10.7;
               --
               --Monta arquivo auxiliar para conversao de unidade
               if nvl(rec_d510.item_id, 0) > 0 and nvl(vn_unidade_id, 0) > 0 then
                  --
                  vn_fase := 10.8;
                  --
                  pkb_monta_reg_0220 ( en_item_id => rec_d510.item_id
                                     , en_unidade_id => vn_unidade_id );
                  --
               end if;
               --
            end loop;
            --
            vn_fase := 11;
            --
            j := 0;
            --
            for rec_d530 in c_d530( rec_d500.notafiscal_id ) loop
               exit when c_d530%notfound or (c_d530%notfound) is null;
               --
               vn_fase := 12;
               --
               j := nvl(j,0) + 1;
               --
               vn_fase := 13;
               --
               vt_bi_tab_reg_d530(i)(j).reg            := 'D530';
               vt_bi_tab_reg_d530(i)(j).ind_serv       := rec_d530.dm_ind_serv;
               vt_bi_tab_reg_d530(i)(j).dt_ini_serv    := rec_d530.dt_ini_serv;
               vt_bi_tab_reg_d530(i)(j).dt_fin_serv    := rec_d530.dt_fin_serv;
               vt_bi_tab_reg_d530(i)(j).per_fiscal     := rec_d530.per_fiscal;
               vt_bi_tab_reg_d530(i)(j).cod_area       := rec_d530.cod_area;
               vt_bi_tab_reg_d530(i)(j).terminal       := rec_d530.terminal;
               --
            end loop;
            --
         end if;
         --
         vn_fase := 14;
         --
         j := 0;
         -- Monta o REGISTRO D590: REGISTRO ANALÍTICO DO DOCUMENTO (CÓDIGO 21 E 22).
         for rec_d590 in c_d590( rec_d500.notafiscal_id ) loop
            exit when c_d590%notfound or (c_d590%notfound) is null;
            --
            vn_fase := 15;
            --
            j := nvl(j,0) + 1;
            --
            vn_fase := 16;
            --
            vt_bi_tab_reg_d590(i)(j).reg            := 'D590';
            vt_bi_tab_reg_d590(i)(j).cst_icms       := rec_d590.cst_icms;
            vt_bi_tab_reg_d590(i)(j).cfop           := rec_d590.cfop;
            vt_bi_tab_reg_d590(i)(j).aliq_icms      := rec_d590.aliq_icms;
            vt_bi_tab_reg_d590(i)(j).vl_opr         := rec_d590.vl_opr;
            vt_bi_tab_reg_d590(i)(j).vl_bc_icms     := rec_d590.vl_bc_icms;
            vt_bi_tab_reg_d590(i)(j).vl_icms        := rec_d590.vl_icms;
            vt_bi_tab_reg_d590(i)(j).vl_bc_icms_st  := rec_d590.vl_bc_icms_st;
            vt_bi_tab_reg_d590(i)(j).vl_icms_st     := rec_d590.vl_icms_st;
            vt_bi_tab_reg_d590(i)(j).vl_red_bc      := rec_d590.vl_red_bc;
            vt_bi_tab_reg_d590(i)(j).cod_obs        := pk_csf.fkg_cd_obs_lancto_fiscal (rec_d590.obslanctofiscal_id);
            --
            vn_fase := 16.1;
            -- Monta arquivo auxiliar 0460
            if nvl(rec_d590.obslanctofiscal_id, 0) > 0 then
               --
               vn_fase := 16.2;
               --
               pkb_monta_reg_0460 (en_obslanctofiscal_id => rec_d590.obslanctofiscal_id);
               --
            end if;
            --
         end loop;
         --
      end if; -- vv_cod_sit not in ('02', '03', '04', '05')
      --
   end loop;
   --
exception
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_monta_reg_D500 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end pkb_monta_reg_D500;

-------------------------------------------------------------------------------------------------------

-- monta o REGISTRO D400: RESUMO DE MOVIMENTO DIÁRIO - RMD (CÓDIGO 18)
procedure pkb_monta_reg_d400
is
   --
   vn_fase  number := 0;
   i        pls_integer;
   j        pls_integer;
   k        pls_integer;
   --
   cursor c_d400 is
   select r.id
        , mf.cod_mod
        , sd.cd cod_sit
        , r.serie
        , r.subserie
        , r.num_doc
        , r.dt_doc
        , r.vl_doc
        , r.vl_desc
        , r.vl_serv
        , r.vl_bc_icms
        , r.vl_icms
        , r.vl_pis
        , r.vl_cofins
        , r.cod_cta
        , r.pessoa_id
     from res_mov_dia r
        , mod_fiscal  mf
        , sit_docto   sd
    where r.empresa_id    = gt_row_abertura_efd.empresa_id
      and trunc(r.dt_doc) between gt_row_abertura_efd.dt_ini and gt_row_abertura_efd.dt_fim
      and r.dm_st_proc    = 1 -- Validada
      and mf.id           = r.modfiscal_id
      and mf.cod_mod     in ('18')
      and sd.id           = r.sitdocto_id
    order by r.pessoa_id
           , mf.cod_mod
           , r.serie
           , r.subserie
           , r.num_doc;
   --
   cursor c_d410 ( en_resmovdia_id res_mov_dia.id%type ) is
   select r.id
        , mf.cod_mod
        , r.serie
        , r.subserie
        , r.num_doc_ini
        , r.num_doc_fin
        , r.dt_doc
        , st.cod_st
        , c.cd cfop
        , r.aliq_icms
        , r.vl_opr
        , r.vl_desc
        , r.vl_serv
        , r.vl_bc_icms
        , r.vl_icms
     from res_mov_dia_doc_infor r
        , mod_fiscal            mf
        , cod_st                st
        , cfop                  c
    where r.resmovdia_id = en_resmovdia_id
      and mf.id          = r.modfiscal_id
      and mf.cod_mod in ('13', '14', '15', '16')
      and st.id          = r.codst_id
      and c.id           = r.cfop_id
    order by mf.cod_mod
        , r.serie
        , r.subserie
        , r.num_doc_ini;
   --
   cursor c_d411 ( en_resmovdiadocinfor_id res_mov_dia_doc_infor.id%type ) is
   select r.id
        , r.num_doc_canc
     from res_mov_dia_doc_infor_canc r
    where r.resmovdiadocinfor_id = en_resmovdiadocinfor_id
    order by r.num_doc_canc;
   --
   cursor c_d420 ( en_resmovdia_id res_mov_dia.id%type ) is
   select r.id
        , r.cod_mun_orig
        , r.vl_serv
        , r.vl_bc_icms
        , r.vl_icms
     from res_mov_dia_compl r
    where r.resmovdia_id = en_resmovdia_id
    order by r.cod_mun_orig;
   --
begin
   --
   vn_fase := 1;
   --
   i := 0;
   for rec_d400 in c_d400 loop
      --
      vn_fase := 2;
      --
      i := nvl(i,0) + 1;
      --
      vn_fase := 3;
      --
      vt_tab_reg_d400(i).reg           := 'D400';
      vt_tab_reg_d400(i).cod_part      := pk_csf.fkg_pessoa_cod_part (rec_d400.pessoa_id);
      vt_tab_reg_d400(i).cod_mod       := rec_d400.cod_mod;
      vt_tab_reg_d400(i).cod_sit       := rec_d400.cod_sit;
      vt_tab_reg_d400(i).ser           := rec_d400.serie;
      vt_tab_reg_d400(i).sub           := rec_d400.subserie;
      vt_tab_reg_d400(i).num_doc       := rec_d400.num_doc;
      vt_tab_reg_d400(i).dt_doc        := rec_d400.dt_doc;
      vt_tab_reg_d400(i).vl_doc        := rec_d400.vl_doc;
      vt_tab_reg_d400(i).vl_desc       := rec_d400.vl_desc;
      vt_tab_reg_d400(i).vl_serv       := rec_d400.vl_serv;
      vt_tab_reg_d400(i).vl_bc_icms    := rec_d400.vl_bc_icms;
      vt_tab_reg_d400(i).vl_icms       := rec_d400.vl_icms;
      vt_tab_reg_d400(i).vl_pis        := rec_d400.vl_pis;
      vt_tab_reg_d400(i).vl_cofins     := rec_d400.vl_cofins;
      vt_tab_reg_d400(i).cod_cta       := rec_d400.cod_cta;
      --
      vn_fase := 4;
      --
      --Monta arquivo auxiliar
      if nvl(rec_d400.pessoa_id, 0) > 0 then
         --
         vn_fase := 4.1;
         --
         pkb_monta_reg_0150( en_pessoa_id => rec_d400.pessoa_id);
         --
      end if;
      --
      vn_fase := 5;
      --
      j := 0;
      for rec_d410 in c_d410(rec_d400.id) loop
         --
         vn_fase := 6;
         --
         j := nvl(j,0) + 1;
         --
         vn_fase := 7;
         --
         vt_bi_tab_reg_d410(i)(j).reg           := 'D410';
         vt_bi_tab_reg_d410(i)(j).cod_mod       := rec_d410.cod_mod;
         vt_bi_tab_reg_d410(i)(j).ser           := rec_d410.serie;
         vt_bi_tab_reg_d410(i)(j).sub           := rec_d410.subserie;
         vt_bi_tab_reg_d410(i)(j).num_doc_ini   := rec_d410.num_doc_ini;
         vt_bi_tab_reg_d410(i)(j).num_doc_fin   := rec_d410.num_doc_fin;
         vt_bi_tab_reg_d410(i)(j).dt_doc        := rec_d410.dt_doc;
         vt_bi_tab_reg_d410(i)(j).cst_icms      := rec_d410.cod_st;
         vt_bi_tab_reg_d410(i)(j).cfop          := rec_d410.cfop;
         vt_bi_tab_reg_d410(i)(j).aliq_icms     := rec_d410.aliq_icms;
         vt_bi_tab_reg_d410(i)(j).vl_opr        := rec_d410.vl_opr;
         vt_bi_tab_reg_d410(i)(j).vl_desc       := rec_d410.vl_desc;
         vt_bi_tab_reg_d410(i)(j).vl_serv       := rec_d410.vl_serv;
         vt_bi_tab_reg_d410(i)(j).vl_bc_icms    := rec_d410.vl_bc_icms;
         vt_bi_tab_reg_d410(i)(j).vl_icms       := rec_d410.vl_icms;
         --
         vn_fase := 8;
         --
         k := 0;
         for rec_d411 in c_d411(rec_d410.id) loop
            --
            vn_fase := 9;
            --
            k := nvl(k,0) + 1;
            --
            vn_fase := 10;
            --
            vt_tri_tab_reg_d411(i)(j)(k).reg           := 'D411';
            vt_tri_tab_reg_d411(i)(j)(k).num_doc_canc  := rec_d411.num_doc_canc;
            --
         end loop;
         --
      end loop;
      --
      vn_fase := 11;
      --
      j := 0;
      for rec_d420 in c_d420(rec_d400.id) loop
         --
         vn_fase := 12;
         --
         j := nvl(j,0) + 1;
         --
         vn_fase := 13;
         --
         vt_bi_tab_reg_d420(i)(j).reg           := 'D420';
         vt_bi_tab_reg_d420(i)(j).cod_mun_orig  := rec_d420.cod_mun_orig;
         vt_bi_tab_reg_d420(i)(j).vl_serv       := rec_d420.vl_serv;
         vt_bi_tab_reg_d420(i)(j).vl_bc_icms    := rec_d420.vl_bc_icms;
         vt_bi_tab_reg_d420(i)(j).vl_icms       := rec_d420.vl_icms;
         --
      end loop;
      --
   end loop;
   --
exception
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_monta_reg_d400 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end pkb_monta_reg_d400;

-------------------------------------------------------------------------------------------------------

-- monta o REGISTRO D350 EQUIPAMENTO ECF (CÓDIGOS 2E, 13, 14, 15 e 16).
procedure pkb_monta_reg_d350
is
   --
   vn_fase  number := 0;
   i        pls_integer;
   j        pls_integer;
   k        pls_integer;
   l        pls_integer;
   --
   cursor c_d350 is
   select e.id
        , mf.cod_mod
        , e.ecf_mod
        , e.ecf_fab
        , e.ecf_cx
     from equip_ecf   e
        , mod_fiscal  mf
    where e.empresa_id = gt_row_abertura_efd.empresa_id
      and mf.id        = e.modfiscal_id
      and mf.cod_mod  in ('2E', '13', '14', '15', '16')
      and exists ( select 1 from TMP_REDUCAO_Z_ECF r
                    where r.equipecf_id = e.id
                      and trunc(r.dt_doc) between gt_row_abertura_efd.dt_ini and gt_row_abertura_efd.dt_fim
                      and r.dm_st_proc = 1 -- Validada
                      )
    order by mf.cod_mod;
   --
   cursor c_d355 ( en_equipecf_id equip_ecf.id%type ) is
   select r.id
        , r.dt_doc
        , r.cro
        , r.crz
        , r.num_coo_fin
        , r.vl_grande_total_fin
        , r.vl_brt
        , r.vl_pis
        , r.vl_cofins
     from TMP_REDUCAO_Z_ECF  r
    where r.equipecf_id   = en_equipecf_id
      and trunc(r.dt_doc) between gt_row_abertura_efd.dt_ini and gt_row_abertura_efd.dt_fim
      and r.dm_st_proc    = 1 -- Validada
    order by r.dt_doc;
   --
   cursor c_d365 ( en_reducaozecf_id reducao_z_ecf.id%type ) is
   select t.id
        , tz.cod_tot
        , t.vlr_acum_tot
        , t.nr_tot
        , t.descr_nr_tot
     from TMP_TOT_PARC_RED_Z_ECF t
        , tot_parc_red_z     tz
    where t.reducaozecf_id = en_reducaozecf_id
      and tz.id            = t.totparcredz_id
    order by tz.cod_tot;
   --
   cursor c_d370 ( en_totparcredzecf_id tot_parc_red_z_ecf.id%type ) is
   select t.id
        , t.cod_mun_orig
        , t.vl_serv
        , t.qtd_bilh
        , t.vl_bc_icms
        , t.vl_icms
     from tot_parc_red_z_ecf_comp t
    where t.totparcredzecf_id = en_totparcredzecf_id
    order by t.cod_mun_orig;
   --
   cursor c_d390 ( en_reducaozecf_id reducao_z_ecf.id%type ) is
   select r.id
        , st.cod_st
        , c.cd cfop
        , r.aliq_icms
        , r.vl_opr
        , r.vl_bc_icms
        , r.vl_icms
        , r.vl_bc_issqn
        , r.aliq_issqn
        , r.vl_issqn
        , r.obslanctofiscal_id
     from reg_anal_mov_dia_ecf r
        , cod_st               st
        , cfop                 c
    where r.reducaozecf_id = en_reducaozecf_id
      and st.id            = r.codst_id
      and c.id             = r.cfop_id
    order by st.cod_st
        , c.cd
        , r.aliq_icms;
   --
begin
   --
   vn_fase := 1;
   --
   i := 0;
   for rec_d350 in c_d350 loop
      --
      vn_fase := 2;
      --
      i := nvl(i,0) + 1;
      --
      vn_fase := 3;
      --
      vt_tab_reg_d350(i).reg           := 'D350';
      vt_tab_reg_d350(i).cod_mod       := rec_d350.cod_mod;
      vt_tab_reg_d350(i).ecf_mod       := rec_d350.ecf_mod;
      vt_tab_reg_d350(i).ecf_fab       := rec_d350.ecf_fab;
      vt_tab_reg_d350(i).ecf_cx        := rec_d350.ecf_cx;
      --
      vn_fase := 4;
      --
      j := 0;
      k := 0;
      for rec_d355 in c_d355(rec_d350.id) loop
         --
         vn_fase := 5;
         --
         j := nvl(j,0) + 1;
         --
         vn_fase := 6;
         --
         vt_bi_tab_reg_d355(i)(j).reg           := 'D355';
         vt_bi_tab_reg_d355(i)(j).dt_doc        := rec_d355.dt_doc;
         vt_bi_tab_reg_d355(i)(j).cro           := rec_d355.cro;
         vt_bi_tab_reg_d355(i)(j).crz           := rec_d355.crz;
         vt_bi_tab_reg_d355(i)(j).num_coo_fin   := rec_d355.num_coo_fin;
         vt_bi_tab_reg_d355(i)(j).gt_fin        := rec_d355.vl_grande_total_fin;
         vt_bi_tab_reg_d355(i)(j).vl_brt        := rec_d355.vl_brt;
         --
         vn_fase := 7;
         --
         k := nvl(k,0) + 1;
         --
         vn_fase := 8;
         --
         vt_tri_tab_reg_d360(i)(j)(k).reg           := 'D360';
         vt_tri_tab_reg_d360(i)(j)(k).vl_pis        := rec_d355.vl_pis;
         vt_tri_tab_reg_d360(i)(j)(k).vl_cofins     := rec_d355.vl_cofins;
         --
         vn_fase := 9;
         --
         k := 0;
         for rec_d365 in c_d365(rec_d355.id) loop
            --
            vn_fase := 10;
            --
            k := nvl(k,0) + 1;
            --
            vn_fase := 11;
            --
            vt_tri_tab_reg_d365(i)(j)(k).reg           := 'D365';
            vt_tri_tab_reg_d365(i)(j)(k).cod_tot_par   := rec_d365.cod_tot;
            vt_tri_tab_reg_d365(i)(j)(k).vlr_acum_tot  := rec_d365.vlr_acum_tot;
            vt_tri_tab_reg_d365(i)(j)(k).nr_tot        := rec_d365.nr_tot;
            vt_tri_tab_reg_d365(i)(j)(k).descr_nr_tot  := rec_d365.descr_nr_tot;
            --
            vn_fase := 12;
            --
            l := 0;
            for rec_d370 in c_d370(rec_d365.id) loop
               --
               vn_fase := 13;
               --
               l := nvl(l,0) + 1;
               --
               vn_fase := 14;
               --
               vt_tetra_tab_reg_d370(i)(j)(k)(l).reg           := 'D370';
               vt_tetra_tab_reg_d370(i)(j)(k)(l).cod_mun_orig  := rec_d370.cod_mun_orig;
               vt_tetra_tab_reg_d370(i)(j)(k)(l).vl_serv       := rec_d370.vl_serv;
               vt_tetra_tab_reg_d370(i)(j)(k)(l).qtd_bilh      := rec_d370.qtd_bilh;
               vt_tetra_tab_reg_d370(i)(j)(k)(l).vl_bc_icms    := rec_d370.vl_bc_icms;
               vt_tetra_tab_reg_d370(i)(j)(k)(l).vl_icms       := rec_d370.vl_icms;
               --
            end loop;
            --
         end loop;
         --
         vn_fase := 15;
         --
         k := 0;
         for rec_d390 in c_d390(rec_d355.id) loop
            --
            vn_fase := 16;
            --
            k := nvl(k,0) + 1;
            --
            vn_fase := 17;
            --
            vt_tri_tab_reg_d390(i)(j)(k).reg           := 'D390';
            vt_tri_tab_reg_d390(i)(j)(k).cst_icms      := rec_d390.cod_st;
            vt_tri_tab_reg_d390(i)(j)(k).cfop          := rec_d390.cfop;
            vt_tri_tab_reg_d390(i)(j)(k).aliq_icms     := rec_d390.aliq_icms;
            vt_tri_tab_reg_d390(i)(j)(k).vl_opr        := rec_d390.vl_opr;
            vt_tri_tab_reg_d390(i)(j)(k).vl_bc_issqn   := rec_d390.vl_bc_issqn;
            vt_tri_tab_reg_d390(i)(j)(k).aliq_issqn    := rec_d390.aliq_issqn;
            vt_tri_tab_reg_d390(i)(j)(k).vl_issqn      := rec_d390.vl_issqn;
            vt_tri_tab_reg_d390(i)(j)(k).vl_bc_icms    := rec_d390.vl_bc_icms;
            vt_tri_tab_reg_d390(i)(j)(k).vl_icms       := rec_d390.vl_icms;
            vt_tri_tab_reg_d390(i)(j)(k).cod_obs       := pk_csf.fkg_cd_obs_lancto_fiscal (rec_d390.obslanctofiscal_id);
            --
            vn_fase := 18;
            -- Monta arquivo auxiliar 0460
            if nvl(rec_d390.obslanctofiscal_id, 0) > 0 then
               --
               vn_fase := 19;
               --
               pkb_monta_reg_0460 (en_obslanctofiscal_id => rec_d390.obslanctofiscal_id);
               --
            end if;
            --
         end loop;
         --
      end loop;
      --
   end loop;
   --
exception
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_monta_reg_d350 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end pkb_monta_reg_d350;

-------------------------------------------------------------------------------------------------------

-- monta o REGISTRO D300: REGISTRO ANALÍTICO DOS BILHETES CONSOLIDADOS DE PASSAGEM RODOVIÁRIO (CÓDIGO 13),
-- DE PASSAGEM AQUAVIÁRIO (CÓDIGO 14), DE PASSAGEM E NOTA DE BAGAGEM (CÓDIGO 15) E DE PASSAGEM FERROVIÁRIO (CÓDIGO 16).
procedure pkb_monta_reg_d300
is
   --
   vn_fase  number := 0;
   i        pls_integer;
   j        pls_integer;
   --
   cursor c_d300 is
   select r.id
        , mf.cod_mod
        , r.serie
        , r.subserie
        , r.num_doc_ini
        , r.num_doc_fin
        , st.cod_st
        , c.cd cfop
        , r.aliq_icms
        , r.dt_doc
        , r.vl_opr
        , r.vl_desc
        , r.vl_serv
        , r.vl_seg
        , r.vl_out_desp
        , r.vl_bc_icms
        , r.vl_icms
        , r.vl_red_bc
        , r.cod_cta
        , r.obslanctofiscal_id
     from reg_anal_bilhete   r
        , mod_fiscal         mf
        , cod_st             st
        , cfop               c
    where r.empresa_id    = gt_row_abertura_efd.empresa_id
      and trunc(r.dt_doc) between gt_row_abertura_efd.dt_ini and gt_row_abertura_efd.dt_fim
      and r.dm_st_proc    = 1 -- Validada
      and mf.id           = r.modfiscal_id
      and mf.cod_mod      in ('13', '14', '15', '16')
      and st.id           = r.codst_id
      and c.id            = r.cfop_id
    order by mf.cod_mod
        , r.serie
        , r.subserie
        , r.num_doc_ini;
   --
   cursor c_d301 ( en_reganalbilhete_id reg_anal_bilhete.id%type ) is
   select r.id
        , r.reganalbilhete_id
        , r.num_doc_canc
     from reg_anal_bilhete_canc r
    where r.reganalbilhete_id = en_reganalbilhete_id
    order by r.num_doc_canc;
   --
   cursor c_d310 ( en_reganalbilhete_id reg_anal_bilhete.id%type ) is
   select r.id
        , r.cod_mun_orig
        , r.vl_serv
        , r.vl_bc_icms
        , r.vl_icms
     from reg_anal_bilhete_comp r
    where r.reganalbilhete_id = en_reganalbilhete_id
    order by r.cod_mun_orig;
   --
begin
   --
   vn_fase := 1;
   --
   i := 0;
   for rec_d300 in c_d300 loop
      --
      vn_fase := 2;
      --
      i := nvl(i,0) + 1;
      --
      vn_fase := 3;
      --
      vt_tab_reg_d300(i).reg           := 'D300';
      vt_tab_reg_d300(i).cod_mod       := rec_d300.cod_mod;
      vt_tab_reg_d300(i).ser           := rec_d300.serie;
      vt_tab_reg_d300(i).sub           := rec_d300.subserie;
      vt_tab_reg_d300(i).num_doc_ini   := rec_d300.num_doc_ini;
      vt_tab_reg_d300(i).num_doc_fin   := rec_d300.num_doc_fin;
      vt_tab_reg_d300(i).cst_icms      := rec_d300.cod_st;
      vt_tab_reg_d300(i).cfop          := rec_d300.cfop;
      vt_tab_reg_d300(i).aliq_icms     := rec_d300.aliq_icms;
      vt_tab_reg_d300(i).dt_doc        := rec_d300.dt_doc;
      vt_tab_reg_d300(i).vl_opr        := rec_d300.vl_opr;
      vt_tab_reg_d300(i).vl_desc       := rec_d300.vl_desc;
      vt_tab_reg_d300(i).vl_serv       := rec_d300.vl_serv;
      vt_tab_reg_d300(i).vl_seg        := rec_d300.vl_seg;
      vt_tab_reg_d300(i).vl_out_desp   := rec_d300.vl_out_desp;
      vt_tab_reg_d300(i).vl_bc_icms    := rec_d300.vl_bc_icms;
      vt_tab_reg_d300(i).vl_icms       := rec_d300.vl_icms;
      vt_tab_reg_d300(i).vl_red_bc     := rec_d300.vl_red_bc;
      vt_tab_reg_d300(i).cod_obs       := pk_csf.fkg_cd_obs_lancto_fiscal ( rec_d300.obslanctofiscal_id );
      vt_tab_reg_d300(i).cod_cta       := rec_d300.cod_cta;
      --
      vn_fase := 3.1;
      -- Monta arquivo auxiliar 0460
      if nvl(rec_d300.obslanctofiscal_id, 0) > 0 then
         --
         vn_fase := 3.2;
         --
         pkb_monta_reg_0460 (en_obslanctofiscal_id => rec_d300.obslanctofiscal_id);
         --
      end if;
      --
      vn_fase := 4;
      --
      j := 0;

      for rec_d301 in c_d301(rec_d300.id) loop
         --
         vn_fase := 5;
         --
         j := nvl(j,0) + 1;
         --
         vn_fase := 6;
         --
         vt_bi_tab_reg_d301(i)(j).reg           := 'D301';
         vt_bi_tab_reg_d301(i)(j).num_doc_canc  := rec_d301.num_doc_canc;
         --
      end loop;
      --
      vn_fase := 7;
      --
      j := 0;

      for rec_d310 in c_d310(rec_d300.id) loop
         --
         vn_fase := 8;
         --
         j := nvl(j,0) + 1;
         --
         vt_bi_tab_reg_d310(i)(j).reg           := 'D310';
         vt_bi_tab_reg_d310(i)(j).cod_mun_orig  := rec_d310.cod_mun_orig;
         vt_bi_tab_reg_d310(i)(j).vl_serv       := rec_d310.vl_serv;
         vt_bi_tab_reg_d310(i)(j).vl_bc_icms    := rec_d310.vl_bc_icms;
         vt_bi_tab_reg_d310(i)(j).vl_icms       := rec_d310.vl_icms;
         --
      end loop;
      --
   end loop;
   --
exception
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_monta_reg_d300 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end pkb_monta_reg_d300;

-------------------------------------------------------------------------------------------------------

-- Monta o REGISTRO D100: NOTA FISCAL DE SERVIÇO DE TRANSPORTE (CÓDIGO
-- 07) E CONHECIMENTOS DE TRANSPORTE RODOVIÁRIO DE CARGAS (CÓDIGO 08), CONHECIMENTOS DE TRANSPORTE DE CARGAS AVULSO
-- (CÓDIGO 8B), AQUAVIÁRIO DE CARGAS (CÓDIGO 09), AÉREO (CÓDIGO 10), FERROVIÁRIO DE CARGAS (CÓDIGO 11) E MULTIMODAL DE
-- CARGAS (CÓDIGO 26), NOTA FISCAL DE TRANSPORTE FERROVIÁRIO DE CARGA ( CÓDIGO 27) E CONHECIMENTO DE TRANSPORTE ELETRÔNICO - CT-e (CÓDIGO 57 e 67).
procedure pkb_monta_reg_D100
is
   --
   vn_fase  number := 0;
   i        pls_integer;
   j        pls_integer;
   k        pls_integer;
   --
   vv_cod_sit      sit_docto.cd%type;
   --
   vn_vl_icms      number;
   vn_vl_bc_icms   number;
   vn_vl_nt        number;
   vv_cod_mun_orig cidade.ibge_cidade%type;
   vv_cod_mun_dest cidade.ibge_cidade%type;
   vv_volta_origem_dado_pessoa  varchar2(1) := null;
   --
   vb_achou      boolean := false;
   vv_indice     varchar2(20);
   vn_nro_ini    inutiliza_conhec_transp.nro_ini%type;
   vtv_nro_ini   dbms_sql.varchar2_table;
   vtv_serie     dbms_sql.varchar2_table;
   vtv_modfiscal dbms_sql.varchar2_table;
   --
   cursor c_ct_inut is
   select mf.cod_mod
        , ic.serie
        , ic.nro_ini
        , ic.nro_fim
     from inutiliza_conhec_transp ic
        , mod_fiscal              mf
    where ic.empresa_id    = gt_row_abertura_efd.empresa_id
      and ic.dm_situacao   = 2 -- Concluído (Envio e Retorno a SEFAZ com sucesso)
      and ic.dt_inut between gt_row_abertura_efd.dt_ini and gt_row_abertura_efd.dt_fim
      and mf.id            = ic.modfiscal_id
      and not exists (select ct.id from TMP_CONHEC_TRANSP ct where ct.inutilizaconhectransp_id = ic.id)
    order by ic.nro_ini;
   --
   cursor c_d100 is
   select distinct ct.id         conhectransp_id
        , ct.dm_ind_oper         ind_oper
        , ct.dm_ind_emit         ind_emit
        , mf.cod_mod             cod_mod
        , ct.sitdocto_id
        , ct.serie               ser
        , ct.subserie            sub
        , ct.nro_ct              num_doc
        , decode(mf.cod_mod, '57', ct.nro_chave_cte, decode(mf.cod_mod, '67', ct.nro_chave_cte, null)) chv_cte
        , ct.dt_hr_emissao       dt_doc
        , ct.dt_sai_ent          dt_a_p
        , decode(mf.cod_mod, '57', ct.dm_tp_cte, decode(mf.cod_mod, '67', ct.dm_tp_cte, null)) tp_cte
        , decode(mf.cod_mod, '57', ct.chave_cte_ref, decode(mf.cod_mod, '67', ct.chave_cte_ref, null)) chv_cte_ref
        , v.vl_docto_fiscal      vl_doc
        , v.vl_desc              vl_desc
        , ct.dm_ind_frt          ind_frt
        , v.vl_prest_serv        vl_serv
        , ct.cod_cta             cod_cta
        , ct.pessoa_id           pessoa_id
        , ct.inforcompdctofiscal_id
        , ct.ibge_cidade_ini
        , ct.descr_cidade_ini
        , ct.sigla_uf_ini
        , ct.ibge_cidade_fim
        , ct.descr_cidade_fim
        , ct.sigla_uf_fim
     from TMP_CONHEC_TRANSP          ct
        , mod_fiscal             mf
        , TMP_CONHEC_TRANSP_VLPREST  v
    where ct.empresa_id      = gt_row_abertura_efd.empresa_id
      and ct.dm_st_proc     in (4, 7, 8)
      and ct.dm_arm_cte_terc = 0
      and ((ct.dm_ind_emit = 1 and trunc(nvl(ct.dt_sai_ent,ct.dt_hr_emissao)) between trunc(gt_row_abertura_efd.dt_ini) and trunc(gt_row_abertura_efd.dt_fim))
            or
           (ct.dm_ind_emit = 0 and ct.dm_ind_oper = 1 and trunc(ct.dt_hr_emissao) between trunc(gt_row_abertura_efd.dt_ini) and trunc(gt_row_abertura_efd.dt_fim))
            or
           (ct.dm_ind_emit = 0 and ct.dm_ind_oper = 0 and gn_dm_dt_escr_dfepoe = 0 and trunc(ct.dt_hr_emissao) between trunc(gt_row_abertura_efd.dt_ini) and trunc(gt_row_abertura_efd.dt_fim))
            or
           (ct.dm_ind_emit = 0 and ct.dm_ind_oper = 0 and gn_dm_dt_escr_dfepoe = 1 and trunc(nvl(ct.dt_sai_ent,ct.dt_hr_emissao)) between trunc(gt_row_abertura_efd.dt_ini) and trunc(gt_row_abertura_efd.dt_fim)))
      and mf.id              = ct.modfiscal_id
      and mf.cod_mod        in ('07', '08', '8B', '09', '10', '11', '26', '27', '57', '67')
      and v.conhectransp_id  = ct.id
    order by ct.dm_ind_oper
           , ct.dm_ind_emit
           , mf.cod_mod
           , ct.serie
           , ct.nro_ct;
   --
   cursor c_d110 ( en_conhectransp_id conhec_transp.id%type ) is
   select cti.id
        , cti.nro_item
        , cti.vl_servico
        , cti.vl_outro
        , cti.item_id
     from conhec_transp_item  cti
    where cti.conhectransp_id  = en_conhectransp_id
    order by cti.nro_item;
   --
   cursor c_d120 ( en_conhectranspitem_id conhec_transp_item.id%type ) is
   select c.id
        , c.cod_mun_orig
        , c.cod_mun_dest
        , c.veic_id
        , c.uf_id
     from ct_item_compl c
    where c.conhectranspitem_id = en_conhectranspitem_id
    order by c.cod_mun_orig;
   --
   cursor c_d130 ( en_conhectransp_id conhec_transp.id%type ) is
   select r.id
        , r.pessoa_id_consg    pessoa_id_consg
        , r.pessoa_id_red      pessoa_id_red
        , r.dm_ind_frt_red
        , r.cod_mun_orig
        , r.cod_mun_dest
        , r.veic_id
        , r.vl_liq_frt
        , r.vl_sec_cat
        , r.vl_desp
        , r.vl_pedg
        , r.vl_out
        , r.vl_frt
        , r.uf_id
        , r.conhectransp_id    
     from ct_compl_rodo  r
    where r.conhectransp_id  = en_conhectransp_id;
   --
   cursor c_d140 ( en_conhectransp_id conhec_transp.id%type ) is
   select a.id
        , a.cod_mun_orig
        , a.cod_mun_dest
        , a.dm_ind_veic
        , a.veic_id
        , a.dm_ind_nav
        , a.viagem
        , a.vl_frt_liq
        , a.vl_desp_port
        , a.vl_desp_car_desc
        , a.vl_out
        , a.vl_frt_brt
        , a.vl_frt_mm
        , a.pessoa_id_consg
     from ct_compl_aquav  a
    where a.conhectransp_id = en_conhectransp_id;
   --
   cursor c_d150 ( en_conhectransp_id conhec_transp.id%type ) is
   select a.id
        , a.cod_mun_orig
        , a.cod_mun_dest
        , a.veic_id
        , a.viagem
        , a.dm_ind_tfa
        , a.vl_peso_tx
        , a.vl_tx_terr
        , a.vl_tx_red
        , a.vl_out
        , a.vl_tx_adv
     from ct_compl_aereo a
    where a.conhectransp_id = en_conhectransp_id;
   --
   cursor c_d160 ( en_conhectransp_id conhec_transp.id%type ) is
   select c.id
        , c.despacho
        , c.cnpj_cpf_rem
        , c.ie_rem
        , c.cod_mun_ori
        , c.cnpj_cpf_dest
        , c.ie_dest
        , c.cod_mun_dest
     from conhec_transp_carga c
    where c.conhectransp_id = en_conhectransp_id;
   --
   cursor c_d161 ( en_conhectranspcarga_id conhec_transp_carga.id%type ) is
   select cl.id
        , cl.dm_ind_carga
        , cl.cnpj_cpf_col
        , cl.ie_col
        , cl.cod_mun_col
        , cl.cnpj_cpf_entg
        , cl.ie_entg
        , cl.cod_mun_entg
     from ct_carga_local cl
    where cl.conhectranspcarga_id = en_conhectranspcarga_id
    order by cl.id;
   --
   cursor c_d162 ( en_conhectranspcarga_id conhec_transp_carga.id%type ) is
   select cdf.id
        , mf.cod_mod
        , cdf.serie
        , cdf.num_doc
        , cdf.dt_doc
        , cdf.vl_doc
        , cdf.vl_merc
        , cdf.qtd_vol
        , cdf.peso_brt
        , cdf.peso_liq
     from ct_carga_doc_fiscal cdf
        , mod_fiscal          mf
    where cdf.conhectranspcarga_id = en_conhectranspcarga_id
      and mf.id(+)                 = cdf.modfiscal_id
    order by mf.cod_mod
        , cdf.serie
        , cdf.num_doc;
   --
   cursor c_d170 ( en_conhectransp_id conhec_transp.id%type ) is
   select m.id
        , m.pessoa_id_consg
        , m.pessoa_id_red
        , m.cod_mun_orig
        , m.cod_mun_dest
        , m.otm
        , m.dm_ind_nat_frt
        , m.vl_liq_frt
        , m.vl_gris
        , m.vl_pdg
        , m.vl_out
        , m.vl_frt
        , m.veic_id
        , m.uf_id
     from ct_multimodal m
    where m.conhectransp_id = en_conhectransp_id
    order by m.id;
   --
   cursor c_d180( en_conhectransp_id conhec_transp.id%type ) is
   select m.id
        , m.num_seq
        , m.dm_ind_emit
        , m.cnpj_cpf_emit
        , m.uf_emit
        , m.ie_emit
        , m.cod_mun_orig
        , m.cnpj_cpf_tom
        , m.uf_tom
        , m.ie_tom
        , m.cod_mun_dest
        , mf.cod_mod
        , m.serie
        , m.subserie
        , m.num_doc
        , m.dt_doc
        , m.vl_doc
     from ct_modais   m
        , mod_fiscal  mf
    where m.conhectransp_id = en_conhectransp_id
      and mf.id             = m.modfiscal_id
    order by m.id;
   --
   cursor c_d190 ( en_conhectransp_id conhec_transp.id%type ) is
   select res.codst_id
        , res.cfop_id
        , res.aliq_icms            aliq_icms
        , res.vl_opr               vl_opr
        , res.vl_bc_icms           vl_bc_icms
        , res.vl_icms              vl_icms
        , res.vl_red_bc            vl_red_bc
        , res.obslanctofiscal_id
     from TMP_CT_REG_ANAL        res
    where res.conhectransp_id  = en_conhectransp_id
    order by res.codst_id, res.cfop_id, res.aliq_icms;
   --
   cursor c_d195 ( en_conhectransp_id conhec_transp.id%type ) is
   select ctf.id
        , ctf.obslanctofiscal_id
        , ctf.txt_compl
     from ctinfor_fiscal ctf
    where ctf.conhectransp_id  = en_conhectransp_id
    order by ctf.id;
   --
   cursor c_d197 ( en_ctinforfiscal_id ctinfor_fiscal.id%type ) is
   select ctip.codocorajicms_id
        , ctip.descr_compl_aj
        , ctip.vl_bc_icms
        , ctip.aliq_icms
        , ctip.vl_icms
        , ctip.vl_outros
     from ct_inf_prov ctip
    where ctip.ctinforfiscal_id  = en_ctinforfiscal_id
      and ( nvl(ctip.vl_icms,0) > 0 or nvl(ctip.vl_outros,0) > 0 )
    order by ctip.id;
   --
begin
   --
   vn_fase := 1;
   --
   i := 0;
   --
   vtv_nro_ini.delete;
   vtv_serie.delete;
   vtv_modfiscal.delete;
   --
   vn_fase := 1.1;
   --
   for rec_d100_inut in c_ct_inut
   loop
      --
      exit when c_ct_inut%notfound or (c_ct_inut%notfound) is null;
      --
      vn_fase := 1.2;
      --
      vn_nro_ini := rec_d100_inut.nro_ini;
      --
      loop
         --
         vn_fase := 1.3;
         --
         vv_indice := vn_nro_ini||trim(rec_d100_inut.serie)||trim(rec_d100_inut.cod_mod);
         --
         begin
            vb_achou := vtv_nro_ini.exists(vv_indice);
         exception
            when others then
               vb_achou := false;
         end;
         --
         vn_fase := 1.4;
         --
         if not vb_achou then
            --
            vn_fase := 1.5;
            vtv_nro_ini(vv_indice)   := vn_nro_ini;
            vtv_serie(vv_indice)     := rec_d100_inut.serie;
            vtv_modfiscal(vv_indice) := rec_d100_inut.cod_mod;
            --
         end if;
         --
         vn_fase := 1.6;
         --
         if vn_nro_ini = rec_d100_inut.nro_fim then
            exit;
         else
            vn_nro_ini := vn_nro_ini + 1;
         end if;
         --
      end loop; -- vn_nro_ini .. rec_d100_inut.nro_fim
      --
   end loop; -- c_nf_inut
   --
   vn_fase := 1.7;
   vv_indice := vtv_nro_ini.first;
   --
   while vv_indice is not null
   loop
      --
      vn_fase := 1.8;
      --
      i := nvl(i,0) + 1;
      --
      vt_tab_reg_d100(i).reg          := 'D100';
      vt_tab_reg_d100(i).ind_oper     := 1; -- ind_oper
      vt_tab_reg_d100(i).ind_emit     := 0; -- ind_emit
      vt_tab_reg_d100(i).cod_part     := null;
      vt_tab_reg_d100(i).cod_mod      := vtv_modfiscal(vv_indice); -- cod_mod
      vt_tab_reg_d100(i).cod_sit      := '05'; -- vv_cod_sit
      vt_tab_reg_d100(i).ser          := vtv_serie(vv_indice); -- ser
      vt_tab_reg_d100(i).sub          := null; -- sub
      vt_tab_reg_d100(i).num_doc      := vtv_nro_ini(vv_indice); -- num_doc
      vt_tab_reg_d100(i).chv_cte      := null;
      vt_tab_reg_d100(i).dt_doc       := null;
      vt_tab_reg_d100(i).dt_a_p       := null;
      vt_tab_reg_d100(i).tp_cte       := null;
      vt_tab_reg_d100(i).chv_cte_ref  := null;
      vt_tab_reg_d100(i).vl_doc       := null;
      vt_tab_reg_d100(i).vl_desc      := null;
      vt_tab_reg_d100(i).ind_frt      := null;
      vt_tab_reg_d100(i).vl_serv      := null;
      vt_tab_reg_d100(i).vl_bc_icms   := null;
      vt_tab_reg_d100(i).vl_icms      := null;
      vt_tab_reg_d100(i).vl_nt        := null;
      vt_tab_reg_d100(i).cod_inf      := null;
      vt_tab_reg_d100(i).cod_cta      := null;
      vt_tab_reg_d100(i).cod_mun_orig := null;
      vt_tab_reg_d100(i).cod_mun_dest := null;
      --
      vn_fase := 1.9;
      --
      vv_indice := vtv_nro_ini.next(vv_indice);
      --
   end loop;
   --
   vn_fase := 1.10;
   --
   for rec_d100 in c_d100 loop
      exit when c_d100%notfound or (c_d100%notfound) is null;
      --
      vn_fase := 2;
      --
      i := nvl(i,0) + 1;
      --
      -- -------------------------------------------------------------------------------------------------------
      -- Exceção 1: Para documentos com código de situação (campo COD_SIT) cancelado (código -02-) ou cancelado
      -- extemporâneo (código -03-), preencher somente os campos REG, IND_OPER, IND_EMIT, COD_MOD, COD_SIT, SER,
      -- SUB e NUM_DOC. Demais campos deverão ser apresentados com conteúdo VAZIO -||-. Não deverão ser informados
      -- registros filhos.
      -- -------------------------------------------------------------------------------------------------------
      -- Exceção 2: Notas Fiscais Complementares e Notas Fiscais Complementares Extemporâneas (campo COD_SIT igual a
      -- -06- ou -07-): nesta situação, somente os campos REG, IND_OPER, IND_EMIT, COD_PART, COD_MOD, COD_SIT,
      -- SER, SUB, NUM_DOC e DT_DOC, são obrigatórios. Os demais campos são facultativos (se forem preenchidos, serão
      -- validados e aplicadas as regras de campos existentes). A apresentação do registro D190 é obrigatória, devendo ser
      -- preenchidos todos os campos obrigatórios. Os demais campos e registros filhos do registro D100 serão informados, se
      -- existirem.
      -- -------------------------------------------------------------------------------------------------------
      -- Exceção 3: Notas Fiscais emitidas por regime especial ou norma específica (campo COD_SIT igual a -08-). Para
      -- documentos fiscais emitidos com base em regime especial ou norma específica, deverão ser apresentados os registros D100
      -- e D190, obrigatoriamente, e os demais registros -filhos-, se estes forem exigidos pela legislação fiscal. Nesta situação, no
      -- registro D100, somente os campos REG, IND_OPER, IND_EMIT, COD_PART, COD_MOD, COD_SIT, SER, SUB,
      -- NUM_DOC e DT_DOC, são obrigatórios. Os demais campos são facultativos (se forem preenchidos, serão validados e
      -- aplicadas as regras de campos existentes).
      -- -------------------------------------------------------------------------------------------------------
      -- Exceção 4: Conhecimento de Transporte Eletrônico - CT-e de emissão própria: neste caso, devem ser apresentados
      -- somente os registros D100 e D190.
      -- -------------------------------------------------------------------------------------------------------
      --
      vv_cod_sit := pk_csf.fkg_Sit_Docto_cd ( en_sitdoc_id => rec_d100.sitdocto_id );
      --
      vn_fase := 3;
      --
      if vv_cod_sit in ('02', '03', '04', '05') then
         --
         vn_fase := 4;
         --
         vt_tab_reg_d100(i).reg          := 'D100';
         vt_tab_reg_d100(i).ind_oper     := rec_d100.ind_oper;
         vt_tab_reg_d100(i).ind_emit     := rec_d100.ind_emit;
         --
         if vv_cod_sit in ('02', '03', '04') then /*02-Documento cancelado, 03-Documento cancelado extemporâneo, 04-NF-e ou CT-e denegado*/
           vt_tab_reg_d100(i).cod_part     := null;
         else
           --vt_tab_reg_d100(i).cod_part     := pk_csf.fkg_pessoa_cod_part (rec_d100.pessoa_id);
           vt_tab_reg_d100(i).cod_part     := pk_csf_api_efd.fkb_ret_cnpjcpj_ibge_cod_part ( en_pessoa_id          => rec_d100.pessoa_id
                                                                                           , en_tipo_retorna       => 1  -- 0-Pessoa_id / 1-Cod_Part  
                                                                                           , en_origem_dado_pessoa => 0 );
         end if;
         --
         vt_tab_reg_d100(i).cod_mod      := rec_d100.cod_mod;
         vt_tab_reg_d100(i).cod_sit      := vv_cod_sit;
         vt_tab_reg_d100(i).ser          := rec_d100.ser;
         vt_tab_reg_d100(i).sub          := rec_d100.sub;
         vt_tab_reg_d100(i).num_doc      := rec_d100.num_doc;
         --
         if rec_d100.ind_emit = 0 and -- cte de emissão própria
            gn_versao >= 104 and -- versão a partir de 01/01/2012
            vv_cod_sit in ('02', '03') then -- 02-Documento cancelado, 03-Documento cancelado extemporâneo
            --
            vt_tab_reg_d100(i).chv_cte := rec_d100.chv_cte;
            --
         elsif vv_cod_sit = ('04') then -- 04-NF-e ou CT-e denegado
               --
               vt_tab_reg_d100(i).chv_cte := rec_d100.chv_cte;
               --
         else -- vv_cod_sit = ('05') ou diferente do IF -- 05-NF-e ou CT-e Numeração inutilizada
            --
            vt_tab_reg_d100(i).chv_cte := null;
            --
         end if;
         --
         if vv_cod_sit in ('02', '03', '04') then /*02-Documento cancelado, 03-Documento cancelado extemporâneo, 04-NF-e ou CT-e denegado*/
           vt_tab_reg_d100(i).dt_doc       := null;
         else
           vt_tab_reg_d100(i).dt_doc       := rec_d100.dt_doc;
         end if;
         --
         vt_tab_reg_d100(i).dt_a_p       := null;
         vt_tab_reg_d100(i).tp_cte       := null;
         vt_tab_reg_d100(i).chv_cte_ref  := null;
         vt_tab_reg_d100(i).vl_doc       := null;
         vt_tab_reg_d100(i).vl_desc      := null;
         vt_tab_reg_d100(i).ind_frt      := null;
         vt_tab_reg_d100(i).vl_serv      := null;
         vt_tab_reg_d100(i).vl_bc_icms   := null;
         vt_tab_reg_d100(i).vl_icms      := null;
         vt_tab_reg_d100(i).vl_nt        := null;
         vt_tab_reg_d100(i).cod_inf      := null;
         vt_tab_reg_d100(i).cod_cta      := null;
         --
         if nvl(rec_d100.ibge_cidade_ini,-1) > 0 then
            --
            if vv_cod_sit in ('02', '03', '04') then /*02-Documento cancelado, 03-Documento cancelado extemporâneo, 04-NF-e ou CT-e denegado*/
               vt_tab_reg_d100(i).cod_mun_orig := null;
            else
               vt_tab_reg_d100(i).cod_mun_orig := rec_d100.ibge_cidade_ini;
            end if;
            -- 
         else
            vt_tab_reg_d100(i).cod_mun_orig := null;
         end if;
         --
         if nvl(rec_d100.ibge_cidade_fim,-1) > 0 then
            --
            if vv_cod_sit in ('02', '03', '04') then /*02-Documento cancelado, 03-Documento cancelado extemporâneo, 04-NF-e ou CT-e denegado*/
              vt_tab_reg_d100(i).cod_mun_dest := null;
            else
              vt_tab_reg_d100(i).cod_mun_dest := rec_d100.ibge_cidade_fim;
            end if;
            --
         else
            vt_tab_reg_d100(i).cod_mun_dest := null;
         end if;
         --
      elsif vv_cod_sit in ('07', '08') then
         --
         vn_fase := 5;
         --
         vt_tab_reg_d100(i).reg          := 'D100';
         vt_tab_reg_d100(i).ind_oper     := rec_d100.ind_oper;
         vt_tab_reg_d100(i).ind_emit     := rec_d100.ind_emit;
         --vt_tab_reg_d100(i).cod_part     := pk_csf.fkg_pessoa_cod_part (rec_d100.pessoa_id);
         vt_tab_reg_d100(i).cod_part     := pk_csf_api_efd.fkb_ret_cnpjcpj_ibge_cod_part ( en_pessoa_id          => rec_d100.pessoa_id
                                                                                         , en_tipo_retorna       => 1  -- 0-Pessoa_id / 1-Cod_Part    
                                                                                         , en_origem_dado_pessoa => 0 );     
         vt_tab_reg_d100(i).cod_mod      := rec_d100.cod_mod;
         vt_tab_reg_d100(i).cod_sit      := vv_cod_sit;
         vt_tab_reg_d100(i).ser          := rec_d100.ser;
         vt_tab_reg_d100(i).sub          := rec_d100.sub;
         vt_tab_reg_d100(i).num_doc      := rec_d100.num_doc;
         --
         if vv_cod_sit in ('06', '07') then -- 06-Documento Fiscal Complementar, 07-Documento Fiscal Complementar extemporâneo.
            --
            vt_tab_reg_d100(i).chv_cte := rec_d100.chv_cte;
            --
         elsif vv_cod_sit = ('08') and -- 08-Documento Fiscal emitido com base em Regime Especial ou Norma Específica
               rec_d100.cod_mod in ('57', '67') then -- 57-Conhecimento de Transporte Eletrônico e 67-Conhecimento de Transporte Eletrônico - Outros Serviços
               --
               vt_tab_reg_d100(i).chv_cte := rec_d100.chv_cte;
               --
         else -- vv_cod_sit = ('08') e cod_mod <> '57'  e <> '67'
            --
            vt_tab_reg_d100(i).chv_cte := null;
            --
         end if;
         --
         vt_tab_reg_d100(i).dt_doc       := rec_d100.dt_doc;
         vt_tab_reg_d100(i).dt_a_p       := null;
         vt_tab_reg_d100(i).tp_cte       := null;
         vt_tab_reg_d100(i).chv_cte_ref  := null;
         vt_tab_reg_d100(i).vl_doc       := null;
         vt_tab_reg_d100(i).vl_desc      := null;
         vt_tab_reg_d100(i).ind_frt      := null;
         vt_tab_reg_d100(i).vl_serv      := null;
         vt_tab_reg_d100(i).vl_bc_icms   := null;
         vt_tab_reg_d100(i).vl_icms      := null;
         vt_tab_reg_d100(i).vl_nt        := null;
         vt_tab_reg_d100(i).cod_inf      := null;
         vt_tab_reg_d100(i).cod_cta      := null;
         --
         if nvl(rec_d100.ibge_cidade_ini,-1) > 0 then
            vt_tab_reg_d100(i).cod_mun_orig := rec_d100.ibge_cidade_ini;
         else
            vt_tab_reg_d100(i).cod_mun_orig := null;
         end if;
         --
         if nvl(rec_d100.ibge_cidade_fim,-1) > 0 then
            vt_tab_reg_d100(i).cod_mun_dest := rec_d100.ibge_cidade_fim;
         else
            vt_tab_reg_d100(i).cod_mun_dest := null;
         end if;
         --
      else
         --
         vn_fase := 6;
         --
         vt_tab_reg_d100(i).reg          := 'D100';
         vt_tab_reg_d100(i).ind_oper     := rec_d100.ind_oper;
         vt_tab_reg_d100(i).ind_emit     := rec_d100.ind_emit;
         --vt_tab_reg_d100(i).cod_part     := pk_csf.fkg_pessoa_cod_part (rec_d100.pessoa_id);
         vt_tab_reg_d100(i).cod_part     := pk_csf_api_efd.fkb_ret_cnpjcpj_ibge_cod_part ( en_pessoa_id          => rec_d100.pessoa_id
                                                                                         , en_tipo_retorna       => 1  -- 0-Pessoa_id / 1-Cod_Part    
                                                                                         , en_origem_dado_pessoa => 0 );
         vt_tab_reg_d100(i).cod_mod      := rec_d100.cod_mod;
         vt_tab_reg_d100(i).cod_sit      := vv_cod_sit;
         vt_tab_reg_d100(i).ser          := rec_d100.ser;
         vt_tab_reg_d100(i).sub          := rec_d100.sub;
         vt_tab_reg_d100(i).num_doc      := rec_d100.num_doc;
         vt_tab_reg_d100(i).chv_cte      := rec_d100.chv_cte;
         vt_tab_reg_d100(i).dt_doc       := rec_d100.dt_doc;
         vt_tab_reg_d100(i).dt_a_p       := rec_d100.dt_a_p;
         vt_tab_reg_d100(i).tp_cte       := rec_d100.tp_cte;
         vt_tab_reg_d100(i).chv_cte_ref  := rec_d100.chv_cte_ref;
         vt_tab_reg_d100(i).vl_doc       := rec_d100.vl_doc;
         vt_tab_reg_d100(i).vl_desc      := rec_d100.vl_desc;
         vt_tab_reg_d100(i).ind_frt      := nvl(rec_d100.ind_frt, 9);
         vt_tab_reg_d100(i).vl_serv      := rec_d100.vl_serv;
         vt_tab_reg_d100(i).cod_inf      := pk_csf.fkg_Infor_Comp_Dcto_Fiscal_cod (rec_d100.inforcompdctofiscal_id);
         vt_tab_reg_d100(i).cod_cta      := rec_d100.cod_cta;
         --
         if (nvl(rec_d100.ibge_cidade_ini,-1) > 0) and (nvl(rec_d100.ibge_cidade_fim,-1) > 0) then
            vt_tab_reg_d100(i).cod_mun_orig := rec_d100.ibge_cidade_ini;
            vt_tab_reg_d100(i).cod_mun_dest := rec_d100.ibge_cidade_fim;
         else
           begin -- Recuperar emitente
              select cid.ibge_cidade
                into vv_cod_mun_orig
                from empresa e
                   , pessoa  p
                   , cidade  cid
               where e.id   = gt_row_abertura_efd.empresa_id
                 and p.id   = e.pessoa_id
                 and cid.id = p.cidade_id;
           exception
              when others then
                 vv_cod_mun_orig := null;
           end;
           --
           begin -- Recuperar destinatário
              select cid.ibge_cidade
                into vv_cod_mun_dest
                from pessoa p
                   , cidade cid
               where p.id   = rec_d100.pessoa_id
                 and cid.id = p.cidade_id;
           exception
              when others then
                 vv_cod_mun_dest := null;
           end;
           --
           if rec_d100.ind_emit = 0 then -- emissão própria
              --
              vt_tab_reg_d100(i).cod_mun_orig := vv_cod_mun_orig; -- IBGE da cidade da empresa/emitente
              vt_tab_reg_d100(i).cod_mun_dest := vv_cod_mun_dest; -- IBGE da cidade do participante/destinatário
              --
           else -- rec_d100.ind_emit = 1 -- terceiro
              --
              vt_tab_reg_d100(i).cod_mun_orig := vv_cod_mun_dest; -- IBGE da cidade do participante/destinatário
              vt_tab_reg_d100(i).cod_mun_dest := vv_cod_mun_orig; -- IBGE da cidade da empresa/emitente
              --
           end if;
           --
         end if;
         --
         vn_fase := 6.1;
         -- Recupera os impostos de ICMS
         begin
            --
            select case when cs.cod_st in (20, 30, 40, 41, 50, 51, 70) 
                     then 0
                     else sum(nvl(i.vl_base_calc,0))
                   end vl_base_calc  
                 , case when cs.cod_st in (20, 30, 40, 41, 50, 51, 70) 
                     then 0
                     else sum(nvl(i.vl_imp_trib,0))
                   end vl_imp_trib
              into vn_vl_bc_icms
                 , vn_vl_icms
              from conhec_transp_imp  i
                 , tipo_imposto       ti
                 , cod_st             cs                 
             where i.conhectransp_id  = rec_d100.conhectransp_id
               and ti.id              = i.tipoimp_id
               and ti.cd              = 1  -- ICMS
               and cs.id              = i.codst_id
             group by cs.cod_st;
            --
         exception
            when others then
               vn_vl_bc_icms := 0;
               vn_vl_icms := 0;
         end;
         --
         vt_tab_reg_d100(i).vl_bc_icms   := nvl(vn_vl_bc_icms,0);
         vt_tab_reg_d100(i).vl_icms      := nvl(vn_vl_icms,0);
         --
         if (nvl(rec_d100.vl_doc,0) - nvl(vn_vl_bc_icms,0)) > 0 then
            vn_vl_nt := (nvl(rec_d100.vl_doc,0) - nvl(vn_vl_bc_icms,0));
         else
            vn_vl_nt := 0;
         end if;
         --
         vt_tab_reg_d100(i).vl_nt        := vn_vl_nt;
         --
         vn_fase := 6.2;
         --
         -- Monta registro 0450 caso o rec_c500 retorne registros
         if nvl(rec_d100.inforcompdctofiscal_id, 0) > 0 then
            --
            vn_fase := 6.3;
            --
            pkb_monta_reg_0450 ( en_notafiscal_id     => null
                               , en_infcompdctofis_id => rec_d100.inforcompdctofiscal_id
                               , en_cod_inf           => null
                               , ev_txt_compl         => null );
            --
         end if;
         --
      end if;
      --
      vn_fase := 7;
      --
      --Monta arquivo auxiliar
      if nvl(rec_d100.pessoa_id, 0) > 0 then
         --
         vn_fase := 7.1;
         --	
         -- Verificando se o parametro está como "DOCUMENTO_FISCAL" colcoar como "CADASTRO_PESSOA" pois conhecimento
         -- de transporte deve-se pegar do cadastro de pessoa.		 
         if gn_origem_dado_pessoa = 1 then
            --
            gn_origem_dado_pessoa       := 0;			
            vv_volta_origem_dado_pessoa := 'S';
            --
         end if;
         --		 
         pkb_monta_reg_0150( en_pessoa_id       => rec_d100.pessoa_id );  
         --
         -- Se foi trocado pois o parametro estava "DOCUMENTO_FISCAL" retornar o parametro conforme estava.		 
         if nvl( vv_volta_origem_dado_pessoa, 'N') = 'S' then
            --
            gn_origem_dado_pessoa       := 1;
            vv_volta_origem_dado_pessoa := null;			
            --
         end if;
         --		 
      end if;
      --
      vn_fase := 7.2;
      --
      if vv_cod_sit not in ('02', '03', '04', '05') then
         -- Se o documento não for de "aquisição" (entrada) e não for CT-e, apresenta os filhos
         if rec_d100.ind_emit <> 0 and rec_d100.cod_mod not in ('57', '67') then
            --
            vn_fase := 8;
            --
            j := 0;
            --
            for rec_d110 in c_d110(rec_d100.conhectransp_id) loop
               --
               vn_fase := 9;
               --
               j := nvl(j,0) + 1;
               --
               vn_fase := 10;
               --
               vt_bi_tab_reg_d110(i)(j).reg         := 'D110';
               vt_bi_tab_reg_d110(i)(j).num_item    := rec_d110.nro_item;
               vt_bi_tab_reg_d110(i)(j).cod_item    := pk_csf.fkg_Item_cod (rec_d110.item_id);
               vt_bi_tab_reg_d110(i)(j).vl_serv     := rec_d110.vl_servico;
               vt_bi_tab_reg_d110(i)(j).vl_out      := rec_d110.vl_outro;
               --
               vn_fase := 10.1;
               --
               --Monta arquivo auxiliar produto
               if nvl(rec_d110.item_id, 0) > 0 then
                  --
                  vn_fase := 10.2;
                  --
                  pkb_monta_reg_0200( en_item_id => rec_d110.item_id);
                  --
               end if;
               --
               vn_fase := 11;
               --
               k := 0;
               --
               for rec_d120 in c_d120(rec_d110.id) loop
                  --
                  vn_fase := 12;
                  --
                  k := nvl(k,0) + 1;
                  --
                  vn_fase := 13;
                  --
                  vt_tri_tab_reg_d120(i)(j)(k).reg           := 'D120';
                  vt_tri_tab_reg_d120(i)(j)(k).cod_mun_orig  := rec_d120.cod_mun_orig;
                  vt_tri_tab_reg_d120(i)(j)(k).cod_mun_dest  := rec_d120.cod_mun_dest;
                  vt_tri_tab_reg_d120(i)(j)(k).veic_id       := rec_d120.veic_id;
                  vt_tri_tab_reg_d120(i)(j)(k).uf_id         := rec_d120.uf_id;
                  --
               end loop;
               --
            end loop;
            --
            vn_fase := 14;
            --
            j := 0;
            --
            for rec_d130 in c_d130(rec_d100.conhectransp_id) loop
               --
               vn_fase := 15;
               --
               j := nvl(j,0) + 1;
               --
               vn_fase := 16;
               --
               vt_bi_tab_reg_d130(i)(j).reg             := 'D130';
               vt_bi_tab_reg_d130(i)(j).cod_part_consg  := pk_csf.fkg_pessoa_cod_part (rec_d130.pessoa_id_consg);
               vt_bi_tab_reg_d130(i)(j).cod_part_red    := pk_csf.fkg_pessoa_cod_part (rec_d130.pessoa_id_red);
               vt_bi_tab_reg_d130(i)(j).ind_frt_red     := rec_d130.dm_ind_frt_red;
               vt_bi_tab_reg_d130(i)(j).cod_mun_orig    := rec_d130.cod_mun_orig;
               vt_bi_tab_reg_d130(i)(j).cod_mun_dest    := rec_d130.cod_mun_dest;
               vt_bi_tab_reg_d130(i)(j).veic_id         := rec_d130.veic_id;
               vt_bi_tab_reg_d130(i)(j).vl_liq_frt      := rec_d130.vl_liq_frt;
               vt_bi_tab_reg_d130(i)(j).vl_sec_cat      := rec_d130.vl_sec_cat;
               vt_bi_tab_reg_d130(i)(j).vl_desp         := rec_d130.vl_desp;
               vt_bi_tab_reg_d130(i)(j).vl_pedg         := rec_d130.vl_pedg;
               vt_bi_tab_reg_d130(i)(j).vl_out          := rec_d130.vl_out;
               vt_bi_tab_reg_d130(i)(j).vl_frt          := rec_d130.vl_frt;
               vt_bi_tab_reg_d130(i)(j).uf_id           := rec_d130.uf_id;
               --
               vn_fase := 16.1;
               --
               --Monta arquivo auxiliar para consignatário
               if nvl(rec_d130.pessoa_id_consg, 0) > 0 then
                  --
                  vn_fase := 16.2;
                  --
                  pkb_monta_reg_0150( en_pessoa_id => rec_d130.pessoa_id_consg );
                  --
               end if;
               --
               vn_fase := 16.3;
               --
               --Monta arquivo auxiliar para redespacho
               if nvl(rec_d130.pessoa_id_red, 0) > 0 then
                  --
                  vn_fase := 16.4;
                  --
                  pkb_monta_reg_0150( en_pessoa_id => rec_d130.pessoa_id_red ); 
                  --
               end if;
               --
               vn_fase := 16.5;
               --
            end loop;
            --
            vn_fase := 17;
            --
            j := 0;
            --
            for rec_d140 in c_d140(rec_d100.conhectransp_id) loop
               --
               vn_fase := 18;
               --
               j := nvl(j,0) + 1;
               --
               vn_fase := 19;
               --
               vt_bi_tab_reg_d140(i)(j).reg               := 'D140';
               vt_bi_tab_reg_d140(i)(j).cod_part_consg    := pk_csf.fkg_pessoa_cod_part (rec_d140.pessoa_id_consg);
               vt_bi_tab_reg_d140(i)(j).cod_mun_orig      := rec_d140.cod_mun_orig;
               vt_bi_tab_reg_d140(i)(j).cod_mun_dest      := rec_d140.cod_mun_dest;
               vt_bi_tab_reg_d140(i)(j).ind_veic          := rec_d140.dm_ind_veic;
               vt_bi_tab_reg_d140(i)(j).veic_id           := rec_d140.veic_id;
               vt_bi_tab_reg_d140(i)(j).ind_nav           := rec_d140.dm_ind_nav;
               vt_bi_tab_reg_d140(i)(j).viagem            := rec_d140.viagem;
               vt_bi_tab_reg_d140(i)(j).vl_frt_liq        := rec_d140.vl_frt_liq;
               vt_bi_tab_reg_d140(i)(j).vl_desp_port      := rec_d140.vl_desp_port;
               vt_bi_tab_reg_d140(i)(j).vl_desp_car_desc  := rec_d140.vl_desp_car_desc;
               vt_bi_tab_reg_d140(i)(j).vl_out            := rec_d140.vl_out;
               vt_bi_tab_reg_d140(i)(j).vl_frt_brt        := rec_d140.vl_frt_brt;
               vt_bi_tab_reg_d140(i)(j).vl_frt_mm         := rec_d140.vl_frt_mm;
               --
               vn_fase := 19.1;
               --
               --Monta arquivo auxiliar
               if nvl(rec_d140.pessoa_id_consg, 0) > 0 then
                  --
                  vn_fase := 19.2;
                  --
                  pkb_monta_reg_0150( en_pessoa_id => rec_d140.pessoa_id_consg );
                  --
               end if;
               --
            end loop;
            --
            vn_fase := 20;
            --
            j := 0;
            --
            for rec_d150 in c_d150(rec_d100.conhectransp_id) loop
               --
               vn_fase := 21;
               --
               j := nvl(j,0) + 1;
               --
               vn_fase := 22;
               --
               vt_bi_tab_reg_d150(i)(j).reg           := 'D150';
               vt_bi_tab_reg_d150(i)(j).cod_mun_orig  := rec_d150.cod_mun_orig;
               vt_bi_tab_reg_d150(i)(j).cod_mun_dest  := rec_d150.cod_mun_dest;
               vt_bi_tab_reg_d150(i)(j).veic_id       := rec_d150.veic_id;
               vt_bi_tab_reg_d150(i)(j).viagem        := rec_d150.viagem;
               vt_bi_tab_reg_d150(i)(j).ind_tfa       := rec_d150.dm_ind_tfa;
               vt_bi_tab_reg_d150(i)(j).vl_peso_tx    := rec_d150.vl_peso_tx;
               vt_bi_tab_reg_d150(i)(j).vl_tx_terr    := rec_d150.vl_tx_terr;
               vt_bi_tab_reg_d150(i)(j).vl_tx_red     := rec_d150.vl_tx_red;
               vt_bi_tab_reg_d150(i)(j).vl_out        := rec_d150.vl_out;
               vt_bi_tab_reg_d150(i)(j).vl_tx_adv     := rec_d150.vl_tx_adv;
               --
            end loop;
            --
            vn_fase := 23;
            --
            j := 0;
            --
            for rec_d160 in c_d160(rec_d100.conhectransp_id) loop
               --
               vn_fase := 24;
               --
               j := nvl(j,0) + 1;
               --
               vn_fase := 25;
               --
               vt_bi_tab_reg_d160(i)(j).reg            := 'D160';
               vt_bi_tab_reg_d160(i)(j).despacho       := rec_d160.despacho;
               vt_bi_tab_reg_d160(i)(j).cnpj_cpf_rem   := rec_d160.cnpj_cpf_rem;
               vt_bi_tab_reg_d160(i)(j).ie_rem         := rec_d160.ie_rem;
               vt_bi_tab_reg_d160(i)(j).cod_mun_ori    := rec_d160.cod_mun_ori;
               vt_bi_tab_reg_d160(i)(j).cnpj_cfp_dest  := rec_d160.cnpj_cpf_dest;
               vt_bi_tab_reg_d160(i)(j).ie_dest        := rec_d160.ie_dest;
               vt_bi_tab_reg_d160(i)(j).cod_mun_dest   := rec_d160.cod_mun_dest;
               --
               vn_fase := 26;
               --
               k := 0;
               --
               for rec_d161 in c_d161(rec_d160.id) loop
                  --
                  vn_fase := 27;
                  --
                  k := nvl(k,0) + 1;
                  --
                  vn_fase := 28;
                  --
                  vt_tri_tab_reg_d161(i)(j)(k).reg            := 'D161';
                  vt_tri_tab_reg_d161(i)(j)(k).ind_carga      := rec_d161.dm_ind_carga;
                  vt_tri_tab_reg_d161(i)(j)(k).cnpj_cpf_col   := rec_d161.cnpj_cpf_col;
                  vt_tri_tab_reg_d161(i)(j)(k).ie_col         := rec_d161.ie_col;
                  vt_tri_tab_reg_d161(i)(j)(k).cod_mun_col    := rec_d161.cod_mun_col;
                  vt_tri_tab_reg_d161(i)(j)(k).cnpj_cpf_entg  := rec_d161.cnpj_cpf_entg;
                  vt_tri_tab_reg_d161(i)(j)(k).ie_entg        := rec_d161.ie_entg;
                  vt_tri_tab_reg_d161(i)(j)(k).cod_mun_entg   := rec_d161.cod_mun_entg;
                  --
               end loop;
               --
               vn_fase := 29;
               --
               k := 0;
               --
               for rec_d162 in c_d162(rec_d160.id) loop
                  --
                  vn_fase := 30;
                  --
                  k := nvl(k,0) + 1;
                  --
                  vn_fase := 31;
                  --
                  vt_tri_tab_reg_d162(i)(j)(k).reg            := 'D162';
                  vt_tri_tab_reg_d162(i)(j)(k).cod_mod        := rec_d162.cod_mod;
                  vt_tri_tab_reg_d162(i)(j)(k).ser            := rec_d162.serie;
                  vt_tri_tab_reg_d162(i)(j)(k).num_doc        := rec_d162.num_doc;
                  vt_tri_tab_reg_d162(i)(j)(k).dt_doc         := rec_d162.dt_doc;
                  vt_tri_tab_reg_d162(i)(j)(k).vl_doc         := rec_d162.vl_doc;
                  vt_tri_tab_reg_d162(i)(j)(k).vl_merc        := rec_d162.vl_merc;
                  vt_tri_tab_reg_d162(i)(j)(k).qtd_vol        := rec_d162.qtd_vol;
                  vt_tri_tab_reg_d162(i)(j)(k).peso_btr       := rec_d162.peso_brt;
                  vt_tri_tab_reg_d162(i)(j)(k).peso_liq       := rec_d162.peso_liq;
                  --
               end loop;
               --
            end loop;
            --
            vn_fase := 32;
            --
            j := 0;
            --
            for rec_d170 in c_d170(rec_d100.conhectransp_id) loop
               --
               vn_fase := 33;
               --
               j := nvl(j,0) + 1;
               --
               vn_fase := 34;
               --
               vt_bi_tab_reg_d170(i)(j).reg             := 'D170';
               vt_bi_tab_reg_d170(i)(j).cod_part_consg  := pk_csf.fkg_pessoa_cod_part (rec_d170.pessoa_id_consg);
               vt_bi_tab_reg_d170(i)(j).cod_part_red    := pk_csf.fkg_pessoa_cod_part (rec_d170.pessoa_id_red);
               vt_bi_tab_reg_d170(i)(j).cod_mun_orig    := rec_d170.cod_mun_orig;
               vt_bi_tab_reg_d170(i)(j).cod_mun_dest    := rec_d170.cod_mun_dest;
               vt_bi_tab_reg_d170(i)(j).otm             := rec_d170.otm;
               vt_bi_tab_reg_d170(i)(j).ind_nat_frt     := rec_d170.dm_ind_nat_frt;
               vt_bi_tab_reg_d170(i)(j).vl_liq_frt      := rec_d170.vl_liq_frt;
               vt_bi_tab_reg_d170(i)(j).vl_gris         := rec_d170.vl_gris;
               vt_bi_tab_reg_d170(i)(j).vl_pdg          := rec_d170.vl_pdg;
               vt_bi_tab_reg_d170(i)(j).vl_out          := rec_d170.vl_out;
               vt_bi_tab_reg_d170(i)(j).vl_frt          := rec_d170.vl_frt;
               vt_bi_tab_reg_d170(i)(j).veic_id         := rec_d170.veic_id;
               vt_bi_tab_reg_d170(i)(j).uf_id           := rec_d170.uf_id;
               --
               vn_fase := 34.1;
               --
               --Monta arquivo auxiliar do consignatário.
               if nvl(rec_d170.pessoa_id_consg, 0) > 0 then
                  --
                  vn_fase := 34.2;
                  --
                  pkb_monta_reg_0150( en_pessoa_id => rec_d170.pessoa_id_consg );
                  --
               end if;
               --
               vn_fase := 34.3;
               --
               --Monta arquivo auxiliar do redespacho.
               if nvl(rec_d170.pessoa_id_red, 0) > 0 then
                  --
                  vn_fase := 34.4;
                  --
                  pkb_monta_reg_0150( en_pessoa_id => rec_d170.pessoa_id_red );
                  --
               end if;
               --
            end loop;
            --
            vn_fase := 35;
            --
            j := 0;
            --
            for rec_d180 in c_d180(rec_d100.conhectransp_id) loop
               --
               vn_fase := 36;
               --
               j := nvl(j,0) + 1;
               --
               vn_fase := 37;
               --
               vt_bi_tab_reg_d180(i)(j).reg             := 'D180';
               vt_bi_tab_reg_d180(i)(j).num_seq         := rec_d180.num_seq;
               vt_bi_tab_reg_d180(i)(j).ind_emit        := rec_d180.dm_ind_emit;
               vt_bi_tab_reg_d180(i)(j).cnpj_cpf_emit   := rec_d180.cnpj_cpf_emit;
               vt_bi_tab_reg_d180(i)(j).uf_emit         := rec_d180.uf_emit;
               vt_bi_tab_reg_d180(i)(j).ie_emit         := rec_d180.ie_emit;
               vt_bi_tab_reg_d180(i)(j).cod_mun_orig    := rec_d180.cod_mun_orig;
               vt_bi_tab_reg_d180(i)(j).cnpj_cpf_tom    := rec_d180.cnpj_cpf_tom;
               vt_bi_tab_reg_d180(i)(j).uf_tom          := rec_d180.uf_tom;
               vt_bi_tab_reg_d180(i)(j).ie_tom          := rec_d180.ie_tom;
               vt_bi_tab_reg_d180(i)(j).cod_mun_dest    := rec_d180.cod_mun_dest;
               vt_bi_tab_reg_d180(i)(j).cod_mod         := rec_d180.cod_mod;
               vt_bi_tab_reg_d180(i)(j).ser             := rec_d180.serie;
               vt_bi_tab_reg_d180(i)(j).sub             := rec_d180.subserie;
               vt_bi_tab_reg_d180(i)(j).num_doc         := rec_d180.num_doc;
               vt_bi_tab_reg_d180(i)(j).dt_doc          := rec_d180.dt_doc;
               vt_bi_tab_reg_d180(i)(j).vl_doc          := rec_d180.vl_doc;
               --
            end loop;
            --
         end if;
         --
         vn_fase := 38;
         --
         j := 0;
         -- Monta o REGISTRO D190: REGISTRO ANALÍTICO DOS DOCUMENTOS (CÓDIGO 07, 08, 8B, 09, 10, 11, 26, 27, 57 e 67).
         for rec_d190 in c_d190( rec_d100.conhectransp_id ) loop
            exit when c_d190%notfound or (c_d190%notfound) is null;
            --
            vn_fase := 39;
            --
            j := nvl(j,0) + 1;
            --
            vt_bi_tab_reg_d190(i)(j).reg         := 'D190';
            vt_bi_tab_reg_d190(i)(j).cst_icms    := lpad(trim(pk_csf.fkg_Cod_ST_cod ( en_id_st => rec_d190.codst_id )), 3, '0');
            vt_bi_tab_reg_d190(i)(j).cfop        := pk_csf.fkg_cfop_cd ( en_cfop_id => rec_d190.cfop_id );
            vt_bi_tab_reg_d190(i)(j).aliq_icms   := rec_d190.aliq_icms;
            vt_bi_tab_reg_d190(i)(j).vl_opr      := rec_d190.vl_opr;
            vt_bi_tab_reg_d190(i)(j).vl_bc_icms  := rec_d190.vl_bc_icms;
            vt_bi_tab_reg_d190(i)(j).vl_icms     := rec_d190.vl_icms;
            vt_bi_tab_reg_d190(i)(j).vl_red_bc   := rec_d190.vl_red_bc;
            vt_bi_tab_reg_d190(i)(j).cod_obs     := pk_csf.fkg_cd_obs_lancto_fiscal ( rec_d190.obslanctofiscal_id );
            --
            vn_fase := 40;
            -- Monta arquivo auxiliar 0460
            if nvl(rec_d190.obslanctofiscal_id, 0) > 0 then
               --
               vn_fase := 41;
               --
               pkb_monta_reg_0460 (en_obslanctofiscal_id => rec_d190.obslanctofiscal_id);
               --
            end if;
            --
         end loop;
         --
         vn_fase := 42;
         --
         j := 0;
         --
         -- Monta o REGISTRO D195: Observações do Lançamento Fiscal
         for rec_d195 in c_d195( rec_d100.conhectransp_id ) loop
            exit when c_d195%notfound or (c_d195%notfound) is null;
            --
            vn_fase := 43;
            --
            j := nvl(j,0) + 1;
            --
            vt_bi_tab_reg_d195(i)(j).reg         := 'D195';
            vt_bi_tab_reg_d195(i)(j).cod_obs     := pk_csf.fkg_cd_obs_lancto_fiscal ( rec_d195.obslanctofiscal_id );
            vt_bi_tab_reg_d195(i)(j).txt_compl   := rec_d195.txt_compl;
            --
            vn_fase := 44;
            -- Monta arquivo auxiliar 0460
            if nvl(rec_d195.obslanctofiscal_id, 0) > 0 then
               --
               vn_fase := 45;
               --
               pkb_monta_reg_0460 (en_obslanctofiscal_id => rec_d195.obslanctofiscal_id);
               --
            end if;
            --
            k := 0;
            --
            vn_fase := 46;
            --
            -- Monta o REGISTRO D197: OUTRAS OBRIGAÇÕES TRIBUTÁRIAS, AJUSTES E INFORMAÇÕES DE VALORES PROVENIENTES DE DOCUMENTO FISCAL
            for rec_d197 in c_d197 ( rec_d195.id ) loop
               exit when c_d197%notfound or (c_d197%notfound) is null;
               --
               k := nvl(k,0) + 1;
               --
               vn_fase := 47;
               --
               vt_tri_tab_reg_d197(i)(j)(k).reg             := 'D197';
               vt_tri_tab_reg_d197(i)(j)(k).cod_aj          := pk_csf_efd.fkg_cod_ocor_aj_icms_cod_aj (rec_d197.codocorajicms_id);
               vt_tri_tab_reg_d197(i)(j)(k).descr_compl_aj  := rec_d197.descr_compl_aj;
               vt_tri_tab_reg_d197(i)(j)(k).cod_item        := null;
               vt_tri_tab_reg_d197(i)(j)(k).vl_bc_icms      := rec_d197.vl_bc_icms;
               vt_tri_tab_reg_d197(i)(j)(k).aliq_icms       := rec_d197.aliq_icms;
               vt_tri_tab_reg_d197(i)(j)(k).vl_icms         := rec_d197.vl_icms;
               vt_tri_tab_reg_d197(i)(j)(k).vl_outros       := rec_d197.vl_outros;
               --
            end loop;
            --
         end loop;
         --
      end if; -- vv_cod_sit not in ('02', '03', '04', '05')
      --
   end loop;
   --
exception
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_monta_reg_D100 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end pkb_monta_reg_D100;

-------------------------------------------------------------------------------------------------------

-- monta o REGISTRO D001: ABERTURA DO BLOCO D
procedure pkb_monta_reg_D001
is
   --
begin
   --
   vt_tab_reg_d001(1).reg := 'D001';
   --
   if nvl(vt_tab_reg_d100.count,0) > 0
      or nvl(vt_tab_reg_d300.count,0) > 0
      or nvl(vt_tab_reg_d400.count,0) > 0
      or nvl(vt_tab_reg_d500.count,0) > 0
      or nvl(vt_tab_reg_d600.count,0) > 0
      or nvl(vt_tab_reg_d695.count,0) > 0
      then
      --
      vt_tab_reg_d001(1).ind_mov := 0;
      --
   else
      --
      vt_tab_reg_d001(1).ind_mov := 1;
      --
   end if;
   -- #69103
   if gt_row_abertura_efd.dm_ind_ativ = '2' then
     --
     vt_tab_reg_d001(1).ind_mov := 1;
     --
   end if;
   --
exception
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_monta_reg_D001: ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end pkb_monta_reg_D001;

-------------------------------------------------------------------------------------------------------

-- procedimento monta registros do BLOCO D: DOCUMENTOS FISCAIS II - SERVIÇOS (ICMS)
procedure pkb_monta_bloco_d
is
   --
   vn_fase  number := 0;
   --
begin
   --
   vn_fase := 1;
   -- #69103
   if gt_row_abertura_efd.dm_ind_ativ <> '2' then
     --
     -- Monta o REGISTRO D100: NOTA FISCAL DE SERVIÇO DE TRANSPORTE (CÓDIGO
     -- 07) E CONHECIMENTOS DE TRANSPORTE RODOVIÁRIO DE CARGAS (CÓDIGO 08), CONHECIMENTOS DE TRANSPORTE DE CARGAS AVULSO
     -- (CÓDIGO 8B), AQUAVIÁRIO DE CARGAS (CÓDIGO 09), AÉREO (CÓDIGO 10), FERROVIÁRIO DE CARGAS (CÓDIGO 11) E MULTIMODAL DE
     -- CARGAS (CÓDIGO 26), NOTA FISCAL DE TRANSPORTE FERROVIÁRIO DE CARGA ( CÓDIGO 27) E CONHECIMENTO DE TRANSPORTE ELETRÔNICO - CT-e (CÓDIGO 57 e 67).
     pkb_monta_reg_D100;
     --
     vn_fase := 2;
     -- monta o REGISTRO D300: REGISTRO ANALÍTICO DOS BILHETES CONSOLIDADOS DE PASSAGEM RODOVIÁRIO (CÓDIGO 13),
     -- DE PASSAGEM AQUAVIÁRIO (CÓDIGO 14), DE PASSAGEM E NOTA DE BAGAGEM (CÓDIGO 15) E DE PASSAGEM FERROVIÁRIO (CÓDIGO 16).
     pkb_monta_reg_d300;
     --
     vn_fase := 3;
     -- monta o REGISTRO D350 EQUIPAMENTO ECF (CÓDIGOS 2E, 13, 14, 15 e 16).
     pkb_monta_reg_d350;
     --
     vn_fase := 4;
     -- monta o REGISTRO D400: RESUMO DE MOVIMENTO DIÁRIO - RMD (CÓDIGO 18)
     pkb_monta_reg_d400;
     --
     vn_fase := 5;
     -- REGISTRO D500: NOTA FISCAL DE SERVIÇO DE COMUNICAÇÃO (CÓDIGO 21) E NOTA FISCAL DE SERVIÇO DE TELECOMUNICAÇÃO (CÓDIGO 22)
     pkb_monta_reg_D500;
     --
     vn_fase := 6;
     -- REGISTRO D600: CONSOLIDAÇÃO DA PRESTAÇÃO DE SERVIÇOS - NOTAS DE SERVIÇO DE COMUNICAÇÃO (CÓDIGO 21) E DE SERVIÇO DE
     -- TELECOMUNICAÇÃO (CÓDIGO 22)
     pkb_monta_reg_D600;
     --
     vn_fase := 7;
     -- REGISTRO D695: CONSOLIDAÇÃO DA PRESTAÇÃO DE SERVIÇOS - NOTAS DE SERVIÇO DE COMUNICAÇÃO (CÓDIGO 21) E DE SERVIÇO DE
     -- TELECOMUNICAÇÃO (CÓDIGO 22)
     pkb_monta_reg_D695;
     --
   end if;
   --
   vn_fase := 8;
   -- monta o REGISTRO D001: ABERTURA DO BLOCO D
   pkb_monta_reg_D001;
   --
   vn_fase := 9;
   -- Monta o REGISTRO D990: ENCERRAMENTO DO BLOCO D.
   pkb_monta_reg_D990;
   --
exception
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_monta_bloco_d fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end pkb_monta_bloco_d;

-------------------------------------------------------------------------------------------------------

-- Monta o REGISTRO C990: ENCERRAMENTO DO BLOCO C
procedure pkb_monta_reg_C990
is
   --
begin
   --
   vt_tab_reg_c990(1).reg := 'C990';
   vt_tab_reg_c990(1).qtd_lin_c := nvl(fkg_qtde_linha_reg_c001,0)
                                   + nvl(fkg_qtde_linha_reg_c100,0)
                                   + nvl(fkg_qtde_linha_reg_c101,0)
                                   + nvl(fkg_qtde_linha_reg_c105,0)
                                   + nvl(fkg_qtde_linha_reg_c110,0)
                                   + nvl(fkg_qtde_linha_reg_c111,0)
                                   + nvl(fkg_qtde_linha_reg_c112,0)
                                   + nvl(fkg_qtde_linha_reg_c113,0)
                                   + nvl(fkg_qtde_linha_reg_c114,0)
                                   + nvl(fkg_qtde_linha_reg_c115,0)
                                   + nvl(fkg_qtde_linha_reg_c116,0)
                                   + nvl(fkg_qtde_linha_reg_c120,0)
                                   + nvl(fkg_qtde_linha_reg_c130,0)
                                   + nvl(fkg_qtde_linha_reg_c140,0)
                                   + nvl(fkg_qtde_linha_reg_c141,0)
                                   + nvl(fkg_qtde_linha_reg_c160,0)
                                   + nvl(fkg_qtde_linha_reg_c165,0)
                                   + nvl(fkg_qtde_linha_reg_c170,0)
                                   + nvl(fkg_qtde_linha_reg_c171,0)
                                   + nvl(fkg_qtde_linha_reg_c172,0)
                                   + nvl(fkg_qtde_linha_reg_c173,0)
                                   + nvl(fkg_qtde_linha_reg_c174,0)
                                   + nvl(fkg_qtde_linha_reg_c175,0)
                                   + nvl(fkg_qtde_linha_reg_c176,0)
                                   + nvl(fkg_qtde_linha_reg_c177,0)
                                   + nvl(fkg_qtde_linha_reg_c178,0)
                                   + nvl(fkg_qtde_linha_reg_c179,0)
                                   + nvl(fkg_qtde_linha_reg_c190,0)
                                   + nvl(fkg_qtde_linha_reg_c191,0)
                                   + nvl(fkg_qtde_linha_reg_c195,0)
                                   + nvl(fkg_qtde_linha_reg_c197,0)
                                   + nvl(fkg_qtde_linha_reg_c300,0)
                                   + nvl(fkg_qtde_linha_reg_c310,0)
                                   + nvl(fkg_qtde_linha_reg_c320,0)
                                   + nvl(fkg_qtde_linha_reg_c321,0)
                                   + nvl(fkg_qtde_linha_reg_c350,0)
                                   + nvl(fkg_qtde_linha_reg_c370,0)
                                   + nvl(fkg_qtde_linha_reg_c390,0)
                                   + nvl(fkg_qtde_linha_reg_c400,0)
                                   + nvl(fkg_qtde_linha_reg_c405,0)
                                   + nvl(fkg_qtde_linha_reg_c410,0)
                                   + nvl(fkg_qtde_linha_reg_c420,0)
                                   + nvl(fkg_qtde_linha_reg_c425,0)
                                   + nvl(fkg_qtde_linha_reg_c460,0)
                                   + nvl(fkg_qtde_linha_reg_c470,0)
                                   + nvl(fkg_qtde_linha_reg_c490,0)
                                   + nvl(fkg_qtde_linha_reg_c495,0)
                                   + nvl(fkg_qtde_linha_reg_c500,0)
                                   + nvl(fkg_qtde_linha_reg_c510,0)
                                   + nvl(fkg_qtde_linha_reg_c590,0)
                                   + nvl(fkg_qtde_linha_reg_c591,0)
                                   + nvl(fkg_qtde_linha_reg_c595,0)
                                   + nvl(fkg_qtde_linha_reg_c597,0)
                                   + nvl(fkg_qtde_linha_reg_c600,0)
                                   + nvl(fkg_qtde_linha_reg_c601,0)
                                   + nvl(fkg_qtde_linha_reg_c610,0)
                                   + nvl(fkg_qtde_linha_reg_c690,0)
                                   + nvl(fkg_qtde_linha_reg_c700,0)
                                   + nvl(fkg_qtde_linha_reg_c790,0)
                                   + nvl(fkg_qtde_linha_reg_c791,0)
                                   + nvl(fkg_qtde_linha_reg_c800,0)
                                   + nvl(fkg_qtde_linha_reg_c850,0)
                                   + nvl(fkg_qtde_linha_reg_c860,0)
                                   + nvl(fkg_qtde_linha_reg_c890,0)
                                   + 1; -- "1" representa o C990
   --
exception
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_monta_reg_C990: ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end pkb_monta_reg_C990;

-------------------------------------------------------------------------------------------------------

-- Monta o REGISTRO C860: IDENTIFICAÇÃO DO EQUIPAMENTO SAT-CF-E
procedure pkb_monta_reg_C860
is
   --
   vn_fase  number := 0;
   i        pls_integer;
   j        pls_integer;
   -- Montar Registro C860
   cursor c_c860 is
      select mf.cod_mod       cod_mod
           , cf.nro_serie_sat nr_sat
           , cf.dt_emissao    dt_doc
           , min(cf.nro_cfe)  doc_ini
           , max(cf.nro_cfe)  doc_fim
        from cupom_fiscal cf
           , mod_fiscal   mf
           , sit_docto    sd
       where cf.empresa_id        = gt_row_abertura_efd.empresa_id
         and trunc(cf.dt_emissao) between gt_row_abertura_efd.dt_ini and gt_row_abertura_efd.dt_fim
         and cf.dm_st_proc       in (4,7) -- 4-Autorizado, 7-Cancelado
         and mf.id                = cf.modfiscal_id
         and mf.cod_mod           = '59' -- Cupom Fiscal Eletrônico
         and sd.id                = cf.sitdocto_id
         and sd.cd               in ('00', '01', '02', '03') -- 00-Documento regular, 01-Documento regular extemporâneo, 02-Documento cancelado, 03-Documento cancelado extemporâneo
       group by mf.cod_mod
           , cf.nro_serie_sat
           , cf.dt_emissao
       order by mf.cod_mod
           , cf.nro_serie_sat
           , cf.dt_emissao;
   -- Montar Registro C890
   cursor c_c890( en_nr_sat   in cupom_fiscal.nro_serie_sat%type
               , ed_dt_doc   in cupom_fiscal.dt_emissao%type
               , en_doc_ini  in cupom_fiscal.nro_cfe%type
               , en_doc_fim  in cupom_fiscal.nro_cfe%type
               , ev_cod_mod  in mod_fiscal.cod_mod%type ) is
      select ic.dm_orig||cs.cod_st cst_icms
           , co.cd cfop
           , ii.aliq_apli aliq_icms
           --, nvl(sum(nvl(ic.vl_item_liq,0)),0) vl_opr
           , CASE WHEN cf.dm_st_proc = 7 THEN 0
                  ELSE nvl(sum(nvl(ic.vl_item_liq,0)+nvl(ic.vl_rateio_descto,0)),0) END vl_opr
           , CASE WHEN cf.dm_st_proc = 7 THEN 0
                  ELSE nvl(sum(nvl(ii.vl_base_calc,0)),0) END vl_bc_icms
           , CASE WHEN cf.dm_st_proc = 7 THEN 0
                  ELSE nvl(sum(nvl(ii.vl_imp_trib,0)),0) END vl_icms
           , '' cod_obs
        from cupom_fiscal      cf
           , mod_fiscal        mf
           , sit_docto         sd
           , item_cupom_fiscal ic
           , cfop              co
           , imp_itemcf        ii
           , tipo_imposto      ti
           , cod_st            cs
       where cf.nro_serie_sat      = en_nr_sat
         and cf.dt_emissao         = ed_dt_doc
         and cf.nro_cfe      between en_doc_ini and en_doc_fim
         and cf.dm_st_proc        in (4,7) -- 4-Autorizado, 7-Cancelado
         and mf.id                 = cf.modfiscal_id
         and mf.cod_mod            = ev_cod_mod
         and sd.id                 = cf.sitdocto_id
         and sd.cd                in ('00', '01', '02', '03') -- 00-Documento regular, 01-Documento regular extemporâneo, 02-Documento cancelado, 03-Documento cancelado extemporâneo
         and ic.cupomfiscal_id     = cf.id
         and co.id                 = ic.cfop_id
         and ii.itemcupomfiscal_id = ic.id
         and ti.id                 = ii.tipoimp_id
         and ti.cd                 = 1 -- ICMS
         and cs.id                 = ii.codst_id
       group by ic.dm_orig||cs.cod_st
           , co.cd
           , ii.aliq_apli
       order by ic.dm_orig||cs.cod_st
           , co.cd
           , ii.aliq_apli;
   --
begin
   --
   vn_fase := 1;
   --
   i := 0;
   for rec_c860 in c_c860 loop
      --
      vn_fase := 2;
      --
      i := nvl(i,0) + 1;
      --
      vn_fase := 3;
      --
      vt_tab_reg_c860(i).reg       := 'C860';
      vt_tab_reg_c860(i).cod_mod   := rec_c860.cod_mod;
      vt_tab_reg_c860(i).nr_sat    := rec_c860.nr_sat;
      vt_tab_reg_c860(i).dt_doc    := rec_c860.dt_doc;
      vt_tab_reg_c860(i).doc_ini   := rec_c860.doc_ini;
      vt_tab_reg_c860(i).doc_fim   := rec_c860.doc_fim;
      --
      vn_fase := 4;
      --
      j := 0;
      for rec_c890 in c_c890( en_nr_sat   => rec_c860.nr_sat
                          , ed_dt_doc   => rec_c860.dt_doc
                          , en_doc_ini  => rec_c860.doc_ini
                          , en_doc_fim  => rec_c860.doc_fim
                          , ev_cod_mod  => rec_c860.cod_mod ) loop
         --
         vn_fase := 5;
         --
         j := nvl(j,0) + 1;
         --
         vn_fase := 6;
         --
         vt_bi_tab_reg_c890(i)(j).reg        := 'C890';
         vt_bi_tab_reg_c890(i)(j).cst_icms   := rec_c890.cst_icms;
         vt_bi_tab_reg_c890(i)(j).cfop       := rec_c890.cfop;
         vt_bi_tab_reg_c890(i)(j).aliq_icms  := rec_c890.aliq_icms;
         vt_bi_tab_reg_c890(i)(j).vl_opr     := rec_c890.vl_opr;
         vt_bi_tab_reg_c890(i)(j).vl_bc_icms := rec_c890.vl_bc_icms;
         vt_bi_tab_reg_c890(i)(j).vl_icms    := rec_c890.vl_icms;
         vt_bi_tab_reg_c890(i)(j).cod_obs    := rec_c890.cod_obs;
         --
      end loop;
      --
   end loop;
   --
exception
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_monta_reg_C860: ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end pkb_monta_reg_C860;

-------------------------------------------------------------------------------------------------------

-- Monta o REGISTRO C800: CUPOM FISCAL ELETRÔNICO - SAT (CF-E-SAT) (CÓDIGO 59)
procedure pkb_monta_reg_C800
is
   --
   vn_fase  number := 0;
   i        pls_integer;
   j        pls_integer;
   -- Para registro C800
   cursor c_c800 is
      select cf.id               cupomfiscal_id
           , mf.cod_mod          cod_mod
           , sd.cd               cod_sit
           , cf.nro_cfe          num_cfe
           , cf.dt_emissao       dt_doc
           , ct.vl_tot_cupom     vl_cfe
           , ct.vl_tot_pis       vl_pis
           , ct.vl_tot_cofins    vl_cofins
           , ce.cnpj cnpj_emit
           , cd.cpf cpf_dest
           , cd.cnpj cnpj_dest
           , cf.nro_serie_sat    nr_sat
           , es.ibge_estado||to_char(cf.dt_emissao,'rrmm')||lpad(nvl(ce.cnpj,'0'),14,'0')||mf.cod_mod||lpad(cf.nro_serie_sat,9,'0')||lpad(cf.nro_cfe,6,'0')||lpad(cf.cod_nro_chv,6,'0') chv_cfe
           , ct.vl_tot_desc      vl_desc
           , ct.vl_tot_prod      vl_merc
           , ct.vl_tot_outro     vl_out_da
           , ct.vl_tot_icms      vl_icms
           , ct.vl_tot_pis_st    vl_pis_st
           , ct.vl_tot_cofins_st vl_cofins_st
        from cupom_fiscal       cf
           , mod_fiscal         mf
           , sit_docto          sd
           , estado             es
           , cupom_fiscal_total ct
           , cupom_fiscal_emit  ce
           , cupom_fiscal_dest  cd
       where cf.empresa_id        = gt_row_abertura_efd.empresa_id
         and trunc(cf.dt_emissao) between gt_row_abertura_efd.dt_ini and gt_row_abertura_efd.dt_fim
         and cf.dm_st_proc       in (4,7) -- 4-Autorizado, 7-Cancelado
         and mf.id                = cf.modfiscal_id
         and mf.cod_mod           = '59' -- Cupom Fiscal Eletrônico
         and sd.id                = cf.sitdocto_id
         and sd.cd               in ('00', '01', '02', '03') -- 00-Documento regular, 01-Documento regular extemporâneo, 02-Documento cancelado, 03-Documento cancelado extemporâneo
         and es.id                = cf.estado_id
         and ct.cupomfiscal_id    = cf.id
         and ce.cupomfiscal_id(+) = cf.id
         and cd.cupomfiscal_id(+) = cf.id
       order by cf.id;
   -- Para registro C850
   cursor c_c850( en_cupomfiscal_id in cupom_fiscal.id%type ) is
      select ic.dm_orig||cs.cod_st cst_icms
           , cf.cd cfop
           , ii.aliq_apli aliq_icms
      --   , nvl(sum(nvl(ic.vl_item_liq,0)+nvl(ic.vl_rateio_descto,0)),0) vl_opr
      --   , nvl(sum(nvl(ic.vl_prod,0)) - nvl(sum(ic.vl_rateio_descto),0),0) vl_opr 
      --   , nvl(sum(nvl(ic.vl_prod,0)) - nvl(sum(ic.vl_desc),0) - nvl(sum(ic.vl_rateio_descto),0),0)  vl_opr 
           , nvl(sum(nvl(ic.vl_prod,0)) - nvl(sum(ic.vl_desc),0) - nvl(sum(ic.vl_rateio_descto),0)+ sum(nvl(ic.vl_rateio_acresc,0)),0)   vl_opr 
           , nvl(sum(nvl(ii.vl_base_calc,0)),0) vl_bc_icms
           , nvl(sum(nvl(ii.vl_imp_trib,0)),0) vl_icms
           , '' cod_obs
        from item_cupom_fiscal ic
           , cfop              cf
           , imp_itemcf        ii
           , tipo_imposto      ti
           , cod_st            cs
       where ic.cupomfiscal_id     = en_cupomfiscal_id
         and cf.id                 = ic.cfop_id
         and ii.itemcupomfiscal_id = ic.id
         and ti.id                 = ii.tipoimp_id
         and ti.cd                 = 1 -- ICMS
         and cs.id                 = ii.codst_id
       group by ic.dm_orig||cs.cod_st 
           , cf.cd
           , ii.aliq_apli
       order by ic.dm_orig||cs.cod_st 
           , cf.cd
           , ii.aliq_apli;
   --
begin
   --
   vn_fase := 1;
   --
   i := 0;
   for rec_c800 in c_c800 loop
      --
      vn_fase := 2;
      --
      i := nvl(i,0) + 1;
      --
      vn_fase := 3;
      --
      if rec_c800.cod_sit in ('02','03') then -- 02-Documento cancelado, 03-Documento cancelado extemporâneo
         --
         vn_fase := 3.1;
         vt_tab_reg_c800(i).reg          := 'C800';
         vt_tab_reg_c800(i).cod_mod      := rec_c800.cod_mod;
         vt_tab_reg_c800(i).cod_sit      := rec_c800.cod_sit;
         vt_tab_reg_c800(i).num_cfe      := rec_c800.num_cfe;
         vt_tab_reg_c800(i).nr_sat       := rec_c800.nr_sat;
         vt_tab_reg_c800(i).chv_cfe      := rec_c800.chv_cfe||pk_csf.fkg_mod_11(rec_c800.chv_cfe);
         --
      else
         --
         vn_fase := 3.2;
         vt_tab_reg_c800(i).reg          := 'C800';
         vt_tab_reg_c800(i).cod_mod      := rec_c800.cod_mod;
         vt_tab_reg_c800(i).cod_sit      := rec_c800.cod_sit;
         vt_tab_reg_c800(i).num_cfe      := rec_c800.num_cfe;
         vt_tab_reg_c800(i).dt_doc       := rec_c800.dt_doc;
         vt_tab_reg_c800(i).vl_cfe       := nvl(rec_c800.vl_cfe,0);
         vt_tab_reg_c800(i).vl_pis       := nvl(rec_c800.vl_pis,0);
         vt_tab_reg_c800(i).vl_cofins    := nvl(rec_c800.vl_cofins,0);
         --
         if rec_c800.cnpj_dest is null then
            if rec_c800.cpf_dest is null then
               if rec_c800.cnpj_emit is null then
                  vt_tab_reg_c800(i).cnpj_cpf := lpad('0',14,'0');
               else
                  vt_tab_reg_c800(i).cnpj_cpf := lpad(rec_c800.cnpj_emit,14,'0');
               end if;
            else
               vt_tab_reg_c800(i).cnpj_cpf := lpad(rec_c800.cpf_dest,11,'0');
            end if;
         else
            vt_tab_reg_c800(i).cnpj_cpf := lpad(rec_c800.cnpj_dest,14,'0');
         end if;
         --vt_tab_reg_c800(i).cnpj_cpf     := lpad(rec_c800.cnpj_cpf,14,'0');
         --
         vt_tab_reg_c800(i).nr_sat       := rec_c800.nr_sat;
         vt_tab_reg_c800(i).chv_cfe      := rec_c800.chv_cfe||pk_csf.fkg_mod_11(rec_c800.chv_cfe);
         vt_tab_reg_c800(i).vl_desc      := nvl(rec_c800.vl_desc,0);
         vt_tab_reg_c800(i).vl_merc      := nvl(rec_c800.vl_merc,0);
         vt_tab_reg_c800(i).vl_out_da    := nvl(rec_c800.vl_out_da,0);
         vt_tab_reg_c800(i).vl_icms      := nvl(rec_c800.vl_icms,0);
         vt_tab_reg_c800(i).vl_pis_st    := nvl(rec_c800.vl_pis_st,0);
         vt_tab_reg_c800(i).vl_cofins_st := nvl(rec_c800.vl_cofins_st,0);
         --
      end if;
      --
      vn_fase := 4;
      --
      if rec_c800.cod_sit not in ('02','03') then -- 02-Documento cancelado, 03-Documento cancelado extemporâneo
         --
         vn_fase := 5;
         --
         j := 0;
         --
         for rec_c850 in c_c850( en_cupomfiscal_id => rec_c800.cupomfiscal_id )
         loop
            --
            vn_fase := 6;
            --
            j := nvl(j,0) + 1;
            --
            vn_fase := 7;
            --
            vt_bi_tab_reg_c850(i)(j).reg        := 'C850';
            vt_bi_tab_reg_c850(i)(j).cst_icms   := rec_c850.cst_icms;
            vt_bi_tab_reg_c850(i)(j).cfop       := rec_c850.cfop;
            vt_bi_tab_reg_c850(i)(j).aliq_icms  := rec_c850.aliq_icms;
            vt_bi_tab_reg_c850(i)(j).vl_opr     := rec_c850.vl_opr;
            vt_bi_tab_reg_c850(i)(j).vl_bc_icms := rec_c850.vl_bc_icms;
            vt_bi_tab_reg_c850(i)(j).vl_icms    := rec_c850.vl_icms;
            vt_bi_tab_reg_c850(i)(j).cod_obs    := rec_c850.cod_obs;
            --
         end loop;
         --
      end if;
      --
   end loop;
   --
exception
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_monta_reg_C800 (fase = '||vn_fase||'): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end pkb_monta_reg_C800;

-------------------------------------------------------------------------------------------------------

-- Monta o REGISTRO C700: CONSOLIDAÇÃO DOS DOCUMENTOS NF modelos 06, 28, 29 - (EMPRESAS OBRIGADAS AO CONVÊNIO ICMS 115/03)
procedure pkb_monta_reg_C700
is
   --
   vn_fase  number := 0;
   i        pls_integer;
   j        pls_integer;
   k        pls_integer;
   --
   cursor c_700 is
   select nf.id
        , mf.cod_mod
        , nf.serie
        , nf.nro_ord_ini
        , nf.nro_ord_fin
        , nf.dt_doc_ini
        , nf.dt_doc_fin
        , nf.nom_mest
        , nf.chv_cod_dig
     from cons_nf_via_unica nf
        , mod_fiscal        mf
    where nf.empresa_id        = gt_row_abertura_efd.empresa_id
      and trunc(nf.dt_doc_ini) between gt_row_abertura_efd.dt_ini and gt_row_abertura_efd.dt_fim
      and nf.dm_st_proc        = 1 -- Validada
      and mf.id                = nf.modfiscal_id
      and mf.cod_mod           in ('06', '29', '28')
    order by mf.cod_mod
        , nf.serie
        , nf.nro_ord_ini;
   --
   cursor c_790 ( en_consnfviaunica_id cons_nf_via_unica.id%type ) is
   select r.id
        , st.cod_st
        , c.cd cfop
        , r.aliq_icms
        , r.vl_opr
        , r.vl_bc_icms
        , r.vl_icms
        , r.vl_bc_icms_st
        , r.vl_icms_st
        , r.vl_red_bc
        , r.obslanctofiscal_id
     from reg_anal_cons_nf_via_unica r
        , cod_st                     st
        , cfop                       c
    where r.consnfviaunica_id = en_consnfviaunica_id
      and st.id               = r.codst_id
      and c.id                = r.cfop_id
    order by st.cod_st
        , c.cd
        , r.aliq_icms;
   --
   cursor c_791 ( en_reganalconsnfviaunica_id reg_anal_cons_nf_via_unica.id%type ) is
   select i.id
        , e.sigla_estado
        , i.vl_bc_icms_st
        , i.vl_icms_st
     from inf_consnfviaun_icmsst_uf i
        , estado                    e
    where i.reganalconsnfviaunica_id = en_reganalconsnfviaunica_id
      and e.id                       = i.estado_id
    order by e.sigla_estado;
   --
begin
   --
   vn_fase := 1;
   --
   i := 0;
   for rec_700 in c_700 loop
      --
      vn_fase := 2;
      --
      i := nvl(i,0) + 1;
      --
      vn_fase := 3;
      --
      vt_tab_reg_c700(i).reg            := 'C700';
      vt_tab_reg_c700(i).cod_mod        := rec_700.cod_mod;
      vt_tab_reg_c700(i).ser            := rec_700.serie;
      vt_tab_reg_c700(i).nro_ord_ini    := rec_700.nro_ord_ini;
      vt_tab_reg_c700(i).nro_ord_fin    := rec_700.nro_ord_fin;
      vt_tab_reg_c700(i).dt_doc_ini     := rec_700.dt_doc_ini;
      vt_tab_reg_c700(i).dt_doc_fin     := rec_700.dt_doc_fin;
      vt_tab_reg_c700(i).nom_mest       := rec_700.nom_mest;
      vt_tab_reg_c700(i).chv_cod_dig    := rec_700.chv_cod_dig;
      --
      vn_fase := 4;
      --
      j := 0;
      for rec_790 in c_790(rec_700.id) loop
         --
         vn_fase := 5;
         --
         j := nvl(j,0) + 1;
         --
         vn_fase := 6;
         --
         vt_bi_tab_reg_c790(i)(j).reg            := 'C790';
         vt_bi_tab_reg_c790(i)(j).cst_icms       := rec_790.cod_st;
         vt_bi_tab_reg_c790(i)(j).cfop           := rec_790.cfop;
         vt_bi_tab_reg_c790(i)(j).aliq_icms      := rec_790.aliq_icms;
         vt_bi_tab_reg_c790(i)(j).vl_opr         := rec_790.vl_opr;
         vt_bi_tab_reg_c790(i)(j).vl_bc_icms     := rec_790.vl_bc_icms;
         vt_bi_tab_reg_c790(i)(j).vl_icms        := rec_790.vl_icms;
         vt_bi_tab_reg_c790(i)(j).vl_bc_icms_st  := rec_790.vl_bc_icms_st;
         vt_bi_tab_reg_c790(i)(j).vl_icms_st     := rec_790.vl_icms_st;
         vt_bi_tab_reg_c790(i)(j).vl_red_bc      := rec_790.vl_red_bc;
         vt_bi_tab_reg_c790(i)(j).cod_obs        := pk_csf.fkg_cd_obs_lancto_fiscal (rec_790.obslanctofiscal_id);
         --
         vn_fase := 6.1;
         -- Monta arquivo auxiliar 0460
         if nvl(rec_790.obslanctofiscal_id, 0) > 0 then
            --
            vn_fase := 6.2;
            --
            pkb_monta_reg_0460 (en_obslanctofiscal_id => rec_790.obslanctofiscal_id);
            --
         end if;
         --
         vn_fase := 7;
         --
         k := 0;
         for rec_791 in c_791(rec_790.id) loop
            --
            vn_fase := 8;
            --
            k := nvl(k,0) + 1;
            --
            vn_fase := 9;
            --
            vt_tri_tab_reg_c791(i)(j)(k).reg            := 'C791';
            vt_tri_tab_reg_c791(i)(j)(k).uf             := rec_791.sigla_estado;
            vt_tri_tab_reg_c791(i)(j)(k).vl_bc_icms_st  := rec_791.vl_bc_icms_st;
            vt_tri_tab_reg_c791(i)(j)(k).vl_icms_st     := rec_791.vl_icms_st;
            --
         end loop;
         --
      end loop;
      --
   end loop;
   --
exception
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_monta_reg_C700 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end pkb_monta_reg_C700;

-------------------------------------------------------------------------------------------------------

-- Monta o REGISTRO C600: CONSOLIDAÇÃO DIÁRIA NF modelos 06, 28, 29 - (EMPRESAS NÃO OBRIGADAS AO CONVÊNIO ICMS 115/03)
procedure pkb_monta_reg_C600
is
   --
   vn_fase  number := 0;
   i        pls_integer;
   j        pls_integer;
   --
   cursor c_600 is
   select cnf.id
        , mf.cod_mod
        , c.ibge_cidade
        , cnf.serie
        , cnf.subserie
        , ccic.cod_cons
        , cnf.qtde_cons
        , cnf.qtde_canc
        , cnf.dt_doc
        , cnf.vl_doc
        , cnf.vl_desc
        , cnf.cons_acm_kwh
        , cnf.vl_forn
        , cnf.vl_serv_nt
        , cnf.vl_terc
        , cnf.vl_da
        , cnf.vl_bc_icms
        , cnf.vl_icms
        , cnf.vl_bc_icms_st
        , cnf.vl_icms_st
        , cnf.vl_pis
        , cnf.vl_cofins
     from cons_nota_fiscal cnf
        , mod_fiscal       mf
        , cidade           c
        , cod_cons_item_cont ccic
    where cnf.empresa_id    = gt_row_abertura_efd.empresa_id
      and trunc(cnf.dt_doc) between gt_row_abertura_efd.dt_ini and gt_row_abertura_efd.dt_fim
      and cnf.dm_st_proc    = 1 -- Validada
      and mf.id             = cnf.modfiscal_id
      and mf.cod_mod        in ('06', '29', '28')
      and c.id              = cnf.cidade_id
      and ccic.id(+)        = cnf.codconsitemcont_id
    order by cnf.serie
        , cnf.subserie
        , cnf.dt_doc;
   --
   cursor c_601 ( en_consnotafiscal_id cons_nota_fiscal.id%type ) is
   select cnfc.num_doc_canc
     from cons_nota_fiscal_canc   cnfc
    where cnfc.consnotafiscal_id  = en_consnotafiscal_id
    order by cnfc.num_doc_canc;
   --
   cursor c_610 ( en_consnotafiscal_id cons_nota_fiscal.id%type ) is
   select icnf.id
        , ccic.cod_class
        , icnf.qtde_acm
        , icnf.vl_item
        , icnf.vl_desc
        , st.cod_st
        , c.cd cfop
        , icnf.aliq_icms
        , icnf.vl_bc_icms
        , icnf.vl_icms
        , icnf.vl_bc_icms_st
        , icnf.vl_icms_st
        , icnf.vl_pis
        , icnf.vl_cofins
        , icnf.cod_cta
        , icnf.item_id
        , icnf.unidade_id
     from item_cons_nota_fiscal icnf
        , class_cons_item_cont  ccic
        , cod_st                st
        , cfop                  c
    where icnf.consnotafiscal_id = en_consnotafiscal_id
      and ccic.id(+)             = icnf.classconsitemcont_id
      and st.id                  = icnf.codst_id
      and c.id                   = icnf.cfop_id
    order by icnf.item_id;
   --
   cursor c_690 ( en_consnotafiscal_id cons_nota_fiscal.id%type ) is
   select r.id
        , st.cod_st
        , c.cd cfop
        , r.aliq_icms
        , r.vl_opr
        , r.vl_bc_icms
        , r.vl_icms
        , r.vl_red_bc
        , r.vl_bc_icms_st
        , r.vl_icms_st
        , r.obslanctofiscal_id
     from reg_anal_cons_nota_fiscal r
        , cod_st                    st
        , cfop                      c
    where r.consnotafiscal_id = en_consnotafiscal_id
      and st.id               = r.codst_id
      and c.id                = r.cfop_id
    order by st.cod_st
        , c.cd
        , r.aliq_icms;
   --
begin
   --
   vn_fase := 1;
   --
   i := 0;
   for rec_600 in c_600 loop
      --
      vn_fase := 2;
      --
      i := nvl(i,0) + 1;
      --
      vn_fase := 3;
      --
      vt_tab_reg_c600(i).reg            := 'C600';
      vt_tab_reg_c600(i).cod_mod        := rec_600.cod_mod;
      vt_tab_reg_c600(i).cod_mun        := rec_600.ibge_cidade;
      vt_tab_reg_c600(i).ser            := rec_600.serie;
      vt_tab_reg_c600(i).sub            := rec_600.subserie;
      vt_tab_reg_c600(i).cod_cons       := rec_600.cod_cons;
      vt_tab_reg_c600(i).qtd_cons       := rec_600.qtde_cons;
      vt_tab_reg_c600(i).qtd_canc       := rec_600.qtde_canc;
      vt_tab_reg_c600(i).dt_doc         := rec_600.dt_doc;
      vt_tab_reg_c600(i).vl_doc         := rec_600.vl_doc;
      vt_tab_reg_c600(i).vl_desc        := rec_600.vl_desc;
      vt_tab_reg_c600(i).cons           := rec_600.cons_acm_kwh;
      vt_tab_reg_c600(i).vl_forn        := rec_600.vl_forn;
      vt_tab_reg_c600(i).vl_serv_nt     := rec_600.vl_serv_nt;
      vt_tab_reg_c600(i).vl_terc        := rec_600.vl_terc;
      vt_tab_reg_c600(i).vl_da          := rec_600.vl_da;
      vt_tab_reg_c600(i).vl_bc_icms     := rec_600.vl_bc_icms;
      vt_tab_reg_c600(i).vl_icms        := rec_600.vl_icms;
      vt_tab_reg_c600(i).vl_bc_icms_st  := rec_600.vl_bc_icms_st;
      vt_tab_reg_c600(i).vl_icms_st     := rec_600.vl_icms_st;
      vt_tab_reg_c600(i).vl_pis         := rec_600.vl_pis;
      vt_tab_reg_c600(i).vl_cofins      := rec_600.vl_cofins;
      --
      vn_fase := 4;
      --
      j := 0;
      for rec_601 in c_601(rec_600.id) loop
         --
         vn_fase := 5;
         --
         j := nvl(j,0) + 1;
         --
         vn_fase := 6;
         --
         vt_bi_tab_reg_c601(i)(j).reg            := 'C601';
         vt_bi_tab_reg_c601(i)(j).num_doc_canc   := rec_601.num_doc_canc;
         --
      end loop;
      --
      vn_fase := 7;
      --
      j := 0;
      for rec_610 in c_610(rec_600.id) loop
         --
         vn_fase := 8;
         --
         j := nvl(j,0) + 1;
         --
         vn_fase := 9;
         --
         vt_bi_tab_reg_c610(i)(j).reg            := 'C610';
         vt_bi_tab_reg_c610(i)(j).cod_class      := rec_610.cod_class;
         vt_bi_tab_reg_c610(i)(j).cod_item       := pk_csf.fkg_Item_cod (rec_610.item_id);
         vt_bi_tab_reg_c610(i)(j).qtd            := rec_610.qtde_acm;
         vt_bi_tab_reg_c610(i)(j).unid           := pk_csf.fkg_Unidade_sigla (rec_610.unidade_id);
         vt_bi_tab_reg_c610(i)(j).vl_item        := rec_610.vl_item;
         vt_bi_tab_reg_c610(i)(j).vl_desc        := rec_610.vl_desc;
         vt_bi_tab_reg_c610(i)(j).cst_icms       := rec_610.cod_st;
         vt_bi_tab_reg_c610(i)(j).cfop           := rec_610.cfop;
         vt_bi_tab_reg_c610(i)(j).aliq_icms      := rec_610.aliq_icms;
         vt_bi_tab_reg_c610(i)(j).vl_bc_icms     := rec_610.vl_bc_icms;
         vt_bi_tab_reg_c610(i)(j).vl_icms        := rec_610.vl_icms;
         vt_bi_tab_reg_c610(i)(j).vl_bc_icms_st  := rec_610.vl_bc_icms_st;
         vt_bi_tab_reg_c610(i)(j).vl_icms_st     := rec_610.vl_icms_st;
         vt_bi_tab_reg_c610(i)(j).vl_pis         := rec_610.vl_pis;
         vt_bi_tab_reg_c610(i)(j).vl_cofins      := rec_610.vl_cofins;
         vt_bi_tab_reg_c610(i)(j).cod_cta        := rec_610.cod_cta;
         --
         vn_fase := 9.1;
         --
         --Monta arquivo auxiliar unidade
         if nvl(rec_610.unidade_id, 0) > 0 then
            --
            vn_fase := 9.2;
            --
            pkb_monta_reg_0190( en_unidade_id => rec_610.unidade_id);
            --
         end if;
         --
         vn_fase := 9.3;
         --
         --Monta arquivo auxiliar produto
         if nvl(rec_610.item_id, 0) > 0 then
            --
            vn_fase := 9.4;
            --
            pkb_monta_reg_0200( en_item_id => rec_610.item_id);
            --
         end if;
         --
         vn_fase := 10;
         --
         --Monta arquivo auxiliar para conversao de unidade
         if nvl(rec_610.item_id, 0) > 0 and nvl(rec_610.unidade_id, 0) > 0 then
            --
            vn_fase := 10.1;
            --
            pkb_monta_reg_0220 ( en_item_id => rec_610.item_id
                               , en_unidade_id => rec_610.unidade_id );
            --
         end if;
         --
      end loop;
      --
      vn_fase := 11;
      --
      j := 0;
      for rec_690 in c_690(rec_600.id) loop
         --
         vn_fase := 12;
         --
         j := nvl(j,0) + 1;
         --
         vn_fase := 13;
         --
         vt_bi_tab_reg_c690(i)(j).reg            := 'C690';
         vt_bi_tab_reg_c690(i)(j).cst_icms       := rec_690.cod_st;
         vt_bi_tab_reg_c690(i)(j).cfop           := rec_690.cfop;
         vt_bi_tab_reg_c690(i)(j).aliq_icms      := rec_690.aliq_icms;
         vt_bi_tab_reg_c690(i)(j).vl_opr         := rec_690.vl_opr;
         vt_bi_tab_reg_c690(i)(j).vl_bc_icms     := rec_690.vl_bc_icms;
         vt_bi_tab_reg_c690(i)(j).vl_icms        := rec_690.vl_icms;
         vt_bi_tab_reg_c690(i)(j).vl_red_bc      := rec_690.vl_red_bc;
         vt_bi_tab_reg_c690(i)(j).vl_bc_icms_st  := rec_690.vl_bc_icms_st;
         vt_bi_tab_reg_c690(i)(j).vl_icms_st     := rec_690.vl_icms_st;
         vt_bi_tab_reg_c690(i)(j).cod_obs        := pk_csf.fkg_cd_obs_lancto_fiscal ( rec_690.obslanctofiscal_id );
         --
         vn_fase := 14;
         -- Monta arquivo auxiliar 0460
         if nvl(rec_690.obslanctofiscal_id, 0) > 0 then
            --
            vn_fase := 15;
            --
            pkb_monta_reg_0460 (en_obslanctofiscal_id => rec_690.obslanctofiscal_id);
            --
         end if;
         --
      end loop;
      --
   end loop;
   --
exception
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_monta_reg_C600 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end pkb_monta_reg_C600;

-------------------------------------------------------------------------------------------------------

-- NOVO TÍTULO: REGISTRO C500: NOTA FISCAL/CONTA DE ENERGIA ELÉTRICA (CÓDIGO 06), NOTA FISCAL/CONTA DE FORNECIMENTO D'ÁGUA CANALIZADA (CÓDIGO 29) E
-- NOTA FISCAL CONSUMO FORNECIMENTO DE GÁS (CÓDIGO 28)
-- monta o REGISTRO C500: NOTA FISCAL/CONTA DE ENERGIA ELÉTRICA (CÓDIGO 06) E NOTA FISCAL CONSUMO FORNECIMENTO DE GÁS (CÓDIGO 28).
procedure pkb_monta_reg_C500
is
   --
   vn_fase       number := 0;
   vn_unidade_id number;
   i             pls_integer;
   j             pls_integer;
   k             pls_integer;
   vn_vl_fcp                    number := 0;
   vn_vl_fcp_st                 number := 0;
   vv_volta_origem_dado_pessoa  varchar2(1) := null;      
   --#72837
   vv_ie             juridica.ie%type;  
   vv_ibge_cidade    cidade.ibge_cidade%type;   
   --
   cursor c_nf is
   select nf.id                 notafiscal_id
        , nf.dm_ind_oper        ind_oper
        , nf.dm_ind_emit        ind_emit
        , mf.cod_mod            cod_mod
        , sd.cd                 cod_sit
        , nf.serie              ser
        , nf.sub_serie          sub
        , cod.cod_cons          cod_cons
        , nf.nro_nf             num_doc
        , nf.dt_emiss           dt_doc
        , nf.dt_sai_ent         dt_e_s
        , t.vl_total_nf         vl_doc
        , t.vl_desconto         vl_desc
        , t.vl_forn             vl_forn
        , t.vl_serv_nao_trib    vl_serv_nt
        , t.vl_terc             vl_terc
        , t.vl_outra_despesas   vl_da
        , t.vl_base_calc_icms   vl_bc_icms
        , t.vl_imp_trib_icms    vl_icms
        , t.vl_base_calc_st     vl_bc_icms_st
        , t.vl_imp_trib_st      vl_icms_st
        , t.vl_imp_trib_pis     vl_pis
        , t.vl_imp_trib_cofins  vl_cofins
        , nf.dm_tp_ligacao
        , nf.dm_cod_grupo_tensao
        , nf.pessoa_id
        , nf.inforcompdctofiscal_id
        , nf.nro_chave_nfe  
        , nf.dm_fin_nfe    
        , ci.ibge_cidade     
     from TMP_NOTA_FISCAL         nf
        , mod_fiscal          mf
        , sit_docto           sd
        , TMP_NOTA_FISCAL_TOTAL   t
        , cod_cons_item_cont  cod
        , pessoa                 pe
        , cidade                 ci    
    where nf.empresa_id      = gt_row_abertura_efd.empresa_id
      and nf.dm_st_proc      = 4 -- Autorizada
      and nf.dm_arm_nfe_terc = 0
      and ((nf.dm_ind_emit = 1 and trunc(nvl(nf.dt_sai_ent,nf.dt_emiss)) between trunc(gt_row_abertura_efd.dt_ini) and trunc(gt_row_abertura_efd.dt_fim))
            or
           (nf.dm_ind_emit = 0 and nf.dm_ind_oper = 1 and trunc(nf.dt_emiss) between trunc(gt_row_abertura_efd.dt_ini) and trunc(gt_row_abertura_efd.dt_fim))
            or
           (nf.dm_ind_emit = 0 and nf.dm_ind_oper = 0 and gn_dm_dt_escr_dfepoe = 0 and trunc(nf.dt_emiss) between trunc(gt_row_abertura_efd.dt_ini) and trunc(gt_row_abertura_efd.dt_fim))
            or
           (nf.dm_ind_emit = 0 and nf.dm_ind_oper = 0 and gn_dm_dt_escr_dfepoe = 1 and trunc(nvl(nf.dt_sai_ent,nf.dt_emiss)) between trunc(gt_row_abertura_efd.dt_ini) and trunc(gt_row_abertura_efd.dt_fim)))
      and mf.id              = nf.modfiscal_id
      and mf.cod_mod         in ('06', '28', '29','66')
      and sd.id              = nf.sitdocto_id
      and t.notafiscal_id    = nf.id
      and cod.id(+)          = nf.codconsitemcont_id
      and pe.id              = nf.pessoa_id
      and ci.id              = pe.cidade_id      
    order by nf.dm_ind_oper
           , nf.dm_ind_emit
           , mf.cod_mod
           , nf.serie
           , nf.nro_nf;
   --
   cursor c_510 ( en_notafiscal_id nota_fiscal.id%type ) is
   select it.notafiscal_id
        , it.id                itemnf_id
        , it.nro_item          num_item
        , ccic.cod_class
        , it.qtde_trib         qtd
        , it.unid_trib         unid
        , it.vl_unit_trib      vl_item
        , it.vl_desc           vl_desc
        , icms.cst_icms
        , it.cfop
        , icms.vl_bc_icms
        , icms.aliq_icms
        , icms.vl_icms
        , icms_st.vl_bc_icms_st
        , icms_st.aliq_st
        , icms_st.vl_icms_st
        , it.dm_ind_rec
        , pis.vl_pis
        , cofins.vl_cofins
        , it.cod_cta
        , it.pessoa_id
        , it.item_id
     from TMP_ITEM_NOTA_FISCAL      it
        , class_cons_item_cont  ccic
        , ( select imp.itemnf_id
                 , lpad(cst.cod_st, 3, '0')  cst_icms
                 , imp.vl_base_calc          vl_bc_icms
                 , imp.aliq_apli             aliq_icms
                 , imp.vl_imp_trib           vl_icms
              from TMP_IMP_ITEMNF    imp
                 , tipo_imposto  ti
                 , cod_st        cst
             where ti.id         = imp.tipoimp_id
               and ti.cd         = 1
               and cst.id        = imp.codst_id ) icms
        , ( select imp.itemnf_id
                 , imp.vl_base_calc          vl_bc_icms_st
                 , imp.aliq_apli             aliq_st
                 , imp.vl_imp_trib           vl_icms_st
              from TMP_IMP_ITEMNF    imp
                 , tipo_imposto  ti
             where ti.id         = imp.tipoimp_id
               and ti.cd         = 2 ) icms_st
        , ( select imp.itemnf_id
                 , lpad(cst.cod_st, 2, '0')  cst_pis
                 , imp.vl_base_calc          vl_bc_pis
                 , imp.aliq_apli             aliq_pis
                 , imp.qtde_base_calc_prod   quant_bc_pis
                 , imp.vl_aliq_prod          vl_aliq_pis
                 , imp.vl_imp_trib           vl_pis
              from TMP_IMP_ITEMNF    imp
                 , tipo_imposto  ti
                 , cod_st        cst
             where ti.id         = imp.tipoimp_id
               and ti.cd         = 4
               and cst.id        = imp.codst_id ) pis
        , ( select imp.itemnf_id
                 , lpad(cst.cod_st, 2, '0')  cst_cofins
                 , imp.vl_base_calc          vl_bc_cofins
                 , imp.aliq_apli             aliq_cofins
                 , imp.qtde_base_calc_prod   quant_bc_cofins
                 , imp.vl_aliq_prod          vl_aliq_cofins
                 , imp.vl_imp_trib           vl_cofins
              from TMP_IMP_ITEMNF    imp
                 , tipo_imposto  ti
                 , cod_st        cst
             where ti.id         = imp.tipoimp_id
               and ti.cd         = 5
               and cst.id        = imp.codst_id ) cofins
    where it.notafiscal_id      = en_notafiscal_id
      and ccic.id(+)            = it.classconsitemcont_id
      and icms.itemnf_id(+)     = it.id
      and icms_st.itemnf_id(+)  = it.id
      and pis.itemnf_id(+)      = it.id
      and cofins.itemnf_id(+)   = it.id
    order by it.nro_item;
   --
   cursor c_c590 ( en_notafiscal_id nota_fiscal.id%type ) is
   select (res.dm_orig_merc || cst.cod_st) cst_icms
        , c.cd                     cfop
        , res.aliq_icms            aliq_icms
        , res.vl_operacao          vl_opr
        , res.vl_bc_icms           vl_bc_icms
        , res.vl_icms              vl_icms
        , res.vl_bc_icms_st        vl_bc_icms_st
        , res.vl_icms_st           vl_icms_st
        , res.vl_red_bc_icms       vl_red_bc
        , res.vl_ipi               vl_ipi
        , res.obslanctofiscal_id
        , res.codst_id
        , res.dm_orig_merc
        , res.cfop_id
        , res.vl_fcp_icms
        , res.vl_fcp_icmsst     
     from TMP_NFREGIST_ANALIT  res
        , cod_st           cst
        , cfop             c
    where res.notafiscal_id = en_notafiscal_id
      and cst.id            = res.codst_id
      and c.id              = res.cfop_id
    order by 1, 2;
   --
      cursor c_c591 ( en_notafiscal_id nota_fiscal.id%type ) is
   select
      sum(vl_fcp)        vl_fcp_op,
      sum(vl_fcp_st)     vl_fcp_st,
      sum(vl_fcp_st_ret) vl_fcp_ret
      from nota_fiscal_total nft
      where nft.notafiscal_id =  en_notafiscal_id;
   --
   cursor c_c595 ( en_notafiscal_id nota_fiscal.id%type ) is
   select inf.id             nfinforfisc_id
        , inf.txt_compl
        , inf.obslanctofiscal_id
     from nfinfor_fiscal     inf
    where inf.notafiscal_id = en_notafiscal_id;
   --
   cursor c_c597 ( en_nfinforfisc_id nfinfor_fiscal.id%type ) is
   select cod.cod_aj
        , inf.descr_compl_aj
        , it.cod_item
        , it.item_id
        , inf.aliq_icms
        , sum(inf.vl_bc_icms) vl_bc_icms
        , sum(inf.vl_icms) vl_icms
        , sum(inf.vl_outros) vl_outros
     from inf_prov_docto_fiscal inf
        , cod_ocor_aj_icms      cod
        , item_nota_fiscal      it
    where inf.nfinforfisc_id    = en_nfinforfisc_id
      and cod.id                = inf.codocorajicms_id
      and it.id(+)              = inf.itemnf_id
    group by cod.cod_aj
        , inf.descr_compl_aj
        , it.cod_item
        , it.item_id
        , inf.aliq_icms;
   --
begin
   --
   vn_fase := 1;
   --
   i := 0;
   --
   --#72837
   vv_ie           := null;     
   vv_ibge_cidade  := null;          
   --
   for rec_c500 in c_nf loop
      --
      vn_fase := 2;
      --
      i := nvl(i,0) + 1;
      --
      vn_fase := 3;
      --
      -- -------------------------------------------------------------------------------------------------------
      -- Exceção 1: Para documentos com código de situação (campo COD_SIT) cancelado (código -02-) ou cancelado
      -- extemporâneo (código -03-), preencher somente os campos REG, IND_OPER, IND_EMIT, COD_MOD, COD_SIT, SER,
      -- NUM_DOC e DT_DOC. Demais campos deverão ser apresentados com conteúdo VAZIO -||-. Para esse documento não
      -- poderá ser apresentado nenhum registro -filho-.
      -- -------------------------------------------------------------------------------------------------------
      -- Exceção 2: Notas Fiscais Complementares e Notas Fiscais Complementares Extemporâneas (campo COD_SIT igual a
      -- -06- ou -07-): nesta situação, somente os campos (do registro C500) REG, IND_OPER, IND_EMIT, COD_PART,
      -- COD_MOD, COD_SIT, SER, NUM_DOC e DT_DOC, são obrigatórios. Os demais campos são facultativos (se forem
      -- preenchidos, serão validados e aplicadas as regras de campos existentes). O registro C590 é obrigatório e deverá ser
      -- observada a obrigatoriedade de preenchimento de todos os campos. Os demais campos e registros filhos do registro C500
      -- deverão ser informados, se existirem.
      -- -------------------------------------------------------------------------------------------------------
      -- Exceção 3: Notas Fiscais emitidas por regime especial ou norma específica (campo COD_SIT igual a -08-). Para
      -- documentos fiscais emitidos com base em regime especial ou norma específica, deverão ser apresentados os registros C500
      -- e C590, obrigatoriamente, e os demais registros -filhos-, se estes forem exigidos pela legislação fiscal. Nesta situação,
      -- somente os campos (do registro C500) REG, IND_OPER, IND_EMIT, COD_PART, COD_MOD, COD_SIT, SER,
      -- NUM_DOC e DT_DOC são obrigatórios. Os demais campos são facultativos (se forem preenchidos, serão validados e
      -- aplicadas as regras de campos existentes). No registro C590, exceto o campo ALIQ_ICMS que é facultativo, preencher os
      -- demais campos obrigatoriamente.
      -- -------------------------------------------------------------------------------------------------------
      if rec_c500.cod_sit in ('02', '03', '04', '05') then
         --
         vn_fase := 4;
         --
         vt_tab_reg_c500(i).reg              := 'C500';
         vt_tab_reg_c500(i).ind_oper         := rec_c500.ind_oper;
         vt_tab_reg_c500(i).ind_emit         := rec_c500.ind_emit;
         --vt_tab_reg_c500(i).cod_part         := pk_csf.fkg_pessoa_cod_part (rec_c500.pessoa_id);
         vt_tab_reg_c500(i).cod_part         := pk_csf_api_efd.fkb_ret_cnpjcpj_ibge_cod_part ( en_pessoa_id          => rec_c500.pessoa_id
                                                                                             , en_tipo_retorna       => 1  -- 0-Pessoa_id / 1-Cod_Part    
                                                                                             , en_origem_dado_pessoa => 0  );       
         vt_tab_reg_c500(i).cod_mod          := rec_c500.cod_mod;
         vt_tab_reg_c500(i).cod_sit          := rec_c500.cod_sit;
         vt_tab_reg_c500(i).ser              := rec_c500.ser;
         vt_tab_reg_c500(i).sub              := rec_c500.sub;
         vt_tab_reg_c500(i).cod_cons         := null;
         vt_tab_reg_c500(i).num_doc          := rec_c500.num_doc;
         vt_tab_reg_c500(i).dt_doc           := rec_c500.dt_doc;
         vt_tab_reg_c500(i).dt_e_s           := null;
         vt_tab_reg_c500(i).vl_doc           := null;
         vt_tab_reg_c500(i).vl_desc          := null;
         vt_tab_reg_c500(i).vl_forn          := null;
         vt_tab_reg_c500(i).vl_serv_nt       := null;
         vt_tab_reg_c500(i).vl_terc          := null;
         vt_tab_reg_c500(i).vl_da            := null;
         vt_tab_reg_c500(i).vl_bc_icms       := null;
         vt_tab_reg_c500(i).vl_icms          := null;
         vt_tab_reg_c500(i).vl_bc_icms_st    := null;
         vt_tab_reg_c500(i).vl_icms_st       := null;
         vt_tab_reg_c500(i).cod_inf          := null;
         vt_tab_reg_c500(i).vl_pis           := null;
         vt_tab_reg_c500(i).vl_cofins        := null;
         vt_tab_reg_c500(i).tp_ligacao       := null;
         vt_tab_reg_c500(i).cod_grupo_tensao := null;
         vt_tab_reg_c500(i).chave_nfe        := null;
         vt_tab_reg_c500(i).fin_doc          := null;             
         vt_tab_reg_c500(i).chave_nfe_ref    := null;
         --
         --#72837 se nf de entrada nao envia 
         if rec_c500.ind_oper = 0 then 
           --
           vt_tab_reg_c500(i).ind_dest         := null;
           vt_tab_reg_c500(i).cod_mun_dest     := null;
           --
         else       
           -- recupera inscricao estadual e ibge_cidade da empresa
           begin
             select  ju.ie 
                   , ci.ibge_cidade
               into  vv_ie
                   , vv_ibge_cidade
               from  pessoa pe
                   , juridica ju
                   , cidade   ci
               where pe.id        = ju.pessoa_id 
                 and pe.cidade_id = ci.id      
                 and pe.id        = gt_row_abertura_efd.empresa_id 
                 ;
           exception
             when others then
               vv_ie          := null ;
               vv_ibge_cidade := null ; 
           end;
           --
           if vv_ie is not null then
             --
             if UPPER(vv_ie) = UPPER('ISENTO') then
               vt_tab_reg_c500(i).ind_dest         := 2;
               vt_tab_reg_c500(i).cod_mun_dest     := vv_ibge_cidade;
             else
               vt_tab_reg_c500(i).ind_dest         := 1;
               vt_tab_reg_c500(i).cod_mun_dest     := vv_ibge_cidade;
             end if;
             --
           else 
             --
             vt_tab_reg_c500(i).ind_dest           := 9;
             vt_tab_reg_c500(i).cod_mun_dest       := vv_ibge_cidade;
             --
           end if;
           --
         end if;
         -- 
         vt_tab_reg_c500(i).cod_cta          := null;
         --
      elsif rec_c500.cod_sit in ('06', '07', '08') then
         --
         vn_fase := 5;
         --
         vt_tab_reg_c500(i).reg              := 'C500';
         vt_tab_reg_c500(i).ind_oper         := rec_c500.ind_oper;
         vt_tab_reg_c500(i).ind_emit         := rec_c500.ind_emit;
         --vt_tab_reg_c500(i).cod_part         := pk_csf.fkg_pessoa_cod_part (rec_c500.pessoa_id);
         vt_tab_reg_c500(i).cod_part         := pk_csf_api_efd.fkb_ret_cnpjcpj_ibge_cod_part ( en_pessoa_id          => rec_c500.pessoa_id
                                                                                             , en_tipo_retorna       => 1  -- 0-Pessoa_id / 1-Cod_Part    
                                                                                             , en_origem_dado_pessoa => 0 );       
         vt_tab_reg_c500(i).cod_mod          := rec_c500.cod_mod;
         vt_tab_reg_c500(i).cod_sit          := rec_c500.cod_sit;
         vt_tab_reg_c500(i).ser              := rec_c500.ser;
         vt_tab_reg_c500(i).sub              := rec_c500.sub;
         vt_tab_reg_c500(i).cod_cons         := null;
         vt_tab_reg_c500(i).num_doc          := rec_c500.num_doc;
         vt_tab_reg_c500(i).dt_doc           := rec_c500.dt_doc;
         vt_tab_reg_c500(i).dt_e_s           := null;
         vt_tab_reg_c500(i).vl_doc           := null;
         vt_tab_reg_c500(i).vl_desc          := null;
         vt_tab_reg_c500(i).vl_forn          := null;
         vt_tab_reg_c500(i).vl_serv_nt       := null;
         vt_tab_reg_c500(i).vl_terc          := null;
         vt_tab_reg_c500(i).vl_da            := null;
         vt_tab_reg_c500(i).vl_bc_icms       := null;
         vt_tab_reg_c500(i).vl_icms          := null;
         vt_tab_reg_c500(i).vl_bc_icms_st    := null;
         vt_tab_reg_c500(i).vl_icms_st       := null;
         vt_tab_reg_c500(i).cod_inf          := null;
         vt_tab_reg_c500(i).vl_pis           := null;
         vt_tab_reg_c500(i).vl_cofins        := null;
         vt_tab_reg_c500(i).tp_ligacao       := null;
         vt_tab_reg_c500(i).cod_grupo_tensao := null;
         vt_tab_reg_c500(i).chave_nfe        := null;
         vt_tab_reg_c500(i).fin_doc          := null;             
         vt_tab_reg_c500(i).chave_nfe_ref    := null; 
         --#72837 inclusao de regra de validacao do leiaute
         if rec_c500.ind_oper = 0 then --se nf de entrada, nao enviar colunas ind_dest, cod_mun_dest
           --
           vt_tab_reg_c500(i).ind_dest         := null;
           vt_tab_reg_c500(i).cod_mun_dest     := null;
           --
         else       
           -- recupera inscricao estadual e ibge_cidade da empresa
           begin
             select  ju.ie 
                   , ci.ibge_cidade
               into  vv_ie
                   , vv_ibge_cidade
               from  pessoa pe
                   , juridica ju
                   , cidade   ci
               where pe.id        = ju.pessoa_id 
                 and pe.cidade_id = ci.id      
                 and pe.id        = gt_row_abertura_efd.empresa_id 
                 ;
           exception
             when others then
               vv_ie          := null ;
               vv_ibge_cidade := null ; 
           end;
           --
           if vv_ie is not null then
             --
             if UPPER(vv_ie) = UPPER('ISENTO') then
               vt_tab_reg_c500(i).ind_dest         := 2;
               vt_tab_reg_c500(i).cod_mun_dest     := vv_ibge_cidade;
             else
               vt_tab_reg_c500(i).ind_dest         := 1;
               vt_tab_reg_c500(i).cod_mun_dest     := vv_ibge_cidade;
             end if;
             --
           else 
             --
             vt_tab_reg_c500(i).ind_dest           := 9;
             vt_tab_reg_c500(i).cod_mun_dest       := vv_ibge_cidade;
             --
           end if;
           --
         end if;
         -- 
         vt_tab_reg_c500(i).cod_cta          := null;     
         --
      else
         --
         vn_fase := 6;
         --
         vt_tab_reg_c500(i).reg              := 'C500';
         vt_tab_reg_c500(i).ind_oper         := rec_c500.ind_oper;
         vt_tab_reg_c500(i).ind_emit         := rec_c500.ind_emit;
         --vt_tab_reg_c500(i).cod_part         := pk_csf.fkg_pessoa_cod_part (rec_c500.pessoa_id);
         vt_tab_reg_c500(i).cod_part         := pk_csf_api_efd.fkb_ret_cnpjcpj_ibge_cod_part ( en_pessoa_id          => rec_c500.pessoa_id
                                                                                             , en_tipo_retorna       => 1  -- 0-Pessoa_id / 1-Cod_Part    
                                                                                             , en_origem_dado_pessoa => 0 );                                       
         vt_tab_reg_c500(i).cod_mod          := rec_c500.cod_mod;
         vt_tab_reg_c500(i).cod_sit          := rec_c500.cod_sit;
         vt_tab_reg_c500(i).ser              := rec_c500.ser;
         vt_tab_reg_c500(i).sub              := rec_c500.sub;
         vt_tab_reg_c500(i).cod_cons         := rec_c500.cod_cons;
         vt_tab_reg_c500(i).num_doc          := rec_c500.num_doc;
         vt_tab_reg_c500(i).dt_doc           := rec_c500.dt_doc;
         vt_tab_reg_c500(i).dt_e_s           := rec_c500.dt_e_s;
         vt_tab_reg_c500(i).vl_doc           := rec_c500.vl_doc;
         vt_tab_reg_c500(i).vl_desc          := rec_c500.vl_desc;
         vt_tab_reg_c500(i).vl_forn          := nvl(rec_c500.vl_forn, rec_c500.vl_doc);
         vt_tab_reg_c500(i).vl_serv_nt       := rec_c500.vl_serv_nt;
         vt_tab_reg_c500(i).vl_terc          := rec_c500.vl_terc;
         vt_tab_reg_c500(i).vl_da            := rec_c500.vl_da;
         vt_tab_reg_c500(i).vl_bc_icms       := rec_c500.vl_bc_icms;
         vt_tab_reg_c500(i).vl_icms          := rec_c500.vl_icms;
         vt_tab_reg_c500(i).vl_bc_icms_st    := rec_c500.vl_bc_icms_st;
         vt_tab_reg_c500(i).vl_icms_st       := rec_c500.vl_icms_st;
         vt_tab_reg_c500(i).cod_inf          := pk_csf.fkg_Infor_Comp_Dcto_Fiscal_cod (rec_c500.inforcompdctofiscal_id);
         vt_tab_reg_c500(i).vl_pis           := rec_c500.vl_pis;
         vt_tab_reg_c500(i).vl_cofins        := rec_c500.vl_cofins;
         vt_tab_reg_c500(i).tp_ligacao       := rec_c500.dm_tp_ligacao;
         vt_tab_reg_c500(i).cod_grupo_tensao := rec_c500.dm_cod_grupo_tensao;
         vt_tab_reg_c500(i).chave_nfe        := null;
         vt_tab_reg_c500(i).fin_doc          := null;             
         vt_tab_reg_c500(i).chave_nfe_ref    := null; 
         --#72837 inclusao de regra de validacao do leiaute
         if rec_c500.ind_oper = 0 then --se nf de entrada, nao enviar colunas ind_dest, cod_mun_dest
           --
           vt_tab_reg_c500(i).ind_dest         := null;
           vt_tab_reg_c500(i).cod_mun_dest     := null;
           --
         else       
           -- recupera inscricao estadual e ibge_cidade da empresa
           begin
             select  ju.ie 
                   , ci.ibge_cidade
               into  vv_ie
                   , vv_ibge_cidade
               from  pessoa pe
                   , juridica ju
                   , cidade   ci
               where pe.id        = ju.pessoa_id 
                 and pe.cidade_id = ci.id      
                 and pe.id        = gt_row_abertura_efd.empresa_id 
                 ;
           exception
             when others then
               vv_ie          := null ;
               vv_ibge_cidade := null ; 
           end;
           --
           if vv_ie is not null then
             --
             if UPPER(vv_ie) = UPPER('ISENTO') then
               vt_tab_reg_c500(i).ind_dest         := 2;
               vt_tab_reg_c500(i).cod_mun_dest     := vv_ibge_cidade;
             else
               vt_tab_reg_c500(i).ind_dest         := 1;
               vt_tab_reg_c500(i).cod_mun_dest     := vv_ibge_cidade;
             end if;
             --
           else 
             --
             vt_tab_reg_c500(i).ind_dest           := 9;
             vt_tab_reg_c500(i).cod_mun_dest       := vv_ibge_cidade;
             --
           end if;
           --
         end if;
         -- 
         vt_tab_reg_c500(i).cod_cta          := null;
         --
         vn_fase := 6.1;
         -- azoni
         -- Monta registro 0450 caso o rec_c500 retorne registros
         /*if nvl(rec_c500.inforcompdctofiscal_id, 0) > 0 then
            --
            vn_fase := 6.2;
            --
            pkb_monta_reg_0450 ( en_notafiscal_id     => null
                               , en_infcompdctofis_id => rec_c500.inforcompdctofiscal_id
                               , en_cod_inf           => null
                               , ev_txt_compl         => null );
            --
         end if;*/
         --
         end if;
         --
      if rec_c500.cod_mod = '66' and gt_row_abertura_efd.dt_fim >= to_date('01/01/2020','dd/mm/rrrr') then     
         --
         vt_tab_reg_c500(1).chave_nfe := rec_c500.nro_chave_nfe;  
         vt_tab_reg_c500(1).fin_doc   := rec_c500.dm_fin_nfe;
         --      
      end if;
      --
      vn_fase := 7;
      --
      --Monta arquivo auxiliar
      if nvl(rec_c500.pessoa_id, 0) > 0 then
         --
         vn_fase := 7.1;
         --
         -- Verificando se o parametro está como "DOCUMENTO_FISCAL" colcoar como "CADASTRO_PESSOA" pois Nd de 
         -- Serviços Continuos deve-se pegar do cadastro de pessoa.		 
         if gn_origem_dado_pessoa = 1 then
            --
            gn_origem_dado_pessoa       := 0;			
            vv_volta_origem_dado_pessoa := 'S';
            --
         end if;
         --		 
         pkb_monta_reg_0150( en_pessoa_id     => rec_c500.pessoa_id );  
         --
         -- Se foi trocado pois o parametro estava "DOCUMENTO_FISCAL" retornar o parametro conforme estava.		 
         if nvl( vv_volta_origem_dado_pessoa, 'N') = 'S' then
            --
            gn_origem_dado_pessoa       := 1;
            vv_volta_origem_dado_pessoa	:= null;		
            --
         end if;
         --
      end if;
      --
      vn_fase := 7.2;
      --
      --| Informa o registro C510 somente de notas de Saída e Emissão Própria
      if rec_c500.ind_oper = 1 and rec_c500.ind_emit = 0 then
         --
         vn_fase := 8;
         --
         j := 0;
         --
         for rec_510 in c_510( rec_c500.notafiscal_id ) loop
            --
                vn_fase := 9;
                --
                j := nvl(j,0) + 1;
                --
                vn_fase := 10;
                --
                vt_bi_tab_reg_c510(i)(j).reg            := 'C510';
                vt_bi_tab_reg_c510(i)(j).num_item       := rec_510.num_item;
                vt_bi_tab_reg_c510(i)(j).cod_item       := pk_csf.fkg_Item_cod (rec_510.item_id);
                vt_bi_tab_reg_c510(i)(j).cod_class      := rec_510.cod_class;
                --
                if nvl(rec_510.qtd,0) <= 0 then
                   vt_bi_tab_reg_c510(i)(j).qtd := 1;
                else
                   vt_bi_tab_reg_c510(i)(j).qtd := rec_510.qtd;
                end if;
                --
                vt_bi_tab_reg_c510(i)(j).unid           := rec_510.unid;
                vt_bi_tab_reg_c510(i)(j).vl_item        := rec_510.vl_item;
                vt_bi_tab_reg_c510(i)(j).vl_desc        := rec_510.vl_desc;
                vt_bi_tab_reg_c510(i)(j).cst_icms       := rec_510.cst_icms;
                vt_bi_tab_reg_c510(i)(j).cfop           := rec_510.cfop;
                vt_bi_tab_reg_c510(i)(j).vl_bc_icms     := rec_510.vl_bc_icms;
                vt_bi_tab_reg_c510(i)(j).aliq_icms      := rec_510.aliq_icms;
                vt_bi_tab_reg_c510(i)(j).vl_icms        := rec_510.vl_icms;
                vt_bi_tab_reg_c510(i)(j).vl_bc_icms_st  := rec_510.vl_bc_icms_st;
                vt_bi_tab_reg_c510(i)(j).aliq_st        := rec_510.aliq_st;
                vt_bi_tab_reg_c510(i)(j).vl_icms_st     := rec_510.vl_icms_st;
                vt_bi_tab_reg_c510(i)(j).ind_rec        := rec_510.dm_ind_rec;
                --vt_bi_tab_reg_c510(i)(j).cod_part       := pk_csf.fkg_pessoa_cod_part (rec_510.pessoa_id);
                vt_bi_tab_reg_c510(i)(j).cod_part      := pk_csf_api_efd.fkb_ret_cnpjcpj_ibge_cod_part ( en_pessoa_id          => rec_510.pessoa_id
                                                                                                        , en_tipo_retorna       => 1  -- 0-Pessoa_id / 1-Cod_Part    
                                                                                                        , en_origem_dado_pessoa => 0 );                                      
                vt_bi_tab_reg_c510(i)(j).vl_pis         := rec_510.vl_pis;
                vt_bi_tab_reg_c510(i)(j).vl_cofins      := rec_510.vl_cofins;
                vt_bi_tab_reg_c510(i)(j).cod_cta        := rec_510.cod_cta;
                --
                vn_fase := 10.1;
                --
                --Monta arquivo auxiliar participante
                if nvl(rec_510.pessoa_id, 0) > 0 then
                   --
                   vn_fase := 10.2;
                   --
                   -- Verificando se o parametro está como "DOCUMENTO_FISCAL" colcoar como "CADASTRO_PESSOA" pois conhecimento
                   -- de transporte deve-se pegar do cadastro de pessoa.
                   --				   
                   if gn_origem_dado_pessoa = 1 then
                      --
                      gn_origem_dado_pessoa       := 0;			
                      vv_volta_origem_dado_pessoa := 'S';
                      --
                   end if;
                   --	
                   pkb_monta_reg_0150( en_pessoa_id     => rec_510.pessoa_id );					
                   --
                   -- Se foi trocado pois o parametro estava "DOCUMENTO_FISCAL" retornar o parametro conforme estava.		 
                   if nvl( vv_volta_origem_dado_pessoa, 'N') = 'S' then
                      --
                      gn_origem_dado_pessoa       := 1;
					  vv_volta_origem_dado_pessoa := null;
                      --
                   end if;
                   --
                end if;
                --
                vn_fase := 10.3;
                -- Busca id da unidade
                vn_unidade_id := pk_csf.fkg_Unidade_id ( en_multorg_id => pk_csf.fkg_multorg_id_empresa( en_empresa_id => gt_row_abertura_efd.empresa_id)
                                                       , ev_sigla_unid => rec_510.unid);
                --
                vn_fase := 10.4;
                --Monta arquivo auxiliar unidade
                if nvl(vn_unidade_id, 0) > 0 then
                   --
                   vn_fase := 10.5;
                   --
                   pkb_monta_reg_0190( en_unidade_id => vn_unidade_id);
                   --
                end if;
                --
                vn_fase := 10.6;
                --
                --Monta arquivo auxiliar produto
                if nvl(rec_510.item_id, 0) > 0 then
                   --
                   vn_fase := 10.7;
                   --
                   pkb_monta_reg_0200( en_item_id => rec_510.item_id);
                   --
                end if;
                --
                vn_fase := 10.8;
                --
                --Monta arquivo auxiliar para conversao de unidade
                if nvl(rec_510.item_id, 0) > 0 and nvl(vn_unidade_id, 0) > 0 then
                   --
                   vn_fase := 10.9;
                   --
                   pkb_monta_reg_0220 ( en_item_id => rec_510.item_id
                                      , en_unidade_id => vn_unidade_id );
                   --
                end if;
                --
           end loop;
             --
        end if;
          --
          vn_fase := 11;
          --
     if rec_c500.cod_sit not in ('02', '03', '04', '05') then
             -- NOVO TÍTULO: REGISTRO C590: REGISTRO ANALÍTICO DO DOCUMENTO - NOTA FISCAL/CONTA DE ENERGIA ELÉTRICA (CÓDIGO 06), NOTA FISCAL/CONTA DE FORNECIMENTO
             -- DÁGUA CANALIZADA (CÓDIGO 29) E NOTA FISCAL/CONTA FORNECIMENTO DE GÁS (CÓDIGO 28)
             -- Monta o REGISTRO C590: REGISTRO ANALÍTICO DO DOCUMENTO - NOTA FISCAL/CONTA DE ENERGIA ELÉTRICA (CÓDIGO 06) E NOTA FISCAL CONSUMO FORNECIMENTO DE GÁS
             -- (CÓDIGO 28).
             --
             j := 0;
             --
        for rec_c590 in c_c590( rec_c500.notafiscal_id ) loop
               --
                vn_vl_fcp    := rec_c590.vl_fcp_icms;
                vn_vl_fcp_st := rec_c590.vl_fcp_icmsst;
               
                   --
                vn_fase := 12;
                --
                j := nvl(j,0) + 1;
                --
                vt_bi_tab_reg_c590(i)(j).reg            := 'C590';
                vt_bi_tab_reg_c590(i)(j).cst_icms       := rec_c590.cst_icms;
                vt_bi_tab_reg_c590(i)(j).cfop           := rec_c590.cfop;
                vt_bi_tab_reg_c590(i)(j).aliq_icms      := rec_c590.aliq_icms;
                vt_bi_tab_reg_c590(i)(j).vl_opr         := rec_c590.vl_opr;
                vt_bi_tab_reg_c590(i)(j).vl_bc_icms     := rec_c590.vl_bc_icms;
                vt_bi_tab_reg_c590(i)(j).vl_icms        := rec_c590.vl_icms;
                vt_bi_tab_reg_c590(i)(j).vl_bc_icms_st  := rec_c590.vl_bc_icms_st;
                vt_bi_tab_reg_c590(i)(j).vl_icms_st     := rec_c590.vl_icms_st;
                vt_bi_tab_reg_c590(i)(j).vl_red_bc      := rec_c590.vl_red_bc;
                vt_bi_tab_reg_c590(i)(j).cod_obs        := pk_csf.fkg_cd_obs_lancto_fiscal (rec_c590.obslanctofiscal_id);
                --
                vn_fase := 12.1;
                -- Monta arquivo auxiliar 0460
                if nvl(rec_c590.obslanctofiscal_id, 0) > 0 then
                   --
                   vn_fase := 12.2;
                   --
                   pkb_monta_reg_0460 (en_obslanctofiscal_id => rec_c590.obslanctofiscal_id);
                   --
                end if;
                --
                -- c591: INFORMAÇÕES DO FUNDO DE COMBATE À POBREZA - FCP - NA NFe (CÓDIGO 55)
               if rec_c500.cod_mod  in ('55','66') and gt_row_abertura_efd.dt_fim >= to_date('01/01/2019','dd/mm/rrrr') then
                   --
                 if rec_c500.cod_mod = '55' or (rec_c500.cod_mod = '66' and gt_row_abertura_efd.dt_fim >= to_date('01/01/2020','dd/mm/rrrr')) then
                          --         
                       vn_fase := 48.15;
                          vt_tri_tab_reg_c591(i)(j)(1).reg := 'C591';
                       --
                       if substr(rec_c590.cst_icms,2,3) in ('00' , '10', '20', '51', '70', '90') then -- VL_FCP_OP = valor x00,x10,x20,x51,x70 ou x90.
                          vt_tri_tab_reg_c591(i)(j)(1).vl_fcp_op := nvl(vn_vl_fcp,0);
                       else
                          vt_tri_tab_reg_c591(i)(j)(1).vl_fcp_op := 0;
                       end if;
                       --
                       if substr(rec_c590.cst_icms,2,3) in ('10', '30', '70', '90') or -- VL_FCP_ST = valor x10, x30, x70, x90
                          rec_c590.cst_icms in ('201', '202', '203', '900') then -- VL_FCP_ST = valor 201, 202, 203 ou 900.
                          --vt_tri_tab_reg_c591(i)(j)(1).vl_fcp_st := nvl(vn_vl_fcp,0) + nvl(vn_vl_fcp_st,0);
                          vt_tri_tab_reg_c591(i)(j)(1).vl_fcp_st := nvl(vn_vl_fcp_st,0);
                       else
                          vt_tri_tab_reg_c591(i)(j)(1).vl_fcp_st := 0;
                       end if;
                       --
                       if substr(rec_c590.cst_icms,2,3) in ('60') or -- VL_FCP_RET = valor x60
                          rec_c590.cst_icms in ('500') then -- VL_FCP_RET = valor 500
                          --vt_tri_tab_reg_c591(i)(j)(1).vl_fcp_ret := nvl(vn_vl_fcp,0) + nvl(vn_vl_fcp_st,0);
                          vt_tri_tab_reg_c591(i)(j)(1).vl_fcp_ret := nvl(vn_vl_fcp_st,0);
                       else
                          vt_tri_tab_reg_c591(i)(j)(1).vl_fcp_ret := 0;
                       end if;
                       --
               end if; -- final registro c591
              --  
                 j := 0; 
                 -- NOVO TÍTULO: REGISTRO c595: OBSERVAÇOES DO LANÇAMENTO FISCAL (CÓDIGO 01, 1B, 04 E 55)
                 -- Monta o REGISTRO c595: OBSERVAÇOES DO LANÇAMENTO FISCAL (CÓDIGO 01, 1B E 55)
                    --
                       if rec_c500.cod_mod in ('01', '1B', '04', '55')  or 
                          (rec_c500.cod_mod = '66' and gt_row_abertura_efd.dt_fim >= to_date('01/01/2020','dd/mm/rrrr')) then    
                          --
                              vn_fase := 50.1;
                              --
                               for rec_c595 in c_c595( rec_c500.notafiscal_id ) loop
                                 exit when c_c595%notfound or (c_c595%notfound) is null;
                                     --
                                     vn_fase := 50.2;
                                     j := nvl(j,0) + 1;
                                     --
                                     vt_bi_tab_reg_c595(i)(j).reg        := 'C595';
                                     vt_bi_tab_reg_c595(i)(j).cod_obs    := pk_csf.fkg_cd_obs_lancto_fiscal (rec_c595.obslanctofiscal_id);
                                     vt_bi_tab_reg_c595(i)(j).txt_compl  := pk_csf.fkg_converte(rec_c595.txt_compl);
                                     --
                                     vn_fase := 50.3;
                                     -- Monta arquivo auxiliar 0460
                                     if nvl(rec_c595.obslanctofiscal_id, 0) > 0 then
                                        --
                                        vn_fase := 50.4;
                                        pkb_monta_reg_0460 ( en_obslanctofiscal_id => rec_c595.obslanctofiscal_id);
                                        --
                                     end if;
                                     --
                                     vn_fase := 50.5;
                                     --
                                     k := 0;
                                     -- Monta o REGISTRO c597: OUTRAS OBRIGAÇÕES TRIBUTÁRIAS, AJUSTES E INFORMAÇÕES DE VALORES PROVENIENTES DE DOCUMENTO FISCAL
                                     for rec_c597 in c_c597( rec_c595.nfinforfisc_id ) loop
                                        exit when c_c597%notfound or (c_c597%notfound) is null;
                                        --
                                        vn_fase := 50.6;
                                        --
                                        if nvl(rec_c597.vl_icms,0) > 0
                                           or nvl(rec_c597.vl_outros,0) > 0
                                           then
                                           --
                                           k := nvl(k,0) + 1;
                                           --
                                           vt_tri_tab_reg_c597(i)(j)(k).reg             := 'C597';
                                           vt_tri_tab_reg_c597(i)(j)(k).cod_aj          := rec_c597.cod_aj;
                                           vt_tri_tab_reg_c597(i)(j)(k).descr_compl_aj  := pk_csf.fkg_converte(rec_c597.descr_compl_aj);
                                           vt_tri_tab_reg_c597(i)(j)(k).cod_item        := rec_c597.cod_item;
                                           vt_tri_tab_reg_c597(i)(j)(k).vl_bc_icms      := rec_c597.vl_bc_icms;
                                           vt_tri_tab_reg_c597(i)(j)(k).aliq_icms       := rec_c597.aliq_icms;
                                           vt_tri_tab_reg_c597(i)(j)(k).vl_icms         := rec_c597.vl_icms;
                                           vt_tri_tab_reg_c597(i)(j)(k).vl_outros       := rec_c597.vl_outros;
                                           --
                                           vn_fase := 50.7;
                                           -- Monta arquivo auxiliar produto
                                           if nvl(rec_c597.item_id, 0) > 0 then
                                              --
                                              vn_fase := 50.8;
                                              pkb_monta_reg_0200( en_item_id => rec_c597.item_id);
                                              --
                                           end if;
                                           --
                                        end if;
                                        --
                                     end loop;
                                 --
                              end loop;
                    --
                    END IF; --if rec_c500.cod_mod in ('01', '1B', '04', '55')  or (rec_c500.cod_mod = '66' and gt_row_abertura_efd.dt_fim >= to_date('01/01/2020','dd/mm/rrrr')) then
                    --
           end if; -- rec_c500.cod_mod in ('01', '1B', '04', '55', '66')
            --
         end loop;
         --
     end if; -- rec_c500.cod_sit not in ('02', '03', '04', '05')
      --
   end loop; -- c_nf
   --
exception
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_monta_reg_C500 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end pkb_monta_reg_C500;

-------------------------------------------------------------------------------------------------------

-- monta o REGISTRO C495: RESUMO MENSAL DE ITENS DO ECF POR ESTABELECIMENTO (CÓDIGO 02 e 2D)
procedure pkb_monta_reg_C495
is
   --
   vn_fase  number := 0;
   i        pls_integer;
   --
   cursor c_495 is
   select r.id
        , r.aliq_icms
        , r.qtde
        , r.qtde_canc
        , r.vl_acm_item
        , r.vl_acm_desc
        , r.vl_acm_canc
        , r.vl_acm_acmo
        , r.vl_acm_bc_icms
        , r.vl_acm_icms
        , r.vl_isen
        , r.vl_nt
        , r.vl_icms_st
        , r.item_id
        , r.unidade_id
     from res_mes_it_ecf r
    where r.empresa_id = gt_row_abertura_efd.empresa_id
      and r.ano        = to_number(to_char(gt_row_abertura_efd.dt_ini, 'rrrr'))
      and r.mes        = to_number(to_char(gt_row_abertura_efd.dt_ini, 'mm'))
      and r.dm_st_proc = 1 -- Validada
    order by r.item_id;
   --
begin
   --
   vn_fase := 1;
   --
   i := 0;
   for rec_495 in c_495 loop
      --
      vn_fase := 2;
      --
      i := nvl(i,0) + 1;
      --
      vn_fase := 3;
      --
      vt_tab_reg_c495(i).reg            := 'C495';
      vt_tab_reg_c495(i).aliq_icms      := rec_495.aliq_icms;
      vt_tab_reg_c495(i).cod_item       := pk_csf.fkg_Item_cod (rec_495.item_id);
      vt_tab_reg_c495(i).qtd            := rec_495.qtde;
      vt_tab_reg_c495(i).qtd_canc       := rec_495.qtde_canc;
      vt_tab_reg_c495(i).unid           := pk_csf.fkg_Unidade_sigla (rec_495.unidade_id);
      vt_tab_reg_c495(i).vl_item        := rec_495.vl_acm_item;
      vt_tab_reg_c495(i).vl_desc        := rec_495.vl_acm_desc;
      vt_tab_reg_c495(i).vl_canc        := rec_495.vl_acm_canc;
      vt_tab_reg_c495(i).vl_acmo        := rec_495.vl_acm_acmo;
      vt_tab_reg_c495(i).vl_bc_icms     := rec_495.vl_acm_bc_icms;
      vt_tab_reg_c495(i).vl_icms        := rec_495.vl_acm_icms;
      vt_tab_reg_c495(i).vl_isen        := rec_495.vl_isen;
      vt_tab_reg_c495(i).vl_nt          := rec_495.vl_nt;
      vt_tab_reg_c495(i).vl_icms_st     := rec_495.vl_icms_st;
      --
      vn_fase := 3.1;
      --
      --Monta arquivo auxiliar unidade
      if nvl(rec_495.unidade_id, 0) > 0 then
         --
         vn_fase := 3.2;
         --
         pkb_monta_reg_0190( en_unidade_id => rec_495.unidade_id);
         --
      end if;
      --
      vn_fase := 3.3;
      --
      --Monta arquivo auxiliar produto
      if nvl(rec_495.item_id, 0) > 0 then
         --
         vn_fase := 3.4;
         --
         pkb_monta_reg_0200( en_item_id => rec_495.item_id);
         --
      end if;
      --
      vn_fase := 3.5;
      --
      --Monta arquivo auxiliar para conversao de unidade
      if nvl(rec_495.item_id, 0) > 0 and nvl(rec_495.unidade_id, 0) > 0 then
         --
         vn_fase := 3.6;
         --
         pkb_monta_reg_0220 ( en_item_id => rec_495.item_id
                            , en_unidade_id => rec_495.unidade_id );
         --
      end if;
      --
   end loop;
   --
exception
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_monta_reg_C495 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end pkb_monta_reg_C495;

-------------------------------------------------------------------------------------------------------

-- monta o REGISTRO C400 - EQUIPAMENTO ECF (CÓDIGO 02 e 2D)
procedure pkb_monta_reg_C400
is
   --
   vn_fase  number := 0;
   vv_cod   varchar2(7);
   i        pls_integer;
   j        pls_integer;
   k        pls_integer;
   l        pls_integer;
   --
   vn_qtde_equipecf             number;
   vv_cod_sit                   sit_docto.cd%type;
   vv_cod_tot                   tot_parc_red_z.cod_tot%type;
   vn_dm_ind_trib_tot_parc_redz empresa.dm_ind_trib_tot_parc_redz%type;
   --
   cursor c_400 is
   select e.id
        , mf.cod_mod
        , e.ecf_mod
        , e.ecf_fab
        , e.ecf_cx
     from equip_ecf   e
        , mod_fiscal  mf
    where e.empresa_id       = gt_row_abertura_efd.empresa_id
      and mf.id              = e.modfiscal_id
      and mf.cod_mod in ('02', '2D')  -- Nota Fiscal de Venda a Consumidor e Cupom Fiscal
    order by mf.cod_mod;
   --
   cursor c_405( en_equipecf_id equip_ecf.id%type ) is
   select r.id
        , r.dt_doc
        , r.cro
        , r.crz
        , r.num_coo_fin
        , r.vl_grande_total_fin
        , r.vl_brt
        , r.vl_pis
        , r.vl_cofins
     from TMP_REDUCAO_Z_ECF  r
    where r.equipecf_id  = en_equipecf_id
      and r.dt_doc between gt_row_abertura_efd.dt_ini and gt_row_abertura_efd.dt_fim
      and r.dm_st_proc   = 1 -- Validada
      and r.vl_brt       > 0
    order by r.dt_doc;
   --
   cursor c_420( en_reducaozecf_id reducao_z_ecf.id%type ) is
   select t.id
        , tz.cod_tot
        , t.vlr_acum_tot
        , t.nr_tot
        , t.descr_nr_tot
     from TMP_TOT_PARC_RED_Z_ECF t
        , tot_parc_red_z     tz
    where t.reducaozecf_id = en_reducaozecf_id
      and t.vlr_acum_tot   > 0
      and tz.id            = t.totparcredz_id
    order by tz.cod_tot;
   --
cursor c_425 ( en_reducaozecf_id reducao_z_ecf.id%type
             , ev_cod_tot in tot_parc_red_z.cod_tot%type ) is
select a.cod_tot_gerado
     , a.item_id
     , a.unidade_id
     , a.qtde
     , a.vl_item
     , a.vl_pis
     , a.vl_cofins
  from (
select /*+rule*/
          case
             when nvl(i.aliq_icms,0) = 0
                and cst.cod_st in ('40', '41', '50', '51')
                and vn_dm_ind_trib_tot_parc_redz = 1 -- Apenas valores Isentos
                then
                'I1'
             when nvl(i.aliq_icms,0) = 0
                and cst.cod_st in ('40', '41', '50', '51')
                and vn_dm_ind_trib_tot_parc_redz = 2 -- Apenas valores Não Tributados
                then
                'N1'
             when nvl(i.aliq_icms,0) = 0
                and cst.cod_st in ('40', '50')
                and vn_dm_ind_trib_tot_parc_redz = 3 -- Divide os valores (40 e 50 Isenta de ICMS; 41 e 51 Não Tributada)
                then
                'I1'
             when nvl(i.aliq_icms,0) = 0
                and cst.cod_st in ('41', '51')
                and vn_dm_ind_trib_tot_parc_redz = 3 -- Divide os valores (40 e 50 Isenta de ICMS; 41 e 51 Não Tributada)
                then
                'N1'
             when nvl(i.aliq_icms,0) = 0
                and cst.cod_st in ('60')
                then
                'F1'
             else 'T' || lpad(to_char(i.aliq_icms * 100), 4, '0')
          end cod_tot_gerado
        , i.item_id
        , i.unidade_id
        , sum(i.qtde) qtde
        , sum(i.vl_item) vl_item
        , sum(i.VL_PIS) vl_pis
        , sum(i.VL_COFINS) vl_cofins
     from TMP_DOC_FISCAL_EMIT_ECF d
        , TMP_IT_DOC_FISCAL_EMIT_ECF i
        , cod_st cst
    where d.reducaozecf_id      = en_reducaozecf_id
      and i.docfiscalemitecf_id = d.id
      and ( i.qtde - nvl(i.qtde_canc,0) ) > 0
      and cst.id                = i.codst_id
    group by case
             when nvl(i.aliq_icms,0) = 0
                and cst.cod_st in ('40', '41', '50', '51')
                and vn_dm_ind_trib_tot_parc_redz = 1 -- Apenas valores Isentos
                then
                'I1'
             when nvl(i.aliq_icms,0) = 0
                and cst.cod_st in ('40', '41', '50', '51')
                and vn_dm_ind_trib_tot_parc_redz = 2 -- Apenas valores Não Tributados
                then
                'N1'
             when nvl(i.aliq_icms,0) = 0
                and cst.cod_st in ('40', '50')
                and vn_dm_ind_trib_tot_parc_redz = 3 -- Divide os valores (40 e 50 Isenta de ICMS; 41 e 51 Não Tributada)
                then
                'I1'
             when nvl(i.aliq_icms,0) = 0
                and cst.cod_st in ('41', '51')
                and vn_dm_ind_trib_tot_parc_redz = 3 -- Divide os valores (40 e 50 Isenta de ICMS; 41 e 51 Não Tributada)
                then
                'N1'
             when nvl(i.aliq_icms,0) = 0
                and cst.cod_st in ('60')
                then
                'F1'
             else 'T' || lpad(to_char(i.aliq_icms * 100), 4, '0')
             end
        , i.item_id
        , i.unidade_id
     ) a
    where a.cod_tot_gerado = ev_cod_tot
    order by 1, 2, 3;
   --
   cursor c_460( en_reducaozecf_id reducao_z_ecf.id%type ) is
   select d.id
        , d.modfiscal_id
        , d.sitdocto_id
        , d.num_doc
        , d.dt_doc
        , d.vl_doc
        , d.vl_pis
        , d.vl_cofins
        , d.cpf_cnpj
        , d.nom_adq
     from TMP_DOC_FISCAL_EMIT_ECF  d
    where d.reducaozecf_id = en_reducaozecf_id
    order by d.modfiscal_id, d.num_doc;
   --
   cursor c_470( en_docfiscalemitecf_id doc_fiscal_emit_ecf.id%type) is
   select it.id
        , it.qtde
        , it.qtde_canc
        , it.vl_item
        , it.codst_id
        , it.cfop_id
        , it.aliq_icms
        , it.vl_pis
        , it.vl_cofins
        , it.item_id
        , it.unidade_id
     from TMP_IT_DOC_FISCAL_EMIT_ECF  it
    where it.docfiscalemitecf_id  = en_docfiscalemitecf_id
    order by it.item_id;
   --
   cursor c_490( en_reducaozecf_id reducao_z_ecf.id%type ) is
   select r.id
        , r.codst_id
        , r.cfop_id
        , r.aliq_icms
        , r.vl_opr
        , r.vl_bc_icms
        , r.vl_icms
        , r.obslanctofiscal_id
     from reg_anal_mov_dia_ecf  r
    where r.reducaozecf_id = en_reducaozecf_id
    order by r.codst_id, r.cfop_id;
   --
begin
   --
   vn_fase := 1;
   --
   vn_dm_ind_trib_tot_parc_redz := pk_csf.fkg_indtribtotparcredz_empresa ( en_empresa_id => gt_row_abertura_efd.empresa_id );
   --
   i := 0;
   for rec_400 in c_400 loop
      exit when c_400%notfound or (c_400%notfound) is null;
      --
      vn_fase := 2;
      --
      vn_qtde_equipecf := 0;
      --
      begin
         --
         select count(1)
           into vn_qtde_equipecf
           from TMP_REDUCAO_Z_ECF r
          where r.equipecf_id  = rec_400.id
            and r.dt_doc between gt_row_abertura_efd.dt_ini and gt_row_abertura_efd.dt_fim
            and r.dm_st_proc   = 1 -- Validada
            and r.vl_brt       > 0;
         --
      exception
         when others then
            vn_qtde_equipecf := 0;
      end;
      --
      if nvl(vn_qtde_equipecf,0) <= 0 then
         goto sairecf;
      end if;
      --
      i := nvl(i,0) + 1;
      --
      vn_fase := 3;
      --
      vt_tab_reg_c400(i).reg            := 'C400';
      vt_tab_reg_c400(i).cod_mod        := rec_400.cod_mod;
      vt_tab_reg_c400(i).ecf_mod        := rec_400.ecf_mod;
      vt_tab_reg_c400(i).ecf_fab        := rec_400.ecf_fab;
      vt_tab_reg_c400(i).ecf_cx         := rec_400.ecf_cx;
      --
      vn_fase := 4;
      --
      j := 0;
      k := 0;
      for rec_405 in c_405(rec_400.id) loop
         exit when c_405%notfound or (c_405%notfound) is null;
         --
         vn_fase := 5;
         --
         j := nvl(j,0) + 1;
         --
         vn_fase := 6;
         --
         vt_bi_tab_reg_c405(i)(j).reg            := 'C405';
         vt_bi_tab_reg_c405(i)(j).dt_doc         := rec_405.dt_doc;
         vt_bi_tab_reg_c405(i)(j).cro            := rec_405.cro;
         vt_bi_tab_reg_c405(i)(j).crz            := rec_405.crz;
         vt_bi_tab_reg_c405(i)(j).num_coo_fin    := rec_405.num_coo_fin;
         vt_bi_tab_reg_c405(i)(j).gt_fin         := rec_405.vl_grande_total_fin;
         vt_bi_tab_reg_c405(i)(j).vl_brt         := rec_405.vl_brt;
         --
         vn_fase := 7;
         --
         k := nvl(k,0) + 1;
         --
         vn_fase := 8;
         --
         vt_tri_tab_reg_c410(i)(j)(k).reg            := 'C410';
         vt_tri_tab_reg_c410(i)(j)(k).vl_pis         := rec_405.vl_pis;
         vt_tri_tab_reg_c410(i)(j)(k).vl_cofins      := rec_405.vl_cofins;
         --
         vn_fase := 9;
         --
         k := 0;
         for rec_420 in c_420(rec_405.id) loop
            exit when c_420%notfound or (c_420%notfound) is null;
            --
            vn_fase := 10;
            vv_cod  := null;
            --
            k := nvl(k,0) + 1;
            --
            vn_fase := 11;
            --
            vt_tri_tab_reg_c420(i)(j)(k).reg            := 'C420';
            vt_tri_tab_reg_c420(i)(j)(k).cod_tot_par    := rec_420.cod_tot;
            vt_tri_tab_reg_c420(i)(j)(k).vlr_acum_tot   := rec_420.vlr_acum_tot;
            --
            vn_fase := 11.1;
            --
            if rec_420.cod_tot in ('IOF', 'Can-O', 'Can-S', 'Can-T', 'AO', 'AS', 'AT', 'DO', 'DS', 'DT', 'OPNF', 'CAN-O', 'CAN-S', 'CAN-T')
               or substr(rec_420.cod_tot, 1, 2) in ('NS', 'IS', 'FS')
               or substr(rec_420.cod_tot, 1, 1) in ('N', 'I', 'F')
               then
               --
               vn_fase := 11.2;
               --
               vt_tri_tab_reg_c420(i)(j)(k).nr_tot := null;
               vt_tri_tab_reg_c420(i)(j)(k).descr_nr_tot := null;
               --
            elsif instr(trim(rec_420.cod_tot),'S') = 0 and -- outros tipos não identificados, diferentes de Tnnnn, Snnnn, xxTnnnn, xxSnnnn
                  instr(trim(rec_420.cod_tot),'T') = 0 then
                  --
                  vn_fase := 11.3;
                  --
                  vt_tri_tab_reg_c420(i)(j)(k).nr_tot       := null;
                  vt_tri_tab_reg_c420(i)(j)(k).descr_nr_tot := null;
                  --
            else -- tipos identificados: Tnnnn, Snnnn, xxTnnnn, xxSnnnn - incluir 01 antes de T ou S
               --
               vn_fase := 11.4;
               --
               -- O PVA não aceita cod_tot que comece com 00 Exe.: 00T1700 devido a esse fato
               -- foi realizado o tratamento que quando tiver 00 joga 1 senão joga o próprio código
               --
               if (((instr(trim(rec_420.cod_tot),'S') <> 0 or instr(trim(rec_420.cod_tot),'T') <> 0)) and -- existe o código T ou S: Tnnnn, Snnnn
                   (substr(trim(rec_420.cod_tot),1,2) = '00')) then -- antes de T ou S estiver 00, o PVA não aceita, trocar por 01
                  --
                  vn_fase := 11.5;
                  --
                  vt_tri_tab_reg_c420(i)(j)(k).nr_tot      := 1;
                  vt_tri_tab_reg_c420(i)(j)(k).cod_tot_par := '01'||substr(trim(rec_420.cod_tot),3,5);
                  --
               elsif (instr(trim(rec_420.cod_tot),'S') = 1 or instr(trim(rec_420.cod_tot),'T') = 1) then -- primeira posição do código for T ou S: Tnnnn, Snnnn
                     --
                     vn_fase := 11.6;
                     --
                     vt_tri_tab_reg_c420(i)(j)(k).nr_tot      := 1;
                     vt_tri_tab_reg_c420(i)(j)(k).cod_tot_par := vt_tri_tab_reg_c420(i)(j)(k).cod_tot_par;
                     --
               else
                  --
                  vn_fase := 11.7;
                  --
                  vt_tri_tab_reg_c420(i)(j)(k).nr_tot      := substr(trim(rec_420.cod_tot),1,2);
                  vt_tri_tab_reg_c420(i)(j)(k).cod_tot_par := vt_tri_tab_reg_c420(i)(j)(k).cod_tot_par;
                  --
               end if;
               --
               vn_fase := 11.8;
               --
               vt_tri_tab_reg_c420(i)(j)(k).descr_nr_tot := 'Totalizador '||vt_tri_tab_reg_c420(i)(j)(k).nr_tot;
               --
            end if;
            --
            vn_fase := 12;
            --
            l := 0;
            --
            if length(rec_420.cod_tot) = 7 then
               vv_cod_tot := substr(rec_420.cod_tot, 3, 5);
            else
               vv_cod_tot := rec_420.cod_tot;
            end if;
            --
            if gv_dm_ind_perfil = 'B' then
               --
               for rec_425 in c_425(rec_405.id, vv_cod_tot) loop
                  exit when c_425%notfound or (c_425%notfound) is null;
                  --
                  vn_fase := 13;
                  --
                  l := nvl(l,0) + 1;
                  --
                  vn_fase := 14;
                  --
                  vt_tetra_tab_reg_c425(i)(j)(k)(l).reg            := 'C425';
                  vt_tetra_tab_reg_c425(i)(j)(k)(l).cod_item       := pk_csf.fkg_Item_cod (rec_425.item_id);
                  vt_tetra_tab_reg_c425(i)(j)(k)(l).qtd            := rec_425.qtde;
                  vt_tetra_tab_reg_c425(i)(j)(k)(l).unid           := pk_csf.fkg_Unidade_sigla (rec_425.unidade_id);
                  vt_tetra_tab_reg_c425(i)(j)(k)(l).vl_item        := rec_425.vl_item;
                  vt_tetra_tab_reg_c425(i)(j)(k)(l).vl_pis         := rec_425.vl_pis;
                  vt_tetra_tab_reg_c425(i)(j)(k)(l).vl_cofins      := rec_425.vl_cofins;
                  --
                  vn_fase := 14.1;
                  --
                  --Monta arquivo auxiliar unidade
                  if nvl(rec_425.unidade_id, 0) > 0 then
                     --
                     vn_fase := 14.2;
                     --
                     pkb_monta_reg_0190( en_unidade_id => rec_425.unidade_id);
                     --
                  end if;
                  --
                  vn_fase := 14.3;
                  --
                  --Monta arquivo auxiliar produto
                  if nvl(rec_425.item_id, 0) > 0 then
                     --
                     vn_fase := 14.4;
                     --
                     pkb_monta_reg_0200( en_item_id => rec_425.item_id);
                     --
                  end if;
                  --
                  vn_fase := 15;
                  --
                  --
               end loop;
               --
            end if;
            --
         end loop;
         --
         vn_fase := 16;
         --
         if gv_dm_ind_perfil = 'A' then
            --
            k := 0;
            --
            for rec_460 in c_460(rec_405.id) loop
               exit when c_460%notfound or (c_460%notfound) is null;
               --
               vn_fase := 17;
               --
               k := nvl(k,0) + 1;
               --
               vn_fase := 18;
               --
               vv_cod_sit := pk_csf.fkg_Sit_Docto_cd ( en_sitdoc_id => rec_460.sitdocto_id );
               --
               if vv_cod_sit in ('02', '03') then
                  --
                  -- Para cupom fiscal cancelado, informar somente os campos COD_MOD, COD_SIT e NUM_DOC, sem os registros filhos
                  --
                  vn_fase := 18.1;
                  --
                  vt_tri_tab_reg_c460(i)(j)(k).reg            := 'C460';
                  vt_tri_tab_reg_c460(i)(j)(k).cod_mod        := pk_csf.fkg_cod_mod_id ( en_modfiscal_id => rec_460.modfiscal_id );
                  vt_tri_tab_reg_c460(i)(j)(k).cod_sit        := vv_cod_sit;
                  vt_tri_tab_reg_c460(i)(j)(k).num_doc        := rec_460.num_doc;
                  vt_tri_tab_reg_c460(i)(j)(k).dt_doc         := null;
                  vt_tri_tab_reg_c460(i)(j)(k).vl_doc         := null;
                  vt_tri_tab_reg_c460(i)(j)(k).vl_pis         := null;
                  vt_tri_tab_reg_c460(i)(j)(k).vl_cofins      := null;
                  vt_tri_tab_reg_c460(i)(j)(k).cpf_cnpj       := null;
                  vt_tri_tab_reg_c460(i)(j)(k).nom_adq        := null;
                  --
               else
                  --
                  vn_fase := 18.2;
                  --
                  vt_tri_tab_reg_c460(i)(j)(k).reg            := 'C460';
                  vt_tri_tab_reg_c460(i)(j)(k).cod_mod        := pk_csf.fkg_cod_mod_id ( en_modfiscal_id => rec_460.modfiscal_id );
                  vt_tri_tab_reg_c460(i)(j)(k).cod_sit        := pk_csf.fkg_Sit_Docto_cd ( en_sitdoc_id => rec_460.sitdocto_id );
                  vt_tri_tab_reg_c460(i)(j)(k).num_doc        := rec_460.num_doc;
                  vt_tri_tab_reg_c460(i)(j)(k).dt_doc         := rec_460.dt_doc;
                  vt_tri_tab_reg_c460(i)(j)(k).vl_doc         := rec_460.vl_doc;
                  vt_tri_tab_reg_c460(i)(j)(k).vl_pis         := rec_460.vl_pis;
                  vt_tri_tab_reg_c460(i)(j)(k).vl_cofins      := rec_460.vl_cofins;
                  vt_tri_tab_reg_c460(i)(j)(k).cpf_cnpj       := rec_460.cpf_cnpj;
                  vt_tri_tab_reg_c460(i)(j)(k).nom_adq        := rec_460.nom_adq;
                  --
               end if;
               --
               vn_fase := 19;
               --
               l := 0;
               for rec_470 in c_470(rec_460.id) loop
                  exit when c_470%notfound or (c_470%notfound) is null;
                  --
                  -- Se o cupom fiscal estiver cancelado não gera filhos
                  if vt_tri_tab_reg_c460(i)(j)(k).cod_sit not in ('02', '03')
                     and ( nvl(rec_470.qtde_canc,0) < nvl(rec_470.qtde,0) )
                     then
                     --
                     vn_fase := 19.1;
                     --
                     l := nvl(l,0) + 1;
                     --
                     vt_tetra_tab_reg_c470(i)(j)(k)(l).reg            := 'C470';
                     vt_tetra_tab_reg_c470(i)(j)(k)(l).cod_item       := pk_csf.fkg_Item_cod (rec_470.item_id);
                     --
                     vt_tetra_tab_reg_c470(i)(j)(k)(l).qtd            := rec_470.qtde;
                     vt_tetra_tab_reg_c470(i)(j)(k)(l).qtd_canc       := rec_470.qtde_canc;
                     --
                     vt_tetra_tab_reg_c470(i)(j)(k)(l).unid           := pk_csf.fkg_Unidade_sigla (rec_470.unidade_id);
                     vt_tetra_tab_reg_c470(i)(j)(k)(l).vl_item        := rec_470.vl_item;
                     vt_tetra_tab_reg_c470(i)(j)(k)(l).cst_icms       := pk_csf.fkg_Cod_ST_cod ( en_id_st => rec_470.codst_id );
                     vt_tetra_tab_reg_c470(i)(j)(k)(l).cfop           := pk_csf.fkg_cfop_cd ( en_cfop_id => rec_470.cfop_id );
                     vt_tetra_tab_reg_c470(i)(j)(k)(l).aliq_icms      := rec_470.aliq_icms;
                     vt_tetra_tab_reg_c470(i)(j)(k)(l).vl_pis         := rec_470.vl_pis;
                     vt_tetra_tab_reg_c470(i)(j)(k)(l).vl_cofins      := rec_470.vl_cofins;
                     --
                     vn_fase := 19.2;
                     --
                     --Monta arquivo auxiliar unidade
                     if nvl(rec_470.unidade_id, 0) > 0 then
                        --
                        vn_fase := 19.3;
                        --
                        pkb_monta_reg_0190( en_unidade_id => rec_470.unidade_id);
                        --
                     end if;
                     --
                     vn_fase := 19.4;
                     --
                     --Monta arquivo auxiliar produto
                     if nvl(rec_470.item_id, 0) > 0 then
                        --
                        vn_fase := 19.5;
                        --
                        pkb_monta_reg_0200( en_item_id => rec_470.item_id);
                        --
                     end if;
                     --
                     vn_fase := 19.6;
                     --
                  end if;
                  --
               end loop;
               --
            end loop;
            --
         end if; -- fim de teste que gera C460 só para perfil A
         --
         vn_fase := 20;
         --
         k := 0;
         for rec_490 in c_490(rec_405.id) loop
            exit when c_490%notfound or (c_490%notfound) is null;
            --
            vn_fase := 21;
            --
            k := nvl(k,0) + 1;
            --
            vn_fase := 22;
            --
            vt_tri_tab_reg_c490(i)(j)(k).reg            := 'C490';
            --
            vt_tri_tab_reg_c490(i)(j)(k).cfop           := pk_csf.fkg_cfop_cd ( en_cfop_id => rec_490.cfop_id );
            --
            vt_tri_tab_reg_c490(i)(j)(k).cst_icms       := case when substr(vt_tri_tab_reg_c490(i)(j)(k).cfop,1,1) in ('3', '7') then '1' else '0' end || pk_csf.fkg_Cod_ST_cod ( en_id_st => rec_490.codst_id );
            --
            vt_tri_tab_reg_c490(i)(j)(k).aliq_icms      := rec_490.aliq_icms;
            vt_tri_tab_reg_c490(i)(j)(k).vl_opr         := rec_490.vl_opr;
            vt_tri_tab_reg_c490(i)(j)(k).vl_bc_icms     := rec_490.vl_bc_icms;
            vt_tri_tab_reg_c490(i)(j)(k).vl_icms        := rec_490.vl_icms;
            vt_tri_tab_reg_c490(i)(j)(k).cod_obs        := pk_csf.fkg_cd_obs_lancto_fiscal (rec_490.obslanctofiscal_id);
            --
            vn_fase := 22.1;
            -- Monta arquivo auxiliar 0460
            if nvl(rec_490.obslanctofiscal_id, 0) > 0 then
               --
               vn_fase := 22.2;
               --
               pkb_monta_reg_0460 (en_obslanctofiscal_id => rec_490.obslanctofiscal_id);
               --
            end if;
         --
         end loop;
         --
      end loop;
      --
      vn_fase := 99;
      --
      <<sairecf>>
      --
      vn_fase := 100;
      --
   end loop;
   --
exception
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_monta_reg_C400 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end pkb_monta_reg_C400;

-------------------------------------------------------------------------------------------------------

-- monta o REGISTRO C350: NOTA FISCAL DE VENDA A CONSUMIDOR (CÓDIGO 02)
procedure pkb_monta_reg_C350
is
   --
   vn_fase  number := 0;
   i        pls_integer;
   j        pls_integer;
   --
   cursor c_350 is
   select nf.id
        , nf.serie
        , nf.subserie
        , nf.num_doc
        , nf.dt_doc
        , nf.cnpj_cpf
        , nf.vl_merc
        , nf.vl_doc
        , nf.vl_desc
        , nf.vl_pis
        , nf.vl_cofins
        , nf.cod_cta
     from nf_venda_cons nf
    where nf.empresa_id    = gt_row_abertura_efd.empresa_id
      and trunc(nf.dt_doc) between gt_row_abertura_efd.dt_ini and gt_row_abertura_efd.dt_fim
      and nf.dm_st_proc    = 1  -- Validada
    order by nf.serie
        , nf.subserie
        , nf.num_doc;
   --
   cursor c_370 (en_nfvendacons_id nf_venda_cons.id%type) is
   select it.id
        , it.num_item
        , it.qtde
        , it.vl_item
        , it.vl_desc
        , it.item_id
        , it.unidade_id
     from it_nf_venda_cons it
    where it.nfvendacons_id = en_nfvendacons_id
    order by it.num_item;
   --
   cursor c_390 (en_nfvendacons_id nf_venda_cons.id%type) is
   select r.id
        , st.cod_st
        , c.cd cfop
        , r.aliq_icms
        , r.vl_opr
        , r.vl_bc_icms
        , r.vl_icms
        , r.vl_red_bc
        , r.obslanctofiscal_id
     from reg_anal_nf_venda_cons r
        , cod_st                 st
        , cfop                   c
    where r.nfvendacons_id = en_nfvendacons_id
      and st.id            = r.codst_id
      and c.id             = r.cfop_id
    order by st.cod_st
        , c.cd;
   --
begin
   --
   vn_fase := 1;
   --
   i := 0;
   for rec_350 in c_350 loop
      --
      vn_fase := 2;
      --
      i := nvl(i,0) + 1;
      --
      vn_fase := 3;
      --
      vt_tab_reg_c350(i).reg            := 'C350';
      vt_tab_reg_c350(i).ser            := rec_350.serie;
      vt_tab_reg_c350(i).sub_ser        := rec_350.subserie;
      vt_tab_reg_c350(i).num_doc        := rec_350.num_doc;
      vt_tab_reg_c350(i).dt_doc         := rec_350.dt_doc;
      vt_tab_reg_c350(i).cnpj_cpf       := rec_350.cnpj_cpf;
      vt_tab_reg_c350(i).vl_merc        := rec_350.vl_merc;
      vt_tab_reg_c350(i).vl_doc         := rec_350.vl_doc;
      vt_tab_reg_c350(i).vl_desc        := rec_350.vl_desc;
      vt_tab_reg_c350(i).vl_pis         := rec_350.vl_pis;
      vt_tab_reg_c350(i).vl_cofins      := rec_350.vl_cofins;
      vt_tab_reg_c350(i).cod_cta        := rec_350.cod_cta;
      --
      vn_fase := 4;
      --
      j := 0;
      for rec_370 in c_370(rec_350.id) loop
         --
         vn_fase := 5;
         --
         j := nvl(j,0) + 1;
         --
         vn_fase := 6;
         --
         vt_bi_tab_reg_c370(i)(j).reg            := 'C370';
         vt_bi_tab_reg_c370(i)(j).num_item       := rec_370.num_item;
         vt_bi_tab_reg_c370(i)(j).cod_item       := pk_csf.fkg_Item_cod (rec_370.item_id);
         vt_bi_tab_reg_c370(i)(j).qtd            := rec_370.qtde;
         vt_bi_tab_reg_c370(i)(j).unid           := pk_csf.fkg_Unidade_sigla (rec_370.unidade_id);
         vt_bi_tab_reg_c370(i)(j).vl_item        := rec_370.vl_item;
         vt_bi_tab_reg_c370(i)(j).vl_desc        := rec_370.vl_desc;
         --
         vn_fase := 6.1;
         --
         --Monta arquivo auxiliar unidade
         if nvl(rec_370.unidade_id, 0) > 0 then
            --
            vn_fase := 6.2;
            --
            pkb_monta_reg_0190( en_unidade_id => rec_370.unidade_id);
            --
         end if;
         --
         vn_fase := 6.3;
         --
         --Monta arquivo auxiliar produto
         if nvl(rec_370.item_id, 0) > 0 then
            --
            vn_fase := 6.4;
            --
            pkb_monta_reg_0200( en_item_id => rec_370.item_id);
            --
         end if;
         --
         vn_fase := 6.5;
         --
         --Monta arquivo auxiliar para conversao de unidade
         if nvl(rec_370.item_id, 0) > 0 and nvl(rec_370.unidade_id, 0) > 0 then
            --
            vn_fase := 6.6;
            --
            pkb_monta_reg_0220 ( en_item_id => rec_370.item_id
                               , en_unidade_id => rec_370.unidade_id );
            --
         end if;
         --
      end loop;
      --
      vn_fase := 7;
      --
      j := 0;
      --
      for rec_390 in c_390(rec_350.id) loop
         --
         vn_fase := 8;
         --
         j := nvl(j,0) + 1;
         --
         vn_fase := 9;
         --
         vt_bi_tab_reg_c390(i)(j).reg            := 'C390';
         vt_bi_tab_reg_c390(i)(j).cst_icms       := rec_390.cod_st;
         vt_bi_tab_reg_c390(i)(j).cfop           := rec_390.cfop;
         vt_bi_tab_reg_c390(i)(j).aliq_icms      := rec_390.aliq_icms;
         vt_bi_tab_reg_c390(i)(j).vl_opr         := rec_390.vl_opr;
         vt_bi_tab_reg_c390(i)(j).vl_bc_icms     := rec_390.vl_bc_icms;
         vt_bi_tab_reg_c390(i)(j).vl_icms        := rec_390.vl_icms;
         vt_bi_tab_reg_c390(i)(j).vl_red_bc      := rec_390.vl_red_bc;
         vt_bi_tab_reg_c390(i)(j).cod_obs        := pk_csf.fkg_cd_obs_lancto_fiscal (rec_390.obslanctofiscal_id);
         --
         vn_fase := 9.1;
         -- Monta arquivo auxiliar 0460
         if nvl(rec_390.obslanctofiscal_id, 0) > 0 then
            --
            vn_fase := 9.2;
            --
            pkb_monta_reg_0460 (en_obslanctofiscal_id => rec_390.obslanctofiscal_id);
            --
         end if;
         --
      end loop;
      --
   end loop;
   --
exception
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_monta_reg_C350 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end pkb_monta_reg_C350;

-------------------------------------------------------------------------------------------------------

-- monta o REGISTRO C300: RESUMO DIÁRIO DAS NOTAS FISCAIS DE VENDA A CONSUMIDOR (CÓDIGO 02)
procedure pkb_monta_reg_C300
is
   --
   vn_fase  number := 0;
   i        pls_integer;
   j        pls_integer;
   k        pls_integer;
   --
   cursor c_c300 is
   select nf.id
        , mf.cod_mod
        , nf.serie
        , nf.subserie
        , nf.num_doc_ini
        , nf.num_doc_fin
        , nf.dt_doc
        , nf.vl_doc
        , nf.vl_pis
        , nf.vl_cofins
        , nf.cod_cta
     from res_dia_nf_venda_cons  nf
        , mod_fiscal             mf
    where nf.empresa_id    = gt_row_abertura_efd.empresa_id
      and trunc(nf.dt_doc) between gt_row_abertura_efd.dt_ini and gt_row_abertura_efd.dt_fim
      and nf.dm_st_proc    = 1 -- Validada
      and mf.id            = nf.modfiscal_id
      and mf.cod_mod       = '02' -- Nota Fiscal de Venda a Consumidor
    order by mf.cod_mod
        , nf.serie
        , nf.subserie
        , nf.num_doc_ini;
   --
   cursor c_c310 ( en_resdianfvendacons_id res_dia_nf_venda_cons.id%type ) is
   select nfc.num_doc_canc
     from res_dia_nf_venda_cons_canc nfc
    where nfc.resdianfvendacons_id = en_resdianfvendacons_id
    order by nfc.num_doc_canc;
   --
   cursor c_c320 ( en_resdianfvendacons_id res_dia_nf_venda_cons.id%type ) is
   select r.id
        , st.cod_st
        , c.cd cfop
        , r.aliq_icms
        , r.vl_opr
        , r.vl_bc_icms
        , r.vl_icms
        , r.vl_red_bc
        , r.obslanctofiscal_id
     from reg_an_res_dia_nf_venda_cons r
        , cod_st                       st
        , cfop                         c
    where r.resdianfvendacons_id   = en_resdianfvendacons_id
      and st.id                    = r.codst_id
      and c.id                     = r.cfop_id
    order by st.cod_st, c.cd;
   --
   cursor c_c321 ( en_reganresdianfvendacons_id reg_an_res_dia_nf_venda_cons.id%type ) is
   select it.id
        , it.qtde_acm
        , it.vl_item_acm
        , it.vl_desc_acm
        , it.vl_bc_icms_acm
        , it.vl_icms_acm
        , it.vl_pis_acm
        , it.vl_cofins_acm
        , it.item_id
        , it.unidade_id
     from it_res_dia_nf_venda_cons it
    where it.reganresdianfvendacons_id = en_reganresdianfvendacons_id
    order by it.item_id;
   --
begin
   --
   vn_fase := 1;
   --
   i := 0;
   for rec_c300 in c_c300 loop
      --
      vn_fase := 2;
      --
      i := nvl(i,0) + 1;
      --
      vn_fase := 3;
      --
      vt_tab_reg_c300(i).reg            := 'C300';
      vt_tab_reg_c300(i).cod_mod        := rec_c300.cod_mod;
      vt_tab_reg_c300(i).ser            := rec_c300.serie;
      vt_tab_reg_c300(i).sub            := rec_c300.subserie;
      vt_tab_reg_c300(i).num_doc_ini    := rec_c300.num_doc_ini;
      vt_tab_reg_c300(i).num_doc_fin    := rec_c300.num_doc_fin;
      vt_tab_reg_c300(i).dt_doc         := rec_c300.dt_doc;
      vt_tab_reg_c300(i).vl_doc         := rec_c300.vl_doc;
      vt_tab_reg_c300(i).vl_pis         := rec_c300.vl_pis;
      vt_tab_reg_c300(i).vl_cofins      := rec_c300.vl_cofins;
      vt_tab_reg_c300(i).cod_cta        := rec_c300.cod_cta;
      --
      vn_fase := 4;
      -- monta o registro REGISTRO C310: DOCUMENTOS CANCELADOS DE NOTAS FISCAIS DE VENDA A CONSUMIDOR (CÓDIGO 02)
      j := 0;
      for rec_c310 in c_c310(rec_c300.id) loop
         --
         vn_fase := 5;
         --
         j := nvl(j,0) + 1;
         --
         vn_fase := 6;
         --
         vt_bi_tab_reg_c310(i)(j).reg            := 'C310';
         vt_bi_tab_reg_c310(i)(j).num_doc_canc   := rec_c310.num_doc_canc;
         --
      end loop;
      --
      vn_fase := 7;
      --
      j := 0;
      for rec_c320 in c_c320(rec_c300.id) loop
         --
         vn_fase := 8;
         --
         j := nvl(j,0) + 1;
         --
         vn_fase := 9;
         --
         vt_bi_tab_reg_c320(i)(j).reg            := 'C320';
         vt_bi_tab_reg_c320(i)(j).cst_icms       := rec_c320.cod_st;
         vt_bi_tab_reg_c320(i)(j).cfop           := rec_c320.cfop;
         vt_bi_tab_reg_c320(i)(j).aliq_icms      := rec_c320.aliq_icms;
         vt_bi_tab_reg_c320(i)(j).vl_opr         := rec_c320.vl_opr;
         vt_bi_tab_reg_c320(i)(j).vl_bc_icms     := rec_c320.vl_bc_icms;
         vt_bi_tab_reg_c320(i)(j).vl_icms        := rec_c320.vl_icms;
         vt_bi_tab_reg_c320(i)(j).vl_red_bc      := rec_c320.vl_red_bc;
         vt_bi_tab_reg_c320(i)(j).cod_obs        := pk_csf.fkg_cd_obs_lancto_fiscal (rec_c320.obslanctofiscal_id);
         --
         vn_fase := 9.1;
         --
         -- Monta arquivo auxiliar 0460
         if nvl(rec_c320.obslanctofiscal_id, 0) > 0 then
            --
            vn_fase := 9.2;
            --
            pkb_monta_reg_0460 (en_obslanctofiscal_id => rec_c320.obslanctofiscal_id);
            --
         end if;
         --
         vn_fase := 10;
         --
         k := 0;
         for rec_c321 in c_c321(rec_c320.id) loop
            --
            vn_fase := 11;
            --
            k := nvl(k,0) + 1;
            --
            vt_tri_tab_reg_c321(i)(j)(k).reg            := 'C321';
            vt_tri_tab_reg_c321(i)(j)(k).cod_item       := pk_csf.fkg_Item_cod(rec_c321.item_id);
            vt_tri_tab_reg_c321(i)(j)(k).qtd            := rec_c321.qtde_acm;
            vt_tri_tab_reg_c321(i)(j)(k).unid           := pk_csf.fkg_Unidade_sigla (rec_c321.unidade_id);
            vt_tri_tab_reg_c321(i)(j)(k).vl_item        := rec_c321.vl_item_acm;
            vt_tri_tab_reg_c321(i)(j)(k).vl_desc        := rec_c321.vl_desc_acm;
            vt_tri_tab_reg_c321(i)(j)(k).vl_bc_icms     := rec_c321.vl_bc_icms_acm;
            vt_tri_tab_reg_c321(i)(j)(k).vl_icms        := rec_c321.vl_icms_acm;
            vt_tri_tab_reg_c321(i)(j)(k).vl_pis         := rec_c321.vl_pis_acm;
            vt_tri_tab_reg_c321(i)(j)(k).vl_cofins      := rec_c321.vl_cofins_acm;
            --
            vn_fase := 11.1;
            --
            --Monta arquivo auxiliar unidade
            if nvl(rec_c321.unidade_id, 0) > 0 then
               --
               vn_fase := 11.2;
               --
               pkb_monta_reg_0190( en_unidade_id => rec_c321.unidade_id);
               --
            end if;
            --
            vn_fase := 12;
            --
            --Monta arquivo auxiliar produto
            if nvl(rec_c321.item_id, 0) > 0 then
               --
               vn_fase := 12.1;
               --
               pkb_monta_reg_0200( en_item_id => rec_c321.item_id);
               --
            end if;
            --
            vn_fase := 13;
            --
            --Monta arquivo auxiliar para conversao de unidade
            if nvl(rec_c321.item_id, 0) > 0 and nvl(rec_c321.unidade_id, 0) > 0 then
               --
               vn_fase := 13.1;
               --
               pkb_monta_reg_0220 ( en_item_id => rec_c321.item_id
                                  , en_unidade_id => rec_c321.unidade_id );
               --
            end if;
            --
         end loop;
         --
      end loop;
      --
   end loop;
   --
exception
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_monta_reg_C300 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end pkb_monta_reg_C300;

-------------------------------------------------------------------------------------------------------
-- monta o REGISTRO C100: NOTA FISCAL (CÓDIGO 01), NOTA FISCAL AVULSA (CÓDIGO 1B), NOTA FISCAL DE PRODUTOR (CÓDIGO 04) E NFE (CÓDIGO 55)
procedure pkb_monta_reg_C100 is
  --
  vn_fase  number  := 0;
  vb_achou boolean := false;
  i        pls_integer;
  j        pls_integer;
  k        pls_integer;
  --
  vn_unidade                 number; 
  vn_num_item                number(3) := null;
  vn_dm_mod_frete            nota_fiscal_transp.dm_mod_frete%type := null;
  vn_ind_frt                 number(1) := null;
  vn_devolucao               number(1) := null;
  --
  vn_vl_base_calc_icms       number(15, 2);
  vn_vl_imp_trib_icms        number(15, 2);
  vn_vl_imp_trib_ipi         number(15, 2);
  vn_vl_doc                  number(15, 2);
  vv_cod_sit                 sit_docto.cd%type;
  --
  vv_cst_icms                varchar2(3);
  vn_vl_bc_icms              number;
  vn_aliq_icms               number;
  vn_vl_icms                 number;
  vn_vl_bc_icms_st           number;
  vn_aliq_st                 number;
  vn_vl_icms_st              number;
  vv_cst_ipi                 varchar2(3);
  vn_vl_bc_ipi               number;
  vn_aliq_ipi                number;
  vn_vl_ipi                  number;
  vv_cst_pis                 varchar2(2);
  vn_vl_bc_pis               number;
  vn_aliq_pis                number;
  vn_quant_bc_pis            number;
  vn_vl_aliq_pis             number;
  vn_vl_pis                  number;
  vv_cst_cofins              varchar2(2);
  vn_vl_bc_cofins            number;
  vn_aliq_cofins             number;
  vn_quant_bc_cofins         number;
  vn_vl_aliq_cofins          number;
  vn_vl_cofins               number;
  vn_qtd                     number;
  --
  vv_cod_infor               infor_comp_dcto_fiscal.cod_infor%type;
  vn_dm_quebra_infadic_spedf param_efd_icms_ipi.dm_quebra_infadic_spedf%type;
  vn_tam_tot                 number := 0;
  vn_tamanho                 number := 0;
  vv_txt_compl               nfinfor_adic.conteudo%type := null;
  vv_descr                   nfinfor_adic.conteudo%type := null;
  vn_vl_fcp                  number := 0;
  vn_vl_fcp_st               number := 0;
  vn_aliq_fcp_icms           number := 0;
  --
  vv_indice                  varchar2(20);
  vn_nro_ini                 inutiliza_nota_fiscal.nro_ini%type;
  vtv_nro_ini                dbms_sql.varchar2_table;   
  vtv_serie                  dbms_sql.varchar2_table;
  vtv_modfiscal              dbms_sql.varchar2_table;
  vn_tot_icms_c170           number;
  vn_tot_icms_c190           number;
  vn_tot_ipi_c170            number;
  vn_tot_ipi_c190            number;
  --
  vv_cod_part                pessoa.cod_part%type;
  vn_uf_reg_abert            abertura_efd.uf%type;
  vn_uf_cod_part             abertura_efd.uf%type;
  --
  vn_exist_c190              number := 0;
  vn_nf_conjugada            number := 0;
  --
  vn_antecipacao_credito_icms number;
  vn_idx_codinf               number := 0;
  vn_dm_ind_ie_dest           nota_fiscal_dest.dm_ind_ie_dest%type;
  vv_volta_origem_dado_pessoa varchar2(1) := null;    
  --     
  cursor c_nf_inut is
    select mf.cod_mod, 
           iu.serie, 
           iu.nro_ini, 
           iu.nro_fim,
           iu.id   nfinut_id
      from inutiliza_nota_fiscal iu, 
           mod_fiscal mf
     where iu.empresa_id  = gt_row_abertura_efd.empresa_id
       and iu.dm_situacao = 2 -- Concluído (envio e retorno a Sefaz com sucesso)
       and iu.dt_inut between gt_row_abertura_efd.dt_ini and gt_row_abertura_efd.dt_fim
       and mf.id          = iu.modfiscal_id
       and iu.nro_protocolo is not null
       and not exists (select nf.id 
                         from tmp_nota_fiscal nf
                        where nf.inutilizanf_id = iu.id)
     order by iu.nro_ini;
  --
  cursor c_nf is
    select nf.id notafiscal_id,
           nf.dm_ind_oper,
           nf.dm_ind_emit,
           mf.cod_mod,
           nf.serie,
           nf.nro_nf,
           nf.nro_chave_nfe,
           nf.dt_emiss,
           nf.dt_sai_ent,
           nf.sitdocto_id,
           decode(nf.dm_ind_pag,
                  0, 0, -- À vista
                  1, 1, -- A prazo
                  2, 9, -- Sem pagamento/Outros
                  9, 9 -- Sem pagamento/Outros
                  ) dm_ind_pag,
           t.vl_desconto,
           t.vl_abat_nt,
           t.vl_frete,
           t.vl_seguro,
           t.vl_outra_despesas,
           t.vl_base_calc_st,
           t.vl_imp_trib_st,
           t.vl_imp_trib_ipi,
           t.vl_imp_trib_pis,
           t.vl_imp_trib_cofins,
           t.vl_ret_pis,
           t.vl_ret_cofins,
           t.vl_icms_uf_dest,
           t.vl_icms_uf_remet,
           t.vl_comb_pobr_uf_dest,
           t.vl_fcp,
           t.vl_fcp_st,
           t.vl_pis_st,
           t.vl_cofins_st,
           nf.pessoa_id,
           nf.inforcompdctofiscal_id
           ,nf.uf_ibge_emit --#68509 incluido para usar no cursor c177_sefaz
      from tmp_nota_fiscal nf, 
           mod_fiscal mf, 
           tmp_nota_fiscal_total t
     where nf.empresa_id      = gt_row_abertura_efd.empresa_id
       and nf.dm_st_proc      in (4, 6, 7, 8) -- 4-Autorizada, 6-Denegada, 7-Cancelada, 8-Inutilizada
       and nf.dm_arm_nfe_terc = 0
       and ((nf.dm_ind_emit = 1 and trunc(nvl(nf.dt_sai_ent, nf.dt_emiss)) between trunc(gt_row_abertura_efd.dt_ini) and trunc(gt_row_abertura_efd.dt_fim)) 
             or
            (nf.dm_ind_emit = 0 and nf.dm_ind_oper = 1 and trunc(nf.dt_emiss) between trunc(gt_row_abertura_efd.dt_ini) and trunc(gt_row_abertura_efd.dt_fim)) 
             or
            (nf.dm_ind_emit = 0 and nf.dm_ind_oper = 0 and gn_dm_dt_escr_dfepoe = 0 and trunc(nf.dt_emiss) between trunc(gt_row_abertura_efd.dt_ini) and trunc(gt_row_abertura_efd.dt_fim)) 
             or
            (nf.dm_ind_emit = 0 and nf.dm_ind_oper = 0 and gn_dm_dt_escr_dfepoe = 1 and trunc(nvl(nf.dt_sai_ent, nf.dt_emiss)) between trunc(gt_row_abertura_efd.dt_ini) and trunc(gt_row_abertura_efd.dt_fim)))
       and mf.id              = nf.modfiscal_id
       and mf.cod_mod         in ('01', '1B', '04', '55', '65')
       and t.notafiscal_id    = nf.id
     order by nf.dm_ind_emit,
              nf.dm_ind_oper,
              mf.cod_mod,
              nf.serie,
              nf.nro_nf
             ,nf.uf_ibge_emit --#68509 incluido para usar no cursor c177_sefaz
              ;
  --
  cursor c_c110(en_notafiscal_id nota_fiscal.id%type) is
    select 'C110' || rownum cod_infor,
           --, substr(pk_csf.fkg_converte(ad.conteudo), 1, 255) txt_compl
           pk_csf.fkg_converte(ad.conteudo) txt_compl
      from nfinfor_adic ad
     where ad.notafiscal_id = en_notafiscal_id
       -- and ad.dm_tipo   in (0) -- 0 - Contribuinte/ 1 - Fisco
       and ad.campo is null
    union
    select 'C111' cod_infor, 
           pk_csf.fkg_converte(ad.conteudo) txt_compl
      from nfinfor_adic ad, 
           orig_proc op
     where ad.notafiscal_id = en_notafiscal_id
       and ad.dm_tipo       = 2 -- processo
       and op.id            = ad.origproc_id
    union
    select 'C112' cod_infor,   
           '' txt_compl
      from nota_fiscal_fisco nff
     where nff.notafiscal_id = en_notafiscal_id
    union
    select 'C113' cod_infor, '' txt_compl
      from tmp_nota_fiscal nf, 
           mod_fiscal mf, 
           nota_fiscal_referen nfr
     where nf.id             = en_notafiscal_id
       and nf.dm_st_proc     in (4, 6, 7, 8)
       -- and nf.dm_ind_emit = 1 -- Terceiro
       and mf.id             = nf.modfiscal_id
       and mf.cod_mod        in ('01', '1B', '04', '55')
       and nfr.notafiscal_id = nf.id
    union
    select 'C114' cod_infor, 
           '' txt_compl
      from cupom_fiscal_ref cfr, 
           mod_fiscal mf
     where cfr.notafiscal_id = en_notafiscal_id
       and mf.id             = cfr.modfsical_id
    union
    select 'C115' cod_infor, '' txt_compl
      from (select lc.dm_ind_carga ind_carga_col,
                   lc.cnpj         cnpj_col,
                   lc.ie           ie_col,
                   lc.cpf          cpf_col,
                   lc.cidade_ibge  cod_mun_col
              from nota_fiscal_local lc, 
                   tmp_nota_fiscal nf, 
                   mod_fiscal mf
             where 1 = 1
               and mf.cod_mod      in ('01', '1B', '04')
               and nf.modfiscal_id  = mf.id
               and lc.notafiscal_id = nf.id
               and lc.notafiscal_id = en_notafiscal_id
               and lc.dm_tipo_local = 0) c, -- Coleta
           (select le.dm_ind_carga ind_carga_entr,
                   le.cnpj         cnpj_entr,
                   le.ie           ie_entr,
                   le.cpf          cpf_entr,
                   le.cidade_ibge  cod_mun_entr
              from nota_fiscal_local le, 
                   tmp_nota_fiscal nf, 
                   mod_fiscal mf
             where 1 = 1
               and mf.cod_mod       in ('01', '1B', '04')
               and nf.modfiscal_id  = mf.id
               and le.notafiscal_id = nf.id
               and le.notafiscal_id = en_notafiscal_id
               and le.dm_tipo_local = 1) e -- Entrega
     where c.ind_carga_col is not null
       and c.cod_mun_col   is not null
       and e.cod_mun_entr  is not null
    union
    select 'C116' cod_infor, 
           '' txt_compl
      from cfe_ref cfer,   
           mod_fiscal mf
     where cfer.notafiscal_id = en_notafiscal_id
       and mf.id              = cfer.modfiscal_id;
  --
  cursor c_c111(en_notafiscal_id nota_fiscal.id%type) is
    -- select substr(ad.conteudo, 1, 255) num_proc
    select substr(ad.conteudo, 1, 15) num_proc, 
           ad.origproc_id
      from nfinfor_adic ad
     where ad.notafiscal_id = en_notafiscal_id
       and ad.dm_tipo       = 2; -- Processo
  --
  cursor c_c112(en_notafiscal_id nota_fiscal.id%type) is
    select nff.dm_cod_mod_da,
           nff.uf,
           nff.nro_dar,
           nff.vl_dar,
           nff.dt_pagto,
           nff.cod_aut_banc,
           nff.dt_vencto
      from nota_fiscal_fisco nff
     where nff.notafiscal_id = en_notafiscal_id;
  --
  cursor c_c113(en_notafiscal_id nota_fiscal.id%type) is
    select distinct nfr.notafiscal_id,
                    nfr.dm_ind_oper,
                    nfr.dm_ind_emit,
                    nfr.modfiscal_id,
                    nfr.serie,
                    nfr.subserie,
                    nfr.nro_nf,
                    nfr.dt_emiss,
                    nfr.pessoa_id,
                    nfr.nro_chave_nfe
      from nota_fiscal_referen nfr
     where nfr.notafiscal_id = en_notafiscal_id;
  --
  cursor c_c114(en_notafiscal_id nota_fiscal.id%type) is
    select cfr.modfsical_id,
           cfr.ecf_fab,
           cfr.ecf_cx,
           cfr.num_doc,
           cfr.dt_doc
      from cupom_fiscal_ref cfr
     where cfr.notafiscal_id = en_notafiscal_id;
  --
  cursor c_c115(en_notafiscal_id nota_fiscal.id%type) is
    select c.ind_carga_col,
           c.cnpj_col,
           c.ie_col,
           c.cpf_col,
           c.cod_mun_col,
           e.cnpj_entr,
           e.ie_entr,
           e.cpf_entr,
           e.cod_mun_entr
      from (select lc.dm_ind_carga ind_carga_col,
                   lc.cnpj         cnpj_col,
                   lc.ie           ie_col,
                   lc.cpf          cpf_col,
                   lc.cidade_ibge  cod_mun_col
              from nota_fiscal_local lc
             where lc.notafiscal_id = en_notafiscal_id
               and lc.dm_tipo_local = 0) c, -- Coleta
           (select le.dm_ind_carga ind_carga_entr,
                   le.cnpj         cnpj_entr,
                   le.ie           ie_entr,
                   le.cpf          cpf_entr,
                   le.cidade_ibge  cod_mun_entr
              from nota_fiscal_local le
             where le.notafiscal_id = en_notafiscal_id
               and le.dm_tipo_local = 1) e -- Entrega
     where c.ind_carga_col is not null
       and c.cod_mun_col   is not null
       and e.cod_mun_entr  is not null;
  --
  cursor c_c116(en_notafiscal_id nota_fiscal.id%type) is
    select cfer.modfiscal_id,
           cfer.nr_sat,
           cfer.chv_cfe,
           cfer.num_cfe,
           cfer.dt_doc
      from cfe_ref cfer
     where cfer.notafiscal_id = en_notafiscal_id;
  --
  cursor c_c120(en_notafiscal_id nota_fiscal.id%type) is
    select nvl(di.dm_cod_doc_imp, 0) cod_doc_imp,
           di.nro_di,
           di.num_acdraw,
           nvl(sum(nvl(pis.pis_imp, 0)), 0) pis_imp,
           nvl(sum(nvl(cofins.cofins_imp, 0)), 0) cofins_imp
      from tmp_item_nota_fiscal inf,
           itemnf_dec_impor di,
           (select i.itemnf_id, 
                   nvl(i.vl_imp_trib, 0) pis_imp
              from tmp_imp_itemnf i, 
                   tipo_imposto ti
             where i.dm_tipo = 0 -- imposto
               and ti.id     = i.tipoimp_id
               and ti.cd     = 15) pis,
           (select i.itemnf_id, 
                   nvl(i.vl_imp_trib, 0) cofins_imp
              from tmp_imp_itemnf i, 
                   tipo_imposto ti
             where i.dm_tipo = 0 -- imposto
               and ti.id     = i.tipoimp_id
               and ti.cd     = 16) cofins
     where inf.notafiscal_id   = en_notafiscal_id
       and di.itemnf_id        = inf.id
       and pis.itemnf_id(+)    = inf.id
       and cofins.itemnf_id(+) = inf.id
     group by nvl(di.dm_cod_doc_imp, 0), 
              di.nro_di, 
              di.num_acdraw;
  --
  cursor c_c130(en_notafiscal_id nota_fiscal.id%type) is
    select nvl(nft.vl_serv_nao_trib, 0) vl_serv_nt,
           nft.vl_base_calc_iss vl_bc_issqn,
           nft.vl_imp_trib_iss vl_issqn,
           nft.vl_base_calc_irrf vl_bc_irrf,
           nft.vl_ret_irrf vl_irrf,
           nft.vl_base_calc_ret_prev vl_bc_prev,
           nft.vl_ret_prev vl_prev
      from tmp_nota_fiscal_total nft
     where nft.notafiscal_id = en_notafiscal_id
       and nvl(nft.vl_base_calc_iss, 0) > 0;
  --
  cursor c_c140(en_notafiscal_id nota_fiscal.id%type) is
    select c.id nfcobr_id,
           c.dm_ind_emit ind_emit,
           c.dm_ind_tit ind_tit,
           c.descr_tit desc_tit,
           c.nro_fat num_tit,
           count(1) qtd_parc,
           nvl(sum(nvl(d.vl_dup, 0)), 0) vl_tit
      from nota_fiscal_cobr c, 
           nfcobr_dup d
     where c.notafiscal_id = en_notafiscal_id
       and d.nfcobr_id     = c.id
     group by c.id, 
              c.dm_ind_emit, 
              c.dm_ind_tit, 
              c.descr_tit, 
              c.nro_fat;
  --
  cursor c_c141(en_nfcobr_id nota_fiscal_cobr.id%type) is
    select d.nro_parc num_parc, 
           d.dt_vencto dt_vcto, 
           d.vl_dup vl_parc
      from nfcobr_dup d
     where d.nfcobr_id = en_nfcobr_id;
  --
  cursor c_c160(en_notafiscal_id nota_fiscal.id%type) is
    select veic.placa veic_id,
           veic.uf uf_id,
           nvl(sum(nvl(vol.qtdevol, 0)), 0) qtd_vol,
           nvl(sum(nvl(vol.peso_bruto, 0)), 0) peso_brt,
           nvl(sum(nvl(vol.peso_liq, 0)), 0) peso_liq,
           nft.pessoa_id pessoa_id,
           nft.notafiscal_id
      from nota_fiscal_transp nft,
           nftransp_vol vol,
           (select v.nftransp_id,
                   substr(replace(replace(v.placa, '-', ''), '.', ''), 1, 7) placa,
                   v.uf
              from nftransp_veic v
             where v.dm_tipo = 0 -- Veículo Trancionador
            ) veic
     where nft.notafiscal_id   = en_notafiscal_id
       and vol.nftransp_id     = nft.id
       and veic.nftransp_id(+) = nft.id
       and exists (select 1
                     from tmp_item_nota_fiscal it
                    where it.notafiscal_id = nft.notafiscal_id
                      and not exists (select 1 from itemnf_comb c where c.itemnf_id = it.id))
     group by nft.pessoa_id, 
              veic.placa, 
              veic.uf, 
              nft.pessoa_id,
              nft.notafiscal_id;
  --
  cursor c_c165(en_notafiscal_id nota_fiscal.id%type) is
    select veic.placa veic_id,
           veic.uf uf_id,
           nft.nome_mot nom_mot,
           nft.cpf_mot cpf,
           comb.nr_passe,
           comb.cod_aut,
           comb.temper,
           nvl(sum(nvl(vol.qtdevol, 0)), 0) qtd_vol,
           nvl(sum(nvl(vol.peso_bruto, 0)), 0) peso_brt,
           nvl(sum(nvl(vol.peso_liq, 0)), 0) peso_liq,
           nft.pessoa_id pessoa_id,
           nft.notafiscal_id
      from nota_fiscal_transp nft,
           nftransp_vol vol,
           (select v.nftransp_id,
                   substr(replace(replace(v.placa, '-', ''), '.', ''), 1, 7) placa,
                   v.uf
              from nftransp_veic v
             where v.dm_tipo = 0 -- Veículo Trancionador
            ) veic,
           (select it.notafiscal_id,
                   c.nro_passe      nr_passe,
                   c.codif          cod_aut,
                   c.qtde_temp      temper
              from tmp_item_nota_fiscal it, itemnf_comb c
             where c.itemnf_id = it.id) comb
     where nft.notafiscal_id   = en_notafiscal_id
       and vol.nftransp_id     = nft.id
       and veic.nftransp_id(+) = nft.id
       and comb.notafiscal_id  = nft.notafiscal_id
     group by veic.placa,
              veic.uf,
              nft.nome_mot,
              nft.cpf_mot,
              comb.nr_passe,
              comb.cod_aut,
              comb.temper,
              nft.pessoa_id,
              nft.notafiscal_id;
  --
  cursor c_c170(en_notafiscal_id nota_fiscal.id%type) is
    select it.id itemnf_id,
           it.nro_item num_item,
           it.cod_item cod_item,
           it.item_id item_id,
           it.descr_item descr_compl,
           it.qtde_comerc qtd,
           it.unid_trib unid,
           nvl(it.vl_item_bruto, 0) vl_item,
           it.vl_desc vl_desc,
           it.dm_ind_mov ind_mov,
           it.dm_mot_des_icms,
           nvl(it.orig, 0) orig,
           it.cfop,
           nvl(it.dm_ind_apur_ipi, 0) ind_apur,
           decode(it.cod_enq_ipi, '999', null, it.cod_enq_ipi) cod_enq,
           it.cod_cta,
           it.natoper_id,
           it.cd_lista_serv,
           it.vl_abat_nt
      from tmp_item_nota_fiscal it
     where it.notafiscal_id = en_notafiscal_id
     order by it.nro_item;
  --
  cursor c_c171(en_itemnf_id item_nota_fiscal.id%type) is
    select c.num_tanque, 
           c.qtde_vol_armaz qtde
      from itemnf_armaz_comb c
     where c.itemnf_id = en_itemnf_id;
  --
  cursor c_c172(en_itemnf_id item_nota_fiscal.id%type) is
    select imp.vl_base_calc vl_bc_issqn,
           imp.aliq_apli    aliq_issqn,
           imp.vl_imp_trib  vl_issqn
      from tmp_imp_itemnf imp, 
           tipo_imposto ti
     where imp.itemnf_id = en_itemnf_id
       and ti.id         = imp.tipoimp_id
       and ti.cd         = 6;
  --
  cursor c_c173(en_itemnf_id item_nota_fiscal.id%type) is
    select m.dm_tp_prod tp_prod,
           m.dm_ind_med ind_med,
           m.nro_lote   lote_med,
           m.qtde_lote  qtd_item,
           m.dt_fabr    dt_fab,
           m.dt_valid   dt_val,
           m.vl_tab_max vl_tab_max
      from itemnf_med m
     where m.itemnf_id = en_itemnf_id;
  --
  cursor c_c174(en_itemnf_id item_nota_fiscal.id%type) is
    select a.dm_ind_arm ind_arm, 
           a.nro_serie num_arm, 
           a.descr_compl
      from itemnf_arma a
     where a.itemnf_id = en_itemnf_id;
  --
  cursor c_c175(en_itemnf_id item_nota_fiscal.id%type) is
    select v.dm_ind_veic_oper ind_veic_oper,
           v.cnpj_conces      cnpj,
           v.uf_conces        uf,
           v.chassi           chassi_veic
      from itemnf_veic v
     where v.itemnf_id = en_itemnf_id;
  --
  cursor c_c176(en_itemnf_id item_nota_fiscal.id%type) is
    select res.modfiscal_id,
           res.num_doc_ult_e                num_doc_ult_e,
           res.ser_ult_e                    ser_ult_e,
           res.dt_ult_e                     dt_ult_e,
           res.quant_ult_e                  quant_ult_e,
           res.vl_unit_ult_e                vl_unit_ult_e,
           res.vl_unit_bc_st                vl_unit_bc_st,
           res.pessoa_id                    pessoa_id_e,
           res.chave_nfe_ult_e,
           res.num_item_ult_e,
           res.vl_unit_bc_icms_ult_e,
           res.aliq_icms_ult_e,
           res.vl_unit_limite_bc_icms_ult_e,
           res.vl_unit_icms_ult_e,
           res.aliq_st_ult_e,
           res.vl_unit_res,
           res.dm_cod_resp_ret,
           res.dm_cod_mot_res,
           res.chave_nfe_ret,
           res.pessoa_id_nfe_ret,
           res.ser_nfe_ret,
           res.num_nfe_ret,
           res.item_nfe_ret,
           res.dm_cod_da,
           res.num_da,
           res.vl_unit_res_fcp_st
      from itemnf_res_icms_st res
     where res.itemnf_id = en_itemnf_id;
  --
  cursor c_c177(en_itemnf_id item_nota_fiscal.id%type) is
    select inf.cod_selo_ipi cod_selo_ipi, inf.qtde_selo_ipi qt_selo_ipi
      from tmp_item_nota_fiscal inf
     where inf.id = en_itemnf_id
       and inf.cod_selo_ipi is not null
       and nvl(inf.qtde_selo_ipi, 0) > 0;
  --
  -- #68509 alterado select do cursor
  cursor c_c177_sefaz(en_itemnf_id    item_nota_fiscal.id%type
                     ,en_uf_ibge_emit nota_fiscal.uf_ibge_emit%type) is
        select c.cod_inf_item 
          from cod_inf_item c
             , item_nota_fiscal i
         where c.id        = i.codinfitem_id
           and c.dt_fin    between trunc(gt_row_abertura_efd.dt_ini) and trunc(gt_row_abertura_efd.dt_fim)
           and i.id        = en_itemnf_id
           and c.estado_id = (select e.id
                                from estado e
                               where e.ibge_estado = en_uf_ibge_emit
                               )
           ;
  --
  cursor c_c178(en_itemnf_id item_nota_fiscal.id%type) is
    select inf.cl_enq_ipi cl_enq,
           round(imp.vl_aliq_prod, 2) vl_unid,
           round(imp.qtde_base_calc_prod, 3) quant_pad
      from tmp_item_nota_fiscal inf, 
           tmp_imp_itemnf imp, 
           tipo_imposto ti
     where inf.id         = en_itemnf_id
       and inf.cl_enq_ipi is not null
       and imp.itemnf_id  = inf.id
       and ti.id          = imp.tipoimp_id
       and ti.cd          = 3; -- IPI
  --
  cursor c_c179(en_itemnf_id item_nota_fiscal.id%type) is
    select nvl(st.vl_bc_st_orig_dest, 0) bc_st_orig_dest,
           nvl(st.vl_icms_st_rep, 0) icms_st_rep,
           st.vl_icms_st_compl icms_st_compl,
           st.vl_bc_ret bc_ret,
           st.vl_icms_ret icms_ret
      from itemnf_inf_compl_st st
     where st.itemnf_id = en_itemnf_id;
  --
  -- ATENÇÃO: Se alterar o cursor abaixo verificar o cursor "c_c190_aux" e se for o caso alterar, verificar loop 
  --também do cursor "c_c190_aux" 
  cursor c_c190(en_notafiscal_id nota_fiscal.id%type) is
    select res.codst_id,
           res.dm_orig_merc,
           case
             when (cfo.cd in (1556, 3556, 5602, 5605, 5929, 6602, 6929) and (sum(res.vl_icms) > 0)) then
              res.dm_orig_merc || '90'
             else
              case
                when length(cs.cod_st) = 3 then
                 cs.cod_st
                else
                 res.dm_orig_merc || cs.cod_st
              end
           end cst_icms,
           res.cfop_id,
           cfo.cd cfop_cd,
           nvl(res.aliq_icms, 0) + nvl(res.aliq_fcp_icms, 0) aliq_icms,
           sum(res.vl_operacao) vl_opr,
           sum(res.vl_bc_icms) vl_bc_icms,
           sum(nvl(res.vl_icms, 0) + nvl(res.vl_fcp_icms, 0)) vl_icms,
           sum(res.vl_bc_icms_st) vl_bc_icms_st,
           sum(nvl(res.vl_icms_st, 0) + nvl(res.vl_fcp_icmsst, 0)) vl_icms_st,
           --nvl(res.aliq_fcp_icms, 0) aliq_fcp_icms,
           sum(res.vl_red_bc_icms) vl_red_bc,
           sum(res.vl_ipi) vl_ipi,
           sum(res.vl_fcp_icmsst) vl_fcp_st,
           res.obslanctofiscal_id--,
           --res.id
      from tmp_nfregist_analit res, 
            cod_st cs, 
            cfop cfo
     where res.notafiscal_id = en_notafiscal_id
       and cs.id             = res.codst_id
       and cfo.id            = res.cfop_id
     group by res.codst_id,
              res.dm_orig_merc,
              case
                when length(cs.cod_st) = 3 then
                 cs.cod_st
                else
                 res.dm_orig_merc || cs.cod_st
              end,
              res.cfop_id,
              cfo.cd,
              --res.aliq_icms,
              nvl(res.aliq_icms, 0) + nvl(res.aliq_fcp_icms, 0),
              res.obslanctofiscal_id; --,
              --nvl(res.aliq_fcp_icms, 0),
              --res.id;
  --
  -- Cursor auxiliar do registro C190 para montagem do C191    
  cursor c_c190_aux(en_notafiscal_id nota_fiscal.id%type) is
    select res.codst_id,
           res.dm_orig_merc,
           case
             when (cfo.cd in (1556, 3556, 5602, 5605, 5929, 6602, 6929) and (sum(res.vl_icms) > 0)) then
              res.dm_orig_merc || '90'
             else
              case
                when length(cs.cod_st) = 3 then
                 cs.cod_st
                else
                 res.dm_orig_merc || cs.cod_st
              end
           end cst_icms, 
           res.cfop_id,
           cfo.cd cfop_cd,
           nvl(res.aliq_icms, 0) + nvl(res.aliq_fcp_icms, 0) aliq_icms,
           res.id
      from nfregist_analit res, 
           cod_st          cs, 
           cfop            cfo
     where res.notafiscal_id = en_notafiscal_id
       and cs.id             = res.codst_id
       and cfo.id            = res.cfop_id
     group by res.codst_id,
              res.dm_orig_merc,
              case
                when length(cs.cod_st) = 3 then
                 cs.cod_st
                else
                 res.dm_orig_merc || cs.cod_st
              end, 
              res.cfop_id,
              cfo.cd,
              nvl(res.aliq_icms, 0) + nvl(res.aliq_fcp_icms, 0),
              res.id;
  --
  cursor c_sem_c190(en_notafiscal_id nota_fiscal.id%type) is
    select it.cfop_id, sum(it.vl_item_bruto) vl_opr
      from tmp_item_nota_fiscal it
     where it.notafiscal_id = en_notafiscal_id
       and it.cd_lista_serv is not null
       and not exists (select na.notafiscal_id
                         from tmp_nfregist_analit na
                        where na.notafiscal_id = it.notafiscal_id)
     group by it.cfop_id;
  --
  /*cursor c_c191 ( en_notafiscal_id nota_fiscal.id%type ) is
  select
     sum(vl_fcp)        vl_fcp_op,
     sum(vl_fcp_st)     vl_fcp_st,
     sum(vl_fcp_st_ret) vl_fcp_ret
     from TMP_NOTA_FISCAL_TOTAL nft
     where nft.notafiscal_id =  en_notafiscal_id;*/
  --
  cursor c_c191(en_nfregistanalit_id nfregist_analit.id%type) is
    select sum(case
                 when x.cst_icms in ('00', '10', '20', '51', '70', '90') then
                  x.vl_fcp
                 else
                  0
               end) vl_fcp_op,
           sum(case
                 when x.cst_icms in
                      ('10', '30', '70', '90', '201', '202', '203', '900') then
                  x.vl_fcp_st
                 else
                  0
               end) vl_fcp_st,
           sum(case
                 when x.cst_icms in ('60') then
                  x.vl_fcp
                 else
                  0
               end) vl_fcp_ret
      from (select res.codst_id,
                    res.dm_orig_merc,
                    case
                      when (cfo.cd in
                           (1556, 3556, 5602, 5605, 5929, 6602, 6929) and
                           (sum(res.vl_icms) > 0)) then
                       res.dm_orig_merc || '90'
                      else
                       case
                         when length(cs.cod_st) = 3 then
                          cs.cod_st
                         else
                          cs.cod_st
                       end
                    end cst_icms,
                    res.cfop_id,
                    cfo.cd cfop_cd,
                    nvl(res.aliq_icms, 0) + nvl(res.aliq_fcp_icms, 0) aliq_icms,
                    sum(nvl(res.vl_fcp_icms, 0)) vl_fcp,
                    nvl(res.aliq_fcp_icms, 0) aliq_fcp_icms,
                    sum(nvl(res.vl_fcp_icmsst, 0)) vl_fcp_st,
                    res.obslanctofiscal_id
               from tmp_nfregist_analit res, cod_st cs, cfop cfo
              where res.id = en_nfregistanalit_id
                and cs.id = res.codst_id
                and cfo.id = res.cfop_id
                and (nvl(res.vl_fcp_icms, 0) > 0 or nvl(res.vl_fcp_icmsst, 0) > 0)
              group by res.codst_id,
                       res.dm_orig_merc,
                       case
                         when length(cs.cod_st) = 3 then
                          cs.cod_st
                         else
                          cs.cod_st
                       end,
                       res.cfop_id,
                       cfo.cd,
                       res.aliq_icms,
                       nvl(res.aliq_icms, 0) + nvl(res.aliq_fcp_icms, 0),
                       res.obslanctofiscal_id,
                       nvl(res.aliq_fcp_icms, 0)) x;
  --
  cursor c_c195(en_notafiscal_id nota_fiscal.id%type) is
    select inf.id nfinforfisc_id, 
           inf.txt_compl, 
           inf.obslanctofiscal_id
      from nfinfor_fiscal inf
     where inf.notafiscal_id = en_notafiscal_id;
  --
  cursor c_c197(en_nfinforfisc_id nfinfor_fiscal.id%type) is
    select cod.cod_aj,
           inf.descr_compl_aj,
           it.cod_item,
           it.item_id,
           inf.aliq_icms,
           sum(inf.vl_bc_icms) vl_bc_icms,
           sum(inf.vl_icms) vl_icms,
           sum(inf.vl_outros) vl_outros
      from inf_prov_docto_fiscal inf,
           cod_ocor_aj_icms      cod,
           tmp_item_nota_fiscal  it
     where inf.nfinforfisc_id = en_nfinforfisc_id
       and cod.id             = inf.codocorajicms_id
       and it.id(+)           = inf.itemnf_id
     group by cod.cod_aj,
              inf.descr_compl_aj,
              it.cod_item,
              it.item_id,
              inf.aliq_icms;
  --
begin
  --
  vn_fase := 1;
  --
  -- Limpa variável erro de bloco
  gn_error_block := 0;
  --
  -- Procedimento retorna o parâmetro que Permite a quebra da Informação Adicional no arquivo Sped Fiscal
  vn_dm_quebra_infadic_spedf := pk_csf.fkg_parefdicmsipi_dmqueinfadi(en_empresa_id => gt_row_abertura_efd.empresa_id);
  --
  i := 0;
  --
  vtv_nro_ini.delete;
  vtv_serie.delete;
  vtv_modfiscal.delete;
  --
  vn_fase := 1.1;
  --
  for rec_c100_inut in c_nf_inut loop
    --
    exit when c_nf_inut%notfound or(c_nf_inut%notfound) is null;
    --
    vn_fase := 1.2;
    --
    vn_nro_ini := rec_c100_inut.nro_ini;
    --
    loop
      --
      vn_fase := 1.3;
      --
      vv_indice :=  rec_c100_inut.nfinut_id;--vn_nro_ini || trim(rec_c100_inut.serie) || trim(rec_c100_inut.cod_mod);
      --
      begin
        vb_achou := vtv_nro_ini.exists(vv_indice);
      exception
        when others then
          vb_achou := false;
      end;
      --
      vn_fase := 1.4;
      --
      if not vb_achou then
        --
        vn_fase := 1.5;
        --
        vtv_nro_ini(vv_indice)   := vn_nro_ini;
        vtv_serie(vv_indice)     := rec_c100_inut.serie;
        vtv_modfiscal(vv_indice) := rec_c100_inut.cod_mod;
        --
      end if;
      --
      vn_fase := 1.6;
      --
      if vn_nro_ini = rec_c100_inut.nro_fim then
        exit;
      else
        vn_nro_ini := vn_nro_ini + 1;
      end if;
      --
    end loop; -- vn_nro_ini .. rec_c100_inut.nro_fim
  --
  end loop; -- c_nf_inut
  --
  vn_fase := 1.7;
  --
  vv_indice := vtv_nro_ini.first;
  --
  while vv_indice is not null loop
    --
    vn_fase := 1.8;
    --
    i := nvl(i, 0) + 1;
    --
    -- Cria a estrutura do registro separado por PIPE "|"
    vt_tab_reg_c100(i).reg           := 'C100';
    vt_tab_reg_c100(i).ind_oper      := 1; -- dm_ind_oper
    vt_tab_reg_c100(i).ind_emit      := 0; -- dm_ind_emit
    vt_tab_reg_c100(i).cod_part      := null;
    vt_tab_reg_c100(i).cod_mod       := vtv_modfiscal(vv_indice); -- cod_mod
    vt_tab_reg_c100(i).cod_sit       := '05'; -- cod_sit
    vt_tab_reg_c100(i).ser           := vtv_serie(vv_indice); -- serie
    vt_tab_reg_c100(i).num_doc       := vtv_nro_ini(vv_indice); -- nro_nf
    vt_tab_reg_c100(i).chv_nfe       := null;
    vt_tab_reg_c100(i).dt_doc        := null;
    vt_tab_reg_c100(i).dt_e_s        := null;
    vt_tab_reg_c100(i).vl_doc        := null;
    vt_tab_reg_c100(i).ind_pgto      := null;
    vt_tab_reg_c100(i).vl_desc       := null;
    vt_tab_reg_c100(i).vl_abat_nt    := null;
    vt_tab_reg_c100(i).vl_merc       := null;
    vt_tab_reg_c100(i).ind_frt       := null;
    vt_tab_reg_c100(i).vl_frt        := null;
    vt_tab_reg_c100(i).vl_seg        := null;
    vt_tab_reg_c100(i).vl_out_da     := null;
    vt_tab_reg_c100(i).vl_bc_icms    := null;
    vt_tab_reg_c100(i).vl_icms       := null;
    vt_tab_reg_c100(i).vl_bc_icms_st := null;
    vt_tab_reg_c100(i).vl_icms_st    := null;
    vt_tab_reg_c100(i).vl_ipi        := null;
    vt_tab_reg_c100(i).vl_pis        := null;
    vt_tab_reg_c100(i).vl_cofins     := null;
    vt_tab_reg_c100(i).vl_pis_st     := null;
    vt_tab_reg_c100(i).vl_cofins_st  := null;
    --
    vn_fase := 1.9;
    --
    vv_indice := vtv_nro_ini.next(vv_indice);
    --
  end loop;
  --
  vn_fase := 1.10;
  --
  for rec_c100 in c_nf loop
    exit when c_nf%notfound or(c_nf%notfound) is null;
    --
    vn_fase := 2;
    --
    i := nvl(i, 0) + 1;
    --
    vn_fase := 3;
    --
    vn_dm_mod_frete := pk_csf.fkg_modfrete_nftransp(rec_c100.notafiscal_id);
    --
    vn_fase := 4;
    --
    vn_antecipacao_credito_icms := fkg_antecipacao_credito_icms(rec_c100.notafiscal_id);
    --
    vn_fase := 4.1;
    --    
    if vn_dm_mod_frete = 0 then
      vn_ind_frt := 0; -- Por conta do emitente
    elsif vn_dm_mod_frete = 1 then
      vn_ind_frt := 1; -- Por conta do destinatário
    elsif vn_dm_mod_frete = 2 then
      vn_ind_frt := 2; -- Por conta de terceiros
    elsif vn_dm_mod_frete = 3 then
      vn_ind_frt := 9; -- Sem frete
    elsif vn_dm_mod_frete = 9 then
      vn_ind_frt := 9; -- Sem frete
    else
      vn_ind_frt := 9;
    end if;
    --
    vn_fase := 5;
    --
    -- -----------------------------------------------------------------------------------------------------------------------
    -- Exceção 1: Para documentos com código de situação (campo COD_SIT) cancelado (código -02-) ou cancelado
    -- extemporâneo (código -03-), Nota Fiscal Eletrônica (NF-e) denegada (código -04-) e numeração inutilizada (código -05-),
    -- preencher somente os campos REG, IND_OPER, IND_EMIT, COD_MOD, COD_SIT, SER e NUM_DOC. Demais
    -- campos deverão ser apresentados com conteúdo VAZIO -||-. Não informar registros filhos.
    -- -----------------------------------------------------------------------------------------------------------------------
    -- Exceção 3: Notas Fiscais Complementares e Notas Fiscais Complementares Extemporâneas (campo COD_SIT igual a
    -- -06- ou -07-): nesta situação, somente os campos REG, IND_EMIT, COD_PART, COD_MOD, NUM_DOC e DT_DOC
    -- são de preenchimento obrigatório. Os demais campos são facultativos (se forem preenchidos inclusive com valores iguais a
    -- Zero, serão validados e aplicadas as regras de campos existentes). O registro C190 é sempre obrigatório. Os demais campos
    -- e registros filhos do registro C100 serão informados, se existirem.
    -- -----------------------------------------------------------------------------------------------------------------------
    -- Exceção 4: Notas Fiscais emitidas por regime especial ou norma específica (campo COD_SIT igual a -08-). Para
    -- documentos fiscais emitidos com base em regime especial ou norma específica, deverão ser apresentados os registros C100
    -- e C190, obrigatoriamente, e os demais registros -filhos-, se estes forem exigidos pela legislação fiscal. Nesta situação,
    -- somente os campos REG, IND_EMIT, COD_PART, COD_MOD, NUM_DOC e DT_DOC são de preenchimento
    -- obrigatório. Os demais campos são facultativos (se forem preenchidos inclusive com valores iguais a Zero, serão validados
    -- e aplicadas as regras de campos existentes).
    -- -----------------------------------------------------------------------------------------------------------------------
    --
    vv_cod_sit := pk_csf.fkg_Sit_Docto_cd(en_sitdoc_id => rec_c100.sitdocto_id);
    --
    vn_fase := 6;
    --
    if vv_cod_sit in ('02', '03', '04', '05') then
      --
      vn_fase := 7;
      --
      vt_tab_reg_c100(i).reg      := 'C100';
      vt_tab_reg_c100(i).ind_oper := rec_c100.dm_ind_oper;
      vt_tab_reg_c100(i).ind_emit := rec_c100.dm_ind_emit;
      vt_tab_reg_c100(i).cod_part := null;
      vt_tab_reg_c100(i).cod_mod  := rec_c100.cod_mod;
      vt_tab_reg_c100(i).cod_sit  := vv_cod_sit;
      vt_tab_reg_c100(i).ser      := rec_c100.serie;
      vt_tab_reg_c100(i).num_doc  := rec_c100.nro_nf;
      --
      vn_fase := 7.1;
      --
      -- 02  - Documento cancelado
      -- 03  - Documento cancelado extemporâneo
      -- 04  - NF-e ou CT-e denegado
      if vv_cod_sit in ('02', '03', '04') and gn_versao >= 103 then -- versão válida a partir de janeiro/2011
        --
        if length(rec_c100.nro_chave_nfe) = 44 then
          vt_tab_reg_c100(i).chv_nfe := rec_c100.nro_chave_nfe;
        else
          vt_tab_reg_c100(i).chv_nfe := null;
        end if;
      else
        vt_tab_reg_c100(i).chv_nfe := null;
      end if;
      --
      vn_fase := 7.2;
      --
      vt_tab_reg_c100(i).dt_doc        := null;
      vt_tab_reg_c100(i).dt_e_s        := null;
      vt_tab_reg_c100(i).vl_doc        := null;
      vt_tab_reg_c100(i).ind_pgto      := null;
      vt_tab_reg_c100(i).vl_desc       := null;
      vt_tab_reg_c100(i).vl_abat_nt    := null;
      vt_tab_reg_c100(i).vl_merc       := null;
      vt_tab_reg_c100(i).ind_frt       := null;
      vt_tab_reg_c100(i).vl_frt        := null;
      vt_tab_reg_c100(i).vl_seg        := null;
      vt_tab_reg_c100(i).vl_out_da     := null;
      vt_tab_reg_c100(i).vl_bc_icms    := null;
      vt_tab_reg_c100(i).vl_icms       := null;
      vt_tab_reg_c100(i).vl_bc_icms_st := null;
      vt_tab_reg_c100(i).vl_icms_st    := null;
      vt_tab_reg_c100(i).vl_ipi        := null;
      vt_tab_reg_c100(i).vl_pis        := null;
      vt_tab_reg_c100(i).vl_cofins     := null;
      vt_tab_reg_c100(i).vl_pis_st     := null;
      vt_tab_reg_c100(i).vl_cofins_st  := null;
      --
    elsif vv_cod_sit in ('08') then
      --
      vn_fase := 8;
      --
      vt_tab_reg_c100(i).reg        := 'C100';
      vt_tab_reg_c100(i).ind_oper   := rec_c100.dm_ind_oper;
      vt_tab_reg_c100(i).ind_emit   := rec_c100.dm_ind_emit;
      --vt_tab_reg_c100(i).cod_part := pk_csf.fkg_pessoa_cod_part (rec_c100.pessoa_id);
      vt_tab_reg_c100(i).cod_part   := pk_csf_api_efd.fkb_ret_cnpjcpj_ibge_cod_part(en_pessoa_id          => rec_c100.pessoa_id,
                                                                                    en_tipo_retorna       => 1, -- 0-PESSOA_ID / 1-COD_PART
                                                                                    en_origem_dado_pessoa => gn_origem_dado_pessoa,
                                                                                    en_notafiscal_id      => rec_c100.notafiscal_id);
      vt_tab_reg_c100(i).cod_mod    := rec_c100.cod_mod;
      vt_tab_reg_c100(i).cod_sit    := vv_cod_sit;
      vt_tab_reg_c100(i).ser        := rec_c100.serie;
      vt_tab_reg_c100(i).num_doc    := rec_c100.nro_nf;
      --
      if length(rec_c100.nro_chave_nfe) = 44 then
        vt_tab_reg_c100(i).chv_nfe := rec_c100.nro_chave_nfe;
      else
        vt_tab_reg_c100(i).chv_nfe := null;
      end if;
      --
      vt_tab_reg_c100(i).dt_doc     := rec_c100.dt_emiss;
      vt_tab_reg_c100(i).dt_e_s     := rec_c100.dt_sai_ent;
      vt_tab_reg_c100(i).vl_doc     := null;
      vt_tab_reg_c100(i).ind_pgto   := null;
      vt_tab_reg_c100(i).vl_desc    := null;
      vt_tab_reg_c100(i).vl_abat_nt := null;
      vt_tab_reg_c100(i).vl_merc    := null;
      vt_tab_reg_c100(i).ind_frt    := null;
      vt_tab_reg_c100(i).vl_frt     := null;
      vt_tab_reg_c100(i).vl_seg     := null;
      vt_tab_reg_c100(i).vl_out_da  := null;
      --
      vn_fase := 8.1;
      --
      --| Recuperar os valores de icms com exceção das CFOPs: 1551, 1556, 5929, 6929, 3551, 3949, 5602, 6602, 3556
      begin
        select nvl(sum(case
                         when cst.cod_st = '51' and nvl(ii.vl_base_calc, 0) > 0 and
                              nvl(ii.vl_imp_trib, 0) = 0 then
                          0
                         else
                          nvl(ii.vl_base_calc, 0)
                       end),
                   0),
               nvl(sum(nvl(ii.vl_imp_trib, 0)), 0)
          into vn_vl_base_calc_icms, 
               vn_vl_imp_trib_icms
          from tmp_item_nota_fiscal inf,
               tmp_imp_itemnf       ii,
               tipo_imposto         ti,
               cod_st               cst
         where inf.notafiscal_id = rec_c100.notafiscal_id
           and inf.cfop          not in (1551, 1556, 5929, 6929, 3551, 5602, 6602, 3556)
           and ii.itemnf_id      = inf.id
           and ii.dm_tipo        = 0 -- Imposto
           and ti.id             = ii.tipoimp_id
           and ti.cd             in (1, 10) -- 1-ICMS, 10-Simples Nacional
           and cst.id            = ii.codst_id;
      exception
        when others then
          vn_vl_base_calc_icms := 0;
          vn_vl_imp_trib_icms  := 0;
      end;
      --
      vn_fase := 8.2;
      --
      vt_tab_reg_c100(i).vl_bc_icms := vn_vl_base_calc_icms; -- null;
      --vt_tab_reg_c100(i).vl_icms  := null;
      --
      --if gt_row_abertura_efd.dt_fim <= to_date('31/12/2018','dd/mm/rrrr') then -- Prazo para mudança do leiaute - nova definição deverá ser efetuada
      if gt_row_abertura_efd.dt_fim >= to_date('01/08/2018', 'dd/mm/rrrr') then -- Nova definição efetuada
        vt_tab_reg_c100(i).vl_icms := vn_vl_imp_trib_icms + nvl(rec_c100.vl_fcp, 0);
      else
        vt_tab_reg_c100(i).vl_icms := vn_vl_imp_trib_icms;
      end if;
      --
      if nvl(vn_antecipacao_credito_icms, 0) = 1 then -- Nota fiscal de antecipação de credito de ICMS
        --
        vn_fase := 8.21;
        --
        vt_tab_reg_c100(i).vl_bc_icms := null;
        vt_tab_reg_c100(i).vl_icms    := null;
        --
      end if;
      --    
      vt_tab_reg_c100(i).vl_bc_icms_st := null;
      vt_tab_reg_c100(i).vl_icms_st    := null;
      vt_tab_reg_c100(i).vl_ipi        := null;
      vt_tab_reg_c100(i).vl_pis        := null;
      vt_tab_reg_c100(i).vl_cofins     := null;
      vt_tab_reg_c100(i).vl_pis_st     := null;
      vt_tab_reg_c100(i).vl_cofins_st  := null;
      --
      vn_fase := 8.3;
      --
      -- Monta arquivo auxiliar
      if nvl(rec_c100.pessoa_id, 0) > 0 and rec_c100.cod_mod not in ('65') then -- Nota fiscal de consumidor final
        --
        vn_fase := 8.4;
        --
        pkb_monta_reg_0150(en_pessoa_id     => rec_c100.pessoa_id,
                           en_notafiscal_id => rec_c100.notafiscal_id);
        --
      end if;
      --
    else
      --
      vn_fase := 9;
      --
      vt_tab_reg_c100(i).reg        := 'C100';
      vt_tab_reg_c100(i).ind_oper   := rec_c100.dm_ind_oper;
      vt_tab_reg_c100(i).ind_emit   := rec_c100.dm_ind_emit;
      --vt_tab_reg_c100(i).cod_part := pk_csf.fkg_pessoa_cod_part (rec_c100.pessoa_id);
      vt_tab_reg_c100(i).cod_part   := pk_csf_api_efd.fkb_ret_cnpjcpj_ibge_cod_part(en_pessoa_id          => rec_c100.pessoa_id,
                                                                                    en_tipo_retorna       => 1, -- 0-PESSOA_ID / 1-COD_PART    
                                                                                    en_origem_dado_pessoa => gn_origem_dado_pessoa,
                                                                                    en_notafiscal_id      => rec_c100.notafiscal_id);
      vt_tab_reg_c100(i).cod_mod    := rec_c100.cod_mod;
      vt_tab_reg_c100(i).cod_sit    := vv_cod_sit;
      vt_tab_reg_c100(i).ser        := rec_c100.serie;
      vt_tab_reg_c100(i).num_doc    := rec_c100.nro_nf;
      --
      if length(rec_c100.nro_chave_nfe) = 44 then
        vt_tab_reg_c100(i).chv_nfe := rec_c100.nro_chave_nfe;
      else
        vt_tab_reg_c100(i).chv_nfe := null;
      end if;
      --
      vt_tab_reg_c100(i).dt_doc := rec_c100.dt_emiss;
      -- 
      if rec_c100.dm_ind_emit = 0 then -- Emissão própria
         --
         if rec_c100.dt_sai_ent is not null then
            -- Se o mês de entrada/saída for maior que o mês da escrituração então atribui nulo.
            if to_char(rec_c100.dt_sai_ent, 'MM') > to_char(gt_row_abertura_efd.dt_ini, 'MM') then
               --     
               if gn_dm_dt_escr_dfepoe = 0 then
                  --         
                  vt_tab_reg_c100(i).dt_e_s := rec_c100.dt_emiss;
                  --          
               else
                  --         
                  vt_tab_reg_c100(i).dt_e_s := rec_c100.dt_sai_ent;
                  --          
               end if;
            else
               --     
               vt_tab_reg_c100(i).dt_e_s := nvl(rec_c100.dt_sai_ent,rec_c100.dt_emiss);
               --        
            end if;
            --
         else        
            --     
            vt_tab_reg_c100(i).dt_e_s := rec_c100.dt_emiss;
            --      
         end if;
         --
      else
        --
        vt_tab_reg_c100(i).dt_e_s := nvl(rec_c100.dt_sai_ent, rec_c100.dt_emiss);
        --
      end if;   
      --
      vn_vl_doc := 0;
      --
      begin
        --
        select nvl(sum(nvl(vl.vl_oper, 0)), 0)
          into vn_vl_doc
          from (select nvl(sum(nvl(r.vl_operacao, 0)), 0) vl_oper
                  from tmp_nfregist_analit r
                 where r.notafiscal_id = rec_c100.notafiscal_id
                union
                select nvl(sum(nvl(it.vl_item_bruto, 0)), 0) vl_oper
                  from tmp_item_nota_fiscal it
                 where it.notafiscal_id = rec_c100.notafiscal_id
                   and it.cd_lista_serv is not null
                   and not exists
                 (select na.notafiscal_id
                    from tmp_nfregist_analit na
                   where na.notafiscal_id = it.notafiscal_id)) vl;
      exception
        when others then
          vn_vl_doc := 0;
      end;
      --
      /*
               vn_qtde_isento := 0;
               --
               begin
                  --
                  select count(1) into vn_qtde_isento
                    from TMP_ITEM_NOTA_FISCAL inf
                   where inf.notafiscal_id = rec_c100.notafiscal_id
                     and inf.cfop     not in (1551, 1556, 5929, 6929, 3551, 3949, 5602, 6602, 3556);
                  --
               exception
                  when others then
                     vn_qtde_isento := 0;
               end;
               --
      */
      -- valor de nfregist_analit = c190, e senão houver, recupera o vl_item_bruto de item que não é serviço e não tem nfregist_analit
      vt_tab_reg_c100(i).vl_doc   := vn_vl_doc;
      vt_tab_reg_c100(i).ind_pgto := rec_c100.dm_ind_pag;
      --
      -- Trata o indicador de forma de pagamento
      if rec_c100.dm_ind_pag in (2, 9) then
        --
        if gn_versao < 105 then -- 105-versão válida a partir de julho/2012
          vt_tab_reg_c100(i).ind_pgto := 9; -- 9 - Sem pagamento
        else
          vt_tab_reg_c100(i).ind_pgto := 2; -- 2 - Outros
        end if;
        --
      end if;
      --
      vn_fase := 9.1;
      --
      vt_tab_reg_c100(i).vl_desc    := rec_c100.vl_desconto;
      vt_tab_reg_c100(i).vl_abat_nt := rec_c100.vl_abat_nt;
      --
      /*
               if nvl(vn_vl_doc,0) > 0 then
                  --
                  if nvl(rec_c100.vl_merc,0) > 0 then
                     --
                     if nvl(vn_qtde_isento,0) <= 0 then -- não tem CFOP de isento
                        vt_tab_reg_c100(i).vl_merc  := rec_c100.vl_merc;
                     else
                        vt_tab_reg_c100(i).vl_merc  := rec_c100.vl_doc;
                     end if;
                     --
                  else
                     begin
                        select nvl(sum(nvl(it.vl_item_bruto,0)),0)
                          into vt_tab_reg_c100(i).vl_merc
                          from TMP_ITEM_NOTA_FISCAL it
                         where it.notafiscal_id  = rec_c100.notafiscal_id
                           and it.cd_lista_serv is not null
                           and not exists (select na.notafiscal_id
                                             from TMP_NFREGIST_ANALIT na
                                            where na.notafiscal_id = it.notafiscal_id);
                     exception
                        when others then
                           vt_tab_reg_c100(i).vl_merc := 0;
                     end;
                  end if;
                  --
               else
                  vt_tab_reg_c100(i).vl_merc := 0;
               end if;
      */
      -- Substituindo o comentário acima, faremos:
      begin
        select nvl(sum(nvl(it.vl_item_bruto, 0)), 0)
          into vt_tab_reg_c100(i).vl_merc
          from tmp_item_nota_fiscal it
         where it.notafiscal_id = rec_c100.notafiscal_id;
      exception
        when others then
          vt_tab_reg_c100(i).vl_merc := 0;
      end;
      --
      vt_tab_reg_c100(i).ind_frt := nvl(vn_ind_frt, 9);
      vt_tab_reg_c100(i).vl_frt  := rec_c100.vl_frete;
      vt_tab_reg_c100(i).vl_seg  := rec_c100.vl_seguro;
      --
      vn_fase := 9.2;
      --
      -- Regra aplicada em pk_csf_api.pkb_vlr_fiscal_item_nf
      begin
        select nvl(sum(case
                         when cst.cod_st = '51' -- Diferimento. A exigência do preenchimento das informações do ICMS diferido fica à critério de cada UF.
                              and nvl(ii.vl_base_calc, 0) > 0 and
                              nvl(ii.vl_imp_trib, 0) = 0 -- valor da nota com percentual de diferimento 100%
                          then
                          0 -- regra aplicada em pk_csf_api.pkb_vlr_fiscal_item_nf
                         when inf.cfop in (1556, 3556, 5602, 5605, 5929, 6602, 6929) then
                          0 -- regra aplicada em pk_csf_api.pkb_vlr_fiscal_item_nf
                         else
                          nvl(ii.vl_base_calc, 0)
                       end),
                   0) vn_vl_base_calc_icms,
               nvl(sum(nvl(ii.vl_imp_trib, 0)), 0) vn_vl_imp_trib_icms
          into vn_vl_base_calc_icms, 
               vn_vl_imp_trib_icms
          from tmp_item_nota_fiscal inf,
               tmp_imp_itemnf       ii,
               tipo_imposto         ti,
               cod_st               cst
         where inf.notafiscal_id = rec_c100.notafiscal_id
           and ii.itemnf_id      = inf.id
           and ii.dm_tipo        = 0 -- Imposto
           and ti.id             = ii.tipoimp_id
           and ti.cd             in (1, 10) -- 1-ICMS, 10-Simples Nacional
           and cst.id            = ii.codst_id;
      exception
        when others then
          vn_vl_base_calc_icms := 0;
          vn_vl_imp_trib_icms  := 0;
      end;
      --
      vt_tab_reg_c100(i).vl_bc_icms := vn_vl_base_calc_icms;
      --vt_tab_reg_c100(i).vl_icms   := vn_vl_imp_trib_icms;
      --
      --if gt_row_abertura_efd.dt_fim <= to_date('31/12/2018','dd/mm/rrrr') then -- Prazo para mudança do leiaute - nova definição deverá ser efetuada
      if gt_row_abertura_efd.dt_fim >= to_date('01/08/2018', 'dd/mm/rrrr') then -- Nova definição efetuada
        vt_tab_reg_c100(i).vl_icms := vn_vl_imp_trib_icms + nvl(rec_c100.vl_fcp, 0);
      else
        vt_tab_reg_c100(i).vl_icms := vn_vl_imp_trib_icms;
      end if;
      --
      vt_tab_reg_c100(i).vl_bc_icms_st := rec_c100.vl_base_calc_st;
      --vt_tab_reg_c100(i).vl_icms_st := rec_c100.vl_imp_trib_st;
      --
      --if gt_row_abertura_efd.dt_fim <= to_date('31/12/2018','dd/mm/rrrr') then -- Prazo para mudança do leiaute - nova definição deverá ser efetuada
      if gt_row_abertura_efd.dt_fim >= to_date('01/08/2018', 'dd/mm/rrrr') then -- Nova definição efetuada
        vt_tab_reg_c100(i).vl_icms_st := rec_c100.vl_imp_trib_st + nvl(rec_c100.vl_fcp_st, 0);
      else
        vt_tab_reg_c100(i).vl_icms_st := rec_c100.vl_imp_trib_st;
      end if;
      --
      vn_fase := 9.3;
      --| Recuperar os valores de ipi com exceção da CST 49 e 99, e das CFOPs: (1551, 1556, 5929, 6929, 3551, 3949, 5602, 6602, 3556)
      begin
        select nvl(sum(decode(cst.cod_st,
                              '49',
                              0,
                              '99',
                              0,
                              nvl(ii.vl_imp_trib, 0))),
                   0)
          into vn_vl_imp_trib_ipi
          from tmp_item_nota_fiscal inf,
               tmp_imp_itemnf       ii,
               tipo_imposto         ti,
               cod_st               cst
         where inf.notafiscal_id = rec_c100.notafiscal_id
           and inf.cfop          not in (1551, 1556, 5929, 6929, 3551, 5602, 6602, 3556)
           and ii.itemnf_id      = inf.id
           and ii.dm_tipo        = 0 -- Imposto
           and ti.id             = ii.tipoimp_id
           and ti.cd             = 3 -- IPI
           and cst.id            = ii.codst_id;
      exception
        when others then
          vn_vl_imp_trib_ipi := rec_c100.vl_imp_trib_ipi;
      end;
      --
      vt_tab_reg_c100(i).vl_out_da := (rec_c100.vl_outra_despesas + (rec_c100.vl_imp_trib_ipi - vn_vl_imp_trib_ipi));
      vt_tab_reg_c100(i).vl_ipi    := vn_vl_imp_trib_ipi; -- rec_c100.vl_imp_trib_ipi;
      --
      vt_tab_reg_c100(i).vl_pis    := rec_c100.vl_imp_trib_pis;
      vt_tab_reg_c100(i).vl_cofins := rec_c100.vl_imp_trib_cofins;
      --
      vt_tab_reg_c100(i).vl_pis_st    := rec_c100.vl_pis_st;
      vt_tab_reg_c100(i).vl_cofins_st := rec_c100.vl_cofins_st;
      --
      vn_fase := 9.4;
      --
      -- Monta arquivo auxiliar
      if nvl(rec_c100.pessoa_id, 0) > 0 and rec_c100.cod_mod not in ('65') then -- Nota fiscal de consumidor final
        --
        vn_fase := 9.5;
        --
        pkb_monta_reg_0150(en_pessoa_id     => rec_c100.pessoa_id,
                           en_notafiscal_id => rec_c100.notafiscal_id);
        --
      end if;
      --
    end if; -- fim rec_c100.cod_sit in ('02', '03', '04', '05')
    --
    vn_fase := 10;
    --
    if rec_c100.cod_mod in ('65') then -- Nota fiscal de consumidor final
      --
      vn_fase := 10.1;
      --
      vt_tab_reg_c100(i).cod_part      := null;
      vt_tab_reg_c100(i).vl_bc_icms_st := null;
      vt_tab_reg_c100(i).vl_icms_st    := null;
      vt_tab_reg_c100(i).vl_ipi        := null;
      vt_tab_reg_c100(i).vl_pis        := null;
      vt_tab_reg_c100(i).vl_cofins     := null;
      vt_tab_reg_c100(i).vl_pis_st     := null;
      vt_tab_reg_c100(i).vl_cofins_st  := null;
      --
    end if;
    --   
    vn_fase := 11;
    --
    -- conforme "Exceção 1"
    if vv_cod_sit not in ('02', '03', '04', '05') then
      --
      vn_fase := 12;
      --
      if rec_c100.cod_mod <> '65' then -- Nota de Consumidor Final: gerar o registro C190
        --
        vn_fase := 12.1;
        --
        -- Verifica UF do COD_PART
        if gn_origem_dado_pessoa = 0 then
          vv_cod_part := vt_tab_reg_c100(i).cod_part;
        else
          vv_cod_part := pk_csf.fkg_pessoa_cod_part(rec_c100.pessoa_id);
        end if;
        --
        vn_fase := 12.11;
        --      
        begin
          select min(e.sigla_estado)
            into vn_uf_cod_part
            from pessoa p, 
                 cidade c, 
                 estado e
           where p.cidade_id = c.id
             and c.estado_id = e.id
             and p.cod_part  = vv_cod_part;
        exception
          when others then
            vn_uf_cod_part := null;
        end;
        --
        -- Recupera UF do Registro 0000 (Abertura)
        begin
          select efd.uf
            into vn_uf_reg_abert
            from abertura_efd efd
           where efd.id = gt_row_abertura_efd.id;
        exception
          when others then
            vn_uf_reg_abert := null;
        end;
        --
        vn_fase := 12.2;
        -- 
        -- Recupera  Contribuinte ICMS (informar a IE do destinatário)
        begin
          select dm_ind_ie_dest
            into vn_dm_ind_ie_dest
            from tmp_nota_fiscal nf, nota_fiscal_dest nfd
           where nf.id = rec_c100.notafiscal_id
             and nfd.notafiscal_id = nf.id;
        exception
          when others then
            vn_dm_ind_ie_dest := null;
        end;
        --
        -- Só gera o registro C101, quando a UF do Registro 0000 
        -- for diferente do código participante
        if vn_uf_reg_abert <> vn_uf_cod_part and vn_dm_ind_ie_dest <> 1 -- 1-Contribuinte ICMS 
          then
          --
          if nvl(rec_c100.vl_icms_uf_dest, 0) > 0 or
             nvl(rec_c100.vl_icms_uf_remet, 0) > 0 or
             nvl(rec_c100.vl_comb_pobr_uf_dest, 0) > 0 then
            --
            vn_devolucao := null;
            --
            vn_fase := 12.3;
            --        
            begin
              select distinct 1
                into vn_devolucao
                from tmp_item_nota_fiscal it, 
                      cfop cf, 
                      tipo_operacao tp
               where it.notafiscal_id = rec_c100.notafiscal_id
                 and cf.id            = it.cfop_id
                 and tp.id            = cf.tipooperacao_id
                 and tp.cd            = 3; -- Devolução
            exception
              when others then
                vn_devolucao := null;
            end;
            --        
            vt_tab_reg_c101(i).reg := 'C101';
            vt_tab_reg_c101(i).vl_fcp_uf_dest := nvl(rec_c100.vl_comb_pobr_uf_dest, 0);
            --
            if nvl(vn_devolucao, 0) = 0 then -- não devolução       
              vt_tab_reg_c101(i).vl_icms_uf_dest := nvl(rec_c100.vl_icms_uf_dest, 0);
              vt_tab_reg_c101(i).vl_icms_uf_rem := nvl(rec_c100.vl_icms_uf_remet, 0);
            else -- devolução
              vt_tab_reg_c101(i).vl_icms_uf_dest := nvl(rec_c100.vl_icms_uf_remet, 0);
              vt_tab_reg_c101(i).vl_icms_uf_rem := nvl(rec_c100.vl_icms_uf_dest, 0);
            end if;
            --
          end if;
          --
        end if;
        --
        vn_fase := 13;
        --
        -- Monta o REGISTRO C120: COMPLEMENTO DE DOCUMENTO - OPERAÇÕES DE IMPORTAÇÃO (CÓDIGOS 01 e 55)
        if rec_c100.dm_ind_oper = 0 and rec_c100.cod_mod in ('01', '55') then -- Somente NF de Entrada e modelo 01
          --
          vn_fase := 13.1;
          --
          j := 0;
          --
          for rec_c120 in c_c120(rec_c100.notafiscal_id) loop
            exit when c_c120%notfound or(c_c120%notfound) is null;
            --
            vn_fase := 13.2;
            --
            j := nvl(j, 0) + 1;
            --
            vt_bi_tab_reg_c120(i)(j).reg         := 'C120';
            vt_bi_tab_reg_c120(i)(j).cod_doc_imp := rec_c120.cod_doc_imp;
            vt_bi_tab_reg_c120(i)(j).num_doc_imp := rec_c120.nro_di;
            vt_bi_tab_reg_c120(i)(j).pis_imp     := nvl(rec_c120.pis_imp, 0);
            vt_bi_tab_reg_c120(i)(j).cofins_imp  := nvl(rec_c120.cofins_imp, 0);
            vt_bi_tab_reg_c120(i)(j).num_acdraw := rec_c120.num_acdraw;
            --
          end loop;
          --
        end if;
        --
        vn_fase := 14;
        --
        if rec_c100.dm_ind_emit = 1 -- Terceiros
           or gn_versao >= 104 -- versão válida a partir de janeiro/2012
         then
          --
          vn_fase := 15;
          --
          if rec_c100.cod_mod in ('01', '04', '1B') and rec_c100.dm_ind_emit = '0' and vv_cod_sit = '08' then
            --
            vn_fase := 15.1;
            --
            j := nvl(j, 0) + 1;
            --
            vt_bi_tab_reg_c110(i)(j).reg       := 'C110';
            vt_bi_tab_reg_c110(i)(j).cod_inf   := 'C110';
            vt_bi_tab_reg_c110(i)(j).txt_compl := 'Documento Fiscal emitido com base em Regime Especial ou Norma Específica';
            --
            vn_fase := 15.2;
            --
            -- Monta registro 0450 para a nota
            pkb_monta_reg_0450(en_notafiscal_id     => rec_c100.notafiscal_id,
                               en_infcompdctofis_id => null,
                               en_cod_inf           => null,
                               ev_txt_compl         => null);
            --
          end if;
          --
          vn_fase := 16;
          --
          j := 0;
          --
          -- monta o REGISTRO C110: INFORMAÇÃO COMPLEMENTAR DA NOTA FISCAL (CÓDIGO 01, 1B, 04 e 55)
          for rec_c110 in c_c110(rec_c100.notafiscal_id) loop
            exit when c_c110%notfound or(c_c110%notfound) is null;
            --
            -- azoni #64299
            if rec_c110.cod_infor is not null then
              --
              vn_fase := 17;
              --
              -- Monta registro 0450 caso o c_c110 retorne registros
              j := nvl(j, 0) + 1;
              --
              --if rec_c110.cod_infor <> 'C115' then
              --
              vn_fase := 17.2;
              --
              if vn_dm_quebra_infadic_spedf = 0 then -- 0-Não quebra informação adicional
                --
              
                vt_bi_tab_reg_c110(i)(j).reg       := 'C110';
                vt_bi_tab_reg_c110(i)(j).cod_inf   := rec_c110.cod_infor;
                vt_bi_tab_reg_c110(i)(j).txt_compl := trim(substr(trim(rec_c110.txt_compl), 1, 255));
                --
                vn_fase := 17.3;
                --
                -- monta registro 0450 para a nota
                pkb_monta_reg_0450(en_notafiscal_id     => rec_c100.notafiscal_id,
                                   en_infcompdctofis_id => null,
                                   en_cod_inf           => null,
                                   ev_txt_compl         => null);
                --
              else
                -- vn_dm_quebra_infadic_spedf = 1 -- 1-Sim, quebra informação adicional
                --
                vn_tam_tot   := length(trim(rec_c110.txt_compl));
                vn_tamanho   := length(trim(rec_c110.txt_compl));
                vv_txt_compl := trim(rec_c110.txt_compl);
                --
                loop
                  --
                  vn_tamanho   := vn_tamanho - 255;
                  vv_descr     := substr(vv_txt_compl, 1, 255); -- recuperamos os primeiros 255 caracteres
                  vv_txt_compl := substr(vv_txt_compl, 256, nvl(vn_tam_tot, 0)); -- eliminamos os primeiros 255 caracteres
                  --
                  vn_idx_codinf := nvl(vn_idx_codinf, 0) + 1; -- código de informação adicional que irá relacionar o registro C110 com o 0450
                  --
                  vt_bi_tab_reg_c110(i)(j).reg       := 'C110';
                  vt_bi_tab_reg_c110(i)(j).cod_inf   := vn_idx_codinf;
                  vt_bi_tab_reg_c110(i)(j).txt_compl := null;
                  --
                  -- monta registro 0450 para a nota
                  pkb_monta_reg_0450(en_notafiscal_id     => null, --rec_c100.notafiscal_id
                                     en_infcompdctofis_id => null,
                                     en_cod_inf           => vn_idx_codinf, --rec_c110.cod_infor
                                     ev_txt_compl         => vv_descr,
                                     ev_reg_cod_inf       => rec_c110.cod_infor);
                  --
                  if nvl(vn_tamanho, 0) <= 0 then
                    exit;
                  else
                    j := nvl(j, 0) + 1;
                  end if;
                  --
                end loop;
                --
              end if; -- vn_dm_quebra_infadic_spedf = 0,1 -- 0-Não; 1-Sim - quebra informação adicional
              --
              vn_fase := 17.6;
              --
              -- monta o REGISTRO C111: PROCESSO REFERENCIADO
              k := 0;
              --
              --if rec_c110.cod_infor = 'C111' then
              --
              vn_fase := 17.7;
              --
              for rec_c111 in c_c111(rec_c100.notafiscal_id) loop
                exit when c_c111%notfound or(c_c111%notfound) is null;
                --
                vn_fase := 17.8;
                --
                k := nvl(k, 0) + 1;
                --
                vt_tri_tab_reg_c111(i)(j)(k).reg      := 'C111';
                vt_tri_tab_reg_c111(i)(j)(k).num_proc := pk_csf.fkg_converte(rec_c111.num_proc);
                vt_tri_tab_reg_c111(i)(j)(k).ind_proc := pk_csf.fkg_Orig_Proc_cd(en_origproc_id => rec_c111.origproc_id);
                --
              end loop;
              --
              --end if;
              --
              vn_fase := 17.9;
              --
              -- monta o REGISTRO C112: DOCUMENTO DE ARRECADAÇÃO REFERENCIADO
              k := 0;
              --
              --if rec_c110.cod_infor = 'C112' then
              --
              vn_fase := 17.10;
              --
              for rec_c112 in c_c112(rec_c100.notafiscal_id) loop
                exit when c_c112%notfound or(c_c112%notfound) is null;
                --
                vn_fase := 17.11;
                --
                k := nvl(k, 0) + 1;
                --
                vt_tri_tab_reg_c112(i)(j)(k).reg     := 'C112';
                vt_tri_tab_reg_c112(i)(j)(k).cod_da  := rec_c112.dm_cod_mod_da;
                vt_tri_tab_reg_c112(i)(j)(k).uf      := rec_c112.uf;
                vt_tri_tab_reg_c112(i)(j)(k).num_da  := rec_c112.nro_dar;
                vt_tri_tab_reg_c112(i)(j)(k).cod_aut := rec_c112.cod_aut_banc;
                vt_tri_tab_reg_c112(i)(j)(k).vl_da   := nvl(rec_c112.vl_dar, 0);
                vt_tri_tab_reg_c112(i)(j)(k).dt_vcto := rec_c112.dt_vencto;
                vt_tri_tab_reg_c112(i)(j)(k).dt_pgto := rec_c112.dt_pagto;
                --
              end loop;
              --
              --end if;
              --
              vn_fase := 17.12;
              --
              k := 0;
              --
              if rec_c110.cod_infor = 'C113' then
                --
                vn_fase := 17.13;
                --
                -- monta o REGISTRO C113: DOCUMENTO FISCAL REFERENCIADO
                for rec_c113 in c_c113(rec_c100.notafiscal_id) loop
                  exit when c_c113%notfound or(c_c113%notfound) is null;
                  --
                  vn_fase := 17.14;
                  --
                  --if rec_c113.dt_emiss <= rec_c100.dt_emiss then
                  --
                  vn_fase := 17.15;
                  --
                  k := nvl(k, 0) + 1;
                  --
                  vt_tri_tab_reg_c113(i)(j)(k).reg        := 'C113';
                  vt_tri_tab_reg_c113(i)(j)(k).ind_oper   := rec_c113.dm_ind_oper;
                  vt_tri_tab_reg_c113(i)(j)(k).ind_emit   := rec_c113.dm_ind_emit;
                  --vt_tri_tab_reg_c113(i)(j)(k).cod_part := pk_csf.fkg_pessoa_cod_part (rec_c113.pessoa_id);
                  vt_tri_tab_reg_c113(i)(j)(k).cod_part   := pk_csf_api_efd.fkb_ret_cnpjcpj_ibge_cod_part(en_pessoa_id          => rec_c113.pessoa_id,
                                                                                                          en_tipo_retorna       => 1, -- 0-PESSOA_ID / 1-COD_PART    
                                                                                                          en_origem_dado_pessoa => 0, -- Fixo reg C113 - Cadastro pessoa - #76361
                                                                                                          en_notafiscal_id      => rec_c113.notafiscal_id);
                  vt_tri_tab_reg_c113(i)(j)(k).cod_mod    := pk_csf.fkg_cod_mod_id(en_modfiscal_id => rec_c113.modfiscal_id);
                  vt_tri_tab_reg_c113(i)(j)(k).ser        := rec_c113.serie;
                  vt_tri_tab_reg_c113(i)(j)(k).sub        := rec_c113.subserie;
                  vt_tri_tab_reg_c113(i)(j)(k).num_doc    := rec_c113.nro_nf;
                  vt_tri_tab_reg_c113(i)(j)(k).dt_doc     := rec_c113.dt_emiss;
                  vt_tri_tab_reg_c113(i)(j)(k).chv_doce   := rec_c113.nro_chave_nfe;
                  --
                  vn_fase := 17.16;
                  --
                  -- Monta arquivo auxiliar
                  if nvl(rec_c113.pessoa_id, 0) > 0 then
                    --
                    vn_fase := 17.17;
                    --
                    -- Verificando se o parametro está como "DOCUMENTO_FISCAL" colcoar como "CADASTRO_PESSOA" pois conhecimento
                    -- de transporte deve-se pegar do cadastro de pessoa.		 
                    if gn_origem_dado_pessoa = 1 then
                       --
                       gn_origem_dado_pessoa       := 0;			
                       vv_volta_origem_dado_pessoa := 'S';
                       --
                    end if;
                    --		 
                    pkb_monta_reg_0150(en_pessoa_id     => rec_c113.pessoa_id,
                                       en_notafiscal_id => rec_c113.notafiscal_id);
                    --
                    -- Se foi trocado pois o parametro estava "DOCUMENTO_FISCAL" retornar o parametro conforme estava.		 
                    if nvl( vv_volta_origem_dado_pessoa, 'N') = 'S' then
                       --
                       gn_origem_dado_pessoa       := 1;
                       vv_volta_origem_dado_pessoa := null;				
                       --
                    end if;
                    --
                  end if;
                  --
                --end if;
                --
                end loop;
                --
              end if;
              --
              vn_fase := 17.18;
              --
              -- Monta o REGISTRO C114: CUPOM FISCAL REFERENCIADO
              k := 0;
              --
              --if rec_c110.cod_infor = 'C114' then
              --
              vn_fase := 17.19;
              --
              for rec_c114 in c_c114(rec_c100.notafiscal_id) loop
                exit when c_c114%notfound or(c_c114%notfound) is null;
                --
                vn_fase := 17.20;
                --
                k := nvl(k, 0) + 1;
                --
                vt_tri_tab_reg_c114(i)(j)(k).reg     := 'C114';
                vt_tri_tab_reg_c114(i)(j)(k).cod_mod := pk_csf.fkg_cod_mod_id(en_modfiscal_id => rec_c114.modfsical_id);
                vt_tri_tab_reg_c114(i)(j)(k).ecf_fab := rec_c114.ecf_fab;
                vt_tri_tab_reg_c114(i)(j)(k).ecf_cx  := rec_c114.ecf_cx;
                vt_tri_tab_reg_c114(i)(j)(k).num_doc := rec_c114.num_doc;
                vt_tri_tab_reg_c114(i)(j)(k).dt_doc  := rec_c114.dt_doc;
                --
              end loop;
              --
              --end if;
              --
              vn_fase := 17.21;
              --
              -- REGISTRO C115: LOCAL DA COLETA E/OU ENTREGA (CÓDIGO 01, 1B E 04).
              k := 0;
              --
              --if rec_c110.cod_infor = 'C115' then
              --
              vn_fase := 17.22;
              --
              if rec_c100.dm_ind_oper = 1 -- Somente NF de saída
                 and rec_c100.cod_mod in ('01', '04', '1B') then
                --
                vn_fase := 17.23;
                --
                for rec_c115 in c_c115(rec_c100.notafiscal_id) loop
                  exit when c_c115%notfound or(c_c115%notfound) is null;
                  --
                  vn_fase := 17.24;
                  --
                  k := nvl(k, 0) + 1;
                  --
                  vt_tri_tab_reg_c115(i)(j)(k).reg          := 'C115';
                  vt_tri_tab_reg_c115(i)(j)(k).ind_carga    := rec_c115.ind_carga_col;
                  vt_tri_tab_reg_c115(i)(j)(k).cnpj_col     := rec_c115.cnpj_col;
                  vt_tri_tab_reg_c115(i)(j)(k).ie_col       := rec_c115.ie_col;
                  vt_tri_tab_reg_c115(i)(j)(k).cpf_col      := rec_c115.cpf_col;
                  vt_tri_tab_reg_c115(i)(j)(k).cod_mun_col  := rec_c115.cod_mun_col;
                  vt_tri_tab_reg_c115(i)(j)(k).cnpj_entg    := rec_c115.cnpj_entr;
                  vt_tri_tab_reg_c115(i)(j)(k).ie_entg      := rec_c115.ie_entr;
                  vt_tri_tab_reg_c115(i)(j)(k).cpf_entg     := rec_c115.cpf_entr;
                  vt_tri_tab_reg_c115(i)(j)(k).cod_mun_entg := rec_c115.cod_mun_entr;
                  --
                end loop;
                --
              end if; -- rec_c100.dm_ind_oper = 1 then -- Somente NF de saída
              --
              --end if;
              --
              vn_fase := 17.25;
              --
              -- Monta o REGISTRO C116: CUPOM FISCAL ELETRONICO REFERENCIADO
              k := 0;
              --
              --if rec_c110.cod_infor = 'C116' then
              --
              vn_fase := 17.26;
              --
              for rec_c116 in c_c116(rec_c100.notafiscal_id) loop
                exit when c_c116%notfound or(c_c116%notfound) is null;
                --
                vn_fase := 17.27;
                --
                k := nvl(k, 0) + 1;
                --
                vt_tri_tab_reg_c116(i)(j)(k).reg     := 'C116';
                vt_tri_tab_reg_c116(i)(j)(k).cod_mod := pk_csf.fkg_cod_mod_id(en_modfiscal_id => rec_c116.modfiscal_id);
                vt_tri_tab_reg_c116(i)(j)(k).nr_sat  := rec_c116.nr_sat;
                vt_tri_tab_reg_c116(i)(j)(k).chv_cfe := rec_c116.chv_cfe;
                vt_tri_tab_reg_c116(i)(j)(k).num_cfe := rec_c116.num_cfe;
                vt_tri_tab_reg_c116(i)(j)(k).dt_doc  := rec_c116.dt_doc;
                --
              end loop;
              --
            end if;
            --
          end loop; -- c_c110
          --
          vn_fase := 18;
          --
          if nvl(rec_c100.inforcompdctofiscal_id, 0) > 0 then
            --
            vn_fase := 18.1;
            --
            vv_cod_infor := trim(pk_csf.fkg_Infor_Comp_Dcto_Fiscal_cod(en_inforcompdctofiscal_id => nvl(rec_c100.inforcompdctofiscal_id,
                                                                                                        0)));
            --
            if vv_cod_infor is not null then
              --
              vn_fase := 18.2;
              j       := nvl(j, 0) + 1;
              --
              vt_bi_tab_reg_c110(i)(j).reg       := 'C110';
              vt_bi_tab_reg_c110(i)(j).cod_inf   := vv_cod_infor;
              vt_bi_tab_reg_c110(i)(j).txt_compl := null;
              --
              vn_fase := 18.3;
              --
              pkb_monta_reg_0450(en_notafiscal_id     => null,
                                 en_infcompdctofis_id => nvl(rec_c100.inforcompdctofiscal_id, 0),
                                 en_cod_inf           => null,
                                 ev_txt_compl         => null);
              --
            end if;
            --
          end if;
          --
        end if;
        --
        vn_fase := 19;
        --
        -- Exceção 2: Notas Fiscais Eletrônicas - NF-e de emissão própria: neste caso, devem ser apresentados somente os registros
        -- C100 e C190, e, se existirem ajustes de documento fiscal, devem ser apresentados também os registros C195 e C197;
        --| Neste caso aqui faremos para apenas NF de Terceiros
        if rec_c100.dm_ind_emit = 1 or (rec_c100.dm_ind_emit = 0 and rec_c100.cod_mod in ('01', '04')) then
          --
          vn_fase := 20;
          --
          --  Monta o REGISTRO C130: ISSQN, IRRF E PREVIDÊNCIA SOCIAL
          if rec_c100.dm_ind_oper = 1 then -- Somente NF de saída
            --
            vn_fase := 20.1;
            --
            j := 0;
            --
            for rec_c130 in c_c130(rec_c100.notafiscal_id) loop
              exit when c_c130%notfound or(c_c130%notfound) is null;
              --
              vn_fase := 20.2;
              --
              j := nvl(j, 0) + 1;
              --
              vt_bi_tab_reg_c130(i)(j).reg         := 'C130';
              vt_bi_tab_reg_c130(i)(j).vl_serv_nt  := rec_c130.vl_serv_nt;
              vt_bi_tab_reg_c130(i)(j).vl_bc_issqn := rec_c130.vl_bc_issqn;
              vt_bi_tab_reg_c130(i)(j).vl_issqn    := rec_c130.vl_issqn;
              vt_bi_tab_reg_c130(i)(j).vl_bc_irrf  := rec_c130.vl_bc_irrf;
              vt_bi_tab_reg_c130(i)(j).vl_irrf     := rec_c130.vl_irrf;
              vt_bi_tab_reg_c130(i)(j).vl_bc_prev  := rec_c130.vl_bc_prev;
              vt_bi_tab_reg_c130(i)(j).vl_prev     := rec_c130.vl_prev;
              --
            end loop;
            --
          end if;
          --
          vn_fase := 21;
          --
          -- monta o REGISTRO C140: FATURA (CÓDIGO 01)
          if rec_c100.cod_mod = '01' then
            --
            vn_fase := 21.1;
            --
            j := 0;
            --
            for rec_c140 in c_c140(rec_c100.notafiscal_id) loop
              exit when c_c140%notfound or(c_c140%notfound) is null;
              --
              vn_fase := 21.2;
              --
              if nvl(rec_c140.vl_tit, 0) > 0 then
                --
                vn_fase := 21.3;
                --
                j := nvl(j, 0) + 1;
                --
                vt_bi_tab_reg_c140(i)(j).reg      := 'C140';
                vt_bi_tab_reg_c140(i)(j).ind_emit := rec_c140.ind_emit;
                vt_bi_tab_reg_c140(i)(j).ind_tit  := rec_c140.ind_tit;
                vt_bi_tab_reg_c140(i)(j).desc_tit := rec_c140.desc_tit;
                vt_bi_tab_reg_c140(i)(j).num_tit  := rec_c140.num_tit;
                vt_bi_tab_reg_c140(i)(j).qtd_parc := rec_c140.qtd_parc;
                vt_bi_tab_reg_c140(i)(j).vl_tit   := rec_c140.vl_tit;
                --
                vn_fase := 21.4;
                --
                k := 0;
                --
                -- Monta o REGISTRO C141: VENCIMENTO DA FATURA (CÓDIGO 01).
                for rec_c141 in c_c141(rec_c140.nfcobr_id) loop
                  exit when c_c141%notfound or(c_c141%notfound) is null;
                  --
                  vn_fase := 21.5;
                  --
                  k := nvl(k, 0) + 1;
                  --
                  vt_tri_tab_reg_c141(i)(j)(k).reg      := 'C141';
                  vt_tri_tab_reg_c141(i)(j)(k).num_parc := k; --rec_c141.num_parc; atribui "k", pois nem sempre vem certo da integracao
                  vt_tri_tab_reg_c141(i)(j)(k).dt_vcto  := rec_c141.dt_vcto;
                  vt_tri_tab_reg_c141(i)(j)(k).vl_parc  := rec_c141.vl_parc;
                  --
                end loop;
                --
              end if;
              --
            end loop;
            --
          end if; -- rec_c100.cod_mod = '01' C140
          --
          vn_fase := 22;
          --
          -- Monta o REGISTRO C160: VOLUMES TRANSPORTADOS (CÓDIGO 01 E 04) - EXCETO COMBUSTÍVEIS
          if rec_c100.dm_ind_oper = 1 and rec_c100.cod_mod in ('01', '04') then -- Somente NF de saída e Modelos (01, 04)
            --
            vn_fase := 22.1;
            --
            j := 0;
            --
            for rec_c160 in c_c160(rec_c100.notafiscal_id) loop
              exit when c_c160%notfound or(c_c160%notfound) is null;
              --
              vn_fase := 22.2;
              --
              j := nvl(j, 0) + 1;
              --
              vt_bi_tab_reg_c160(i)(j).reg         := 'C160';
              -- vt_bi_tab_reg_c160(i)(j).cod_part := pk_csf.fkg_pessoa_cod_part (rec_c160.pessoa_id);
              vt_bi_tab_reg_c160(i)(j).cod_part    := pk_csf_api_efd.fkb_ret_cnpjcpj_ibge_cod_part(en_pessoa_id          => rec_c160.pessoa_id,
                                                                                                   en_tipo_retorna       => 1, -- 0-PESSOA_ID / 1-COD_PART 
                                                                                                   en_origem_dado_pessoa => gn_origem_dado_pessoa,
                                                                                                   en_notafiscal_id      => rec_c160.notafiscal_id);
              vt_bi_tab_reg_c160(i)(j).veic_id     := rec_c160.veic_id;
              vt_bi_tab_reg_c160(i)(j).qtd_vol     := rec_c160.qtd_vol;
              vt_bi_tab_reg_c160(i)(j).peso_brt    := rec_c160.peso_brt;
              vt_bi_tab_reg_c160(i)(j).peso_liq    := rec_c160.peso_liq;
              vt_bi_tab_reg_c160(i)(j).uf_id       := rec_c160.uf_id;
              --
              vn_fase := 22.3;
              --
              -- Monta arquivo auxiliar participante
              if nvl(rec_c160.pessoa_id, 0) > 0 then
                --
                vn_fase := 22.4;
                --
                pkb_monta_reg_0150(en_pessoa_id     => rec_c160.pessoa_id,
                                   en_notafiscal_id => rec_c160.notafiscal_id);
                --
              end if;
              --
            end loop;
            --
          end if;
          --
          vn_fase := 23;
          --
          -- Monta o REGISTRO C165: OPERAÇÕES COM COMBUSTÍVEIS (CÓDIGO 01)
          if rec_c100.dm_ind_oper = 1 and rec_c100.cod_mod in ('01') then -- Somente NF de saída e Modelos (01)
            --
            vn_fase := 23.1;
            --
            j := 0;
            --
            for rec_c165 in c_c165(rec_c100.notafiscal_id) loop
              exit when c_c165%notfound or(c_c165%notfound) is null;
              --
              vn_fase := 23.2;
              --
              j := nvl(j, 0) + 1;
              --
              vt_bi_tab_reg_c165(i)(j).reg        := 'C165';
              --vt_bi_tab_reg_c165(i)(j).cod_part := pk_csf.fkg_pessoa_cod_part (rec_c165.pessoa_id);
              vt_bi_tab_reg_c165(i)(j).cod_part   := pk_csf_api_efd.fkb_ret_cnpjcpj_ibge_cod_part(en_pessoa_id          => rec_c165.pessoa_id,
                                                                                                  en_tipo_retorna       => 1, -- 0-PESSOA_ID / 1-COD_PART  
                                                                                                  en_origem_dado_pessoa => gn_origem_dado_pessoa,
                                                                                                  en_notafiscal_id      => rec_c165.notafiscal_id);
              vt_bi_tab_reg_c165(i)(j).veic_id    := rec_c165.veic_id;
              vt_bi_tab_reg_c165(i)(j).cod_aut    := rec_c165.cod_aut;
              vt_bi_tab_reg_c165(i)(j).nr_passe   := rec_c165.nr_passe;
              vt_bi_tab_reg_c165(i)(j).hora       := to_char(nvl(rec_c100.dt_sai_ent, rec_c100.dt_emiss), 'hh24miss');
              vt_bi_tab_reg_c165(i)(j).temper     := rec_c165.temper;
              vt_bi_tab_reg_c165(i)(j).qtd_vol    := rec_c165.qtd_vol;
              vt_bi_tab_reg_c165(i)(j).peso_brt   := rec_c165.peso_brt;
              vt_bi_tab_reg_c165(i)(j).peso_liq   := rec_c165.peso_liq;
              vt_bi_tab_reg_c165(i)(j).nom_mot    := rec_c165.nom_mot;
              vt_bi_tab_reg_c165(i)(j).cpf        := rec_c165.cpf;
              vt_bi_tab_reg_c165(i)(j).uf_id      := rec_c165.uf_id;
              --
              vn_fase := 23.3;
              --
              -- Monta arquivo auxiliar pessoa
              if nvl(rec_c165.pessoa_id, 0) > 0 then
                --
                vn_fase := 23.4;
                --
                pkb_monta_reg_0150(en_pessoa_id     => rec_c165.pessoa_id,
                                   en_notafiscal_id => rec_c165.notafiscal_id);
                --
              end if;
              --
            end loop;
            --
          end if;
          --
          vn_fase := 24;
          --
          j := 0;
          --
          vn_num_item := 0;
          --
          if gn_versao >= 112 then
            --
            vn_tot_icms_c170 := 0;
            vn_tot_ipi_c170  := 0;
            --
          end if;
          --
          -- Monta o REGISTRO C170: ITENS DO DOCUMENTO (CÓDIGO 01, 1B, 04 e 55)
          for rec_c170 in c_c170(rec_c100.notafiscal_id) loop
            exit when c_c170%notfound or(c_c170%notfound) is null;
            --
            vn_fase := 25;
            --
            j := nvl(j, 0) + 1;
            --
            vn_num_item := nvl(vn_num_item, 0) + 1; -- Sequencia continua até 3 casas
            --
            vt_bi_tab_reg_c170(i)(j).reg         := 'C170';
            vt_bi_tab_reg_c170(i)(j).num_item    := vn_num_item;
            vt_bi_tab_reg_c170(i)(j).cod_item    := rec_c170.cod_item;
            vt_bi_tab_reg_c170(i)(j).descr_compl := rec_c170.descr_compl;
            --
            vn_qtd := round(rec_c170.qtd, 5);
            --
            if nvl(vn_qtd, 0) <= 0 then
              vt_bi_tab_reg_c170(i)(j).qtd := 1;
            else
              vt_bi_tab_reg_c170(i)(j).qtd := vn_qtd;
            end if;
            --
            vt_bi_tab_reg_c170(i)(j).unid    := rec_c170.unid;
            vt_bi_tab_reg_c170(i)(j).vl_item := round(rec_c170.vl_item, 2);
            vt_bi_tab_reg_c170(i)(j).vl_desc := rec_c170.vl_desc;
            vt_bi_tab_reg_c170(i)(j).ind_mov := rec_c170.ind_mov;
            vt_bi_tab_reg_c170(i)(j).cfop    := rec_c170.cfop;
            vt_bi_tab_reg_c170(i)(j).cod_nat := pk_csf.fkg_cod_nat_id(rec_c170.natoper_id);
            --
            vn_fase := 26;
            --
            -- Recupera os impostos dos itens ICMS
            begin
              select cst.cod_st,
                     imp.vl_base_calc,
                     imp.aliq_apli,
                     imp.vl_imp_trib,
                     imp.vl_fcp,
                     imp.aliq_fcp
                into vv_cst_icms,
                     vn_vl_bc_icms,
                     vn_aliq_icms,
                     vn_vl_icms,
                     vn_vl_fcp,
                     vn_aliq_fcp_icms
                from tmp_imp_itemnf imp, 
                     tipo_imposto ti, 
                     cod_st cst
               where imp.itemnf_id = rec_c170.itemnf_id
                 and ti.id         = imp.tipoimp_id
                 and ti.cd         in (1, 10) -- imposto icms e sn-simples nacional
                 and cst.id        = imp.codst_id;
            exception
              when others then
                --
                if nvl(rec_c170.cd_lista_serv, 0) > 0 then -- item de serviço
                  vv_cst_icms := '40';
                else
                  vv_cst_icms := null;
                end if;
                vn_vl_bc_icms    := 0;
                vn_aliq_icms     := 0;
                vn_vl_icms       := 0;
                vn_vl_fcp        := 0;
                vn_aliq_fcp_icms := 0;
                --
            end;
            --                                 --
            if gn_versao >= 112 then
              --
              /*Esta variavel permite acumular o valor de ICMS a fim ajustar o valor de icms no registro C100*/
              vn_tot_icms_c170 := vn_tot_icms_c170 + nvl(vn_vl_icms, 0);
              --
            end if;
            --
            vn_fase := 27;
            --
            -- ICMS-ST
            begin
              select imp.vl_base_calc,
                     imp.aliq_apli,
                     imp.vl_imp_trib,
                     imp.vl_fcp
                into vn_vl_bc_icms_st,
                     vn_aliq_st,
                     vn_vl_icms_st,
                     vn_vl_fcp_st
                from tmp_imp_itemnf imp, 
                     tipo_imposto ti
               where imp.itemnf_id = rec_c170.itemnf_id
                 and ti.id         = imp.tipoimp_id
                 and ti.cd         = 2;
            exception
              when others then
                vn_vl_bc_icms_st := 0;
                vn_aliq_st       := 0;
                vn_vl_icms_st    := 0;
                vn_vl_fcp_st     := 0;
            end;
            --
            vn_fase := 28;
            --
            --| Recuperar os valores de ipi com exceção da CST 49 e 99, e das CFOPs: (1551, 1556, 5929, 6929, 3551, 3949, 5602, 6602, 3556)
            begin
              select cst.cod_st,
                     decode(cst.cod_st,
                            '49', 0,
                            '99', 0,
                            nvl(ii.vl_base_calc, 0)),
                     decode(cst.cod_st,
                            '49', 0,
                            '99', 0,
                            nvl(ii.aliq_apli, 0)),
                     decode(cst.cod_st,
                            '49', 0,
                            '99', 0,
                            nvl(ii.vl_imp_trib, 0))
                into vv_cst_ipi, 
                     vn_vl_bc_ipi, 
                     vn_aliq_ipi, 
                     vn_vl_ipi
                from tmp_item_nota_fiscal inf,
                     tmp_imp_itemnf       ii,
                     tipo_imposto         ti,
                     cod_st               cst
               where inf.id       = rec_c170.itemnf_id
                 and inf.cfop     not in (1551, 1556, 5929, 6929, 3551, 5602, 6602, 3556)
                 and ii.itemnf_id = inf.id
                 and ii.dm_tipo   = 0 -- Imposto
                 and ti.id        = ii.tipoimp_id
                 and ti.cd        = 3 -- IPI
                 and cst.id       = ii.codst_id;
            exception
              when others then
                -- #62353 -- caso não exista ipi não fazer nada. 
                vv_cst_ipi   := null;
                vn_vl_bc_ipi := null;
                vn_aliq_ipi  := null;
                vn_vl_ipi    := null;
            end;
            --
            if gn_versao >= 112 then
              --
              /*Esta variavel permite acumular o valor de IPI a fim ajustar o valor de icms no registro C100*/
              vn_tot_ipi_c170 := vn_tot_ipi_c170 + vn_vl_ipi;
              --
            end if;
            --
            vn_fase := 29;
            --
            -- PIS
            begin
              select cst.cod_st,
                     imp.vl_base_calc        vl_bc_pis,
                     imp.aliq_apli           aliq_pis,
                     imp.qtde_base_calc_prod quant_bc_pis,
                     imp.vl_aliq_prod        vl_aliq_pis,
                     imp.vl_imp_trib         vl_pis
                into vv_cst_pis,
                     vn_vl_bc_pis,
                     vn_aliq_pis,
                     vn_quant_bc_pis,
                     vn_vl_aliq_pis,
                     vn_vl_pis
                from tmp_imp_itemnf imp, 
                     tipo_imposto ti, 
                     cod_st cst
               where imp.itemnf_id = rec_c170.itemnf_id
                 and ti.id         = imp.tipoimp_id
                 and ti.cd         = 4 -- PIS
                 and cst.id        = imp.codst_id;
            exception
              when others then
                vv_cst_pis      := null;
                vn_vl_bc_pis    := 0;
                vn_aliq_pis     := 0;
                vn_quant_bc_pis := 0;
                vn_vl_aliq_pis  := 0;
                vn_vl_pis       := 0;
            end;
            --
            vn_fase := 30;
            --
            -- COFINS
            begin
              select cst.cod_st,
                     imp.vl_base_calc,
                     imp.aliq_apli,
                     imp.qtde_base_calc_prod,
                     imp.vl_aliq_prod,
                     imp.vl_imp_trib
                into vv_cst_cofins,
                     vn_vl_bc_cofins,
                     vn_aliq_cofins,
                     vn_quant_bc_cofins,
                     vn_vl_aliq_cofins,
                     vn_vl_cofins
                from tmp_imp_itemnf imp, 
                     tipo_imposto ti, 
                     cod_st cst
               where imp.itemnf_id = rec_c170.itemnf_id
                 and ti.id         = imp.tipoimp_id
                 and ti.cd         = 5 -- COFINS
                 and cst.id        = imp.codst_id;
            exception
              when others then
                vv_cst_cofins      := null;
                vn_vl_bc_cofins    := 0;
                vn_aliq_cofins     := 0;
                vn_quant_bc_cofins := 0;
                vn_vl_aliq_cofins  := 0;
                vn_vl_cofins       := 0;
            end;
            --
            vn_fase := 31;
            --
            --if gt_row_abertura_efd.dt_fim <= to_date('31/12/2018','dd/mm/rrrr') then -- Prazo para mudança do leiaute - nova definição deverá ser efetuada
            if gt_row_abertura_efd.dt_fim >= to_date('01/08/2018', 'dd/mm/rrrr') then
              -- Nova definição efetuada
              -- manter os valores encontrados de FCP em ICMS e ICMS-ST (acima)
              null;
              --
            else
              --
              vn_vl_fcp        := 0;
              vn_aliq_fcp_icms := 0;
              vn_vl_fcp_st     := 0;
            end if;
            --
            if length(vv_cst_icms) = 3 then -- CST de imposto Simples Nacional
              vt_bi_tab_reg_c170(i)(j).cst_icms := vv_cst_icms;
            else
              vt_bi_tab_reg_c170(i)(j).cst_icms := (rec_c170.orig || vv_cst_icms);
            end if;
            --
            vn_fase := 32;
            --
            --if rec_c170.cfop in (1551, 1556, 3551, 3556, 3949, 5602, 5929, 6602, 6929) then
            if (rec_c170.cfop in (1556, 3556, 5602, 5605, 5929, 6602, 6929) and vt_bi_tab_reg_c170(i)(j).vl_icms > 0) then
              --
              vn_fase := 32.1;
              vt_bi_tab_reg_c170(i)(j).vl_bc_icms := 0;
              vt_bi_tab_reg_c170(i)(j).aliq_icms  := 0;
              vt_bi_tab_reg_c170(i)(j).vl_icms    := 0;
              vt_bi_tab_reg_c170(i)(j).cst_icms   := rec_c170.orig || '90';
              --
            else
              --
              vn_fase := 32.2;
              --
              vt_bi_tab_reg_c170(i)(j).vl_bc_icms := nvl(vn_vl_bc_icms, 0); --vn_vl_bc_icms;
              --vt_bi_tab_reg_c170(i)(j).aliq_icms  := vn_aliq_icms;
              vt_bi_tab_reg_c170(i)(j).aliq_icms := nvl(vn_aliq_icms, 0) + nvl(vn_aliq_fcp_icms, 0);
              --
              if nvl(rec_c170.dm_mot_des_icms, 0) > 0 and vv_cst_icms <> '20' then
                vt_bi_tab_reg_c170(i)(j).vl_icms := 0;
              else
                --vt_bi_tab_reg_c170(i)(j).vl_icms := vn_vl_icms;
                vt_bi_tab_reg_c170(i)(j).vl_icms := nvl(vn_vl_icms, 0) + nvl(vn_vl_fcp, 0);
                --
                if gn_versao >= 112 then
                  --
                  if rec_c170.cfop not in (1551, 2551) then
                    --
                    /*Esta variavel permite acumular o valor de ICMS a fim ajustar o valor de icms no registro C100*/
                    vn_tot_icms_c170 := vn_tot_icms_c170 + nvl(vn_vl_icms, 0);
                    --
                  else
                    --
                    /*Esta variavel permite acumular o valor de ICMS a fim ajustar o valor de icms no registro C100*/
                    vn_tot_icms_c170 := vn_tot_icms_c170 + 0;
                    --
                  end if;
                  --
                end if;
                --
              end if;
              --
            end if;
            --
            vn_fase := 33;
            --
            vt_bi_tab_reg_c170(i)(j).vl_bc_icms_st   := vn_vl_bc_icms_st;
            vt_bi_tab_reg_c170(i)(j).aliq_st         := vn_aliq_st;
            --vt_bi_tab_reg_c170(i)(j).vl_icms_st    := vn_vl_icms_st;
            vt_bi_tab_reg_c170(i)(j).vl_icms_st      := vn_vl_icms_st + nvl(vn_vl_fcp_st, 0);
            vt_bi_tab_reg_c170(i)(j).ind_apur        := rec_c170.ind_apur;
            vt_bi_tab_reg_c170(i)(j).cst_ipi         := vv_cst_ipi;
            vt_bi_tab_reg_c170(i)(j).cod_enq         := null; --rec_c170.cod_enq;
            ----
            if rec_c170.cfop in (1551, 2551) then
              vt_bi_tab_reg_c170(i)(j).vl_bc_ipi     := 0;
              vt_bi_tab_reg_c170(i)(j).aliq_ipi      := 0;
              vt_bi_tab_reg_c170(i)(j).vl_ipi        := 0;
            else
              vt_bi_tab_reg_c170(i)(j).vl_bc_ipi     := vn_vl_bc_ipi;
              vt_bi_tab_reg_c170(i)(j).aliq_ipi      := vn_aliq_ipi;
              vt_bi_tab_reg_c170(i)(j).vl_ipi        := vn_vl_ipi;
            end if;
            ----
            vt_bi_tab_reg_c170(i)(j).cst_pis         := vv_cst_pis;
            vt_bi_tab_reg_c170(i)(j).vl_bc_pis       := vn_vl_bc_pis;
            vt_bi_tab_reg_c170(i)(j).aliq_pis        := vn_aliq_pis;
            vt_bi_tab_reg_c170(i)(j).quant_bc_pis    := vn_quant_bc_pis;
            vt_bi_tab_reg_c170(i)(j).vl_aliq_pis     := vn_vl_aliq_pis;
            vt_bi_tab_reg_c170(i)(j).vl_pis          := vn_vl_pis;
            vt_bi_tab_reg_c170(i)(j).cst_cofins      := vv_cst_cofins;
            vt_bi_tab_reg_c170(i)(j).vl_bc_cofins    := vn_vl_bc_cofins;
            vt_bi_tab_reg_c170(i)(j).aliq_cofins     := vn_aliq_cofins;
            vt_bi_tab_reg_c170(i)(j).quant_bc_cofins := vn_quant_bc_cofins;
            vt_bi_tab_reg_c170(i)(j).vl_aliq_cofins  := vn_vl_aliq_cofins;
            vt_bi_tab_reg_c170(i)(j).vl_cofins       := vn_vl_cofins;
            vt_bi_tab_reg_c170(i)(j).cod_cta         := rec_c170.cod_cta;
            ---
            if gt_row_abertura_efd.dt_fim >= to_date('01/01/2019', 'dd/mm/rrrr') then
              ---
              vt_bi_tab_reg_c170(i)(j).vl_abat_nt := rec_c170.vl_abat_nt;
              ---
            end if;
            --
            vn_fase := 34;
            --
            -- Monta arquivo auxiliar produto
            if nvl(rec_c170.item_id, 0) > 0 then
              --
              vn_fase := 34.1;
              --
              pkb_monta_reg_0200(en_item_id => rec_c170.item_id);
              --
            end if;
            --
            vn_fase := 35;
            --
            -- Busca id unidade
            vn_unidade := pk_csf.fkg_Unidade_id(en_multorg_id => pk_csf.fkg_multorg_id_empresa(en_empresa_id => gt_row_abertura_efd.empresa_id),
                                                ev_sigla_unid => rec_c170.unid);
            --
            vn_fase := 36;
            --
            -- Monta arquivo auxiliar unidade
            if nvl(vn_unidade, 0) > 0 then
              --
              vn_fase := 36.1;
              --
              pkb_monta_reg_0190(en_unidade_id => vn_unidade);
              --
            end if;
            --
            vn_fase := 37;
            --
            -- Monta arquivo auxiliar nstureza da operação
            if nvl(rec_c170.natoper_id, 0) > 0 then
              --
              vn_fase := 37.1;
              --
              pkb_monta_reg_0400(en_natoper_id => rec_c170.natoper_id);
              --
            end if;
            --
            vn_fase := 38;
            --
            -- Monta arquivo auxiliar conversao de unidades
            if nvl(rec_c170.item_id, 0) > 0 and nvl(vn_unidade, 0) > 0 then
              --
              vn_fase := 38.1;
              --
              pkb_monta_reg_0220(en_item_id    => rec_c170.item_id,
                                 en_unidade_id => vn_unidade);
              --
            end if;
            --
            vn_fase := 39;
            --
            -- Monta o REGISTRO C171: ARMAZENAMENTO DE COMBUSTIVEIS (código 01, 55)
            if rec_c100.dm_ind_oper = 0 and rec_c100.cod_mod in ('01', '55') then -- Somente NF de Entrada e Modelos (01, 55)
              --
              vn_fase := 39.1;
              --
              k := 0;
              --
              for rec_c171 in c_c171(rec_c170.itemnf_id) loop
                exit when c_c171%notfound or(c_c171%notfound) is null;
                --
                vn_fase := 39.2;
                --
                k := nvl(k, 0) + 1;
                --
                vt_tri_tab_reg_c171(i)(j)(k).reg        := 'C171';
                vt_tri_tab_reg_c171(i)(j)(k).num_tanque := rec_c171.num_tanque;
                vt_tri_tab_reg_c171(i)(j)(k).qtde       := rec_c171.qtde;
                --
              end loop;
              --
            end if;
            --
            vn_fase := 40;
            --
            -- Monta o REGISTRO C172: OPERAÇÕES COM ISSQN (CÓDIGO 01)
            if rec_c100.dm_ind_oper = 1 and rec_c100.cod_mod in ('01') then -- Somente NF de Saída e Modelos (01)
              --
              vn_fase := 40.1;
              --
              k := 0;
              --
              for rec_c172 in c_c172(rec_c170.itemnf_id) loop
                exit when c_c172%notfound or(c_c172%notfound) is null;
                --
                vn_fase := 40.2;
                --
                k := nvl(k, 0) + 1;
                --
                vt_tri_tab_reg_c172(i)(j)(k).reg         := 'C172';
                vt_tri_tab_reg_c172(i)(j)(k).vl_bc_issqn := rec_c172.vl_bc_issqn;
                vt_tri_tab_reg_c172(i)(j)(k).aliq_issqn  := rec_c172.aliq_issqn;
                vt_tri_tab_reg_c172(i)(j)(k).vl_issqn    := rec_c172.vl_issqn;
                --
              end loop;
              --
            end if;
            --
            vn_fase := 41;
            -- Monta o REGISTRO C173: OPERAÇÕES COM MEDICAMENTOS (CÓDIGO 01 e 55)
            if rec_c100.cod_mod in ('01', '55') then -- Somente NF de Saída e Modelos (01, 55)
              --
              vn_fase := 41.1;
              --
              k := 0;
              --
              for rec_c173 in c_c173(rec_c170.itemnf_id) loop
                exit when c_c173%notfound or(c_c173%notfound) is null;
                --
                vn_fase := 41.2;
                --
                k := nvl(k, 0) + 1;
                --
                vt_tri_tab_reg_c173(i)(j)(k).reg        := 'C173';
                vt_tri_tab_reg_c173(i)(j)(k).lote_med   := rec_c173.lote_med;
                vt_tri_tab_reg_c173(i)(j)(k).qtd_item   := rec_c173.qtd_item;
                vt_tri_tab_reg_c173(i)(j)(k).dt_fab     := rec_c173.dt_fab;
                vt_tri_tab_reg_c173(i)(j)(k).dt_val     := rec_c173.dt_val;
                vt_tri_tab_reg_c173(i)(j)(k).ind_med    := rec_c173.ind_med;
                vt_tri_tab_reg_c173(i)(j)(k).tp_prod    := rec_c173.tp_prod;
                vt_tri_tab_reg_c173(i)(j)(k).vl_tab_max := rec_c173.vl_tab_max;
                --
              end loop;
              --
            end if;
            --
            vn_fase := 42;
            --
            -- Monta o REGISTRO C174: OPERAÇÕES COM ARMAS DE FOGO (CÓDIGO 01)
            if rec_c100.dm_ind_oper = 1 and rec_c100.cod_mod in ('01') then -- Somente NF de Saída e Modelos (01)
              --
              vn_fase := 42.1;
              --
              k := 0;
              --
              for rec_c174 in c_c174(rec_c170.itemnf_id) loop
                exit when c_c174%notfound or(c_c174%notfound) is null;
                --
                vn_fase := 42.2;
                --
                k := nvl(k, 0) + 1;
                --
                vt_tri_tab_reg_c174(i)(j)(k).reg         := 'C174';
                vt_tri_tab_reg_c174(i)(j)(k).ind_arm     := rec_c174.ind_arm;
                vt_tri_tab_reg_c174(i)(j)(k).num_arm     := rec_c174.num_arm;
                vt_tri_tab_reg_c174(i)(j)(k).descr_compl := rec_c174.descr_compl;
                --
              end loop;
              --
            end if;
            --
            vn_fase := 43;
            --
            -- Monta o REGISTRO C175: OPERAÇÕES COM VEÍCULOS NOVOS (CÓDIGO 01 e 55).
            if rec_c100.cod_mod in ('01', '55') then -- Somente NF de Saída e Modelos (01, 55)
              --
              vn_fase := 43.1;
              --
              k := 0;
              --
              for rec_c175 in c_c175(rec_c170.itemnf_id) loop
                exit when c_c175%notfound or(c_c175%notfound) is null;
                --
                vn_fase := 43.2;
                --
                k := nvl(k, 0) + 1;
                --
                vt_tri_tab_reg_c175(i)(j)(k).reg           := 'C175';
                vt_tri_tab_reg_c175(i)(j)(k).ind_veic_oper := rec_c175.ind_veic_oper;
                vt_tri_tab_reg_c175(i)(j)(k).cnpj          := rec_c175.cnpj;
                vt_tri_tab_reg_c175(i)(j)(k).uf            := rec_c175.uf;
                vt_tri_tab_reg_c175(i)(j)(k).chassi_veic   := rec_c175.chassi_veic;
                --
              end loop;
              --
            end if;
            --
            vn_fase := 44;
            --
            -- Monta o REGISTRO C176: RESSARCIMENTO DE ICMS EM OPERAÇÕES COM SUBSTITUIÇÃO TRIBUTÁRIA (CÓDIGO 01, 55).
            if rec_c100.cod_mod in ('01', '55') and rec_c100.dm_ind_emit = 0 -- Emissão Própria
             then
              -- Somente NF de Saída e Modelos (01, 55)
              --
              vn_fase := 44.1;
              --
              k := 0;
              --
              for rec_c176 in c_c176(rec_c170.itemnf_id) loop
                exit when c_c176%notfound or(c_c176%notfound) is null;
                --
                vn_fase := 44.2;
                --
                k := nvl(k, 0) + 1;
                --
                vt_tri_tab_reg_c176(i)(j)(k).reg                          := 'C176';
                vt_tri_tab_reg_c176(i)(j)(k).cod_mod_ult_e                := pk_csf.fkg_cod_mod_id(en_modfiscal_id => rec_c176.modfiscal_id);
                vt_tri_tab_reg_c176(i)(j)(k).num_doc_ult_e                := rec_c176.num_doc_ult_e;
                vt_tri_tab_reg_c176(i)(j)(k).ser_ult_e                    := rec_c176.ser_ult_e;
                vt_tri_tab_reg_c176(i)(j)(k).dt_ult_e                     := rec_c176.dt_ult_e;
                vt_tri_tab_reg_c176(i)(j)(k).cod_part_ult_e               := pk_csf.fkg_pessoa_cod_part(rec_c176.pessoa_id_e);
                vt_tri_tab_reg_c176(i)(j)(k).quant_ult_e                  := rec_c176.quant_ult_e;
                vt_tri_tab_reg_c176(i)(j)(k).vl_unit_ult_e                := rec_c176.vl_unit_ult_e;
                vt_tri_tab_reg_c176(i)(j)(k).vl_unit_bc_st                := rec_c176.vl_unit_bc_st;
                --
                vt_tri_tab_reg_c176(i)(j)(k).chave_nfe_ult_e              := rec_c176.chave_nfe_ult_e;
                vt_tri_tab_reg_c176(i)(j)(k).num_item_ult_e               := rec_c176.num_item_ult_e;
                vt_tri_tab_reg_c176(i)(j)(k).vl_unit_bc_icms_ult_e        := rec_c176.vl_unit_bc_icms_ult_e;
                vt_tri_tab_reg_c176(i)(j)(k).aliq_icms_ult_e              := rec_c176.aliq_icms_ult_e;
                vt_tri_tab_reg_c176(i)(j)(k).vl_unit_limite_bc_icms_ult_e := rec_c176.vl_unit_limite_bc_icms_ult_e;
                vt_tri_tab_reg_c176(i)(j)(k).vl_unit_icms_ult_e           := rec_c176.vl_unit_icms_ult_e;
                vt_tri_tab_reg_c176(i)(j)(k).aliq_st_ult_e                := rec_c176.aliq_st_ult_e;
                vt_tri_tab_reg_c176(i)(j)(k).vl_unit_res                  := rec_c176.vl_unit_res;
                vt_tri_tab_reg_c176(i)(j)(k).dm_cod_resp_ret              := rec_c176.dm_cod_resp_ret;
                vt_tri_tab_reg_c176(i)(j)(k).dm_cod_mot_res               := rec_c176.dm_cod_mot_res;
                vt_tri_tab_reg_c176(i)(j)(k).chave_nfe_ret                := rec_c176.chave_nfe_ret;
                vt_tri_tab_reg_c176(i)(j)(k).cod_part_nfe_ret             := pk_csf.fkg_pessoa_cod_part(rec_c176.pessoa_id_nfe_ret);
                vt_tri_tab_reg_c176(i)(j)(k).ser_nfe_ret                  := rec_c176.ser_nfe_ret;
                vt_tri_tab_reg_c176(i)(j)(k).num_nfe_ret                  := rec_c176.num_nfe_ret;
                vt_tri_tab_reg_c176(i)(j)(k).item_nfe_ret                 := rec_c176.item_nfe_ret;
                vt_tri_tab_reg_c176(i)(j)(k).dm_cod_da                    := rec_c176.dm_cod_da;
                vt_tri_tab_reg_c176(i)(j)(k).num_da                       := rec_c176.num_da;
                ---
                if gt_row_abertura_efd.dt_fim >= to_date('01/01/2019', 'dd/mm/rrrr') then
                  ---
                  vt_tri_tab_reg_c176(i)(j)(k).vl_unit_res_fcp_st := rec_c176.vl_unit_res_fcp_st;
                  ---
                end if;
                ---
                vn_fase := 44.3;
                --
                -- Monta arquivo auxiliar
                if nvl(rec_c176.pessoa_id_e, 0) > 0 then
                  --
                  vn_fase := 44.4;
                  --
                  pkb_monta_reg_0150(en_pessoa_id => rec_c176.pessoa_id_e);
                  --
                end if;
                --
                vn_fase := 44.5;
                --
                if nvl(rec_c176.pessoa_id_nfe_ret, 0) > 0 then
                  --
                  pkb_monta_reg_0150(en_pessoa_id => rec_c176.pessoa_id_nfe_ret);
                  --
                end if;
                --
              end loop;
              --
            end if;
            --
            vn_fase := 45;
            --
            -- Monta o REGISTRO C177: OPERAÇÕES COM PRODUTOS SUJEITOS A SELO DE CONTROLE IPI
            if rec_c100.dm_ind_oper = 1 then -- Somente NF de Saída
              --
              vn_fase := 45.1;
              --
              k := 0;
              --
              /*Até a data 31/12/2018, será utilizado o selo IPI*/
              if gt_row_abertura_efd.dt_fim <= to_date('31/12/2018', 'dd/mm/rrrr') then
                --
                for rec_c177 in c_c177(rec_c170.itemnf_id) loop
                  exit when c_c177%notfound or(c_c177%notfound) is null;
                  --
                  vn_fase := 45.2;
                  --
                  k := nvl(k, 0) + 1;
                  --
                  vt_tri_tab_reg_c177(i)(j)(k).reg          := 'C177';
                  vt_tri_tab_reg_c177(i)(j)(k).cod_selo_ipi := rec_c177.cod_selo_ipi;
                  vt_tri_tab_reg_c177(i)(j)(k).qt_selo_ipi  := rec_c177.qt_selo_ipi;
                  --
                end loop;
                --
              --#68509 descomentado o cursor q sera usado.
              else
                --
                /*A partir de 01/01/2019,será considerado o código da informação adicional de acordo com tabela
                a ser publicada pelas SEFAZ (tab. COD_OCOR_AJ_ICMS).*/
                --
                for rec_c177_sefaz in c_c177_sefaz(rec_c170.itemnf_id
                                                  ,rec_c100.uf_ibge_emit ) loop
                  exit when c_c177_sefaz%notfound or(c_c177_sefaz%notfound) is null;
                  --
                  vn_fase := 45.3;
                  --
                  k := nvl(k, 0) + 1;
                  --
                  vt_tri_tab_reg_c177(i)(j)(k).reg          := 'C177';
                  vt_tri_tab_reg_c177(i)(j)(k).cod_inf_item := rec_c177_sefaz.cod_inf_item;
                  --
                end loop;
                --
              end if;
              --
            end if;
            --
            vn_fase := 46;
            --
            -- Monta o REGISTRO C178: OPERAÇÕES COM PRODUTOS SUJEITOS À TRIBUTAÇÀO DE IPI POR UNIDADE OU QUANTIDADE DE PRODUTO
            if rec_c100.dm_ind_oper = 1 then -- Somente NF de Saída
              --
              vn_fase := 46.1;
              --
              k := 0;
              --
              for rec_c178 in c_c178(rec_c170.itemnf_id) loop
                exit when c_c178%notfound or(c_c178%notfound) is null;
                --
                vn_fase := 46.2;
                --
                k := nvl(k, 0) + 1;
                --
                vt_tri_tab_reg_c178(i)(j)(k).reg       := 'C178';
                vt_tri_tab_reg_c178(i)(j)(k).cl_enq    := rec_c178.cl_enq;
                vt_tri_tab_reg_c178(i)(j)(k).vl_unid   := rec_c178.vl_unid;
                vt_tri_tab_reg_c178(i)(j)(k).quant_pad := rec_c178.quant_pad;
                --
              end loop;
              --
            end if;
            --
            vn_fase := 47;
            --
            -- Monta o REGISTRO C179: INFORMAÇÕES COMPLEMENTARES ST (CÓDIGO 01)
            if rec_c100.dm_ind_oper = 1 then -- Somente NF de Saída
              --
              vn_fase := 47.1;
              --
              k := 0;
              --
              for rec_c179 in c_c179(rec_c170.itemnf_id) loop
                exit when c_c179%notfound or(c_c179%notfound) is null;
                --
                vn_fase := 47.2;
                --
                k := nvl(k, 0) + 1;
                --
                vt_tri_tab_reg_c179(i)(j)(k).reg             := 'C179';
                vt_tri_tab_reg_c179(i)(j)(k).bc_st_orig_dest := rec_c179.bc_st_orig_dest;
                vt_tri_tab_reg_c179(i)(j)(k).icms_st_rep     := rec_c179.icms_st_rep;
                vt_tri_tab_reg_c179(i)(j)(k).icms_st_compl   := rec_c179.icms_st_compl;
                vt_tri_tab_reg_c179(i)(j)(k).bc_ret          := rec_c179.bc_ret;
                vt_tri_tab_reg_c179(i)(j)(k).icms_ret        := rec_c179.icms_ret;
                --
              end loop;
              --
            end if;
            --
          end loop; -- c_c100
          --
          vn_fase := 47.3;
          --
          if gn_versao >= 112 then
            --
            if nvl(vt_bi_tab_reg_c170(i).count, 0) > 0 and vn_tot_icms_c170 = 0 then
              --
              /*Caso os valores de ICMS somados no registro C170 forem iguais a zero, os valores de icms serão zerados a fim de evitar criticas no PVA.*/
              vt_tab_reg_c100(i).vl_bc_icms := 0;
              vt_tab_reg_c100(i).vl_icms    := 0;
              --
            end if;
            --
          end if;
          --
          vn_fase := 47.4;
          --
          if gn_versao >= 112 then
            --
            if nvl(vt_bi_tab_reg_c170(i).count, 0) > 0 and vn_tot_ipi_c170 = 0 and rec_c100.cod_mod <> '65' then
              --
              /*Caso os valores de IPI somados no registro C190 forem iguais a zero, os valores de ipi serão zerados a fim de evitar criticas no PVA.*/
              vt_tab_reg_c100(i).vl_ipi := 0;
              --
            end if;
            --
          end if;
          --
        end if; -- rec_c100.dm_ind_emit = 0 and rec_c100.cod_mod = '55'
        --
      end if; -- rec_c100.cod_mod <> '65'
      --
      vn_fase := 48;
      --
      j := 0;
      --
      if gn_versao >= 112 then
        --
        vn_tot_icms_c190 := 0;
        vn_tot_ipi_c190  := 0;
        --
      end if;
      --
      vn_exist_c190 := 0;
      --
      -- Monta o REGISTRO C190: REGISTRO ANALÍTICO DO DOCUMENTO (CÓDIGO 01, 1B, 04, 55 E 65).
      for rec_c190 in c_c190(rec_c100.notafiscal_id) loop
        exit when c_c190%notfound or(c_c190%notfound) is null;
        --
        vn_fase := 48.1;
        --
        j := nvl(j, 0) + 1;
        --
        vn_exist_c190 := 1;
        --
        vt_bi_tab_reg_c190(i)(j).reg := 'C190';
        --
        vt_bi_tab_reg_c190(i)(j).cst_icms := rec_c190.cst_icms;
        --
        vn_fase := 48.2;
        --
        if rec_c100.cod_mod = '65' then -- Nota fiscal de consumidor final
          --
          vn_fase := 48.3;
          --
          if substr(pk_csf.fkg_cfop_cd(en_cfop_id => rec_c190.cfop_id), 1, 1) = 5 then -- somente CFOP com início 5
            --
            vn_fase := 48.4;
            --
            vt_bi_tab_reg_c190(i)(j).cfop := pk_csf.fkg_cfop_cd(en_cfop_id => rec_c190.cfop_id);
            --
          else
            --
            vn_fase := 48.5;
            --
            vt_bi_tab_reg_c190(i)(j).cfop := null;
          end if;
          --
        else
          -- rec_c100.cod_mod <> '65'
          --
          vn_fase := 48.6;
          --
          vt_bi_tab_reg_c190(i)(j).cfop := pk_csf.fkg_cfop_cd(en_cfop_id => rec_c190.cfop_id);
          --
        end if; -- rec_c100.cod_mod = '65'
        --
        vn_fase := 48.7;
        --
        --if gt_row_abertura_efd.dt_fim <= to_date('31/12/2018','dd/mm/rrrr') then -- Prazo para mudança do leiaute - nova definição deverá ser efetuada
        -- azoni if comentado.
    /*
    -- Comentado - Luis Marques #67669 - Valor somando no cursor C191   
        if gt_row_abertura_efd.dt_fim >= to_date('01/08/2018', 'dd/mm/rrrr') then
          -- Nova definição efetuada
          -- Recuperar o valor do FCP/ICMS/ICMS-ST de acordo com os vlrs agrupados do registro analítico: notafiscal_id, codst_id, cfop_id, aliq_icms, dm_orig_merc
          /*begin
             select nvl(sum(nvl(ii.vl_fcp,0)),0)
                  , min(ii.aliq_fcp)
               into vn_vl_fcp
                  , vn_aliq_fcp_icms
               from TMP_ITEM_NOTA_FISCAL inf
                  , TMP_IMP_ITEMNF       ii
                  , tipo_imposto     ti
              where inf.notafiscal_id = rec_c100.notafiscal_id
                and inf.cfop_id       = rec_c190.cfop_id
                and inf.orig          = rec_c190.dm_orig_merc
                and ii.itemnf_id      = inf.id
                and ii.dm_tipo        = 0 -- Imposto
                --azoni
                and nvl(ii.aliq_fcp,0) = nvl(rec_c190.aliq_fcp_icms,0)
                --
                and ii.aliq_apli      = rec_c190.aliq_icms
                and ii.codst_id       = rec_c190.codst_id
                and ti.id             = ii.tipoimp_id
                and ti.cd             = 1; -- ICMS
          exception
             when others then
                vn_vl_fcp        := 0;
                vn_aliq_fcp_icms := 0;
          end;
          --
          begin
            select nvl(sum(nvl(it.vl_fcp, 0)), 0)
              into vn_vl_fcp_st
              from tmp_item_nota_fiscal inf,
                   tmp_imp_itemnf       ii,
                   tipo_imposto         ti,
                   tmp_imp_itemnf       it,
                   tipo_imposto         tm
             where inf.notafiscal_id   = rec_c100.notafiscal_id
               and inf.cfop_id         = rec_c190.cfop_id
               and inf.orig            = rec_c190.dm_orig_merc
              --azoni
               and nvl(ii.aliq_fcp, 0) = nvl(rec_c190.aliq_fcp_icms, 0)
               and ii.itemnf_id        = inf.id
               and ii.dm_tipo          = 0 -- Imposto
               and ii.aliq_apli        = rec_c190.aliq_icms
               and ii.codst_id         = rec_c190.codst_id
               and ti.id               = ii.tipoimp_id
               and ti.cd               = 1 -- ICMS
               and it.itemnf_id        = inf.id
               and it.dm_tipo          = 0 -- Imposto
               and tm.id               = it.tipoimp_id
               and tm.cd               = 2; -- ST
          exception
            when others then
              vn_vl_fcp_st := 0;
          end;
          --
        else
          --
          vn_vl_fcp        := 0;
          vn_aliq_fcp_icms := 0;
          vn_vl_fcp_st     := 0;
          --
        end if;  */
        --
        vn_fase := 48.8;
        --
        vt_bi_tab_reg_c190(i)(j).vl_opr := rec_c190.vl_opr;
        --
        --vt_bi_tab_reg_c190(i)(j).vl_opr := rec_c190.vl_opr + rec_c190.vl_fcp_st;
        --
        if (rec_c190.cfop_cd in (1556, 3556, 5602, 5605, 5929, 6602, 6929) and
           vt_bi_tab_reg_c190(i)(j).vl_icms > 0) then
          vt_bi_tab_reg_c190(i)(j).aliq_icms := 0;
          vt_bi_tab_reg_c190(i)(j).vl_bc_icms := 0;
          vt_bi_tab_reg_c190(i)(j).vl_icms := 0;
          --  vt_bi_tab_reg_c190(i)(j).cst_icms   := rec_c190.dm_orig_merc||'90'; --ajuste feito no cursor
        else
          --
          --vt_bi_tab_reg_c190(i)(j).aliq_icms := nvl(rec_c190.aliq_icms,0) + nvl(vn_aliq_fcp_icms,0); -- AZONI
          vt_bi_tab_reg_c190(i)(j).aliq_icms := nvl(rec_c190.aliq_icms, 0);
          --
          vt_bi_tab_reg_c190(i)(j).vl_bc_icms := nvl(rec_c190.vl_bc_icms, 0);
          --
          --vt_bi_tab_reg_c190(i)(j).vl_icms   := nvl(rec_c190.vl_icms,0) + nvl(vn_vl_fcp,0);--AZONI
          vt_bi_tab_reg_c190(i)(j).vl_icms := nvl(rec_c190.vl_icms, 0);
          --
          if gn_versao >= 112 then
            ----
            /*Esta variavel permite acumular o valor de ICMS a fim ajustar o valor de icms no registro C100*/
            vn_tot_icms_c190 := vn_tot_icms_c190 + nvl(rec_c190.vl_icms, 0);
            --
          end if;
          --
        end if;
        --
        vn_fase := 48.8;
        --
        if rec_c100.cod_mod = '65' then -- Nota fiscal de consumidor final
          --
          vn_fase := 48.9;
          vt_bi_tab_reg_c190(i)(j).vl_bc_icms_st := 0;
          vt_bi_tab_reg_c190(i)(j).vl_icms_st    := 0;
          vt_bi_tab_reg_c190(i)(j).vl_red_bc     := rec_c190.vl_red_bc;
          vt_bi_tab_reg_c190(i)(j).vl_ipi        := 0;
          --
        else
          -- rec_c100.cod_mod <> '65'
          --
          vn_fase := 48.10;
          --
          vt_bi_tab_reg_c190(i)(j).vl_bc_icms_st := rec_c190.vl_bc_icms_st;
          --
          vt_bi_tab_reg_c190(i)(j).vl_icms_st := rec_c190.vl_icms_st;
          --vt_bi_tab_reg_c190(i)(j).vl_icms_st    := rec_c190.vl_icms_st + nvl(vn_vl_fcp_st,0);--AZONI
          --
          vt_bi_tab_reg_c190(i)(j).vl_red_bc := rec_c190.vl_red_bc;
          --
          if gn_versao >= 112 then
            --
            if rec_c190.cfop_cd not in (3551) then
              --
              vt_bi_tab_reg_c190(i)(j).vl_ipi := rec_c190.vl_ipi;
              ---
              /*Esta variavel permite acumular o valor de IPI a fim ajustar o valor de icms no registro C100*/
              vn_tot_ipi_c190 := vn_tot_ipi_c190 + rec_c190.vl_ipi;
              --
            else
              --
              vt_bi_tab_reg_c190(i)(j).vl_ipi := 0;
              --
              /*Esta variavel permite acumular o valor de IPI a fim ajustar o valor de icms no registro C100*/
              vn_tot_ipi_c190 := vn_tot_ipi_c190 + 0;
              --
            end if;
            --
          else
            --
            vt_bi_tab_reg_c190(i)(j).vl_ipi := rec_c190.vl_ipi;
            --
          end if;
          --
        end if;
        --
        vn_fase := 48.11;
        --
        vt_bi_tab_reg_c190(i)(j).cod_obs := pk_csf.fkg_cd_obs_lancto_fiscal(rec_c190.obslanctofiscal_id);
        --
        vn_fase := 48.12;
        --
        -- Monta arquivo auxiliar 0460
        if nvl(rec_c190.obslanctofiscal_id, 0) > 0 then
          --
          vn_fase := 48.13;
          pkb_monta_reg_0460(en_obslanctofiscal_id => rec_c190.obslanctofiscal_id);
          --
        end if;
        --
        vn_fase := 48.14;
        --
        -- C191: INFORMAÇÕES DO FUNDO DE COMBATE À POBREZA - FCP - NA NFe (CÓDIGO 55)
        /*if rec_c100.cod_mod ='55' and gt_row_abertura_efd.dt_fim >= to_date('01/01/2019','dd/mm/rrrr') then
           --
           vn_fase := 48.15;
           vt_tri_tab_reg_c191(i)(j)(1).reg := 'C191';
           --
           if substr(rec_c190.cst_icms,2,3) in ('00' , '10', '20', '51', '70', '90') then -- VL_FCP_OP = valor x00,x10,x20,x51,x70 ou x90.
              vt_tri_tab_reg_c191(i)(j)(1).vl_fcp_op := nvl(vn_vl_fcp,0);
           else
              vt_tri_tab_reg_c191(i)(j)(1).vl_fcp_op := 0;
           end if;
           --
           if substr(rec_c190.cst_icms,2,3) in ('10', '30', '70', '90') or -- VL_FCP_ST = valor x10, x30, x70, x90
              rec_c190.cst_icms in ('201', '202', '203', '900') then -- VL_FCP_ST = valor 201, 202, 203 ou 900.
              --vt_tri_tab_reg_c191(i)(j)(1).vl_fcp_st := nvl(vn_vl_fcp,0) + nvl(vn_vl_fcp_st,0);
              vt_tri_tab_reg_c191(i)(j)(1).vl_fcp_st := nvl(vn_vl_fcp_st,0);
           else
              vt_tri_tab_reg_c191(i)(j)(1).vl_fcp_st := 0;
           end if;
           --
           if substr(rec_c190.cst_icms,2,3) in ('60') or -- VL_FCP_RET = valor x60
              rec_c190.cst_icms in ('500') then -- VL_FCP_RET = valor 500
              --vt_tri_tab_reg_c191(i)(j)(1).vl_fcp_ret := nvl(vn_vl_fcp,0) + nvl(vn_vl_fcp_st,0);
              vt_tri_tab_reg_c191(i)(j)(1).vl_fcp_ret := nvl(vn_vl_fcp_st,0);
           else
              vt_tri_tab_reg_c191(i)(j)(1).vl_fcp_ret := 0;
           end if;
           --
        end if;*/ -- final registro C191
        --  
        if nvl(vn_antecipacao_credito_icms, 0) = 1 then
          --
          vn_fase := 48.151;
          -- 
          vt_bi_tab_reg_c190(i)(j).vl_bc_icms := 0;
          vt_bi_tab_reg_c190(i)(j).vl_icms    := 0;
          vn_tot_icms_c190                    := 0;
          --
        end if;
        --
        if gt_row_abertura_efd.dt_fim >= to_date('01/01/2019', 'dd/mm/rrrr') then
          ---
          if rec_c100.cod_mod = '55' then 
            --
            for rec_c190_aux in c_c190_aux(rec_c100.notafiscal_id) loop
              exit when c_c190_aux%notfound or(c_c190_aux%notfound) is null;
              --        
              if rec_c190_aux.codst_id     = rec_c190.codst_id     and
                 rec_c190_aux.dm_orig_merc = rec_c190.dm_orig_merc and
                 rec_c190_aux.cst_icms     = rec_c190.cst_icms     and
                 rec_c190_aux.cfop_id      = rec_c190.cfop_id      and
                 rec_c190_aux.cfop_cd      = rec_c190.cfop_cd      and
                 rec_c190_aux.aliq_icms    = rec_c190.aliq_icms    then
                 --     
                 for rec_c191 in c_c191(rec_c190_aux.id) loop
                   exit when c_c191%notfound or(c_c191%notfound) is null;
                   --
                   vn_fase := 49.9;

                   if (nvl(rec_c191.vl_fcp_op, 0) > 0 or
                      nvl(rec_c191.vl_fcp_st, 0) > 0 or
                      nvl(rec_c191.vl_fcp_ret, 0) > 0) then
                     --
                     vt_tri_tab_reg_c191(i)(j)(1).reg        := 'C191';
                     vt_tri_tab_reg_c191(i)(j)(1).vl_fcp_op  := nvl(vt_tri_tab_reg_c191(i)(j)(1).vl_fcp_op,0)  + rec_c191.vl_fcp_op;
                     vt_tri_tab_reg_c191(i)(j)(1).vl_fcp_st  := nvl(vt_tri_tab_reg_c191(i)(j)(1).vl_fcp_st,0)  + rec_c191.vl_fcp_st;
                     vt_tri_tab_reg_c191(i)(j)(1).vl_fcp_ret := nvl(vt_tri_tab_reg_c191(i)(j)(1).vl_fcp_ret,0) + rec_c191.vl_fcp_ret;
                     --
                   end if;
                   --
                 end loop;
                 --
              end if;
              --
            end loop; 
            ---
          end if;
          ---
        end if;
      --      
      end loop; -- c_c190
      --
      vn_fase := 48.16;
      --
      -- Verifica se a nota é conjugada  
      begin
        select count(*)
          into vn_nf_conjugada
          from nf_compl_serv n
         where n.notafiscal_id = rec_c100.notafiscal_id;
      exception
        when others then
          vn_nf_conjugada := 0;
      end;
      --
      if gn_versao >= 112 then
        --
        vn_fase := 48.17;
        --
        if rec_c100.sitdocto_id not in (3, 4, 6) then -- 3-Documento cancelado / 4-Documento cancelado extemporâneo / 6-NF-e ou CT-e é Numeração inutilizada
          --
          vn_fase := 48.18;
          --     
          -- Se for 1 não gera informação de registro analítico (C190) 
          -- para nota conjugada
          if nvl(vn_nf_conjugada, 0) = 0 then
            --
            vn_fase := 48.19;
            --  
            if nvl(vn_exist_c190, 0) > 0 then
              --
              vn_fase := 48.20;
              --
              begin
                if nvl(vt_bi_tab_reg_c190(i).count, 0) > 0 and vn_tot_icms_c190 = 0 then
                  --
                  vn_fase := 48.21;
                  --
                  /*Caso os valores de ICMS somados no registro C190 forem iguais a zero, os valores de icms serão zerados a fim de evitar criticas no PVA.*/
                  vt_tab_reg_c100(i).vl_bc_icms := 0;
                  vt_tab_reg_c100(i).vl_icms    := 0;
                  --
                end if;
              exception
                when no_data_found then
                  vt_tab_reg_c100(i).vl_bc_icms := 0;
                  vt_tab_reg_c100(i).vl_icms := 0;
                when others then
                  gv_mensagem_log := 'Erro na pkb_monta_reg_C100 fase(' || vn_fase || '): ' || sqlerrm;
                  --
                  declare
                    vn_loggenerico_id Log_Generico.id%TYPE;
                  begin
                    --
                    pk_log_generico.pkb_log_generico(sn_loggenerico_id => vn_loggenerico_id,
                                                     ev_mensagem       => gv_mensagem_log,
                                                     ev_resumo         => gv_mensagem_log,
                                                     en_tipo_log       => erro_de_sistema,
                                                     en_referencia_id  => gt_row_abertura_efd.id,
                                                     ev_obj_referencia => 'ABERTURA_EFD');
                    --
                  exception
                    when others then
                      null;
                  end;
              end;
              --
              begin
                if nvl(vt_bi_tab_reg_c190(i).count, 0) > 0 and vn_tot_ipi_c190 = 0 then
                  --
                  vn_fase := 48.22;
                  --
                  /*Caso os valores de IPI somados no registro C190 forem iguais a zero, os valores de ipi serão zerados a fim de evitar criticas no PVA.*/
                  vt_tab_reg_c100(i).vl_ipi := 0;
                  --
                end if;
              exception
                when no_data_found then
                  vt_tab_reg_c100(i).vl_bc_icms := 0;
                  vt_tab_reg_c100(i).vl_icms    := 0;
                when others then
                  gv_mensagem_log := 'Erro na pkb_monta_reg_C100 fase(' || vn_fase || '): ' || sqlerrm;
                  --
                  declare
                    vn_loggenerico_id Log_Generico.id%TYPE;
                  begin
                    --
                    pk_log_generico.pkb_log_generico(sn_loggenerico_id => vn_loggenerico_id,
                                                     ev_mensagem       => gv_mensagem_log,
                                                     ev_resumo         => gv_mensagem_log,
                                                     en_tipo_log       => erro_de_sistema,
                                                     en_referencia_id  => gt_row_abertura_efd.id,
                                                     ev_obj_referencia => 'ABERTURA_EFD');
                    --
                  exception
                    when others then
                      null;
                  end;
              end;
              --
              vn_exist_c190 := 0;
              --
            else
              --
              vn_fase := 48.23;
              --
              gn_error_block := 1;
              --
              gv_mensagem_log := 'Não foi localizado o registro analítico (C190) para a nota fiscal ' || rec_c100.nro_nf || '.(' || vn_fase || '): ' || sqlerrm;
              --
              declare
                vn_loggenerico_id Log_Generico.id%TYPE;
              begin
                pk_log_generico.pkb_log_generico(sn_loggenerico_id => vn_loggenerico_id,
                                                 ev_mensagem       => gv_mensagem_log,
                                                 ev_resumo         => gv_mensagem_log,
                                                 en_tipo_log       => erro_de_sistema,
                                                 en_referencia_id  => gt_row_abertura_efd.id,
                                                 ev_obj_referencia => 'ABERTURA_EFD');
              exception
                when others then
                  null;
              end;
              --
            end if;
            --
          end if;
          --
        end if;
        --
      end if;
      --
      vn_fase := 49;
      --
      -- Monta o REGISTRO C190: REGISTRO ANALÍTICO DO DOCUMENTO (CÓDIGO 01, 1B, 04, 55 E 65) - de itens de serviço que não possuem C190
      for rec_sem_c190 in c_sem_c190(rec_c100.notafiscal_id) loop
        exit when c_sem_c190%notfound or(c_sem_c190%notfound) is null;
        --
        vn_fase := 49.1;
        --
        j := nvl(j, 0) + 1;
        --
        vt_bi_tab_reg_c190(i)(j).reg      := 'C190';
        vt_bi_tab_reg_c190(i)(j).cst_icms := ('0' || pk_csf.fkg_cod_st_cod(en_id_st => pk_csf.fkg_cod_st_id(ev_cod_st     => '40',
                                                                                                     en_tipoimp_id => pk_csf.fkg_tipo_imposto_id(en_cd => 1))));
        --
        vn_fase := 49.2;
        --
        if rec_c100.cod_mod = '65' then
          --
          vn_fase := 49.3;
          --
          if substr(pk_csf.fkg_cfop_cd(en_cfop_id => rec_sem_c190.cfop_id), 1, 1) = 5 then -- Somente CFOP com início 5
            --
            vn_fase := 49.4;
            --
            vt_bi_tab_reg_c190(i)(j).cfop := pk_csf.fkg_cfop_cd(en_cfop_id => rec_sem_c190.cfop_id);
            --
          else
            --
            vn_fase := 49.5;
            --
            vt_bi_tab_reg_c190(i)(j).cfop := null;
          end if;
          --
        else
          -- rec_c100.cod_mod <> '65'
          --
          vn_fase := 49.6;
          --
          vt_bi_tab_reg_c190(i)(j).cfop := pk_csf.fkg_cfop_cd(en_cfop_id => rec_sem_c190.cfop_id);
          --
        end if; -- rec_c100.cod_mod = '65'
        --
        vn_fase := 49.7;
        --
        vt_bi_tab_reg_c190(i)(j).aliq_icms     := 0;
        vt_bi_tab_reg_c190(i)(j).vl_opr        := rec_sem_c190.vl_opr;
        vt_bi_tab_reg_c190(i)(j).vl_bc_icms    := 0;
        vt_bi_tab_reg_c190(i)(j).vl_icms       := 0;
        vt_bi_tab_reg_c190(i)(j).vl_bc_icms_st := 0;
        vt_bi_tab_reg_c190(i)(j).vl_icms_st    := 0;
        vt_bi_tab_reg_c190(i)(j).vl_red_bc     := 0;
        vt_bi_tab_reg_c190(i)(j).vl_ipi        := 0;
        vt_bi_tab_reg_c190(i)(j).cod_obs       := null;
        --
        vn_fase := 49.8;
        --
        -- Monta arquivo auxiliar 0460 - não gerar
      end loop; -- c_c190 de itens de serviço que não possuem C190
      --
      -- O processo deve estar no nível abaixo do registro C190, e os valores recuperados dos impostos através do registro analítico
      -- C191: INFORMAÇÕES DO FUNDO DE COMBATE À POBREZA - FCP - NA NFe (CÓDIGO 55)
      /*if gt_row_abertura_efd.dt_fim >= to_date('01/01/2019','dd/mm/rrrr') then
        ---
        if rec_c100.cod_mod ='55' then
          --
          for rec_c191 in c_c191( rec_c100.notafiscal_id ) loop
             exit when c_c191%notfound or (c_c191%notfound) is null;
             --
             vn_fase := 49.9;
             --j := nvl(k, 0) + 1;
             --
             vt_tri_tab_reg_c191(i)(j)(1).reg        := 'C191';
             vt_tri_tab_reg_c191(i)(j)(1).vl_fcp_op  := rec_c191.vl_fcp_op;
             vt_tri_tab_reg_c191(i)(j)(1).vl_fcp_st  := rec_c191.vl_fcp_st;
             vt_tri_tab_reg_c191(i)(j)(1).vl_fcp_ret := rec_c191.vl_fcp_ret;
             --
          end loop;
          ---
        end if;
        ---
      end if;*/
      --
      --
      if rec_c100.cod_mod in ('65') then -- Nota fiscal de consumidor final
        --
        vn_fase := 49.9;
        --
        vt_tab_reg_c100(i).cod_part      := null;
        vt_tab_reg_c100(i).vl_bc_icms_st := null;
        vt_tab_reg_c100(i).vl_icms_st    := null;
        vt_tab_reg_c100(i).vl_ipi        := null;
        vt_tab_reg_c100(i).vl_pis        := null;
        vt_tab_reg_c100(i).vl_cofins     := null;
        vt_tab_reg_c100(i).vl_pis_st     := null;
        vt_tab_reg_c100(i).vl_cofins_st  := null;
        --
      end if;
      --
      vn_fase := 50;
      --
      j := 0;
      --
      -- NOVO TÍTULO: REGISTRO C195: OBSERVAÇOES DO LANÇAMENTO FISCAL (CÓDIGO 01, 1B, 04 E 55)
      -- Monta o REGISTRO C195: OBSERVAÇOES DO LANÇAMENTO FISCAL (CÓDIGO 01, 1B E 55)
      if rec_c100.cod_mod in ('01', '1B', '04', '55') then
        --
        vn_fase := 50.1;
        --
        for rec_c195 in c_c195(rec_c100.notafiscal_id) loop
          exit when c_c195%notfound or(c_c195%notfound) is null;
          --
          vn_fase := 50.2;
          --
          j := nvl(j, 0) + 1;
          --
          vt_bi_tab_reg_c195(i)(j).reg       := 'C195';
          vt_bi_tab_reg_c195(i)(j).cod_obs   := pk_csf.fkg_cd_obs_lancto_fiscal(rec_c195.obslanctofiscal_id);
          vt_bi_tab_reg_c195(i)(j).txt_compl := pk_csf.fkg_converte(rec_c195.txt_compl);
          --
          vn_fase := 50.3;
          --
          -- Monta arquivo auxiliar 0460
          if nvl(rec_c195.obslanctofiscal_id, 0) > 0 then
            --
            vn_fase := 50.4;
            --
            pkb_monta_reg_0460(en_obslanctofiscal_id => rec_c195.obslanctofiscal_id);
            --
          end if;
          --
          vn_fase := 50.5;
          --
          k := 0;
          --
          -- Monta o REGISTRO C197: OUTRAS OBRIGAÇÕES TRIBUTÁRIAS, AJUSTES E INFORMAÇÕES DE VALORES PROVENIENTES DE DOCUMENTO FISCAL
          for rec_c197 in c_c197(rec_c195.nfinforfisc_id) loop
            exit when c_c197%notfound or(c_c197%notfound) is null;
            --
            vn_fase := 50.6;
            --
      if nvl(rec_c197.vl_icms, 0) > 0 or nvl(rec_c197.vl_outros, 0) > 0 or nvl(rec_c197.aliq_icms,0) > 0 then
              --
              k := nvl(k, 0) + 1;
              --
              vt_tri_tab_reg_c197(i)(j)(k).reg            := 'C197';
              vt_tri_tab_reg_c197(i)(j)(k).cod_aj         := rec_c197.cod_aj;
              vt_tri_tab_reg_c197(i)(j)(k).descr_compl_aj := pk_csf.fkg_converte(rec_c197.descr_compl_aj);
              vt_tri_tab_reg_c197(i)(j)(k).cod_item       := rec_c197.cod_item;
              vt_tri_tab_reg_c197(i)(j)(k).vl_bc_icms     := rec_c197.vl_bc_icms;
              vt_tri_tab_reg_c197(i)(j)(k).aliq_icms      := rec_c197.aliq_icms;
              vt_tri_tab_reg_c197(i)(j)(k).vl_icms        := rec_c197.vl_icms;
              vt_tri_tab_reg_c197(i)(j)(k).vl_outros      := rec_c197.vl_outros;
              --
              vn_fase := 50.7;
              --
              -- Monta arquivo auxiliar produto
              if nvl(rec_c197.item_id, 0) > 0 then
                --
                vn_fase := 50.8;
                --
                pkb_monta_reg_0200(en_item_id => rec_c197.item_id);
                --
              end if;
              --
            end if;
            --
          end loop;
          --
        end loop;
        --
      end if; -- rec_c100.cod_mod in ('01', '1B', '55')
      --
    end if; -- vv_cod_sit not in ('02', '03', '04', '05')
  --  
  end loop; -- rec_c100
  --
exception
  when others then
    --
    gv_mensagem_log := 'Erro na pkb_monta_reg_C100 fase(' || vn_fase || '): ' || sqlerrm;
    --
    declare
      vn_loggenerico_id log_generico.id%type;
    begin
      --
      pk_log_generico.pkb_log_generico(sn_loggenerico_id => vn_loggenerico_id,
                                       ev_mensagem       => gv_mensagem_log,
                                       ev_resumo         => gv_mensagem_log,
                                       en_tipo_log       => erro_de_sistema,
                                       en_referencia_id  => gt_row_abertura_efd.id,
                                       ev_obj_referencia => 'ABERTURA_EFD');
      --
    exception
      when others then
        null;
    end;
    --
    raise_application_error(-20101, gv_mensagem_log);
    --
end pkb_monta_reg_C100;
-------------------------------------------------------------------------------------------------------

-- monta o REGISTRO C001: ABERTURA DO BLOCO C
procedure pkb_monta_reg_C001
is
   --
begin
   --
   vt_tab_reg_c001(1).reg := 'C001';
   --
   if nvl(vt_tab_reg_c100.count,0) > 0
      or nvl(vt_tab_reg_c300.count,0) > 0
      or nvl(vt_tab_reg_c350.count,0) > 0
      or nvl(vt_tab_reg_c400.count,0) > 0
      or nvl(vt_tab_reg_c495.count,0) > 0
      or nvl(vt_tab_reg_c500.count,0) > 0
      or nvl(vt_tab_reg_c600.count,0) > 0
      or nvl(vt_tab_reg_c700.count,0) > 0
      or nvl(vt_tab_reg_c800.count,0) > 0
      or nvl(vt_tab_reg_c860.count,0) > 0
      then
      --
      vt_tab_reg_c001(1).ind_mov := 0;
      --
   else
      --
      vt_tab_reg_c001(1).ind_mov := 1;
      --
   end if;
   --
   -- #69103
   if gt_row_abertura_efd.dm_ind_ativ = '2' then
     --
     vt_tab_reg_c001(1).ind_mov := 1;
     --
   end if;
   --
exception
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_monta_reg_C001: ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end pkb_monta_reg_C001;

-------------------------------------------------------------------------------------------------------

-- procedimento monta registros do BLOCO C: DOCUMENTOS FISCAIS I - MERCADORIAS (ICMS/IPI)
procedure pkb_monta_bloco_c
is
   --
   vn_fase  number := 0;
   --
begin
   --
   vn_fase := 1;
   --
   -- #69103
   if gt_row_abertura_efd.dm_ind_ativ <> '2' then
     --
     -- Monta o REGISTRO C100: NOTA FISCAL (CÓDIGO 01), NOTA FISCAL AVULSA (CÓDIGO 1B), NOTA FISCAL DE PRODUTOR (CÓDIGO 04) E NFE (CÓDIGO 55)
     pkb_monta_reg_C100;
     --
     vn_fase := 2;
     --
     -- Monta o REGISTRO C300: RESUMO DIÁRIO DAS NOTAS FISCAIS DE VENDA A CONSUMIDOR (CÓDIGO 02)
     pkb_monta_reg_C300;
     --
     vn_fase := 3;
     --
     -- Monta o REGISTRO C350: NOTA FISCAL DE VENDA A CONSUMIDOR (CÓDIGO 02)
     pkb_monta_reg_C350;
     --
     vn_fase := 4;
     --
     -- Monta o REGISTRO C400 - EQUIPAMENTO ECF (CÓDIGO 02 e 2D)
     pkb_monta_reg_C400;
     --
     vn_fase := 5;
     --
     if gn_versao < 107 then -- apresentar até 31/12/2013
        --
        vn_fase := 6;
        --
        -- Monta o REGISTRO C495: RESUMO MENSAL DE ITENS DO ECF POR ESTABELECIMENTO (CÓDIGO 02 e 2D)
        pkb_monta_reg_C495;
        --
     end if;
     --
     vn_fase := 7;
     --
     -- NOVO TÍTULO: REGISTRO C500: NOTA FISCAL/CONTA DE ENERGIA ELÉTRICA (CÓDIGO 06), NOTA FISCAL/CONTA DE FORNECIMENTO D'ÁGUA CANALIZADA (CÓDIGO 29) E
     -- NOTA FISCAL CONSUMO FORNECIMENTO DE GÁS (CÓDIGO 28)
     -- Monta o REGISTRO C500: NOTA FISCAL/CONTA DE ENERGIA ELÉTRICA (CÓDIGO 06) E NOTA FISCAL CONSUMO FORNECIMENTO DE GÁS (CÓDIGO 28).
     pkb_monta_reg_C500;
     --
     vn_fase := 8;
     --
     -- Monta o REGISTRO C600: CONSOLIDAÇÃO DIÁRIA NF modelos 06, 28, 29 - (EMPRESAS NÃO OBRIGADAS AO CONVÊNIO ICMS 115/03)
     pkb_monta_reg_C600;
     --
     vn_fase := 9;
     --
     -- Monta o REGISTRO C700: CONSOLIDAÇÃO DOS DOCUMENTOS NF modelos 06, 28, 29 - (EMPRESAS OBRIGADAS AO CONVÊNIO ICMS 115/03)
     pkb_monta_reg_C700;
     --
     vn_fase := 10;
     --
     if gv_dm_ind_perfil = 'A' then
        --
        vn_fase := 11;
        --
        -- Monta o REGISTRO C800: CUPOM FISCAL ELETRÔNICO - SAT (CF-E-SAT) (CÓDIGO 59)
        pkb_monta_reg_C800;
        --
     end if;
     --
     vn_fase := 12;
     --
     if gv_dm_ind_perfil <> 'A' then
        --
        vn_fase := 13;
        --
        -- Monta o REGISTRO C860: IDENTIFICAÇÃO DO EQUIPAMENTO SAT-CF-E
        pkb_monta_reg_C860;
        --
     end if;
     --
   end if;
   --  
   vn_fase := 14;
   --
   -- Monta o REGISTRO C001: ABERTURA DO BLOCO C
   pkb_monta_reg_C001;
   --
   vn_fase := 15;
   --
   -- Monta o REGISTRO C990: ENCERRAMENTO DO BLOCO C
   pkb_monta_reg_C990;
   --
exception
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_monta_bloco_c fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end pkb_monta_bloco_c;


-------------------------------------------------------------------------------------------------------

-- Monta o REGISTRO B990: ENCERRAMENTO DO BLOCO B
procedure pkb_monta_reg_B990 (en_sigla_estado_empr estado.sigla_estado%type)
is
   --
begin
   --
   vt_tab_reg_b990(1).reg := 'B990';
   --
   if en_sigla_estado_empr ='DF' then
     --
     vt_tab_reg_b990(1).qtd_lin_b := nvl(fkg_qtde_linha_reg_b001,0)
                                   + nvl(fkg_qtde_linha_reg_b020,0)
                                   + nvl(fkg_qtde_linha_reg_b025,0)
                                   + nvl(fkg_qtde_linha_reg_b420,0)
                                   + nvl(fkg_qtde_linha_reg_b440,0)
                                   + nvl(fkg_qtde_linha_reg_b460,0)
                                   + nvl(fkg_qtde_linha_reg_b470,0)
                                   + 1; -- "1" representa o B990
     --
   else
     --
     vt_tab_reg_b990(1).qtd_lin_b := nvl(fkg_qtde_linha_reg_b001,0)
                                     + 1;-- "1" representa o B990
     --
   end if;
   --
exception
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_monta_reg_B990: ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end pkb_monta_reg_B990;

------------------------------------------------------------------------------------------------------
-- monta o REGISTRO B470 - APURAÇÃO DO ISS
procedure pkb_monta_reg_B470(en_monta_zerado  number)  -- 0-Não / 1-Sim   -- monta registro zerado
  is
  ----------------
  i               pls_integer;
  vn_fase         number := 0;
  ----------------
  cursor c_b470 is
  select
   ai.VL_CONT
  ,ai.VL_MAT_TERC
  ,ai.VL_MAT_PROP
  ,ai.VL_SUB
  ,ai.VL_ISNT
  ,ai.VL_DED_BC
  ,ai.VL_BC_ISS
  ,ai.VL_BC_ISS_RT
  ,ai.VL_ISS
  ,ai.VL_ISS_RT
  ,ai.VL_DED
  ,ai.VL_ISS_REC
  ,ai.VL_ISS_ST
  ,ai.VL_ISS_REC_UNI
  from APUR_ISS ai
  where ai.empresa_id  = gt_row_abertura_efd.empresa_id
   and ai.dt_inicio    = gt_row_abertura_efd.dt_ini
   and ai.dt_fim       = gt_row_abertura_efd.dt_fim
   and ai.dm_situacao  ='3'
   and (nvl(ai.VL_CONT,0) > 0   or nvl(ai.VL_MAT_TERC,0) > 0  or nvl(ai.VL_MAT_PROP,0) > 0 or
        nvl(ai.VL_SUB,0) > 0    or nvl(ai.VL_ISNT,0) > 0      or nvl(ai.VL_DED_BC,0) > 0   or
        nvl(ai.VL_BC_ISS,0) > 0 or nvl(ai.VL_BC_ISS_RT,0) > 0 or nvl(ai.VL_ISS,0) > 0      or
        nvl(ai.VL_ISS_RT,0) > 0 or nvl(ai.VL_DED,0) > 0       or nvl(ai.VL_ISS_REC,0) >0   or
        nvl(ai.VL_ISS_ST,0) > 0 or nvl(ai.VL_ISS_REC_UNI,0) > 0 );
 ----------------
 begin
    --
    i := 0;
    --
    vn_fase := 1;
    --
    if nvl(en_monta_zerado,0) = 0 then
       --
       for rec_b470 in c_b470 loop
         exit when c_b470%notfound or (c_b470%notfound) is null;
         --
         vn_fase := 2;
         --
         i := nvl(i,0) + 1;
         --
         vt_tab_reg_b470(i).REG           := 'B470';
         vt_tab_reg_b470(i).VL_CONT       := rec_b470.VL_CONT;
         vt_tab_reg_b470(i).VL_MAT_TERC   := rec_b470.VL_MAT_TERC;
         vt_tab_reg_b470(i).VL_MAT_PROP   := rec_b470.VL_MAT_PROP;
         vt_tab_reg_b470(i).VL_SUB        := rec_b470.VL_SUB;
         vt_tab_reg_b470(i).VL_ISNT       := rec_b470.VL_ISNT;
         vt_tab_reg_b470(i).VL_DED_BC     := rec_b470.VL_DED_BC;
         vt_tab_reg_b470(i).VL_BC_ISS     := rec_b470.VL_BC_ISS;
         vt_tab_reg_b470(i).VL_BC_ISS_RT  := rec_b470.VL_BC_ISS_RT;
         vt_tab_reg_b470(i).VL_ISS        := rec_b470.VL_ISS;
         vt_tab_reg_b470(i).VL_ISS_RT     := rec_b470.VL_ISS_RT;
         vt_tab_reg_b470(i).VL_DED        := rec_b470.VL_DED;
         vt_tab_reg_b470(i).VL_ISS_REC    := rec_b470.VL_ISS_REC;
         vt_tab_reg_b470(i).VL_ISS_ST     := rec_b470.VL_ISS_ST;
         vt_tab_reg_b470(i).VL_ISS_REC_UNI:= rec_b470.VL_ISS_REC_UNI;
         --  
       end loop;
       --
       --#69103 se nao tiver valor no selecte e dm_ind_ativ = '2' e for DF , gera zerado
       if gt_row_abertura_efd.dm_ind_ativ = '2' 
         and i = 0 then
         --
         vn_fase := 3;
         --
         i := nvl(i,0) + 1;
         --	   
         vt_tab_reg_b470(i).REG           := 'B470';
         vt_tab_reg_b470(i).VL_CONT       := 0;
         vt_tab_reg_b470(i).VL_MAT_TERC   := 0;
         vt_tab_reg_b470(i).VL_MAT_PROP   := 0;
         vt_tab_reg_b470(i).VL_SUB        := 0;
         vt_tab_reg_b470(i).VL_ISNT       := 0;
         vt_tab_reg_b470(i).VL_DED_BC     := 0;
         vt_tab_reg_b470(i).VL_BC_ISS     := 0;
         vt_tab_reg_b470(i).VL_BC_ISS_RT  := 0;
         vt_tab_reg_b470(i).VL_ISS        := 0;
         vt_tab_reg_b470(i).VL_ISS_RT     := 0;
         vt_tab_reg_b470(i).VL_DED        := 0;
         vt_tab_reg_b470(i).VL_ISS_REC    := 0;
         vt_tab_reg_b470(i).VL_ISS_ST     := 0;
         vt_tab_reg_b470(i).VL_ISS_REC_UNI:= 0;	   
         --	
       end if;
    else
       --
       vn_fase := 4;
       ---
       i := nvl(i,0) + 1;
       ---	   
       vt_tab_reg_b470(i).REG           := 'B470';
       vt_tab_reg_b470(i).VL_CONT       := 0;
       vt_tab_reg_b470(i).VL_MAT_TERC   := 0;
       vt_tab_reg_b470(i).VL_MAT_PROP   := 0;
       vt_tab_reg_b470(i).VL_SUB        := 0;
       vt_tab_reg_b470(i).VL_ISNT       := 0;
       vt_tab_reg_b470(i).VL_DED_BC     := 0;
       vt_tab_reg_b470(i).VL_BC_ISS     := 0;
       vt_tab_reg_b470(i).VL_BC_ISS_RT  := 0;
       vt_tab_reg_b470(i).VL_ISS        := 0;
       vt_tab_reg_b470(i).VL_ISS_RT     := 0;
       vt_tab_reg_b470(i).VL_DED        := 0;
       vt_tab_reg_b470(i).VL_ISS_REC    := 0;
       vt_tab_reg_b470(i).VL_ISS_ST     := 0;
       vt_tab_reg_b470(i).VL_ISS_REC_UNI:= 0;	   
       --	  
    end if;
    --	
 exception
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_monta_reg_B470: ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end pkb_monta_reg_B470;

-------------------------------------------------------------------------------------------------------
-- monta o REGISTRO B460 - DEDUÇÕES DO ISS
procedure pkb_monta_reg_B460 is
  -----
  i               pls_integer;
  vn_fase         number := 0;
  -----
  cursor c_b460 is
    select
    di.DM_IND_DED as IND_DED,
    di.vl_ded ,
    di.num_proc ,
    di.dm_ind_proc ,
    di.proc ,
    di.cod_inf_obs ,
    di.dm_ind_obr
    from APUR_ISS ai,DEDUCAO_ISS di
    where ai.id = di.apuriss_id
      and ai.empresa_id  = gt_row_abertura_efd.empresa_id
      and ai.dt_inicio   = gt_row_abertura_efd.dt_ini
      and ai.dt_fim      = gt_row_abertura_efd.dt_fim
      and ai.dm_situacao ='3'
      and di.vl_ded > 0;
 begin
    ---
    i := 0;
    vn_fase:=0;
    ---
    for rec_b460 in c_b460 loop
      exit when c_b460%notfound or (c_b460%notfound) is null;
      ---
      vn_fase:=1;
      i := nvl(i,0) + 1;
      ---
      vn_fase:=3;
      ---
      vt_tab_reg_b460(i).REG          := 'B460';
      vt_tab_reg_b460(i).IND_DED      := rec_b460.IND_DED;
      vt_tab_reg_b460(i).VL_DED       := rec_b460.vl_ded;
      vt_tab_reg_b460(i).NUM_PROC     := rec_b460.num_proc;
      vt_tab_reg_b460(i).DM_IND_PROC  := rec_b460.dm_ind_proc;
      vt_tab_reg_b460(i).PROC         := rec_b460.proc;
      vt_tab_reg_b460(i).COD_INF_OBS  := rec_b460.cod_inf_obs;
      vt_tab_reg_b460(i).DM_IND_OBR   := rec_b460.dm_ind_obr;
      ---
    end loop;--c_b460
    ---
 exception
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_monta_reg_B460: ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end pkb_monta_reg_B460;

-------------------------------------------------------------------------------------------------------
-- monta o REGISTRO B440 - TOTALIZAÇÃO DOS VALORES RETIDOS
procedure pkb_monta_reg_B440
  is
  -----
  i               pls_integer;
  vn_fase         number := 0;
  -----
  cursor c_b440 is
    select /*+ rule*/ nf.dm_ind_oper as ind_oper,
           p.cod_part,
           --nft.vl_total_nf as vl_cont_rt, --#68167
           sum(nft.vl_total_nf)  vl_cont_rt,--#68167
           sum(iin.vl_base_calc) vl_bc_iss_rt,
           sum(iin.vl_imp_trib)  vl_iss_rt
      from TMP_NOTA_FISCAL       nf,
           PESSOA            p,
           mod_fiscal        mf,
           sit_docto         sd,
           TMP_ITEM_NOTA_FISCAL  inf,
           TMP_NOTA_FISCAL_TOTAL nft,
           TMP_IMP_ITEMNF        iin,
           tipo_imposto      ti
     where nf.empresa_id = gt_row_abertura_efd.empresa_id
       and nf.pessoa_id = p.id
       and nf.sitdocto_id = sd.id
       and nf.modfiscal_id = mf.id
       and inf.notafiscal_id = nf.id
       and nft.notafiscal_id = nf.id
       and inf.id = iin.itemnf_id(+)
       and nf.dm_arm_nfe_terc = 0
       and mf.cod_mod in ('01', '03', '3B', '04', '08', '55', '65','99')
       and iin.dm_tipo = 1
       and iin.tipoimp_id = ti.id
       and ti.cd = 6
       and sd.cd not in ('02', '05')
       and ((nf.dm_ind_emit = 1 and trunc(nvl(nf.dt_sai_ent,nf.dt_emiss)) between trunc(gt_row_abertura_efd.dt_ini) and trunc(gt_row_abertura_efd.dt_fim))
            or
           (nf.dm_ind_emit = 0 and nf.dm_ind_oper = 1 and trunc(nf.dt_emiss) between trunc(gt_row_abertura_efd.dt_ini) and trunc(gt_row_abertura_efd.dt_fim))
            or
           (nf.dm_ind_emit = 0 and nf.dm_ind_oper = 0 and gn_dm_dt_escr_dfepoe = 0 and trunc(nf.dt_emiss) between trunc(gt_row_abertura_efd.dt_ini) and trunc(gt_row_abertura_efd.dt_fim))
            or
           (nf.dm_ind_emit = 0 and nf.dm_ind_oper = 0 and gn_dm_dt_escr_dfepoe = 1 and trunc(nvl(nf.dt_sai_ent,nf.dt_emiss)) between trunc(gt_row_abertura_efd.dt_ini) and trunc(gt_row_abertura_efd.dt_fim)))
     /*  and not exists ( select 1
                          from pessoa_tipo_param pt
                             , tipo_param        tp
                             , valor_tipo_param  vt
                         where pt.pessoa_id    = p.id
                           and tp.id           = pt.tipoparam_id
                           and tp.cd           = '13' -- Natureza/Setor da Pessoa
                           and vt.tipoparam_id = pt.tipoparam_id
                           and vt.id           = pt.valortipoparam_id
                           and vt.cd           = 1 -- Setor Publico   
                      )  */  --#68167
       and gn_origem_dado_pessoa = 0            
       group by nf.dm_ind_oper, 
                --nft.vl_total_nf, --#68167
                p.cod_part
   union      
    select /*+ rule*/ nf.dm_ind_oper as ind_oper,
         decode( nf.dm_ind_emit ,0 ,trim(nfd.cnpj)||trim(nfd.cpf)||to_char(trim(nfd.cidade_ibge)), trim(nfe.cnpj)||trim(nfe.cpf)||to_char(trim(nfe.cidade_ibge))) as cod_part,
           --p.cod_part,
           --nft.vl_total_nf as vl_cont_rt, --#68167
           sum(nft.vl_total_nf)  vl_cont_rt,--#68167
           sum(iin.vl_base_calc) vl_bc_iss_rt,
           sum(iin.vl_imp_trib)  vl_iss_rt
      from TMP_NOTA_FISCAL       nf,
           PESSOA            p,
           mod_fiscal        mf,
           sit_docto         sd,
           TMP_ITEM_NOTA_FISCAL  inf,
           TMP_NOTA_FISCAL_TOTAL nft,
           nota_fiscal_dest  nfd,
           nota_fiscal_emit  nfe,       
           TMP_IMP_ITEMNF        iin,
           tipo_imposto      ti
     where nf.empresa_id = gt_row_abertura_efd.empresa_id
       and nf.pessoa_id = p.id
       and nf.sitdocto_id = sd.id
       and nf.modfiscal_id = mf.id
       and inf.notafiscal_id = nf.id
       and nft.notafiscal_id = nf.id
       and nfd.notafiscal_id = nf.id
       and nfe.notafiscal_id = nf.id     
       and inf.id = iin.itemnf_id(+)
       and nf.dm_arm_nfe_terc = 0
       and mf.cod_mod in ('01', '03', '3B', '04', '08', '55', '65','99')
       and iin.dm_tipo = 1
       and iin.tipoimp_id = ti.id
       and ti.cd = 6
       and sd.cd not in ('02', '05')
       and ((nf.dm_ind_emit = 1 and trunc(nvl(nf.dt_sai_ent,nf.dt_emiss)) between trunc(gt_row_abertura_efd.dt_ini) and trunc(gt_row_abertura_efd.dt_fim))
            or
           (nf.dm_ind_emit = 0 and nf.dm_ind_oper = 1 and trunc(nf.dt_emiss) between trunc(gt_row_abertura_efd.dt_ini) and trunc(gt_row_abertura_efd.dt_fim))
            or
           (nf.dm_ind_emit = 0 and nf.dm_ind_oper = 0 and gn_dm_dt_escr_dfepoe = 0 and trunc(nf.dt_emiss) between trunc(gt_row_abertura_efd.dt_ini) and trunc(gt_row_abertura_efd.dt_fim))
            or
           (nf.dm_ind_emit = 0 and nf.dm_ind_oper = 0 and gn_dm_dt_escr_dfepoe = 1 and trunc(nvl(nf.dt_sai_ent,nf.dt_emiss)) between trunc(gt_row_abertura_efd.dt_ini) and trunc(gt_row_abertura_efd.dt_fim)))
       and gn_origem_dado_pessoa = 1            
       group by nf.dm_ind_oper, 
               -- nft.vl_total_nf, --#68167
                decode( nf.dm_ind_emit ,0 , trim(nfd.cnpj)||trim(nfd.cpf)||to_char(trim(nfd.cidade_ibge)), trim(nfe.cnpj)||trim(nfe.cpf)||to_char(trim(nfe.cidade_ibge)))
              union      
    select /*+ rule*/ nf.dm_ind_oper as ind_oper,
           p.cod_part,
           --nft.vl_total_nf as vl_cont_rt, --#68167
           sum(nft.vl_total_item)  vl_cont_rt,--#68167
           sum(iin.vl_base_calc) vl_bc_iss_rt,
           sum(iin.vl_imp_trib)  vl_iss_rt
      from TMP_NOTA_FISCAL       nf,
           PESSOA            p,
           mod_fiscal        mf,
           sit_docto         sd,
           TMP_ITEM_NOTA_FISCAL  inf,
           TMP_NOTA_FISCAL_TOTAL nft,
           nota_fiscal_dest  nfd,
           nota_fiscal_emit  nfe,       
           TMP_IMP_ITEMNF        iin,
           tipo_imposto      ti
     where nf.empresa_id = gt_row_abertura_efd.empresa_id
       and nf.pessoa_id = p.id
       and nf.sitdocto_id = sd.id
       and nf.modfiscal_id = mf.id
       and inf.notafiscal_id = nf.id
       and nft.notafiscal_id = nf.id
       and nfd.notafiscal_id = nf.id
       and nfe.notafiscal_id(+) = nf.id     
       and inf.id = iin.itemnf_id(+)
       and nf.dm_arm_nfe_terc = 0
       and mf.cod_mod in ('99')
       and iin.dm_tipo = 1
       and iin.tipoimp_id = ti.id
       and ti.cd = 6
       and sd.cd not in ('02', '05')
       and ((nf.dm_ind_emit = 1 and trunc(nvl(nf.dt_sai_ent,nf.dt_emiss)) between trunc(gt_row_abertura_efd.dt_ini) and trunc(gt_row_abertura_efd.dt_fim))
            or
           (nf.dm_ind_emit = 0 and nf.dm_ind_oper = 1 and trunc(nf.dt_emiss) between trunc(gt_row_abertura_efd.dt_ini) and trunc(gt_row_abertura_efd.dt_fim))
            or
           (nf.dm_ind_emit = 0 and nf.dm_ind_oper = 0 and gn_dm_dt_escr_dfepoe = 0 and trunc(nf.dt_emiss) between trunc(gt_row_abertura_efd.dt_ini) and trunc(gt_row_abertura_efd.dt_fim))
            or
           (nf.dm_ind_emit = 0 and nf.dm_ind_oper = 0 and gn_dm_dt_escr_dfepoe = 1 and trunc(nvl(nf.dt_sai_ent,nf.dt_emiss)) between trunc(gt_row_abertura_efd.dt_ini) and trunc(gt_row_abertura_efd.dt_fim)))
       and gn_origem_dado_pessoa = 1            
       group by nf.dm_ind_oper, 
                p.cod_part;        
 begin
    ---
    i := 0;
    vn_fase:=0;
    ---
    for rec_b440 in c_b440 loop
      exit when c_b440%notfound or (c_b440%notfound) is null;
      ---
      vn_fase:=1;
      i := nvl(i,0) + 1;
      ---
      vn_fase:=3;
      vt_tab_reg_b440(i).reg          :='B440';
      vt_tab_reg_b440(i).ind_oper     := rec_b440.ind_oper;
      vt_tab_reg_b440(i).cod_part     := rec_b440.cod_part; 
      vt_tab_reg_b440(i).VL_CONT_RT   := rec_b440.VL_CONT_RT;
      vt_tab_reg_b440(i).VL_BC_ISS_RT := rec_b440.VL_BC_ISS_RT;
      vt_tab_reg_b440(i).VL_ISS_RT    := rec_b440.VL_ISS_RT;
      ---
    end loop;--c_b440
    ---
 exception
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_monta_reg_B440: ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end pkb_monta_reg_B440;

-------------------------------------------------------------------------------------------------------
-- monta o REGISTRO B420 - TOTALIZAÇÃO DOS VALORES DE SERVIÇOS PRESTADOS POR COMBINAÇÃO DE ALÍQUOTA E ITEM DA LISTA DE SERVIÇOS DA LC 116/2003
procedure pkb_monta_reg_B420
  is
  --
  i               pls_integer;
  vn_fase         number := 0;
  --
  cursor c_b420 is
   select iin.aliq_apli            aliq_iss
        , inf.cd_lista_serv        cod_serv
        , sum(inf.vl_item_bruto)   vl_cont_p
        , sum(iin.vl_base_calc)    vl_bc_iss_p
        , sum(iin.vl_imp_trib)     vl_iss_p
     from TMP_NOTA_FISCAL      nf,
          PESSOA           p,
          mod_fiscal       mf,
          sit_docto        sd,
          TMP_ITEM_NOTA_FISCAL inf,
          TMP_IMP_ITEMNF       iin,
          tipo_imposto     ti
    where nf.empresa_id      = gt_row_abertura_efd.empresa_id
      and nf.pessoa_id       = p.id
      and nf.sitdocto_id     = sd.id
      and nf.modfiscal_id    = mf.id
      and inf.notafiscal_id  = nf.id
      and inf.id             = iin.itemnf_id
      and nf.dm_arm_nfe_terc = 0
      and mf.cod_mod in ('01', '03', '3B', '04', '08', '55', '65')
      and iin.dm_tipo        = 0 -- Imposto
      and iin.tipoimp_id     = ti.id
      and ti.cd              = 6 -- ISS
      and sd.cd              not in ('02', '05') 
      and ((nf.dm_ind_emit = 1 and trunc(nvl(nf.dt_sai_ent,nf.dt_emiss)) between trunc(gt_row_abertura_efd.dt_ini) and trunc(gt_row_abertura_efd.dt_fim))
           or
        (nf.dm_ind_emit = 0 and nf.dm_ind_oper = 1 and trunc(nf.dt_emiss) between trunc(gt_row_abertura_efd.dt_ini) and trunc(gt_row_abertura_efd.dt_fim))
           or
        (nf.dm_ind_emit = 0 and nf.dm_ind_oper = 0 and gn_dm_dt_escr_dfepoe = 0 and trunc(nf.dt_emiss) between trunc(gt_row_abertura_efd.dt_ini) and trunc(gt_row_abertura_efd.dt_fim))
           or
        (nf.dm_ind_emit = 0 and nf.dm_ind_oper = 0 and gn_dm_dt_escr_dfepoe = 1 and trunc(nvl(nf.dt_sai_ent,nf.dt_emiss)) between trunc(gt_row_abertura_efd.dt_ini) and trunc(gt_row_abertura_efd.dt_fim)))
    /*  and not exists ( select 1
                         from pessoa_tipo_param pt
                            , tipo_param        tp
                            , valor_tipo_param  vt
                        where pt.pessoa_id    = p.id
                          and tp.id           = pt.tipoparam_id
                          and tp.cd           = '13' -- Natureza/Setor da Pessoa
                          and vt.tipoparam_id = pt.tipoparam_id
                          and vt.id           = pt.valortipoparam_id
                          and vt.cd           = 1 -- Setor Publico
                      )*/ --68167
    group by iin.aliq_apli
            ,inf.cd_lista_serv;
  --
 begin
    --
    i := 0;
    vn_fase:=1;
    --
    for rec_b420 in c_b420 loop
      exit when c_b420%notfound or (c_b420%notfound) is null;
      --
      vn_fase:=2;
      i := nvl(i,0) + 1;
      --
      vn_fase:=3;
      vt_tab_reg_b420(i).reg           := 'B420';
      vt_tab_reg_b420(i).vl_cont_p     := rec_b420.vl_cont_p;
      vt_tab_reg_b420(i).vl_bc_iss_p   := rec_b420.vl_bc_iss_p;
      vt_tab_reg_b420(i).aliq_iss      := rec_b420.aliq_iss;
      vt_tab_reg_b420(i).vl_isnt_iss_p := 0;
      vt_tab_reg_b420(i).vl_iss_p      := rec_b420.vl_iss_p;
      vt_tab_reg_b420(i).cod_serv      := rec_b420.cod_serv;
      --
    end loop; --c_b420
    --
 exception
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_monta_reg_B420: ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end pkb_monta_reg_B420;
-------------------------------------------------------------------------------------------------------
-- monta o REGISTRO B020 - NOTA FISCAL (CÓDIGO 01), NOTA FISCAL DE SERVIÇOS (CÓDIGO 03), NOTA FISCAL DE SERVIÇOS AVULSA (CÓDIGO 3B), NOTA FISCAL DE PRODUTOR (CÓDIGO 04), CONHECIMENTO DE TRANSPORTE RODOVIÁRIO DE CARGAS (CÓDIGO 08), NF-e (CÓDIGO 55) e NFC-e (CÓDIGO 65).
procedure pkb_monta_reg_b020 is
  --
  i               pls_integer;
  j               pls_integer;
  vc_cod_mod      mod_fiscal.cod_mod%type;
  vn_fase         number := 0;
  --
   vn_ind_oper      nota_fiscal.dm_ind_oper%type;
   vn_ind_emit      nota_fiscal.dm_ind_emit%type;
   vn_pessoa_id     nota_fiscal.pessoa_id%type;
   vc_cod_part      pessoa.cod_part%type;
   vc_cod_sit       sit_docto.cd%type;
   vc_serie         nota_fiscal.serie%type;
   vn_num_doc       nota_fiscal.nro_nf%type;
   vc_chv_nfe       nota_fiscal.nro_chave_nfe%type;
   vd_dt_doc        nota_fiscal.dt_emiss%type;
   vn_cod_mun_serv  nota_fiscal.cidade_ibge_emit%type;
   vn_vl_cont       nota_fiscal_total.vl_total_nf%type;
   vn_vl_mat_terc   item_nota_fiscal.vl_item_bruto%type;
   vn_vl_sub        nota_fiscal_total.vl_ret_iss%type;
   vn_vl_isnt_iss   nota_fiscal_total.vl_ret_iss%type;
   vn_vl_ded_bc     nota_fiscal_total.vl_deducao%type;
   vn_vl_bc_iss     nota_fiscal_total.vl_base_calc_iss%type;
   vn_vl_bc_iss_rt imp_itemnf.vl_base_calc%type;
   vn_vl_iss_rt    imp_itemnf.vl_imp_trib%type;
   vn_vl_iss        IMP_ITEMNF.vl_imp_trib%type; 
   vc_cod_inf_obs   infor_comp_dcto_fiscal.cod_infor%type; 
   vn_gera_0150     number;
  --
  
  --
 cursor c_b020 is
 --1
    select nf.id notafiscal_id
      from TMP_NOTA_FISCAL            nf,
           mod_fiscal             mf,
           sit_docto              sd,
           TMP_ITEM_NOTA_FISCAL       inf,
           TMP_NOTA_FISCAL_TOTAL      nft,
           nota_fiscal_dest       nfd,
           itemnf_compl_serv      ics,
           TMP_IMP_ITEMNF             iin,
           infor_comp_dcto_fiscal icdf,
           tipo_imposto           ti
     where nf.empresa_id             = gt_row_abertura_efd.empresa_id
       and nf.sitdocto_id            = sd.id
       and nf.modfiscal_id           = mf.id
       and inf.notafiscal_id         = nf.id
       and nft.notafiscal_id         = nf.id
       and nfd.notafiscal_id         = nf.id
       and inf.id                    = ics.itemnf_id(+)
       and inf.id                    = iin.itemnf_id(+)
       and nf.inforcompdctofiscal_id = icdf.id(+)
       and nf.dm_arm_nfe_terc        = 0
       and mf.cod_mod                in ('01', '03', '3B', '04', '08', '55', '65','99')
       and nf.dm_st_proc             in (4, 14)
       and nf.dm_ind_emit            = 0 -- Emissão própria
       and nf.dm_ind_oper            = 1 -- Saída
       and iin.dm_tipo               = 0 -- Tipo retenção
       and iin.tipoimp_id            = ti.id
       and ti.cd                     = 6 -- ISS
       and sd.cd                     not in ('02', '05') -- 02 - Documento cancelado /  05 - NF-e ou CT-e - Numeração inutilizada
       and ((nf.dm_ind_emit = 1 and trunc(nvl(nf.dt_sai_ent,nf.dt_emiss)) between trunc(gt_row_abertura_efd.dt_ini) and trunc(gt_row_abertura_efd.dt_fim))
          or
         (nf.dm_ind_emit = 0 and nf.dm_ind_oper = 1 and trunc(nf.dt_emiss) between trunc(gt_row_abertura_efd.dt_ini) and trunc(gt_row_abertura_efd.dt_fim))
          or
         (nf.dm_ind_emit = 0 and nf.dm_ind_oper = 0 and gn_dm_dt_escr_dfepoe = 0 and trunc(nf.dt_emiss) between trunc(gt_row_abertura_efd.dt_ini) and trunc(gt_row_abertura_efd.dt_fim))
          or
         (nf.dm_ind_emit = 0 and nf.dm_ind_oper = 0 and gn_dm_dt_escr_dfepoe = 1 and trunc(nvl(nf.dt_sai_ent,nf.dt_emiss)) between trunc(gt_row_abertura_efd.dt_ini) and trunc(gt_row_abertura_efd.dt_fim)))
 union
 --2
     select nf.id notafiscal_id
          from TMP_NOTA_FISCAL            nf,
               mod_fiscal             mf,
               sit_docto              sd,
               TMP_ITEM_NOTA_FISCAL       inf,
               TMP_NOTA_FISCAL_TOTAL      nft,
               nota_fiscal_emit       nfe,
               itemnf_compl_serv      ics,
               TMP_IMP_ITEMNF             iin,
               infor_comp_dcto_fiscal icdf,
               tipo_imposto           ti
         where nf.empresa_id             = gt_row_abertura_efd.empresa_id
           and nf.sitdocto_id            = sd.id
           and nf.modfiscal_id           = mf.id
           and inf.notafiscal_id         = nf.id
           and nft.notafiscal_id         = nf.id
           and nfe.notafiscal_id         = nf.id
           and inf.id                    = ics.itemnf_id(+)
           and inf.id                    = iin.itemnf_id(+)
           and nf.inforcompdctofiscal_id = icdf.id(+)
           and nf.dm_arm_nfe_terc        = 0
           and mf.cod_mod                in ('01', '03', '3B', '04', '08', '55', '65','99')
           and nf.dm_st_proc             in (4, 14)
           and nf.dm_ind_emit            = 1 -- Terceiros
           and nf.dm_ind_oper            = 0 -- Entrada
           and iin.dm_tipo               = 1 -- Tipo imposto
           and iin.tipoimp_id            = ti.id
           and ti.cd                     = 6 -- ISS
           and sd.cd                     not in ('02', '05') -- 02 - Documento cancelado /  05 - NF-e ou CT-e - Numeração inutilizada
           and ((nf.dm_ind_emit = 1 and trunc(nvl(nf.dt_sai_ent,nf.dt_emiss)) between trunc(gt_row_abertura_efd.dt_ini) and trunc(gt_row_abertura_efd.dt_fim))
              or
             (nf.dm_ind_emit = 0 and nf.dm_ind_oper = 1 and trunc(nf.dt_emiss) between trunc(gt_row_abertura_efd.dt_ini) and trunc(gt_row_abertura_efd.dt_fim))
              or
             (nf.dm_ind_emit = 0 and nf.dm_ind_oper = 0 and gn_dm_dt_escr_dfepoe = 0 and trunc(nf.dt_emiss) between trunc(gt_row_abertura_efd.dt_ini) and trunc(gt_row_abertura_efd.dt_fim))
              or
             (nf.dm_ind_emit = 0 and nf.dm_ind_oper = 0 and gn_dm_dt_escr_dfepoe = 1 and trunc(nvl(nf.dt_sai_ent,nf.dt_emiss)) between trunc(gt_row_abertura_efd.dt_ini) and trunc(gt_row_abertura_efd.dt_fim)))
 union
     --3          
     select nf.id notafiscal_id
          from TMP_NOTA_FISCAL            nf,
               pessoa               p,
               mod_fiscal             mf,
               sit_docto              sd,
               TMP_ITEM_NOTA_FISCAL       inf,
               TMP_NOTA_FISCAL_TOTAL      nft,
               nota_fiscal_emit       nfe,         
               itemnf_compl_serv      ics,
               TMP_IMP_ITEMNF             iin,
               infor_comp_dcto_fiscal icdf,
               tipo_imposto           ti
         where nf.empresa_id             = gt_row_abertura_efd.empresa_id
           and nf.pessoa_id           = p.id
           and nf.sitdocto_id            = sd.id
           and nf.modfiscal_id           = mf.id
           and inf.notafiscal_id         = nf.id
           and nft.notafiscal_id         = nf.id
           and nfe.notafiscal_id(+)      = nf.id       
           and inf.id                    = ics.itemnf_id(+)
           and inf.id                    = iin.itemnf_id(+)
           and nf.inforcompdctofiscal_id = icdf.id(+)
           and nf.dm_arm_nfe_terc        = 0
           and mf.cod_mod                in ('01', '03', '3B', '04', '08', '55', '65','99')
           and nf.dm_st_proc             in (4, 14)
           and nf.dm_ind_emit            = 1 -- Terceiros
           and nf.dm_ind_oper            = 0 -- Entrada
           and iin.dm_tipo               = 1 -- Tipo imposto
           and iin.tipoimp_id            = ti.id
           and ti.cd                     = 6 -- ISS
           and sd.cd                     not in ('02', '05') -- 02 - Documento cancelado /  05 - NF-e ou CT-e - Numeração inutilizada  
           and ((nf.dm_ind_emit = 1 and trunc(nvl(nf.dt_sai_ent,nf.dt_emiss)) between trunc(gt_row_abertura_efd.dt_ini) and trunc(gt_row_abertura_efd.dt_fim))
              or
             (nf.dm_ind_emit = 0 and nf.dm_ind_oper = 1 and trunc(nf.dt_emiss) between trunc(gt_row_abertura_efd.dt_ini) and trunc(gt_row_abertura_efd.dt_fim))
              or
             (nf.dm_ind_emit = 0 and nf.dm_ind_oper = 0 and gn_dm_dt_escr_dfepoe = 0 and trunc(nf.dt_emiss) between trunc(gt_row_abertura_efd.dt_ini) and trunc(gt_row_abertura_efd.dt_fim))
              or
             (nf.dm_ind_emit = 0 and nf.dm_ind_oper = 0 and gn_dm_dt_escr_dfepoe = 1 and trunc(nvl(nf.dt_sai_ent,nf.dt_emiss)) between trunc(gt_row_abertura_efd.dt_ini) and trunc(gt_row_abertura_efd.dt_fim)))
    union
     --4          
     select nf.id notafiscal_id
          from TMP_NOTA_FISCAL        nf,
               pessoa                  p, 
               mod_fiscal             mf,
               sit_docto              sd,
               TMP_ITEM_NOTA_FISCAL   inf,
               TMP_NOTA_FISCAL_TOTAL  nft,
               nota_fiscal_emit       nfe,
               itemnf_compl_serv      ics,
               TMP_IMP_ITEMNF             iin,
               infor_comp_dcto_fiscal icdf,
               tipo_imposto           ti
         where nf.empresa_id             = gt_row_abertura_efd.empresa_id
             and nf.pessoa_id           = p.id
           and nf.sitdocto_id            = sd.id
           and nf.modfiscal_id           = mf.id
           and inf.notafiscal_id         = nf.id
           and nft.notafiscal_id         = nf.id
           and nfe.notafiscal_id (+)     = nf.id
           and inf.id                    = ics.itemnf_id(+)
           and inf.id                    = iin.itemnf_id(+)
           and nf.inforcompdctofiscal_id = icdf.id(+)
           and nf.dm_arm_nfe_terc        = 0
           and mf.cod_mod                in ('01', '03', '3B', '04', '08', '55', '65','99')
           and nf.dm_st_proc             in (4, 14)
           and nf.dm_ind_emit            = 1 -- Terceiros
           and nf.dm_ind_oper            = 0 -- Entrada
           and iin.dm_tipo               = 0 -- Tipo imposto
           and iin.tipoimp_id            = ti.id
           and ti.cd                     = 6 -- ISS
           and sd.cd                     not in ('02', '05') -- 02 - Documento cancelado /  05 - NF-e ou CT-e - Numeração inutilizada
           and ((nf.dm_ind_emit = 1 and trunc(nvl(nf.dt_sai_ent,nf.dt_emiss)) between trunc(gt_row_abertura_efd.dt_ini) and trunc(gt_row_abertura_efd.dt_fim))
              or
             (nf.dm_ind_emit = 0 and nf.dm_ind_oper = 1 and trunc(nf.dt_emiss) between trunc(gt_row_abertura_efd.dt_ini) and trunc(gt_row_abertura_efd.dt_fim))
              or
             (nf.dm_ind_emit = 0 and nf.dm_ind_oper = 0 and gn_dm_dt_escr_dfepoe = 0 and trunc(nf.dt_emiss) between trunc(gt_row_abertura_efd.dt_ini) and trunc(gt_row_abertura_efd.dt_fim))
              or
             (nf.dm_ind_emit = 0 and nf.dm_ind_oper = 0 and gn_dm_dt_escr_dfepoe = 1 and trunc(nvl(nf.dt_sai_ent,nf.dt_emiss)) between trunc(gt_row_abertura_efd.dt_ini) and trunc(gt_row_abertura_efd.dt_fim)));
           --
  --
  cursor c_b025(en_notafiscal_id item_nota_fiscal.notafiscal_id%type) is
     select  
           sum(inf.vl_item_bruto) as vl_cont_p,
           sum(iin.vl_base_calc)  as vl_bc_iss_p,
           iin.aliq_apli as aliq_iss,
           sum(iin.vl_imp_trib)   as vl_iss_p,
           inf.cd_lista_serv as cod_serv
      from TMP_ITEM_NOTA_FISCAL inf,
           IMP_ITEMNF iin,
           tipo_imposto ti
     where inf.notafiscal_id = en_notafiscal_id
       and inf.id            = iin.itemnf_id
       and iin.dm_tipo       = 0 -- Tipo imposto
       and iin.tipoimp_id    = ti.id
       and ti.cd             = 6 -- ISS
     group by iin.aliq_apli,
              inf.cd_lista_serv
            union
    select  
           sum(inf.vl_item_bruto) as vl_cont_p,
           0   as vl_bc_iss_p,
           iin.aliq_apli as aliq_iss,
           0  as vl_iss_p,
           inf.cd_lista_serv as cod_serv
      from TMP_ITEM_NOTA_FISCAL inf,
           IMP_ITEMNF iin,
           tipo_imposto ti
     where inf.notafiscal_id = en_notafiscal_id
       and inf.id            = iin.itemnf_id
       and iin.dm_tipo       = 1 -- Tipo imposto
       and iin.tipoimp_id    = ti.id
       and ti.cd             = 6 -- ISS
       and not exists (select * from IMP_ITEMNF iix,
           tipo_imposto tix where iix.tipoimp_id = tix.id 
                            and tix.cd = 6 
                            and iix.dm_tipo = 0 
                            and iix.itemnf_id = inf.id)
     group by iin.aliq_apli,
              inf.cd_lista_serv
     order by 1;
 --
begin
  --
  i       := 0;
  j       := 0;
  vn_fase := 1;
  --
  for rec_b020 in c_b020 loop
    exit when c_b020%notfound or(c_b020%notfound) is null;
    --
     vn_ind_oper :=null;
     vn_ind_emit :=null;
     vn_pessoa_id :=null;
     vc_cod_part :=null;
     vn_gera_0150 :=null;
     vc_cod_mod :=null;
     vc_cod_sit :=null;
     vc_serie :=null;
     vn_num_doc :=null; 
     vc_chv_nfe :=null;
     vd_dt_doc :=null;
     vn_cod_mun_serv :=null;
     vn_vl_cont :=null;
     vn_vl_mat_terc :=null;
     vn_vl_sub :=null;
     vn_vl_isnt_iss :=null;
     vn_vl_ded_bc :=null;
     vn_vl_bc_iss :=null;
     vn_vl_bc_iss_rt :=null;
     vn_vl_iss_rt :=null;
     vn_vl_iss :=null;
     vc_cod_inf_obs :=null;
    --
    begin
     --
     select nf.dm_ind_oper as ind_oper,
            nf.dm_ind_emit as ind_emit,
            nf.pessoa_id,
            decode(gn_origem_dado_pessoa,
                   0,
                   pk_csf.fkg_pessoa_cod_part(nf.pessoa_id),
                   trim(nfd.cnpj) || trim(nfd.cpf) ||
                   trim(to_char(nfd.cidade_ibge))) as cod_part,
            0 gera_0150,
            mf.cod_mod,
            sd.cd as cod_sit,
            nf.serie as ser,
            nf.nro_nf as num_doc,
            nf.nro_chave_nfe as chv_nfe,
            trunc(nf.dt_emiss) as dt_doc,
            nf.cidade_ibge_emit as cod_mun_serv,
            nft.vl_total_nf as vl_cont,
            decode(inf.dm_mat_prop_terc, 0, sum(inf.vl_item_bruto), 0) as vl_mat_terc,
            0 vl_sub,
            0 vl_isnt_iss,
            sum(nft.vl_deducao) as vl_ded_bc,
            nft.vl_base_calc_iss as vl_bc_iss,
            case
              when nft.vl_ret_iss > 0 then
               sum(iin.vl_base_calc)
              else
               0
            end as vl_bc_iss_rt,
            nft.vl_ret_iss as vl_iss_rt,
            sum(iin.vl_imp_trib) as vl_iss,
            icdf.cod_infor as cod_inf_obs
       into vn_ind_oper,
            vn_ind_emit,
            vn_pessoa_id,
            vc_cod_part,
            vn_gera_0150,
            vc_cod_mod,
            vc_cod_sit,
            vc_serie,
            vn_num_doc,
            vc_chv_nfe,
            vd_dt_doc,
            vn_cod_mun_serv,
            vn_vl_cont,
            vn_vl_mat_terc,
            vn_vl_sub,
            vn_vl_isnt_iss,
            vn_vl_ded_bc,
            vn_vl_bc_iss,
            vn_vl_bc_iss_rt,
            vn_vl_iss_rt,
            vn_vl_iss,
            vc_cod_inf_obs
       from TMP_NOTA_FISCAL        nf,
            mod_fiscal             mf,
            sit_docto              sd,
            TMP_ITEM_NOTA_FISCAL   inf,
            TMP_NOTA_FISCAL_TOTAL  nft,
            nota_fiscal_dest       nfd,
            itemnf_compl_serv      ics,
            TMP_IMP_ITEMNF         iin,
            infor_comp_dcto_fiscal icdf,
            tipo_imposto           ti
      where nf.empresa_id = gt_row_abertura_efd.empresa_id
        and nf.sitdocto_id = sd.id
        and nf.modfiscal_id = mf.id
        and inf.notafiscal_id = nf.id
        and nft.notafiscal_id = nf.id
        and nfd.notafiscal_id = nf.id
        and inf.id = ics.itemnf_id(+)
        and inf.id = iin.itemnf_id(+)
        and nf.inforcompdctofiscal_id = icdf.id(+)
        and nf.dm_arm_nfe_terc = 0
        and mf.cod_mod in ('01', '03', '3B', '04', '08', '55', '65', '99')
        and nf.dm_st_proc in (4, 14)
        and nf.dm_ind_emit = 0 -- Emissão própria
        and nf.dm_ind_oper = 1 -- Saída
        and iin.dm_tipo = 0 -- Tipo retenção
        and iin.tipoimp_id = ti.id
        and ti.cd = 6 -- ISS
        and nf.id = rec_b020.notafiscal_id
        and sd.cd not in ('02', '05') -- 02 - Documento cancelado /  05 - NF-e ou CT-e - Numeração inutilizada
        and ((nf.dm_ind_emit = 1 and trunc(nvl(nf.dt_sai_ent, nf.dt_emiss)) between
            trunc(gt_row_abertura_efd.dt_ini) and
            trunc(gt_row_abertura_efd.dt_fim)) or
            (nf.dm_ind_emit = 0 and nf.dm_ind_oper = 1 and
            trunc(nf.dt_emiss) between trunc(gt_row_abertura_efd.dt_ini) and
            trunc(gt_row_abertura_efd.dt_fim)) or
            (nf.dm_ind_emit = 0 and nf.dm_ind_oper = 0 and
            gn_dm_dt_escr_dfepoe = 0 and
            trunc(nf.dt_emiss) between trunc(gt_row_abertura_efd.dt_ini) and
            trunc(gt_row_abertura_efd.dt_fim)) or
            (nf.dm_ind_emit = 0 and nf.dm_ind_oper = 0 and
            gn_dm_dt_escr_dfepoe = 1 and
            trunc(nvl(nf.dt_sai_ent, nf.dt_emiss)) between
            trunc(gt_row_abertura_efd.dt_ini) and
            trunc(gt_row_abertura_efd.dt_fim)))
      group by nf.dm_ind_oper,
               nf.dm_ind_emit,
               nf.pessoa_id,
               mf.cod_mod,
               sd.cd,
               nf.serie,
               nf.nro_nf,
               nf.nro_nf,
               nf.nro_chave_nfe,
               inf.dm_mat_prop_terc,
               nf.dt_emiss,
               nf.cidade_ibge_emit,
               icdf.cod_infor,
               nf.id,
               nft.vl_total_nf,
               nft.vl_base_calc_iss,
               nft.vl_ret_iss,
               nfd.cnpj,
               nfd.cpf,
               nfd.cidade_ibge;
    --              
    exception
     when no_data_found then
      null;  
     when others then
      null;  
    end;
    --
     
    --1
   if  vc_cod_part is null then
     --
     begin 
     --
        select nf.dm_ind_oper as ind_oper,
               nf.dm_ind_emit as ind_emit,
               nf.pessoa_id,
               decode(gn_origem_dado_pessoa,
                      0,
                      pk_csf.fkg_pessoa_cod_part(nf.pessoa_id),
                      trim(nfe.cnpj) || trim(nfe.cpf) ||
                      trim(to_char(nfe.cidade_ibge))) as cod_part,
               0 gera_0150,
               mf.cod_mod,
               sd.cd as cod_sit,
               nf.serie as ser,
               nf.nro_nf as num_doc,
               nf.nro_chave_nfe as chv_nfe,
               trunc(nf.dt_emiss) as dt_doc,
               nf.cidade_ibge_emit as cod_mun_serv,
               nft.vl_total_nf as vl_cont,
               decode(inf.dm_mat_prop_terc, 0, sum(inf.vl_item_bruto), 0) as vl_mat_terc,
               0 vl_sub,
               0 vl_isnt_iss,
               sum(nft.vl_deducao) as vl_ded_bc,
               nft.vl_base_calc_iss as vl_bc_iss,
               case
                 when nft.vl_ret_iss > 0 then
                  sum(iin.vl_base_calc)
                 else
                  0
               end as vl_bc_iss_rt, --#68167
               nft.vl_ret_iss as vl_iss_rt,
               sum(iin.vl_imp_trib) as vl_iss,
               icdf.cod_infor as cod_inf_obs--,
            --   nf.id notafiscal_id
          into vn_ind_oper,
               vn_ind_emit,
               vn_pessoa_id,
               vc_cod_part,
               vn_gera_0150,
               vc_cod_mod,
               vc_cod_sit,
               vc_serie,
               vn_num_doc,
               vc_chv_nfe,
               vd_dt_doc,
               vn_cod_mun_serv,
               vn_vl_cont,
               vn_vl_mat_terc,
               vn_vl_sub,
               vn_vl_isnt_iss,
               vn_vl_ded_bc,
               vn_vl_bc_iss,
               vn_vl_bc_iss_rt,
               vn_vl_iss_rt,
               vn_vl_iss,
               vc_cod_inf_obs
          from TMP_NOTA_FISCAL nf,
               mod_fiscal             mf,
               sit_docto              sd,
               TMP_ITEM_NOTA_FISCAL   inf,
               TMP_NOTA_FISCAL_TOTAL  nft,
               nota_fiscal_emit       nfe,
               itemnf_compl_serv      ics,
               TMP_IMP_ITEMNF         iin,
               infor_comp_dcto_fiscal icdf,
               tipo_imposto           ti
         where nf.empresa_id = gt_row_abertura_efd.empresa_id
           and nf.sitdocto_id = sd.id
           and nf.modfiscal_id = mf.id
           and inf.notafiscal_id = nf.id
           and nft.notafiscal_id = nf.id
           and nfe.notafiscal_id = nf.id
           and inf.id = ics.itemnf_id(+)
           and inf.id = iin.itemnf_id(+)
           and nf.inforcompdctofiscal_id = icdf.id(+)
           and nf.dm_arm_nfe_terc = 0
           and mf.cod_mod in
               ('01', '03', '3B', '04', '08', '55', '65', '99')
           and nf.dm_st_proc in (4, 14)
           and nf.dm_ind_emit = 1 -- Terceiros
           and nf.dm_ind_oper = 0 -- Entrada
           and iin.dm_tipo = 1 -- Tipo imposto
           and iin.tipoimp_id = ti.id
           and ti.cd = 6 -- ISS
           and nf.id = rec_b020.notafiscal_id
           and sd.cd not in ('02', '05') -- 02 - Documento cancelado /  05 - NF-e ou CT-e - Numeração inutilizada
           and ((nf.dm_ind_emit = 1 and
               trunc(nvl(nf.dt_sai_ent, nf.dt_emiss)) between
               trunc(gt_row_abertura_efd.dt_ini) and
               trunc(gt_row_abertura_efd.dt_fim)) or
               (nf.dm_ind_emit = 0 and nf.dm_ind_oper = 1 and
               trunc(nf.dt_emiss) between
               trunc(gt_row_abertura_efd.dt_ini) and
               trunc(gt_row_abertura_efd.dt_fim)) or
               (nf.dm_ind_emit = 0 and nf.dm_ind_oper = 0 and
               gn_dm_dt_escr_dfepoe = 0 and
               trunc(nf.dt_emiss) between
               trunc(gt_row_abertura_efd.dt_ini) and
               trunc(gt_row_abertura_efd.dt_fim)) or
               (nf.dm_ind_emit = 0 and nf.dm_ind_oper = 0 and
               gn_dm_dt_escr_dfepoe = 1 and
               trunc(nvl(nf.dt_sai_ent, nf.dt_emiss)) between
               trunc(gt_row_abertura_efd.dt_ini) and
               trunc(gt_row_abertura_efd.dt_fim)))
         group by nf.dm_ind_oper,
                  nf.dm_ind_emit,
                  nf.pessoa_id,
                  mf.cod_mod,
                  sd.cd,
                  nf.serie,
                  nf.nro_nf,
                  nf.nro_nf,
                  nf.nro_chave_nfe,
                  inf.dm_mat_prop_terc,
                  nf.dt_emiss,
                  nf.cidade_ibge_emit,
                  icdf.cod_infor,
                  nf.id,
                  nft.vl_total_nf,
                  nft.vl_base_calc_iss,
                  nft.vl_ret_iss,
                  nfe.cnpj,
                  nfe.cpf,
                  nfe.cidade_ibge;
    --              
    exception
     when no_data_found then
      null;  
     when others then
      null;  
      end;
    --
    
    --
   if  vc_cod_part is null then
     --
     begin 
     --
    select    nf.dm_ind_oper as ind_oper,
               nf.dm_ind_emit as ind_emit,
               nf.pessoa_id,
               p.cod_part,
               1 gera_0150,
               mf.cod_mod,
               sd.cd as cod_sit,
               nf.serie as ser,
               nf.nro_nf as num_doc,
               nf.nro_chave_nfe as chv_nfe,
               trunc(nf.dt_emiss) as dt_doc,
               nf.cidade_ibge_emit as cod_mun_serv,
               sum(iin.vl_base_calc) as vl_cont,
               decode(inf.dm_mat_prop_terc, 0, sum(inf.vl_item_bruto), 0) as vl_mat_terc,
               0 vl_sub,
               0 vl_isnt_iss,
               sum(nft.vl_deducao) as vl_ded_bc,
               nft.vl_base_calc_iss as vl_bc_iss,
               case
                 when nft.vl_ret_iss > 0 then sum(iin.vl_base_calc)
                  else 0
               end as vl_bc_iss_rt,  --#68167
               nft.vl_ret_iss as vl_iss_rt,
               0  vl_iss,
               icdf.cod_infor as cod_inf_obs--,
            --   nf.id notafiscal_id
          into vn_ind_oper,
               vn_ind_emit,
               vn_pessoa_id,
               vc_cod_part,
               vn_gera_0150,
               vc_cod_mod,
               vc_cod_sit,
               vc_serie,
               vn_num_doc,
               vc_chv_nfe,
               vd_dt_doc,
               vn_cod_mun_serv,
               vn_vl_cont,
               vn_vl_mat_terc,
               vn_vl_sub,
               vn_vl_isnt_iss,
               vn_vl_ded_bc,
               vn_vl_bc_iss,
               vn_vl_bc_iss_rt,
               vn_vl_iss_rt,
               vn_vl_iss,
               vc_cod_inf_obs
          from TMP_NOTA_FISCAL            nf,
               pessoa               p,
               mod_fiscal             mf,
               sit_docto              sd,
               TMP_ITEM_NOTA_FISCAL       inf,
               TMP_NOTA_FISCAL_TOTAL      nft,
               nota_fiscal_emit       nfe,         
               itemnf_compl_serv      ics,
               TMP_IMP_ITEMNF             iin,
               infor_comp_dcto_fiscal icdf,
               tipo_imposto           ti
         where nf.empresa_id             = gt_row_abertura_efd.empresa_id
           and nf.pessoa_id           = p.id
           and nf.sitdocto_id            = sd.id
           and nf.modfiscal_id           = mf.id
           and inf.notafiscal_id         = nf.id
           and nft.notafiscal_id         = nf.id
           and nfe.notafiscal_id(+)      = nf.id       
           and inf.id                    = ics.itemnf_id(+)
           and inf.id                    = iin.itemnf_id(+)
           and nf.inforcompdctofiscal_id = icdf.id(+)
           and nf.dm_arm_nfe_terc        = 0
           and mf.cod_mod                in ('01', '03', '3B', '04', '08', '55', '65','99')
           and nf.dm_st_proc             in (4, 14)
           and nf.dm_ind_emit            = 1 -- Terceiros
           and nf.dm_ind_oper            = 0 -- Entrada
           and iin.dm_tipo               = 1 -- Tipo imposto
           and iin.tipoimp_id            = ti.id
           and ti.cd                     = 6 -- ISS
           and nf.id = rec_b020.notafiscal_id
           and sd.cd                     not in ('02', '05') -- 02 - Documento cancelado /  05 - NF-e ou CT-e - Numeração inutilizada  
           and ((nf.dm_ind_emit = 1 and trunc(nvl(nf.dt_sai_ent,nf.dt_emiss)) between trunc(gt_row_abertura_efd.dt_ini) and trunc(gt_row_abertura_efd.dt_fim))
              or
             (nf.dm_ind_emit = 0 and nf.dm_ind_oper = 1 and trunc(nf.dt_emiss) between trunc(gt_row_abertura_efd.dt_ini) and trunc(gt_row_abertura_efd.dt_fim))
              or
             (nf.dm_ind_emit = 0 and nf.dm_ind_oper = 0 and gn_dm_dt_escr_dfepoe = 0 and trunc(nf.dt_emiss) between trunc(gt_row_abertura_efd.dt_ini) and trunc(gt_row_abertura_efd.dt_fim))
              or
             (nf.dm_ind_emit = 0 and nf.dm_ind_oper = 0 and gn_dm_dt_escr_dfepoe = 1 and trunc(nvl(nf.dt_sai_ent,nf.dt_emiss)) between trunc(gt_row_abertura_efd.dt_ini) and trunc(gt_row_abertura_efd.dt_fim)))
         group by nf.dm_ind_oper,
                  nf.dm_ind_emit,
                  nf.pessoa_id,
                  mf.cod_mod,
                  sd.cd,
                  nf.serie,
                  p.cod_part,
                  nf.nro_nf,
                  nf.nro_nf,
                  nf.nro_chave_nfe,
                  inf.dm_mat_prop_terc,
                  nf.dt_emiss,
                  nf.cidade_ibge_emit,
                  icdf.cod_infor,
                  nf.id,
                  nft.vl_total_nf,
                  nft.vl_base_calc_iss,
                  nft.vl_ret_iss,
                  nfe.cnpj,
                  nfe.cpf,
                  nfe.cidade_ibge;
    --              
    exception
     when no_data_found then
      null;  
     when others then
      null;  
      end;
    --
    end if;
    --
   if  vc_cod_part is null then
     --
     begin 
     --
     select nf.dm_ind_oper as ind_oper,
               nf.dm_ind_emit as ind_emit,
               nf.pessoa_id,
               p.cod_part,
               1 gera_0150,
               mf.cod_mod,
               sd.cd as cod_sit,
               nf.serie as ser,
               nf.nro_nf as num_doc,
               nf.nro_chave_nfe as chv_nfe,
               trunc(nf.dt_emiss) as dt_doc,
               nf.cidade_ibge_emit as cod_mun_serv,
               case
                 when sum(iin.vl_base_calc) > 0 then sum(iin.vl_base_calc)   
                  else decode(inf.dm_mat_prop_terc, 0, sum(inf.vl_item_bruto), 0)
               end  as vl_cont,
               decode(inf.dm_mat_prop_terc, 0, sum(inf.vl_item_bruto), 0) as vl_mat_terc,
               0 vl_sub,
               0 vl_isnt_iss,
               sum(nft.vl_deducao) as vl_ded_bc,
               nft.vl_base_calc_iss as vl_bc_iss,
               case
                 when nft.vl_ret_iss > 0 then sum(iin.vl_base_calc)
                  else 0
               end as vl_bc_iss_rt,  --#68167
               nft.vl_ret_iss as vl_iss_rt,
               sum(iin.vl_imp_trib) as vl_iss,
               icdf.cod_infor as cod_inf_obs--,
              -- nf.id notafiscal_id
          into vn_ind_oper,
               vn_ind_emit,
               vn_pessoa_id,
               vc_cod_part,
               vn_gera_0150,
               vc_cod_mod,
               vc_cod_sit,
               vc_serie,
               vn_num_doc,
               vc_chv_nfe,
               vd_dt_doc,
               vn_cod_mun_serv,
               vn_vl_cont,
               vn_vl_mat_terc,
               vn_vl_sub,
               vn_vl_isnt_iss,
               vn_vl_ded_bc,
               vn_vl_bc_iss,
               vn_vl_bc_iss_rt,
               vn_vl_iss_rt,
               vn_vl_iss,
               vc_cod_inf_obs
          from TMP_NOTA_FISCAL        nf,
               pessoa                  p, 
               mod_fiscal             mf,
               sit_docto              sd,
               TMP_ITEM_NOTA_FISCAL   inf,
               TMP_NOTA_FISCAL_TOTAL  nft,
               nota_fiscal_emit       nfe,
               itemnf_compl_serv      ics,
               TMP_IMP_ITEMNF             iin,
               infor_comp_dcto_fiscal icdf,
               tipo_imposto           ti
         where nf.empresa_id             = gt_row_abertura_efd.empresa_id
             and nf.pessoa_id           = p.id
           and nf.sitdocto_id            = sd.id
           and nf.modfiscal_id           = mf.id
           and inf.notafiscal_id         = nf.id
           and nft.notafiscal_id         = nf.id
           and nfe.notafiscal_id (+)     = nf.id
           and inf.id                    = ics.itemnf_id(+)
           and inf.id                    = iin.itemnf_id(+)
           and nf.inforcompdctofiscal_id = icdf.id(+)
           and nf.dm_arm_nfe_terc        = 0
           and mf.cod_mod                in ('01', '03', '3B', '04', '08', '55', '65','99')
           and nf.dm_st_proc             in (4, 14)
           and nf.dm_ind_emit            = 1 -- Terceiros
           and nf.dm_ind_oper            = 0 -- Entrada
           and iin.dm_tipo               = 0 -- Tipo imposto
           and iin.tipoimp_id            = ti.id
           and ti.cd                     = 6 -- ISS
           and nf.id = rec_b020.notafiscal_id
           and sd.cd                     not in ('02', '05') -- 02 - Documento cancelado /  05 - NF-e ou CT-e - Numeração inutilizada
           and ((nf.dm_ind_emit = 1 and trunc(nvl(nf.dt_sai_ent,nf.dt_emiss)) between trunc(gt_row_abertura_efd.dt_ini) and trunc(gt_row_abertura_efd.dt_fim))
              or
             (nf.dm_ind_emit = 0 and nf.dm_ind_oper = 1 and trunc(nf.dt_emiss) between trunc(gt_row_abertura_efd.dt_ini) and trunc(gt_row_abertura_efd.dt_fim))
              or
             (nf.dm_ind_emit = 0 and nf.dm_ind_oper = 0 and gn_dm_dt_escr_dfepoe = 0 and trunc(nf.dt_emiss) between trunc(gt_row_abertura_efd.dt_ini) and trunc(gt_row_abertura_efd.dt_fim))
              or
             (nf.dm_ind_emit = 0 and nf.dm_ind_oper = 0 and gn_dm_dt_escr_dfepoe = 1 and trunc(nvl(nf.dt_sai_ent,nf.dt_emiss)) between trunc(gt_row_abertura_efd.dt_ini) and trunc(gt_row_abertura_efd.dt_fim)))
         group by nf.dm_ind_oper,
                  nf.dm_ind_emit,
                  nf.pessoa_id,
                  mf.cod_mod,
                  sd.cd,
                  nf.serie,
                  p.cod_part,
                  nf.nro_nf,
                  nf.nro_nf,
                  nf.nro_chave_nfe,
                  inf.dm_mat_prop_terc,
                  nf.dt_emiss,
                  nf.cidade_ibge_emit,
                  icdf.cod_infor,
                  nf.id,
                  nft.vl_total_nf,
                  nft.vl_base_calc_iss,
                  nft.vl_ret_iss,
                  nfe.cnpj,
                  nfe.cpf,
                  nfe.cidade_ibge;  
    --              
    exception
     when no_data_found then
      null;  
     when others then
      null; 
      end; 
    --
    end if;
    --
    end if;
   
      if  vn_gera_0150 = 1 then
                  --
                 pkb_monta_reg_0150( en_pessoa_id => vn_pessoa_id
                               , en_notafiscal_id => rec_b020.notafiscal_id );
     end if;
    ---
    i := nvl(i, 0) + 1;
    ---
    /*vt_tab_reg_b020*/
    vt_tab_reg_b020(i).reg      := 'B020';
    vt_tab_reg_b020(i).ind_oper := vn_ind_oper;
    vt_tab_reg_b020(i).ind_emit := vn_ind_emit;
    if gn_origem_dado_pessoa = 0 then
       vt_tab_reg_b020(i).cod_part := pk_csf.fkg_pessoa_cod_part(vn_pessoa_id);
    else
       vt_tab_reg_b020(i).cod_part := vc_cod_part;
    end if;
    ---
    if vc_cod_mod = '99' then
      vc_cod_mod := '03';
    end if;
    ---
    vt_tab_reg_b020(i).cod_mod        := vc_cod_mod;
    vt_tab_reg_b020(i).cod_sit        := vc_cod_sit;
    vt_tab_reg_b020(i).ser            := vc_serie;
    vt_tab_reg_b020(i).num_doc        := vn_num_doc;
    vt_tab_reg_b020(i).chv_nfe        := vc_chv_nfe;
    vt_tab_reg_b020(i).dt_doc         := vd_dt_doc;
    vt_tab_reg_b020(i).cod_mun_serv   := vn_cod_mun_serv;
    vt_tab_reg_b020(i).vl_cont        := vn_vl_cont;
    vt_tab_reg_b020(i).vl_mat_terc    := vn_vl_mat_terc;
    vt_tab_reg_b020(i).vl_bc_iss_rt   := vn_vl_bc_iss_rt;
    vt_tab_reg_b020(i).vl_iss_rt      := nvl(vn_vl_iss_rt, 0);
    vt_tab_reg_b020(i).vl_bc_iss      := nvl(vn_vl_bc_iss, 0);

    -- Para documentos cancelados ou NF-e ou CT-e inutilizada
    -- os campos não podem estar preenchidos, indo com valores nulo
    if vc_cod_sit in ('02', '05') then
      vt_tab_reg_b020(i).vl_bc_iss_rt := null;
      vt_tab_reg_b020(i).vl_iss_rt    := null;
      vt_tab_reg_b020(i).vl_sub       := null;
      vt_tab_reg_b020(i).vl_isnt_iss  := null;
      vt_tab_reg_b020(i).vl_ded_bc    := null;
    else
      vt_tab_reg_b020(i).vl_sub       := nvl(vn_vl_sub, 0);
      vt_tab_reg_b020(i).vl_isnt_iss  := nvl(vn_vl_isnt_iss, 0);
      vt_tab_reg_b020(i).vl_ded_bc    := nvl(vn_vl_ded_bc, 0);
    end if;
    vt_tab_reg_b020(i).vl_iss         := vn_vl_iss;
    vt_tab_reg_b020(i).cod_inf_obs    := vc_cod_inf_obs;
    --
    /*REGISTRO B025 - DETALHAMENTO POR COMBINAÇÃO DE ALÍQUOTA E ITEM DA LISTA DE SERVIÇOS DA LC 116/2003)*/
    for rec_b025 in c_b025(rec_b020.notafiscal_id) loop
      exit when c_b025%notfound or(c_b025%notfound) is null;
      --
      j := nvl(j, 0) + 1;
      --
      vt_bi_tab_reg_b025(i)(j).reg           := 'B025';
      vt_bi_tab_reg_b025(i)(j).vl_cont_p     := rec_b025.vl_cont_p;
      vt_bi_tab_reg_b025(i)(j).vl_bc_iss_p   := rec_b025.vl_bc_iss_p;
      vt_bi_tab_reg_b025(i)(j).aliq_iss      := rec_b025.aliq_iss;
      vt_bi_tab_reg_b025(i)(j).vl_iss_p      := rec_b025.vl_iss_p;
      vt_bi_tab_reg_b025(i)(j).vl_isnt_iss_p := 0;
      vt_bi_tab_reg_b025(i)(j).cod_serv      := rec_b025.cod_serv;
      --
    end loop; --rec_b025
  --
  end loop; -- rec_b020
  --
exception
  when others then
    --
    gv_mensagem_log := 'Erro na pkb_monta_reg_B020: ' || sqlerrm;
    --
    declare
      vn_loggenerico_id Log_Generico.id%TYPE;
    begin
      --
      pk_log_generico.pkb_log_generico(sn_loggenerico_id => vn_loggenerico_id,
                                       ev_mensagem       => gv_mensagem_log,
                                       ev_resumo         => gv_mensagem_log,
                                       en_tipo_log       => erro_de_sistema,
                                       en_referencia_id  => gt_row_abertura_efd.id,
                                       ev_obj_referencia => 'ABERTURA_EFD');
      --
    exception
      when others then
        null;
    end;
    --
    raise_application_error(-20101, gv_mensagem_log);
    --
end pkb_monta_reg_B020;

-------------------------------------------------------------------------------------------------------
-- monta o REGISTRO B001 - ABERTURA DO BLOCO B
procedure pkb_monta_reg_B001 (en_sigla_estado_empr estado.sigla_estado%type)
is
   --
begin
   --
   vt_tab_reg_b001(1).reg := 'B001';
   --
   if en_sigla_estado_empr = 'DF' then
     ---
     if nvl(vt_tab_reg_b020.count,0) > 0 or nvl(vt_tab_reg_b420.count,0) > 0 or 
        nvl(vt_tab_reg_b440.count,0) > 0 or nvl(vt_tab_reg_b460.count,0) > 0 or 
        nvl(vt_tab_reg_b470.count,0) > 0 then
        --
        vt_tab_reg_b001(1).ind_mov := 0;
        --
     else
        --
        vt_tab_reg_b001(1).ind_mov := 0;
        --
        -- POR ORBIGATORIEDADE DO DISTRITO FEDERAL CASO NÃO TENHA NENHUM REGISTRO DO BLOCO B MONTAR UM REGISTRO
        -- B470 ZERADO.		
        pkb_monta_reg_B470(1);  -- 0-Não / 1-Sim   -- monta registro zerado
        --		
     end if;
     ---
   else
      --
      vt_tab_reg_b001(1).ind_mov := 1;
      --
   end if;
   --
exception
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_monta_reg_B001: ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end pkb_monta_reg_B001;
-------------------------------------------------------------------------------------------------------
-- BLOCO B: APURAÇÃO DO ISS (SEFAZ DF)
procedure pkb_monta_bloco_b
is
   --
   vn_fase               number := 0;
   vv_sigla_estado_empr  estado.sigla_estado%type;
   --
begin
   --
   vn_fase := 1;
   vv_sigla_estado_empr:= pk_csf.fkg_sigla_estado_empresa(gt_row_abertura_efd.empresa_id);
   --
   if vv_sigla_estado_empr ='DF' then
      --
      vn_fase := 2;
      -- Armazena em arquivo o registro B020 - NOTA FISCAL (CÓDIGO 01), NOTA FISCAL DE SERVIÇOS (CÓDIGO 03), NOTA FISCAL DE SERVIÇOS AVULSA (CÓDIGO 3B), NOTA FISCAL DE PRODUTOR (CÓDIGO 04), CONHECIMENTO DE TRANSPORTE RODOVIÁRIO DE CARGAS (CÓDIGO 08), NF-e (CÓDIGO 55) e NFC-e (CÓDIGO 65).
      pkb_monta_reg_B020;
      --
   end if;
   --
   vn_fase := 3;
   --
   if vv_sigla_estado_empr ='DF' then
       --
       vn_fase := 4;
       -- Armazena em arquivo o registro B420 - TOTALIZAÇÃO DOS VALORES DE SERVIÇOS PRESTADOS POR COMBINAÇÃO DE ALÍQUOTA E ITEM DA LISTA DE SERVIÇOS DA LC 116/2003
       pkb_monta_reg_B420;
       --
       vn_fase := 5;
       -- Armazena em arquivo o registro B440 - TOTALIZAÇÃO DOS VALORES RETIDOS
       pkb_monta_reg_B440;
       --
       vn_fase := 6;
       -- Armazena em arquivo o registro B460 - DEDUÇÕES DO ISS
       pkb_monta_reg_B460;
       --
       vn_fase := 7;
       -- Armazena em arquivo o registro B470 - APURAÇÃO DO ISS
       pkb_monta_reg_B470(0);  -- 0-Não / 1-Sim   -- monta registro zerado
       --
   end if;
   --
   vn_fase := 8;
   --
   -- Armazena em arquivo o registro B001 - ABERTURA DO BLOCO B
   pkb_monta_reg_B001(vv_sigla_estado_empr);
   --
   vn_fase := 9;
   -- Armazena em arquivo o registro B990
   pkb_monta_reg_B990(vv_sigla_estado_empr);
   --
exception
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_monta_bloco_b fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end pkb_monta_bloco_b;
-------------------------------------------------------------------------------------------------------

-- procedimento alimenta os arrays do Sped Fiscal
procedure pkb_monta_array_efd
is
   --
   vn_fase  number := 0;
   --
begin
   --
   vn_fase := 1;
   --
   if gn_versao >= 112 then -- versão a partir de 01/01/2019
      -- procedimento monta registros do BLOCO B: APURAÇÃO DO ISS (SEFAZ DF)
      pkb_monta_bloco_b;
      --
   end if;
   --
   vn_fase := 2;
   --
   -- Procedimento monta registros do BLOCO C: DOCUMENTOS FISCAIS I - MERCADORIAS (ICMS/IPI)
   pkb_monta_bloco_c;
   --
   vn_fase := 3;
   --
   -- Procedimento monta registros do BLOCO D: DOCUMENTOS FISCAIS II - SERVIÇOS (ICMS)
   pkb_monta_bloco_d;
   --
   vn_fase := 4;
   --
   -- Procedimento monta os registro do BLOCO E: APURAÇÃO DO ICMS E DO IPI
   pkb_monta_bloco_e;
   --
   vn_fase := 5;
   --
   -- Procedimento monta os registro do BLOCO G - CONTROLE DO CRÉDITO DE ICMS DO ATIVO PERMANENTE CIAP
   pkb_monta_bloco_g;
   --
   vn_fase := 6;
   --
   -- Procedimento monta os registros do BLOCO H: INVENTÁRIO FÍSICO
   pkb_monta_bloco_h;
   --
   vn_fase := 7;
   --
   if gn_versao >= 109 then -- a partir de 01/01/2016
      --
      vn_fase := 8;
      --
      -- Procedimento monta os registros do BLOCO K:CONTROLE DA PRODUÇÃO E DO ESTOQUE
      pkb_monta_bloco_k;
      --
   end if;
   --
   vn_fase := 9;
   --
   -- Procedimento monta os registro do BLOCO 1: OUTRAS INFORMAÇÕES
   pkb_monta_bloco_1;
   --
   vn_fase := 10;
   --
   -- Procedimento monta registros do BLOCO 0: ABERTURA, IDENTIFICAÇÃO E REFERÊNCIAS.
   -- Passa a ser chamado por última para melhorar a performace
   pkb_monta_bloco_0;
   --
   vn_fase := 11;
   --
   -- Procedimento monta os registros do BLOCO 9: CONTROLE E ENCERRAMENTO DO ARQUIVO DIGITAL
   pkb_monta_bloco_9;
   --
exception
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_monta_array_efd fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico.id%type;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end pkb_monta_array_efd;

-------------------------------------------------------------------------------------------------------

-- Armazena em arquivo o REGISTRO 9999: ENCERRAMENTO DO ARQUIVO DIGITAL
procedure pkb_armaz_reg_9999
is
   --
   vn_fase  number := 0;
   i        pls_integer;
   --
begin
   --
   vn_fase := 1;
   --
   if nvl(vt_tab_reg_9999.count,0) > 0 then
      --
      vn_fase := 2;
      --
      i := nvl(vt_tab_reg_9999.first,0);
      --
      vn_fase := 3;
      --
      loop
         --
         vn_fase := 4;
         --
         if nvl(i,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 5;
         -- cria a estrutura do registro separado por PIPE "|"
         gl_conteudo := '|';
         --
         gl_conteudo := gl_conteudo || vt_tab_reg_9999(i).reg || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_9999(i).qtd_lin || '|';
         --
         vn_fase := 6;
         --
         pkb_armaz_estr_arq_efd ( ev_reg_blc   => '9999'
                                , el_conteudo  => gl_conteudo );
         --
         vn_fase := 7;
         --
         if i = vt_tab_reg_9999.last then
            exit;
         else
            i := vt_tab_reg_9999.next(i);
         end if;
         --
      end loop;
      --
   end if;
   --
exception
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_armaz_reg_9999 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end pkb_armaz_reg_9999;

-------------------------------------------------------------------------------------------------------

-- Armazena em arquivo o REGISTRO 9990: ENCERRAMENTO DO BLOCO 9
procedure pkb_armaz_reg_9990
is
   --
   vn_fase  number := 0;
   i        pls_integer;
   --
begin
   --
   vn_fase := 1;
   --
   if nvl(vt_tab_reg_9990.count,0) > 0 then
      --
      vn_fase := 2;
      --
      i := nvl(vt_tab_reg_9990.first,0);
      --
      vn_fase := 3;
      --
      loop
         --
         vn_fase := 4;
         --
         if nvl(i,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 5;
         -- cria a estrutura do registro separado por PIPE "|"
         gl_conteudo := '|';
         --
         gl_conteudo := gl_conteudo || vt_tab_reg_9990(i).reg || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_9990(i).qtd_lin_9 || '|';
         --
         vn_fase := 6;
         --
         pkb_armaz_estr_arq_efd ( ev_reg_blc   => '9990'
                                , el_conteudo  => gl_conteudo );
         --
         vn_fase := 7;
         --
         if i = vt_tab_reg_9990.last then
            exit;
         else
            i := vt_tab_reg_9990.next(i);
         end if;
         --
      end loop;
      --
   end if;
   --
exception
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_armaz_reg_9990 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end pkb_armaz_reg_9990;

-------------------------------------------------------------------------------------------------------

-- Armazena em arquivo o REGISTRO 9900: REGISTROS DO ARQUIVO
procedure pkb_armaz_reg_9900
is
   --
   vn_fase  number := 0;
   i        pls_integer;
   --
begin
   --
   vn_fase := 1;
   --
   if nvl(vt_tab_reg_9900.count,0) > 0 then
      --
      vn_fase := 2;
      --
      i := nvl(vt_tab_reg_9900.first,0);
      --
      vn_fase := 3;
      --
      loop
         --
         vn_fase := 4;
         --
         if nvl(i,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 5;
         -- cria a estrutura do registro separado por PIPE "|"
         gl_conteudo := '|';
         --
         gl_conteudo := gl_conteudo || vt_tab_reg_9900(i).reg || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_9900(i).reg_blc || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_9900(i).qtd_reg_blc || '|';
         --
         vn_fase := 6;
         --
         pkb_armaz_estr_arq_efd ( ev_reg_blc   => '9900'
                                , el_conteudo  => gl_conteudo );
         --
         vn_fase := 7;
         --
         if i = vt_tab_reg_9900.last then
            exit;
         else
            i := vt_tab_reg_9900.next(i);
         end if;
         --
      end loop;
      --
   end if;
   --
exception
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_armaz_reg_9900 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end pkb_armaz_reg_9900;

-------------------------------------------------------------------------------------------------------

-- Armazena em arquivo o REGISTRO 9001: ABERTURA DO BLOCO 9
procedure pkb_armaz_reg_9001
is
   --
   vn_fase  number := 0;
   i        pls_integer;
   --
begin
   --
   vn_fase := 1;
   --
   if nvl(vt_tab_reg_9001.count,0) > 0 then
      --
      vn_fase := 2;
      --
      i := nvl(vt_tab_reg_9001.first,0);
      --
      vn_fase := 3;
      --
      loop
         --
         vn_fase := 4;
         --
         if nvl(i,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 5;
         -- cria a estrutura do registro separado por PIPE "|"
         gl_conteudo := '|';
         --
         gl_conteudo := gl_conteudo || vt_tab_reg_9001(i).reg || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_9001(i).ind_mov || '|';
         --
         vn_fase := 6;
         --
         pkb_armaz_estr_arq_efd ( ev_reg_blc   => '9001'
                                , el_conteudo  => gl_conteudo );
         --
         vn_fase := 7;
         --
         if i = vt_tab_reg_9001.last then
            exit;
         else
            i := vt_tab_reg_9001.next(i);
         end if;
         --
      end loop;
      --
   end if;
   --
exception
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_armaz_reg_9001 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end pkb_armaz_reg_9001;

-------------------------------------------------------------------------------------------------------

-- Armazena em arquivo dados do BLOCO 9: CONTROLE E ENCERRAMENTO DO ARQUIVO DIGITAL
procedure pkb_armaz_arq_bloco_9
is
   --
   vn_fase  number := 0;
   --
begin
   --
   vn_fase := 1;
   -- Armazena em arquivo o REGISTRO 9001: ABERTURA DO BLOCO 9
   pkb_armaz_reg_9001;
   --
   vn_fase := 2;
   -- Armazena em arquivo o REGISTRO 9900: REGISTROS DO ARQUIVO
   pkb_armaz_reg_9900;
   --
   vn_fase := 3;
   -- Armazena em arquivo o REGISTRO 9990: ENCERRAMENTO DO BLOCO 9
   pkb_armaz_reg_9990;
   --
   vn_fase := 4;
   -- Armazena em arquivo o REGISTRO 9999: ENCERRAMENTO DO ARQUIVO DIGITAL
   pkb_armaz_reg_9999;
   --
exception
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_armaz_arq_bloco_9 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end pkb_armaz_arq_bloco_9;

-------------------------------------------------------------------------------------------------------

-- Armazena em arquivo o REGISTRO 1990: ENCERRAMENTO DO BLOCO 1
procedure pkb_armaz_reg_1990
is
   --
   vn_fase  number := 0;
   i        pls_integer;
   --
begin
   --
   vn_fase := 1;
   --
   if nvl(vt_tab_reg_1990.count,0) > 0 then
      --
      vn_fase := 2;
      --
      i := nvl(vt_tab_reg_1990.first,0);
      --
      vn_fase := 3;
      --
      loop
         --
         vn_fase := 4;
         --
         if nvl(i,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 5;
         -- cria a estrutura do registro separado por PIPE "|"
         gl_conteudo := '|';
         --
         gl_conteudo := gl_conteudo || vt_tab_reg_1990(i).reg || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_1990(i).qtd_lin_1 || '|';
         --
         vn_fase := 6;
         --
         pkb_armaz_estr_arq_efd ( ev_reg_blc   => '1990'
                                , el_conteudo  => gl_conteudo );
         --
         vn_fase := 7;
         --
         if i = vt_tab_reg_1990.last then
            exit;
         else
            i := vt_tab_reg_1990.next(i);
         end if;
         --
      end loop;
      --
   end if;
   --
exception
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_armaz_reg_1990 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end pkb_armaz_reg_1990;

-------------------------------------------------------------------------------------------------------

-- REGISTRO 1980: GIAF 4 GUIA DE INFORMAÇÃO E APURAÇÃO DE INCENTIVOS FISCAIS E FINANCEIROS: CENTRAL DE DISTRIBUIÇÃO (ENTRADAS/SAÍDAS)
procedure pkb_armaz_reg_1980
is
   --
   vn_fase  number := 0;
   i        pls_integer;
   --
begin
   --
   vn_fase := 1;
   --
   if nvl(vt_tab_reg_1980.count,0) > 0 then
      --
      vn_fase := 2;
      --
      i := nvl(vt_tab_reg_1980.first,0);
      --
      vn_fase := 3;
      --
      loop
         --
         vn_fase := 4;
         --
         if nvl(i,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 5;
         -- cria a estrutura do registro separado por PIPE "|"
         gl_conteudo := '|';
         --
         gl_conteudo := gl_conteudo || vt_tab_reg_1980(i).reg || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_1980(i).ind_ap,'09') || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_1980(i).G4_01, '9999999999990D99') || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_1980(i).G4_02, '9999999999990D99') || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_1980(i).G4_03, '9999999999990D99') || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_1980(i).G4_04, '9999999999990D99') || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_1980(i).G4_05, '9999999999990D99') || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_1980(i).G4_06, '9999999999990D99') || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_1980(i).G4_07, '9999999999990D99') || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_1980(i).G4_08, '9999999999990D99') || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_1980(i).G4_09, '9999999999990D99') || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_1980(i).G4_10, '9999999999990D99') || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_1980(i).G4_11, '9999999999990D99') || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_1980(i).G4_12, '9999999999990D99') || '|';

         vn_fase := 6;
         --
         pkb_armaz_estr_arq_efd ( ev_reg_blc   => '1980'
                                , el_conteudo  => gl_conteudo );
         --
         vn_fase := 7;
         --
         if i = vt_tab_reg_1980.last then
            exit;
         else
            i := vt_tab_reg_1980.next(i);
         end if;
         --
      end loop;
      --
   end if;
   --
exception
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_armaz_reg_1980 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end pkb_armaz_reg_1980;

-------------------------------------------------------------------------------------------------------

-- REGISTRO 1970: GIAF 3 - GUIA DE INFORMAÇÃO E APURAÇÃO DE INCENTIVOS FISCAIS E FINANCEIROS: IMPORTAÇÃO (DIFERIMENTO NA ENTRADA E CRÉDITO
-- PRESUMIDO NA SAÍDA SUBSEQUENTE)
procedure pkb_armaz_reg_1970
is
   --
   vn_fase          number := 0;
   i                pls_integer;
   j                pls_integer;
   vn_qtde_reg_1975 number;
   --
begin
   --
   vn_fase := 1;
   --
   if nvl(vt_tab_reg_1970.count,0) > 0 then
      --
      vn_fase := 2;
      --
      i := nvl(vt_tab_reg_1970.first,0);
      --
      vn_fase := 2.1;
      --
      loop
         --
         vn_fase := 2.2;
         --
         if nvl(i,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 2.3;
         -- cria a estrutura do registro separado por PIPE "|"
         gl_conteudo := '|';
         --
         gl_conteudo := gl_conteudo || vt_tab_reg_1970(i).REG|| '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_1970(i).IND_AP,'09')|| '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_1970(i).G3_01, '9999999999990D99')|| '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_1970(i).G3_02, '9999999999990D99')|| '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_1970(i).G3_03, '9999999999990D99')|| '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_1970(i).G3_04, '9999999999990D99')|| '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_1970(i).G3_05, '9999999999990D99')|| '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_1970(i).G3_06, '9999999999990D99')|| '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_1970(i).G3_07, '9999999999990D99')|| '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_1970(i).G3_T , '9999999999990D99')|| '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_1970(i).G3_08, '9999999999990D99')|| '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_1970(i).G3_09, '9999999999990D99')|| '|';
         --
         vn_fase := 2.4;
         --
         pkb_armaz_estr_arq_efd ( ev_reg_blc   => '1970'
                                , el_conteudo  => gl_conteudo );
         --
         vn_fase := 2.5;
         -- REGISTRO 1975: GIAF 3 - GUIA DE INFORMAÇÃO E APURAÇÃO DE INCENTIVOS FISCAIS E FINANCEIROS: IMPORTAÇÃO (SAÍDAS INTERNAS POR FAIXA DE ALÍQUOTA)
         begin
            vn_qtde_reg_1975 := nvl(vt_bi_tab_reg_1975(i).count,0);
         exception
            when others then
               vn_qtde_reg_1975 := 0;
         end;
         --
         vn_fase := 3;
         --
         if nvl(vn_qtde_reg_1975,0) > 0 then
            --
            vn_fase := 3.1;
            --
            j := nvl(vt_bi_tab_reg_1975(i).first,0);
            --
            vn_fase := 3.2;
            --
            loop
               --
               vn_fase := 3.3;
               --
               if nvl(j,0) = 0 then
                  exit;
               end if;
               --
               vn_fase := 3.4;
               -- cria a estrutura do registro separado por PIPE "|"
               gl_conteudo := '|';
               --
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_1975(i)(j).REG || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_1975(i)(j).ALIQ_IMP_BASE,'90D99') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_1975(i)(j).G3_10, '9999999999990D99')|| '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_1975(i)(j).G3_11, '9999999999990D99')|| '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_1975(i)(j).G3_12, '9999999999990D99')|| '|';
               --
               vn_fase := 3.5;
               --
               pkb_armaz_estr_arq_efd ( ev_reg_blc   => '1975'
                                      , el_conteudo  => gl_conteudo );
               --
               vn_fase := 3.6;
               --
               if j = vt_bi_tab_reg_1975(i).last then
                  exit;
               else
                  j := vt_bi_tab_reg_1975(i).next(j);
               end if;
               --
            end loop;
            --
         end if;
         --
         vn_fase := 4;
         --
         if i = vt_tab_reg_1970.last then
            exit;
         else
            i := vt_tab_reg_1970.next(i);
         end if;
         --
      end loop;
      --
   end if;
   --
exception
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_armaz_reg_1970 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end pkb_armaz_reg_1970;

-------------------------------------------------------------------------------------------------------

-- REGISTRO 1960 - GIAF 1 - GUIA DE INFORMAÇÃO E APURAÇÃO DE INCENTIVOS FISCAIS E FINANCEIROS: INDÚSTRIA (CRÉDITO PRESUMIDO)
procedure pkb_armaz_reg_1960
is
   --
   vn_fase  number := 0;
   i        pls_integer;
   --
begin
   --
   vn_fase := 1;
   --
   if nvl(vt_tab_reg_1960.count,0) > 0 then
      --
      vn_fase := 2;
      --
      i := nvl(vt_tab_reg_1960.first,0);
      --
      vn_fase := 3;
      --
      loop
         --
         vn_fase := 4;
         --
         if nvl(i,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 5;
         -- cria a estrutura do registro separado por PIPE "|"
         gl_conteudo := '|';
         --
         gl_conteudo := gl_conteudo || vt_tab_reg_1960(i).reg || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_1960(i).ind_ap,'09') || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_1960(i).G1_01, '9999999999990D99') || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_1960(i).G1_02, '9999999999990D99') || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_1960(i).G1_03, '9999999999990D99') || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_1960(i).G1_04, '9999999999990D99') || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_1960(i).G1_05, '9999999999990D99') || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_1960(i).G1_06, '9999999999990D99') || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_1960(i).G1_07, '9999999999990D99') || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_1960(i).G1_08, '9999999999990D99') || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_1960(i).G1_09, '9999999999990D99') || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_1960(i).G1_10, '9999999999990D99') || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_1960(i).G1_11, '9999999999990D99') || '|';

         vn_fase := 6;
         --
         pkb_armaz_estr_arq_efd ( ev_reg_blc   => '1960'
                                , el_conteudo  => gl_conteudo );
         --
         vn_fase := 7;
         --
         if i = vt_tab_reg_1960.last then
            exit;
         else
            i := vt_tab_reg_1960.next(i);
         end if;
         --
      end loop;
      --
   end if;
   --
exception
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_armaz_reg_1960 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end pkb_armaz_reg_1960;

-------------------------------------------------------------------------------------------------------


-- REGISTRO 1900 - INDICADOR DE SUB-APURAÇÃO DO ICMS
procedure pkb_armaz_reg_1900
is
   --
   vn_fase          number := 0;
   i                pls_integer;
   j                pls_integer;
   k                pls_integer;
   vn_qtde_reg_1921 number := 0;
   vn_qtde_reg_1922 number := 0;
   vn_qtde_reg_1923 number := 0;
   vn_qtde_reg_1925 number := 0;
   vn_qtde_reg_1926 number := 0;
   --
begin
   --
   vn_fase := 1;
   --
   if nvl(vt_tab_reg_1900.count,0) > 0 then
      --
      vn_fase := 2;
      --
      i := nvl(vt_tab_reg_1900.first,0);
      --
      vn_fase := 3;
      --
      loop
         --
         vn_fase := 4;
         --
         if nvl(i,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 5;
         -- cria a estrutura do registro separado por PIPE "|"
         gl_conteudo := '|';
         --
         gl_conteudo := gl_conteudo || vt_tab_reg_1900(i).reg                  || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_1900(i).ind_apur_icms        || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_1900(i).descr_compl_out_apur || '|';
         --
         vn_fase := 6;
         --
         pkb_armaz_estr_arq_efd ( ev_reg_blc  => '1900'
                                , el_conteudo => gl_conteudo );
         --
         vn_fase := 7;
         -- cria a estrutura do registro separado por PIPE "|"
         gl_conteudo := '|';
         --
         gl_conteudo := gl_conteudo || vt_tab_reg_1910(i).reg                        || '|';
         gl_conteudo := gl_conteudo || to_char(vt_tab_reg_1910(i).dt_ini,'ddmmrrrr') || '|';
         gl_conteudo := gl_conteudo || to_char(vt_tab_reg_1910(i).dt_fin,'ddmmrrrr') || '|';
         --
         vn_fase := 8;
         --
         pkb_armaz_estr_arq_efd ( ev_reg_blc  => '1910'
                                , el_conteudo => gl_conteudo );
         --
         vn_fase := 9;
         -- cria a estrutura do registro separado por PIPE "|"
         gl_conteudo := '|';
         --
         gl_conteudo := gl_conteudo || vt_tab_reg_1920(i).reg                                                            || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_1920(i).vl_tot_transf_debitos_oa, '9999999999990D99')  || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_1920(i).vl_tot_aj_debitos_oa, '9999999999990D99')      || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_1920(i).vl_estornos_cred_oa, '9999999999990D99')       || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_1920(i).vl_tot_transf_creditos_oa, '9999999999990D99') || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_1920(i).vl_tot_aj_creditos_oa, '9999999999990D99')     || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_1920(i).vl_estornos_deb_oa, '9999999999990D99')        || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_1920(i).vl_sld_credor_ant_oa, '9999999999990D99')      || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_1920(i).vl_sld_apurado_oa, '9999999999990D99')         || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_1920(i).vl_tot_ded, '9999999999990D99')                || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_1920(i).vl_icms_recolher_oa, '9999999999990D99')       || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_1920(i).vl_sld_credor_transp_oa, '9999999999990D99')   || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_1920(i).vl_deb_esp_oa, '9999999999990D99')             || '|';
         --
         vn_fase := 10;
         --
         pkb_armaz_estr_arq_efd ( ev_reg_blc  => '1920'
                                , el_conteudo => gl_conteudo );
         --
         vn_fase := 11;
         --
         begin
            vn_qtde_reg_1921 := nvl(vt_bi_tab_reg_1921(i).count,0);
         exception
            when others then
               vn_qtde_reg_1921 := 0;
         end;
         --
         vn_fase := 12;
         --
         if nvl(vn_qtde_reg_1921,0) > 0 then
            --
            vn_fase := 13;
            --
            j := nvl(vt_bi_tab_reg_1921(i).first,0);
            --
            vn_fase := 14;
            --
            loop
               --
               vn_fase := 15;
               --
               if nvl(j,0) = 0 then
                  exit;
               end if;
               --
               vn_fase := 16;
               -- cria a estrutura do registro separado por PIPE "|"
               gl_conteudo := '|';
               --
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_1921(i)(j).reg            || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_1921(i)(j).cod_aj_apur    || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_1921(i)(j).descr_compl_aj || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_1921(i)(j).vl_aj_apur,'9999999999990D99') || '|';
               --
               vn_fase := 17;
               --
               pkb_armaz_estr_arq_efd ( ev_reg_blc   => '1921'
                                      , el_conteudo  => gl_conteudo );
               --
               vn_fase := 18;
               --
               begin
                  vn_qtde_reg_1922 := nvl(vt_tri_tab_reg_1922(i)(j).count,0);
               exception
                  when others then
                     vn_qtde_reg_1922 := 0;
               end;
               --
               vn_fase := 19;
               --
               if nvl(vn_qtde_reg_1922,0) > 0 then
                  --
                  vn_fase := 20;
                  --
                  k := nvl(vt_tri_tab_reg_1922(i)(j).first,0);
                  --
                  vn_fase := 21;
                  --
                  loop
                     --
                     vn_fase := 22;
                     --
                     if nvl(j,0) = 0 then
                        exit;
                     end if;
                     --
                     vn_fase := 23;
                     -- cria a estrutura do registro separado por PIPE "|"
                     gl_conteudo := '|';
                     --
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_1922(i)(j)(k).reg       || '|';
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_1922(i)(j)(k).num_da    || '|';
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_1922(i)(j)(k).num_proc  || '|';
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_1922(i)(j)(k).ind_proc  || '|';
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_1922(i)(j)(k).proc      || '|';
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_1922(i)(j)(k).txt_compl || '|';
                     --
                     vn_fase := 24;
                     --
                     pkb_armaz_estr_arq_efd ( ev_reg_blc  => '1922'
                                            , el_conteudo => gl_conteudo );
                     --
                     if k = vt_tri_tab_reg_1922(i)(j).last then
                        exit;
                     else
                        k := vt_tri_tab_reg_1922(i)(j).next(k);
                     end if;
                     --
                  end loop;
                  --
               end if;
               --
               vn_fase := 25;
               --
               begin
                  vn_qtde_reg_1923 := nvl(vt_tri_tab_reg_1923(i)(j).count,0);
               exception
                  when others then
                     vn_qtde_reg_1923 := 0;
               end;
               --
               vn_fase := 26;
               --
               if nvl(vn_qtde_reg_1923,0) > 0 then
                  --
                  vn_fase := 27;
                  --
                  k := nvl(vt_tri_tab_reg_1923(i)(j).first,0);
                  --
                  vn_fase := 28;
                  --
                  loop
                     --
                     vn_fase := 29;
                     --
                     if nvl(j,0) = 0 then
                        exit;
                     end if;
                     --
                     vn_fase := 30;
                     -- cria a estrutura do registro separado por PIPE "|"
                     gl_conteudo := '|';
                     --
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_1923(i)(j)(k).reg      || '|';
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_1923(i)(j)(k).cod_part || '|';
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_1923(i)(j)(k).cod_mod  || '|';
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_1923(i)(j)(k).ser      || '|';
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_1923(i)(j)(k).sub      || '|';
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_1923(i)(j)(k).num_doc  || '|';
                     gl_conteudo := gl_conteudo || to_char(vt_tri_tab_reg_1923(i)(j)(k).dt_doc,'ddmmrrrr') || '|';
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_1923(i)(j)(k).cod_item || '|';
                     gl_conteudo := gl_conteudo || fkg_formata_num(vt_tri_tab_reg_1923(i)(j)(k).vl_aj_item,'9999999999990D99') || '|';
                     --
                     if gt_row_abertura_efd.dt_ini >= to_date('01/01/2017', 'dd/mm/rrrr') then
                        --
                        gl_conteudo := gl_conteudo || vt_tri_tab_reg_1923(i)(j)(k).chv_doce  || '|';
                        --
                     end if;
                     --
                     vn_fase := 31;
                     --
                     pkb_armaz_estr_arq_efd ( ev_reg_blc   => '1923'
                                            , el_conteudo  => gl_conteudo );
                     --
                     if k = vt_tri_tab_reg_1923(i)(j).last then
                        exit;
                     else
                        k := vt_tri_tab_reg_1923(i)(j).next(k);
                     end if;
                     --
                  end loop;
                  --
               end if;
               --
               if j = vt_bi_tab_reg_1921(i).last then
                  exit;
               else
                  j := vt_bi_tab_reg_1921(i).next(j);
               end if;
               --
            end loop;
            --
         end if;
         --
         vn_fase := 32;
         --
         begin
            vn_qtde_reg_1925 := nvl(vt_bi_tab_reg_1925(i).count,0);
         exception
            when others then
               vn_qtde_reg_1925 := 0;
         end;
         --
         vn_fase := 33;
         --
         if nvl(vn_qtde_reg_1925,0) > 0 then
            --
            vn_fase := 34;
            --
            j := nvl(vt_bi_tab_reg_1925(i).first,0);
            --
            vn_fase := 35;
            --
            loop
               --
               vn_fase := 36;
               --
               if nvl(j,0) = 0 then
                  exit;
               end if;
               --
               vn_fase := 37;
               -- cria a estrutura do registro separado por PIPE "|"
               gl_conteudo := '|';
               --
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_1925(i)(j).reg            || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_1925(i)(j).cod_inf_adic   || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_1925(i)(j).vl_inf_adic,'9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_1925(i)(j).descr_compl_aj || '|';
               --
               vn_fase := 38;
               --
               pkb_armaz_estr_arq_efd ( ev_reg_blc   => '1925'
                                      , el_conteudo  => gl_conteudo );
               --
               if j = vt_bi_tab_reg_1925(i).last then
                  exit;
               else
                  j := vt_bi_tab_reg_1925(i).next(j);
               end if;
               --
            end loop;
            --
         end if;
         --
         vn_fase := 39;
         --
         begin
            vn_qtde_reg_1926 := nvl(vt_bi_tab_reg_1926(i).count,0);
         exception
            when others then
               vn_qtde_reg_1926 := 0;
         end;
         --
         vn_fase := 40;
         --
         if nvl(vn_qtde_reg_1926,0) > 0 then
            --
            vn_fase := 41;
            --
            j := nvl(vt_bi_tab_reg_1926(i).first,0);
            --
            vn_fase := 42;
            --
            loop
               --
               vn_fase := 43;
               --
               if nvl(j,0) = 0 then
                  exit;
               end if;
               --
               vn_fase := 44;
               -- cria a estrutura do registro separado por PIPE "|"
               gl_conteudo := '|';
               --
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_1926(i)(j).reg       || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_1926(i)(j).cod_or    || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_1926(i)(j).vl_or,'9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || to_char(vt_bi_tab_reg_1926(i)(j).dt_vcto,'ddmmrrrr') || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_1926(i)(j).cod_rec   || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_1926(i)(j).num_proc  || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_1926(i)(j).ind_proc  || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_1926(i)(j).proc      || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_1926(i)(j).txt_compl || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_1926(i)(j).mes_ref   || '|';
               --
               vn_fase := 45;
               --
               pkb_armaz_estr_arq_efd ( ev_reg_blc  => '1926'
                                      , el_conteudo => gl_conteudo );
               --
               if j = vt_bi_tab_reg_1926(i).last then
                  exit;
               else
                  j := vt_bi_tab_reg_1926(i).next(j);
               end if;
               --
            end loop;
            --
         end if;
         --
         vn_fase := 46;
         --
         if i = vt_tab_reg_1900.last then
            exit;
         else
            i := vt_tab_reg_1900.next(i);
         end if;
         --
      end loop;
      --
   end if;
   --
exception
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_armaz_reg_1900 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end pkb_armaz_reg_1900;

-------------------------------------------------------------------------------------------------------

-- REGISTRO 1800 - DCTA - DEMONSTRATIVO DE CRÉDITO DO ICMS SOBRE TRANSPORTE AÉREO
procedure pkb_armaz_reg_1800
is
   --
   vn_fase  number := 0;
   i        pls_integer;
   --
begin
   --
   vn_fase := 1;
   --
   if nvl(vt_tab_reg_1800.count,0) > 0 then
      --
      vn_fase := 2;
      --
      i := nvl(vt_tab_reg_1800.first,0);
      --
      vn_fase := 3;
      --
      loop
         --
         vn_fase := 4;
         --
         if nvl(i,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 5;
         -- cria a estrutura do registro separado por PIPE "|"
         gl_conteudo := '|';
         --
         gl_conteudo := gl_conteudo || vt_tab_reg_1800(i).reg || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_1800(i).vl_carga, '9999999999990D99') || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_1800(i).vl_pass, '9999999999990D99') || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_1800(i).vl_fat, '9999999999990D99') || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_1800(i).ind_rat || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_1800(i).vl_icms_ant, '9999999999990D99') || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_1800(i).vl_bc_icms, '9999999999990D99') || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_1800(i).vl_icms_apur, '9999999999990D99') || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_1800(i).vl_bc_icms_apur, '9999999999990D99') || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_1800(i).vl_dif, '9999999999990D99') || '|';
         --
         vn_fase := 6;
         --
         pkb_armaz_estr_arq_efd ( ev_reg_blc   => '1800'
                                , el_conteudo  => gl_conteudo );
         --
         vn_fase := 7;
         --
         if i = vt_tab_reg_1800.last then
            exit;
         else
            i := vt_tab_reg_1800.next(i);
         end if;
         --
      end loop;
      --
   end if;
   --
exception
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_armaz_reg_1800 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end pkb_armaz_reg_1800;

-------------------------------------------------------------------------------------------------------

-- REGISTRO 1700 - DOCUMENTOS FISCAIS UTILIZADOS
procedure pkb_armaz_reg_1700
is
   --
   vn_fase          number := 0;
   i                pls_integer;
   j                pls_integer;
   vn_qtde_reg_1710 number;
   --
begin
   --
   vn_fase := 1;
   --
   if nvl(vt_tab_reg_1700.count,0) > 0 then
      --
      vn_fase := 2;
      --
      i := nvl(vt_tab_reg_1700.first,0);
      --
      vn_fase := 2.1;
      --
      loop
         --
         vn_fase := 2.2;
         --
         if nvl(i,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 2.3;
         -- cria a estrutura do registro separado por PIPE "|"
         gl_conteudo := '|';
         --
         gl_conteudo := gl_conteudo || vt_tab_reg_1700(i).reg || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_1700(i).cod_disp || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_1700(i).cod_mod || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_1700(i).ser || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_1700(i).sub || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_1700(i).num_doc_ini || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_1700(i).num_doc_fin || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_1700(i).num_aut || '|';
         --
         vn_fase := 2.4;
         --
         pkb_armaz_estr_arq_efd ( ev_reg_blc   => '1700'
                                , el_conteudo  => gl_conteudo );
         --
         vn_fase := 2.5;
         -- REGISTRO 1710 - DOCUMENTOS FISCAIS CANCELADOS/INUTILIZADOS
         begin
            vn_qtde_reg_1710 := nvl(vt_bi_tab_reg_1710(i).count,0);
         exception
            when others then
               vn_qtde_reg_1710 := 0;
         end;
         --
         vn_fase := 3;
         --
         if nvl(vn_qtde_reg_1710,0) > 0 then
            --
            vn_fase := 3.1;
            --
            j := nvl(vt_bi_tab_reg_1710(i).first,0);
            --
            vn_fase := 3.2;
            --
            loop
               --
               vn_fase := 3.3;
               --
               if nvl(j,0) = 0 then
                  exit;
               end if;
               --
               vn_fase := 3.4;
               -- cria a estrutura do registro separado por PIPE "|"
               gl_conteudo := '|';
               --
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_1710(i)(j).reg || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_1710(i)(j).num_doc_ini || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_1710(i)(j).num_doc_fin || '|';
               --
               vn_fase := 3.5;
               --
               pkb_armaz_estr_arq_efd ( ev_reg_blc   => '1710'
                                      , el_conteudo  => gl_conteudo );
               --
               vn_fase := 3.6;
               --
               if j = vt_bi_tab_reg_1710(i).last then
                  exit;
               else
                  j := vt_bi_tab_reg_1710(i).next(j);
               end if;
               --
            end loop;
            --
         end if;
         --
         vn_fase := 4;
         --
         if i = vt_tab_reg_1700.last then
            exit;
         else
            i := vt_tab_reg_1700.next(i);
         end if;
         --
      end loop;
      --
   end if;
   --
exception
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_armaz_reg_1700 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end pkb_armaz_reg_1700;

-------------------------------------------------------------------------------------------------------

-- REGISTRO 1600: TOTAL DAS OPERAÇÕES COM CARTÃO DE CRÉDITO E/OU DÉBITO
procedure pkb_armaz_reg_1600
is
   --
   vn_fase  number := 0;
   i        pls_integer;
   --
begin
   --
   vn_fase := 1;
   --
   if nvl(vt_tab_reg_1600.count,0) > 0 then
      --
      vn_fase := 2;
      --
      i := vt_tab_reg_1600.first;
      --
      vn_fase := 3;
      --
      loop
         --
         vn_fase := 4;
         --
         if nvl(i,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 5;
         -- cria a estrutura do registro separado por PIPE "|"
         gl_conteudo := '|';
         --
         gl_conteudo := gl_conteudo || vt_tab_reg_1600(i).reg || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_1600(i).cod_part || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_1600(i).tot_credito, '9999999999990D99') || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_1600(i).tot_debito, '9999999999990D99') || '|';
         --
         vn_fase := 6;
         --
         pkb_armaz_estr_arq_efd ( ev_reg_blc   => '1600'
                                , el_conteudo  => gl_conteudo );
         --
         vn_fase := 7;
         --
         if i = vt_tab_reg_1600.last then
            exit;
         else
            i := vt_tab_reg_1600.next(i);
         end if;
         --
      end loop;
      --
   end if;
   --
exception
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_armaz_reg_1600 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end pkb_armaz_reg_1600;

-------------------------------------------------------------------------------------------------------

-- REGISTRO 1500: NOTA FISCAL/CONTA DE ENERGIA ELÉTRICA (CÓDIGO 06) - OPERAÇÕES INTERESTADUAIS
procedure pkb_armaz_reg_1500
is
   --
   vn_fase          number := 0;
   i                pls_integer;
   j                pls_integer;
   vn_qtde_reg_1510 number;
   --
begin
   --
   vn_fase := 1;
   --
   if nvl(vt_tab_reg_1500.count,0) > 0 then
      --
      vn_fase := 2;
      --
      i := vt_tab_reg_1500.first;
      --
      vn_fase := 3;
      --
      loop
         --
         vn_fase := 4;
         --
         if nvl(i,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 5;
         -- cria a estrutura do registro separado por PIPE "|"
         gl_conteudo := '|';
         --
         gl_conteudo := gl_conteudo || vt_tab_reg_1500(i).reg || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_1500(i).ind_oper || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_1500(i).ind_emit || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_1500(i).cod_part || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_1500(i).cod_mod || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_1500(i).cod_sit || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_1500(i).ser || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_1500(i).sub || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_1500(i).cod_cons || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_1500(i).num_doc || '|';
         gl_conteudo := gl_conteudo || to_char(vt_tab_reg_1500(i).dt_doc, 'ddmmrrrr') || '|';
         gl_conteudo := gl_conteudo || to_char(vt_tab_reg_1500(i).dt_e_s, 'ddmmrrrr') || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_1500(i).vl_doc, '9999999999990D99') || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_1500(i).vl_desc, '9999999999990D99') || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_1500(i).vl_forn, '9999999999990D99') || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_1500(i).vl_serv_nt, '9999999999990D99') || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_1500(i).vl_terc, '9999999999990D99') || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_1500(i).vl_da, '9999999999990D99') || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_1500(i).vl_bc_icms, '9999999999990D99') || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_1500(i).vl_icms, '9999999999990D99') || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_1500(i).vl_bc_icms_st, '9999999999990D99') || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_1500(i).vl_icms_st, '9999999999990D99') || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_1500(i).cod_inf || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_1500(i).vl_pis, '9999999999990D99') || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_1500(i).vl_cofins, '9999999999990D99') || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_1500(i).tp_ligacao || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_1500(i).cod_grupo_tensao || '|';
         --
         vn_fase := 6;
         --
         pkb_armaz_estr_arq_efd ( ev_reg_blc   => '1500'
                                , el_conteudo  => gl_conteudo );
         --
         vn_fase := 7;
         -- REGISTRO 1510: ITENS DO DOCUMENTO NOTA FISCAL/CONTA ENERGIA ELÉTRICA
         begin
            vn_qtde_reg_1510 := vt_bi_tab_reg_1510(i).count;
         exception
            when others then
               vn_qtde_reg_1510 := 0;
         end;
         --
         vn_fase := 7.1;
         --
         if nvl(vn_qtde_reg_1510,0) > 0 then
            --
            vn_fase := 7.2;
            --
            j := vt_bi_tab_reg_1510(i).first;
            --
            vn_fase := 7.3;
            --
            loop
               --
               vn_fase := 7.4;
               --
               if nvl(j,0) = 0 then
                  exit;
               end if;
               --
               vn_fase := 7.5;
               -- cria a estrutura do registro separado por PIPE "|"
               gl_conteudo := '|';
               --
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_1510(i)(j).reg || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_1510(i)(j).num_item || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_1510(i)(j).cod_item || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_1510(i)(j).cod_class || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_1510(i)(j).qtd, '9999999999990D999') || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_1510(i)(j).unid || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_1510(i)(j).vl_item, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_1510(i)(j).vl_desc, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_1510(i)(j).cst_icms || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_1510(i)(j).cfop || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_1510(i)(j).vl_bc_icms, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_1510(i)(j).aliq_icms, '990D99') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_1510(i)(j).vl_icms, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_1510(i)(j).vl_bc_icms_st, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_1510(i)(j).aliq_st, '990D99') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_1510(i)(j).vl_icms_st, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_1510(i)(j).ind_rec || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_1510(i)(j).cod_part || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_1510(i)(j).vl_pis, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_1510(i)(j).vl_cofins, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_1510(i)(j).cod_cta || '|';
               --
               vn_fase := 7.6;
               --
               pkb_armaz_estr_arq_efd ( ev_reg_blc   => '1510'
                                      , el_conteudo  => gl_conteudo );
               --
               vn_fase := 7.7;
               --
               if j = vt_bi_tab_reg_1510(i).last then
                  exit;
               else
                  j := vt_bi_tab_reg_1510(i).next(j);
               end if;
               --
            end loop;
            --
         end if;
         --
         vn_fase := 8;
         --
         if i = vt_tab_reg_1500.last then
            exit;
         else
            i := vt_tab_reg_1500.next(i);
         end if;
         --
      end loop;
      --
   end if;
   --
exception
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_armaz_reg_1500 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end pkb_armaz_reg_1500;

-------------------------------------------------------------------------------------------------------
-- Armazena em arquivo o REGISTRO 1400: INFORMAÇÃO SOBRE VALORES AGREGADOS
procedure pkb_armaz_reg_1400 is
  --
  vn_fase number := 0;
  i       pls_integer;
  --
begin
  --
  vn_fase := 1;
  --
  if nvl(vt_tab_reg_1400.count, 0) > 0 then
    --
    vn_fase := 2;
    --
    i := nvl(vt_tab_reg_1400.first, 0);
    --
    vn_fase := 3;
    --
    loop
      --
      vn_fase := 4;
      --
      if nvl(i, 0) = 0 then
        exit;
      end if;
      --
      vn_fase := 5;
      -- cria a estrutura do registro separado por PIPE "|"
      gl_conteudo := '|';
      --
      gl_conteudo := gl_conteudo || vt_tab_reg_1400(i).reg || '|';
      gl_conteudo := gl_conteudo || vt_tab_reg_1400(i).cod_item_ipm || '|';
      gl_conteudo := gl_conteudo || vt_tab_reg_1400(i).mun || '|';
      gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_1400(i).valor, '9999999999990D99') || '|';
      --
      vn_fase := 6;
      --
      pkb_armaz_estr_arq_efd(ev_reg_blc  => '1400',
                             el_conteudo => gl_conteudo);
      --
      vn_fase := 7;
      --
      if i = vt_tab_reg_1400.last then
        exit;
      else
        i := vt_tab_reg_1400.next(i);
      end if;
      --
    end loop;
    --
  end if;
  --
exception
  when others then
    --
    gv_mensagem_log := 'Erro na pkb_armaz_reg_1400 fase(' || vn_fase || '): ' || sqlerrm;
    --
    declare
      vn_loggenerico_id Log_Generico.id%TYPE;
    begin
      --
      pk_log_generico.pkb_log_generico(sn_loggenerico_id => vn_loggenerico_id,
                                       ev_mensagem       => gv_mensagem_log,
                                       ev_resumo         => gv_mensagem_log,
                                       en_tipo_log       => erro_de_sistema,
                                       en_referencia_id  => gt_row_abertura_efd.id,
                                       ev_obj_referencia => 'ABERTURA_EFD');
      --
    exception
      when others then
        null;
    end;
    --
    raise_application_error(-20101, gv_mensagem_log);
    --
end pkb_armaz_reg_1400;
-------------------------------------------------------------------------------------------------------

-- Armazena em arquivo o REGISTRO 1390: CONTROLE DE PRODUÇÃO DE USINA
procedure pkb_armaz_reg_1390
is
   --
   vn_fase          number := 0;
   i                pls_integer;
   j                pls_integer;
   vn_qtde_reg_1391 number;
   --
begin
   --
   vn_fase := 1;
   --
   if nvl(vt_tab_reg_1390.count,0) > 0 then
      --
      vn_fase := 2;
      --
      i := nvl(vt_tab_reg_1390.first,0);
      --
      vn_fase := 3;
      --
      loop
         --
         vn_fase := 4;
         --
         if nvl(i,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 5;
         -- cria a estrutura do registro separado por PIPE "|"
         gl_conteudo := '|';
         --
         gl_conteudo := gl_conteudo || vt_tab_reg_1390(i).reg || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_1390(i).cod_prod || '|';
         --
         vn_fase := 6;
         --
         pkb_armaz_estr_arq_efd ( ev_reg_blc   => '1390'
                                , el_conteudo  => gl_conteudo );
         --
         vn_fase := 7;
         --
         begin
            vn_qtde_reg_1391 := vt_bi_tab_reg_1391(i).count;
         exception
            when others then
               vn_qtde_reg_1391 := 0;
         end;
         --
         vn_fase := 7.1;
         --
         if nvl(vn_qtde_reg_1391,0) > 0 then
            --
            vn_fase := 7.2;
            --
            j := vt_bi_tab_reg_1391(i).first;
            --
            vn_fase := 7.3;
            --
            loop
               --
               vn_fase := 7.4;
               --
               if nvl(j,0) = 0 then
                  exit;
               end if;
               --
               vn_fase := 7.5;
               -- cria a estrutura do registro separado por PIPE "|"
               gl_conteudo := '|';
               --
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_1391(i)(j).reg || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_1391(i)(j).dt_registro || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_1391(i)(j).qtd_moid, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_1391(i)(j).estq_ini, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_1391(i)(j).qtd_produz, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_1391(i)(j).ent_anid_hid, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_1391(i)(j).outr_entr, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_1391(i)(j).perda, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_1391(i)(j).cons, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_1391(i)(j).sai_ani_hid, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_1391(i)(j).saidas, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_1391(i)(j).estq_fin, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_1391(i)(j).estq_ini_mel, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_1391(i)(j).prod_dia_mel, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_1391(i)(j).util_mel, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_1391(i)(j).prod_alc_mel, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_1391(i)(j).obs || '|';
               if gt_row_abertura_efd.dt_ini >= '01/01/2020' then
               --
               --gl_conteudo := gl_conteudo || vt_bi_tab_reg_1391(i)(j).item_id || '|'; --#67592
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_1391(i)(j).cod_item || '|';  --#67592
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_1391(i)(j).dm_tp_residuo || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_1391(i)(j).qtd_residuo, '9999999999990D99') || '|';
               --
               end if;
               --
               vn_fase := 7.6;
               --
               pkb_armaz_estr_arq_efd ( ev_reg_blc   => '1391'
                                      , el_conteudo  => gl_conteudo );
               --
               vn_fase := 7.7;
               --
               if j = vt_bi_tab_reg_1391(i).last then
                  exit;
               else
                  j := vt_bi_tab_reg_1391(i).next(j);
               end if;
               --
            end loop;
            --
         end if;
         --
         vn_fase := 8;
         --
         if i = vt_tab_reg_1390.last then
            exit;
         else
            i := vt_tab_reg_1390.next(i);
         end if;
         --
      end loop;
      --
   end if;
   --
exception
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_armaz_reg_1390 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end pkb_armaz_reg_1390;

-------------------------------------------------------------------------------------------------------

-- Armazena em arquivo o REGISTRO 1350: BOMBAS
procedure pkb_armaz_reg_1350
is
   --
   vn_fase          number := 0;
   i                pls_integer;
   j                pls_integer;
   vn_qtde_reg_1360 number;
   vn_qtde_reg_1370 number;
   --
begin
   --
   vn_fase := 1;
   --
   if nvl(vt_tab_reg_1350.count,0) > 0 then
      --
      vn_fase := 2;
      --
      i := nvl(vt_tab_reg_1350.first,0);
      --
      vn_fase := 3;
      --
      loop
         --
         vn_fase := 4;
         --
         if nvl(i,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 5;
         -- cria a estrutura do registro separado por PIPE "|"
         gl_conteudo := '|';
         --
         gl_conteudo := gl_conteudo || vt_tab_reg_1350(i).reg || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_1350(i).serie || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_1350(i).fabricante || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_1350(i).modelo || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_1350(i).tipo_medicao || '|';
         --
         vn_fase := 6;
         --
         pkb_armaz_estr_arq_efd ( ev_reg_blc   => '1350'
                                , el_conteudo  => gl_conteudo );
         --
         vn_fase := 7;
         -- REGISTRO 1360: LACRES DA BOMBA
         begin
            vn_qtde_reg_1360 := vt_bi_tab_reg_1360(i).count;
         exception
            when others then
               vn_qtde_reg_1360 := 0;
         end;
         --
         vn_fase := 7.1;
         --
         if nvl(vn_qtde_reg_1360,0) > 0 then
            --
            vn_fase := 7.2;
            --
            j := vt_bi_tab_reg_1360(i).first;
            --
            vn_fase := 7.3;
            --
            loop
               --
               vn_fase := 7.4;
               --
               if nvl(j,0) = 0 then
                  exit;
               end if;
               --
               vn_fase := 7.5;
               -- cria a estrutura do registro separado por PIPE "|"
               gl_conteudo := '|';
               --
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_1360(i)(j).reg || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_1360(i)(j).num_lacre || '|';
               gl_conteudo := gl_conteudo || to_char(vt_bi_tab_reg_1360(i)(j).dt_aplicacao, 'ddmmrrrr') || '|';
               --
               vn_fase := 7.6;
               --
               pkb_armaz_estr_arq_efd ( ev_reg_blc   => '1360'
                                      , el_conteudo  => gl_conteudo );
               --
               vn_fase := 7.7;
               --
               if j = vt_bi_tab_reg_1360(i).last then
                  exit;
               else
                  j := vt_bi_tab_reg_1360(i).next(j);
               end if;
               --
            end loop;
            --
         end if;
         --
         vn_fase := 8;
         -- REGISTRO 1370: BICOS DA BOMBA
         begin
            vn_qtde_reg_1370 := vt_bi_tab_reg_1370(i).count;
         exception
            when others then
               vn_qtde_reg_1370 := 0;
         end;
         --
         vn_fase := 9;
         --
         if nvl(vn_qtde_reg_1370,0) > 0 then
            --
            vn_fase := 9.1;
            --
            j := vt_bi_tab_reg_1370(i).first;
            --
            vn_fase := 9.2;
            --
            loop
               --
               vn_fase := 9.3;
               --
               if nvl(j,0) = 0 then
                  exit;
               end if;
               --
               vn_fase := 9.4;
               -- cria a estrutura do registro separado por PIPE "|"
               gl_conteudo := '|';
               --
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_1370(i)(j).reg || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_1370(i)(j).num_bico || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_1370(i)(j).cod_item || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_1370(i)(j).num_tanque || '|';
               --
               vn_fase := 9.5;
               --
               pkb_armaz_estr_arq_efd ( ev_reg_blc   => '1370'
                                      , el_conteudo  => gl_conteudo );
               --
               vn_fase := 9.6;
               --
               if j = vt_bi_tab_reg_1370(i).last then
                  exit;
               else
                  j := vt_bi_tab_reg_1370(i).next(j);
               end if;
               --
            end loop;
            --
         end if;
         --
         vn_fase := 10;
         --
         if i = vt_tab_reg_1350.last then
            exit;
         else
            i := vt_tab_reg_1350.next(i);
         end if;
         --
      end loop;
      --
   end if;
   --
exception
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_armaz_reg_1350 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end pkb_armaz_reg_1350;

-------------------------------------------------------------------------------------------------------

-- Armazena em arquivo o REGISTRO 1300: MOVIMENTAÇÃO DIÁRIA DE COMBUSTÍVEIS
procedure pkb_armaz_reg_1300
is
   --
   vn_fase          number := 0;
   i                pls_integer;
   j                pls_integer;
   k                pls_integer;
   vn_qtde_reg_1310 number;
   vn_qtde_reg_1320 number;
   --
begin
   --
   vn_fase := 1;
   --
   if nvl(vt_tab_reg_1300.count,0) > 0 then
      --
      vn_fase := 2;
      --
      i := nvl(vt_tab_reg_1300.first,0);
      --
      vn_fase := 3;
      --
      loop
         --
         vn_fase := 4;
         --
         if nvl(i,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 5;
         -- cria a estrutura do registro separado por PIPE "|"
         gl_conteudo := '|';
         --
         gl_conteudo := gl_conteudo || vt_tab_reg_1300(i).reg || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_1300(i).cod_item || '|';
         gl_conteudo := gl_conteudo || to_char(vt_tab_reg_1300(i).dt_fech, 'ddmmrrrr') || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_1300(i).estq_abert, '9999999999990D999') || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_1300(i).vol_entr, '9999999999990D999') || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_1300(i).vol_disp, '9999999999990D999') || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_1300(i).vol_saidas, '9999999999990D999') || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_1300(i).estq_escr, '9999999999990D999') || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_1300(i).val_aj_perda, '9999999999990D999') || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_1300(i).val_aj_ganho, '9999999999990D999') || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_1300(i).fech_fisico, '9999999999990D999') || '|';
         --
         vn_fase := 6;
         --
         pkb_armaz_estr_arq_efd ( ev_reg_blc   => '1300'
                                , el_conteudo  => gl_conteudo );
         --
         vn_fase := 7;
         -- REGISTRO 1310: MOVIMENTAÇÃO DIÁRIA DE COMBUSTÍVEIS POR TANQUE
         begin
            vn_qtde_reg_1310 := vt_bi_tab_reg_1310(i).count;
         exception
            when others then
               vn_qtde_reg_1310 := 0;
         end;
         --
         vn_fase := 8;
         --
         if nvl(vn_qtde_reg_1310,0) > 0 then
            --
            vn_fase := 8.1;
            --
            j := vt_bi_tab_reg_1310(i).first;
            --
            vn_fase := 8.2;
            --
            loop
               --
               vn_fase := 8.3;
               --
               if nvl(j,0) = 0 then
                  exit;
               end if;
               --
               vn_fase := 8.4;
               -- cria a estrutura do registro separado por PIPE "|"
               gl_conteudo := '|';
               --
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_1310(i)(j).reg || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_1310(i)(j).num_tanque || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_1310(i)(j).estq_abert, '9999999999990D999') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_1310(i)(j).vol_entr, '9999999999990D999') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_1310(i)(j).vol_disp, '9999999999990D999') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_1310(i)(j).vol_saidas, '9999999999990D999') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_1310(i)(j).estq_escr, '9999999999990D999') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_1310(i)(j).val_aj_perda, '9999999999990D999') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_1310(i)(j).val_aj_ganho, '9999999999990D999') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_1310(i)(j).fech_fisico, '9999999999990D999') || '|';
               --
               vn_fase := 8.5;
               --
               pkb_armaz_estr_arq_efd ( ev_reg_blc   => '1310'
                                      , el_conteudo  => gl_conteudo );
               --
               vn_fase := 8.6;
               -- REGISTRO 1320: VOLUME DE VENDAS
               begin
                  vn_qtde_reg_1320 := vt_tri_tab_reg_1320(i)(j).count;
               exception
                  when others then
                     vn_qtde_reg_1320 := 0;
               end;
               --
               vn_fase := 8.7;
               --
               if nvl(vn_qtde_reg_1320,0) > 0 then
                  --
                  vn_fase := 8.8;
                  --
                  k := vt_tri_tab_reg_1320(i)(j).first;
                  --
                  vn_fase := 8.9;
                  --
                  loop
                     --
                     vn_fase := 8.10;
                     --
                     if nvl(k,0) = 0 then
                        exit;
                     end if;
                     --
                     vn_fase := 8.11;
                     -- cria a estrutura do registro separado por PIPE "|"
                     gl_conteudo := '|';
                     --
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_1320(i)(j)(k).reg || '|';
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_1320(i)(j)(k).num_bico || '|';
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_1320(i)(j)(k).nr_interv || '|';
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_1320(i)(j)(k).mot_interv || '|';
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_1320(i)(j)(k).nom_interv || '|';
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_1320(i)(j)(k).cnpj_interv || '|';
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_1320(i)(j)(k).cpf_interv || '|';
                     gl_conteudo := gl_conteudo || fkg_formata_num(vt_tri_tab_reg_1320(i)(j)(k).val_fecha, '9999999999990D999') || '|';
                     gl_conteudo := gl_conteudo || fkg_formata_num(vt_tri_tab_reg_1320(i)(j)(k).val_abert, '9999999999990D999') || '|';
                     gl_conteudo := gl_conteudo || fkg_formata_num(vt_tri_tab_reg_1320(i)(j)(k).vol_aferi, '9999999999990D999') || '|';
                     gl_conteudo := gl_conteudo || fkg_formata_num(vt_tri_tab_reg_1320(i)(j)(k).vol_vendas, '9999999999990D999') || '|';
                     --
                     vn_fase := 8.12;
                     --
                     pkb_armaz_estr_arq_efd ( ev_reg_blc   => '1320'
                                            , el_conteudo  => gl_conteudo );
                     --
                     vn_fase := 8.13;
                     --
                     if k = vt_tri_tab_reg_1320(i)(j).last then
                        exit;
                     else
                        k := vt_tri_tab_reg_1320(i)(j).next(k);
                     end if;
                     --
                  end loop;
                  --
               end if;
               --
               vn_fase := 8.14;
               --
               if j = vt_bi_tab_reg_1310(i).last then
                  exit;
               else
                  j := vt_bi_tab_reg_1310(i).next(j);
               end if;
               --
            end loop;
            --
         end if;
         --
         vn_fase := 9;
         --
         if i = vt_tab_reg_1300.last then
            exit;
         else
            i := vt_tab_reg_1300.next(i);
         end if;
         --
      end loop;
      --
   end if;
   --
exception
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_armaz_reg_1300 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end pkb_armaz_reg_1300;

-------------------------------------------------------------------------------------------------------

-- Armazena em arquivo o REGISTRO 1200: CONTROLE DE CRÉDITOS FISCAIS - ICMS
procedure pkb_armaz_reg_1200
is
   --
   vn_fase          number := 0;
   i                pls_integer;
   j                pls_integer;
   vn_qtde_reg_1210 number;
   --
begin
   --
   vn_fase := 1;
   --
   if nvl(vt_tab_reg_1200.count,0) > 0 then
      --
      vn_fase := 2;
      --
      i := nvl(vt_tab_reg_1200.first,0);
      --
      vn_fase := 3;
      --
      loop
         --
         vn_fase := 4;
         --
         if nvl(i,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 5;
         -- cria a estrutura do registro separado por PIPE "|"
         gl_conteudo := '|';
         --
         gl_conteudo := gl_conteudo || vt_tab_reg_1200(i).reg || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_1200(i).cod_aj_apur || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_1200(i).sld_cred, '9999999999990D99') || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_1200(i).cred_apr, '9999999999990D99') || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_1200(i).cred_receb, '9999999999990D99') || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_1200(i).cred_util, '9999999999990D99') || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_1200(i).sld_cred_fim, '9999999999990D99') || '|';
         --
         vn_fase := 6;
         --
         pkb_armaz_estr_arq_efd ( ev_reg_blc   => '1200'
                                , el_conteudo  => gl_conteudo );
         --
         vn_fase := 7;
         --
         begin
            vn_qtde_reg_1210 := vt_bi_tab_reg_1210(i).count;
         exception
            when others then
               vn_qtde_reg_1210 := 0;
         end;
         --
         vn_fase := 7.1;
         --
         if nvl(vn_qtde_reg_1210,0) > 0 then
            --
            vn_fase := 7.2;
            --
            j := vt_bi_tab_reg_1210(i).first;
            --
            vn_fase := 7.3;
            --
            loop
               --
               vn_fase := 7.4;
               --
               if nvl(j,0) = 0 then
                  exit;
               end if;
               --
               vn_fase := 7.5;
               -- cria a estrutura do registro separado por PIPE "|"
               gl_conteudo := '|';
               --
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_1210(i)(j).reg || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_1210(i)(j).tipo_util || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_1210(i)(j).nr_doc || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_1210(i)(j).vl_cred_util, '9999999999990D99') || '|';
               --
               if gt_row_abertura_efd.dt_ini >= to_date('01/01/2017', 'dd/mm/rrrr') then
                  --
                  gl_conteudo := gl_conteudo || vt_bi_tab_reg_1210(i)(j).chv_doce || '|';
                  --
               end if;
               --
               vn_fase := 7.6;
               --
               pkb_armaz_estr_arq_efd ( ev_reg_blc   => '1210'
                                      , el_conteudo  => gl_conteudo );
               --
               vn_fase := 7.7;
               --
               if j = vt_bi_tab_reg_1210(i).last then
                  exit;
               else
                  j := vt_bi_tab_reg_1210(i).next(j);
               end if;
               --
            end loop;
            --
         end if;
         --
         vn_fase := 8;
         --
         if i = vt_tab_reg_1200.last then
            exit;
         else
            i := vt_tab_reg_1200.next(i);
         end if;
         --
      end loop;
      --
   end if;
   --
exception
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_armaz_reg_1200 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end pkb_armaz_reg_1200;

-------------------------------------------------------------------------------------------------------

-- Armazena em arquivo o REGISTRO 1100: REGISTRO DE INFORMAÇÕES SOBRE EXPORTAÇÃO.
procedure pkb_armaz_reg_1100
is
   --
   vn_fase          number := 0;
   i                pls_integer;
   j                pls_integer;
   k                pls_integer;
   vn_qtde_reg_1105 number;
   vn_qtde_reg_1110 number;
   --
begin
   --
   vn_fase := 1;
   --
   if nvl(vt_tab_reg_1100.count,0) > 0 then
      --
      vn_fase := 2;
      --
      i := nvl(vt_tab_reg_1100.first,0);
      --
      vn_fase := 3;
      --
      loop
         --
         vn_fase := 4;
         --
         if nvl(i,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 5;
         -- cria a estrutura do registro separado por PIPE "|"
         gl_conteudo := '|';
         --
         gl_conteudo := gl_conteudo || vt_tab_reg_1100(i).reg || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_1100(i).ind_doc || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_1100(i).nro_de || '|';
         gl_conteudo := gl_conteudo || to_char(vt_tab_reg_1100(i).dt_de, 'ddmmrrrr') || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_1100(i).nat_exp || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_1100(i).nro_re || '|';
         gl_conteudo := gl_conteudo || to_char(vt_tab_reg_1100(i).dt_re, 'ddmmrrrr') || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_1100(i).chc_emb || '|';
         gl_conteudo := gl_conteudo || to_char(vt_tab_reg_1100(i).dt_chc, 'ddmmrrrr') || '|';
         gl_conteudo := gl_conteudo || to_char(vt_tab_reg_1100(i).dt_avb, 'ddmmrrrr') || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_1100(i).tp_chc || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_1100(i).pais || '|';
         --
         vn_fase := 6;
         --
         pkb_armaz_estr_arq_efd ( ev_reg_blc   => '1100'
                                , el_conteudo  => gl_conteudo );
         --
         vn_fase := 7;
         -- REGISTRO 1105: DOCUMENTOS FISCAIS DE EXPORTAÇÃO
         begin
            vn_qtde_reg_1105 := vt_bi_tab_reg_1105(i).count;
         exception
            when others then
               vn_qtde_reg_1105 := 0;
         end;
         --
         vn_fase := 7.1;
         --
         if nvl(vn_qtde_reg_1105,0) > 0 then
            --
            vn_fase := 7.2;
            --
            j := vt_bi_tab_reg_1105(i).first;
            --
            vn_fase := 7.3;
            --
            loop
               --
               vn_fase := 7.4;
               --
               if nvl(j,0) = 0 then
                  exit;
               end if;
               --
               vn_fase := 7.5;
               -- cria a estrutura do registro separado por PIPE "|"
               gl_conteudo := '|';
               --
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_1105(i)(j).reg || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_1105(i)(j).cod_mod || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_1105(i)(j).serie || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_1105(i)(j).num_doc || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_1105(i)(j).chv_nfe || '|';
               gl_conteudo := gl_conteudo || to_char(vt_bi_tab_reg_1105(i)(j).dt_doc, 'ddmmrrrr') || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_1105(i)(j).cod_item || '|';
               --
               vn_fase := 7.6;
               --
               pkb_armaz_estr_arq_efd ( ev_reg_blc   => '1105'
                                      , el_conteudo  => gl_conteudo );
               --
               vn_fase := 8;
               -- NOVO TÍTULO: REGISTRO 1110: OPERAÇÕES DE EXPORTAÇÃO INDIRETA - MERCADORIAS DE TERCEIROS
               -- REGISTRO 1110: OPERAÇÕES DE EXPORTAÇÃO INDIRETA DE PRODUTOS NÃO INDUSTRIALIZADOS PELO ESTABELECIMENTO EMITENTE
               begin
                  vn_qtde_reg_1110 := vt_tri_tab_reg_1110(i)(j).count;
               exception
                  when others then
                     vn_qtde_reg_1110 := 0;
               end;
               --
               vn_fase := 8.1;
               --
               if nvl(vn_qtde_reg_1110,0) > 0 then
                  --
                  vn_fase := 8.2;
                  --
                  k := vt_tri_tab_reg_1110(i)(j).first;
                  --
                  vn_fase := 8.3;
                  --
                  loop
                     --
                     vn_fase := 8.4;
                     --
                     if nvl(k,0) = 0  then
                        exit;
                     end if;
                     --
                     vn_fase := 8.5;
                     -- cria a estrutura do registro separado por PIPE "|"
                     gl_conteudo := '|';
                     --
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_1110(i)(j)(k).reg || '|';
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_1110(i)(j)(k).cod_part  || '|';
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_1110(i)(j)(k).cod_mod  || '|';
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_1110(i)(j)(k).ser  || '|';
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_1110(i)(j)(k).num_doc  || '|';
                     gl_conteudo := gl_conteudo || to_char(vt_tri_tab_reg_1110(i)(j)(k).dt_doc, 'ddmmrrrr')  || '|';
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_1110(i)(j)(k).chv_nfe  || '|';
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_1110(i)(j)(k).nr_memo  || '|';
                     gl_conteudo := gl_conteudo || fkg_formata_num(vt_tri_tab_reg_1110(i)(j)(k).qtd, '9999999999990D999') || '|';
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_1110(i)(j)(k).unid  || '|';
                     --
                     vn_fase := 8.6;
                     --
                     pkb_armaz_estr_arq_efd ( ev_reg_blc   => '1110'
                                            , el_conteudo  => gl_conteudo );
                     --
                     vn_fase := 8.7;
                     --
                     if k = vt_tri_tab_reg_1110(i)(j).last then
                        exit;
                     else
                        k := vt_tri_tab_reg_1110(i)(j).next(k);
                     end if;
                     --
                  end loop;
                  --
               end if;
               --
               vn_fase := 9;
               --
               if j = vt_bi_tab_reg_1105(i).last then
                  exit;
               else
                  j := vt_bi_tab_reg_1105(i).next(j);
               end if;
               --
            end loop; -- fim 1105
            --
         end if;
         --
         vn_fase := 10;
         --
         if i = vt_tab_reg_1100.last then
            exit;
         else
            i := vt_tab_reg_1100.next(i);
         end if;
         --
      end loop;
      --
   end if;
   --
exception
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_armaz_reg_1100 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end pkb_armaz_reg_1100;

-------------------------------------------------------------------------------------------------------

-- Armazena em arquivo o REGISTRO 1010: OBRIGATORIEDADE DE REGISTROS DO BLOCO 1
procedure pkb_armaz_reg_1010
is
   --
   vn_fase  number := 0;
   i        pls_integer;
   --
begin
   --
   vn_fase := 1;
   --
   if nvl(vt_tab_reg_1010.count,0) > 0 then
      --
      vn_fase := 2;
      --
      i := nvl(vt_tab_reg_1010.first,0);
      --
      vn_fase := 3;
      --
      loop
         --
         vn_fase := 4;
         --
         if nvl(i,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 5;
         -- cria a estrutura do registro separado por PIPE "|"
         gl_conteudo := '|';
         --
         gl_conteudo := gl_conteudo || vt_tab_reg_1010(i).reg || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_1010(i).ind_exp || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_1010(i).ind_ccrf || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_1010(i).ind_comb || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_1010(i).ind_usina || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_1010(i).ind_va || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_1010(i).ind_ee || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_1010(i).ind_cart || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_1010(i).ind_form || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_1010(i).ind_aer || '|';
         --
         if gn_versao >= 112 then -- versão a partir de 01/01/2019
            --
            gl_conteudo := gl_conteudo || vt_tab_reg_1010(i).ind_giaf1 || '|';
            gl_conteudo := gl_conteudo || vt_tab_reg_1010(i).ind_giaf3 || '|';
            gl_conteudo := gl_conteudo || vt_tab_reg_1010(i).ind_giaf4 || '|';
            --
         end if;
         --
         if gn_versao >= 113 then -- versão válida a partir de 01/01/2020  
            --     
            gl_conteudo := gl_conteudo || vt_tab_reg_1010(i).ind_rest_ressarc_compl_icms || '|';
            --
         end if;      
     --
         vn_fase := 6;
         --
         pkb_armaz_estr_arq_efd ( ev_reg_blc   => '1010'
                                , el_conteudo  => gl_conteudo );
         --
         vn_fase := 7;
         --
         if i = vt_tab_reg_1010.last then
            exit;
         else
            i := vt_tab_reg_1010.next(i);
         end if;
         --
      end loop;
      --
   end if;
   --
exception
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_armaz_reg_1010 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end pkb_armaz_reg_1010;

-------------------------------------------------------------------------------------------------------

-- Armazena em arquivo o REGISTRO 1001: ABERTURA DO BLOCO 1
procedure pkb_armaz_reg_1001
is
   --
   vn_fase  number := 0;
   i        pls_integer;
   --
begin
   --
   vn_fase := 1;
   --
   if nvl(vt_tab_reg_1001.count,0) > 0 then
      --
      vn_fase := 2;
      --
      i := nvl(vt_tab_reg_1001.first,0);
      --
      vn_fase := 3;
      --
      loop
         --
         vn_fase := 4;
         --
         if nvl(i,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 5;
         -- cria a estrutura do registro separado por PIPE "|"
         gl_conteudo := '|';
         --
         gl_conteudo := gl_conteudo || vt_tab_reg_1001(i).reg || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_1001(i).ind_mov || '|';
         --
         vn_fase := 6;
         --
         pkb_armaz_estr_arq_efd ( ev_reg_blc   => '1001'
                                , el_conteudo  => gl_conteudo );
         --
         vn_fase := 7;
         --
         if i = vt_tab_reg_1001.last then
            exit;
         else
            i := vt_tab_reg_1001.next(i);
         end if;
         --
      end loop;
      --
   end if;
   --
exception
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_armaz_reg_1001 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end pkb_armaz_reg_1001;

-------------------------------------------------------------------------------------------------------

-- Armazena em arquivo dados do BLOCO 1: OUTRAS INFORMAÇÕES
procedure pkb_armaz_arq_bloco_1
is
   --
   vn_fase  number := 0;
   --
begin
   --
   vn_fase := 1;
   -- Armazena em arquivo o REGISTRO 1001: ABERTURA DO BLOCO 1
   pkb_armaz_reg_1001;
   --
   vn_fase := 2;
   -- Armazena em arquivo o REGISTRO 1010: OBRIGATORIEDADE DE REGISTROS DO BLOCO 1
   pkb_armaz_reg_1010;
   --
   vn_fase := 3;
   -- Armazena em arquivo o REGISTRO 1100: REGISTRO DE INFORMAÇÕES SOBRE EXPORTAÇÃO.
   pkb_armaz_reg_1100;
   --
   vn_fase := 4;
   -- Armazena em arquivo o REGISTRO 1200: CONTROLE DE CRÉDITOS FISCAIS - ICMS
   pkb_armaz_reg_1200;
   --
   vn_fase := 5;
   -- Armazena em arquivo o REGISTRO 1300: MOVIMENTAÇÃO DIÁRIA DE COMBUSTÍVEIS
   pkb_armaz_reg_1300;
   --
   vn_fase := 6;
   -- Armazena em arquivo o REGISTRO 1350: BOMBAS
   pkb_armaz_reg_1350;
   --
   vn_fase := 7;
   -- Armazena em arquivo o REGISTRO 1390: CONTROLE DE PRODUÇÃO DE USINA
   pkb_armaz_reg_1390;
   --
   vn_fase := 8;
   -- Armazena em arquivo o REGISTRO 1400: INFORMAÇÃO SOBRE VALORES AGREGADOS
   pkb_armaz_reg_1400;
   --
   vn_fase := 9;
   -- Armazena em arquivo o REGISTRO 1500: NOTA FISCAL/CONTA DE ENERGIA ELÉTRICA (CÓDIGO 06) - OPERAÇÕES INTERESTADUAIS
   pkb_armaz_reg_1500;
   --
   vn_fase := 10;
   -- Armazena em arquivo o REGISTRO 1600: TOTAL DAS OPERAÇÕES COM CARTÃO DE CRÉDITO E/OU DÉBITO
   pkb_armaz_reg_1600;
   --
   vn_fase := 11;
   -- Armazena em arquivo o REGISTRO 1700 - DOCUMENTOS FISCAIS UTILIZADOS
   pkb_armaz_reg_1700;
   --
   vn_fase := 12;
   -- Armazena em arquivo o REGISTRO 1800 - DCTA - DEMONSTRATIVO DE CRÉDITO DO ICMS SOBRE TRANSPORTE AÉREO
   pkb_armaz_reg_1800;
   --
   vn_fase := 13;
   -- Armazena em arquivo o REGISTRO 1900 - INDICADOR DE SUB-APURAÇÃO DO ICMS
   pkb_armaz_reg_1900;
   --
   vn_fase := 14;
   -- REGISTRO 1960 : GIAF 1 - GUIA DE INFORMAÇÃO E APURAÇÃO DE INCENTIVOS FISCAIS E FINANCEIROS: INDÚSTRIA (CRÉDITO PRESUMIDO)
   pkb_armaz_reg_1960;
   --
   vn_fase := 15;   
   -- REGISTRO 1970: GIAF 3 - GUIA DE INFORMAÇÃO E APURAÇÃO DE INCENTIVOS FISCAIS E FINANCEIROS: IMPORTAÇÃO (DIFERIMENTO NA ENTRADA E CRÉDITO
   -- PRESUMIDO NA SAÍDA SUBSEQUENTE)
   pkb_armaz_reg_1970;
   --
   vn_fase := 16;   
   -- REGISTRO 1980: GIAF 4 GUIA DE INFORMAÇÃO E APURAÇÃO DE INCENTIVOS FISCAIS E FINANCEIROS: CENTRAL DE DISTRIBUIÇÃO (ENTRADAS/SAÍDAS)
   pkb_armaz_reg_1980;
   --         
   vn_fase := 17;
   -- Armazena em arquivo o REGISTRO 1990: ENCERRAMENTO DO BLOCO 1
   pkb_armaz_reg_1990;
   --
exception
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_armaz_arq_bloco_1 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end pkb_armaz_arq_bloco_1;

-------------------------------------------------------------------------------------------------------

--  Armazena em arquivo o REGISTRO K990: ENCERRAMENTO DO BLOCO K
procedure pkb_armaz_reg_k990
is
   --
   vn_fase  number := 0;
   i        pls_integer;
   --
begin
   --
   vn_fase := 1;
   --
   if nvl(vt_tab_reg_k990.count,0) > 0 then
      --
      vn_fase := 2;
      --
      i := nvl(vt_tab_reg_k990.first,0);
      --
      vn_fase := 3;
      --
      loop
         --
         vn_fase := 4;
         --
         if nvl(i,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 5;
         -- cria a estrutura do registro separado por PIPE "|"
         gl_conteudo := '|';
         --
         gl_conteudo := gl_conteudo || vt_tab_reg_k990(i).reg       || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_k990(i).qtd_lin_k || '|';
         --
         vn_fase := 6;
         --
         pkb_armaz_estr_arq_efd ( ev_reg_blc   => 'K990'
                                , el_conteudo  => gl_conteudo );
         --
         vn_fase := 7;
         --
         if i = vt_tab_reg_k990.last then
            exit;
         else
            i := vt_tab_reg_k990.next(i);
         end if;
         --
      end loop;
      --
   end if;
   --
exception
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_armaz_reg_k990 fase('||vn_fase||'): '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico.id%type;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id => vn_loggenerico_id
                                          , ev_mensagem       => gv_mensagem_log
                                          , ev_resumo         => null
                                          , en_tipo_log       => erro_de_sistema
                                          , en_referencia_id  => gt_row_abertura_efd.id
                                          , ev_obj_referencia => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end pkb_armaz_reg_k990;

-------------------------------------------------------------------------------------------------------

-- Armazena em arquivo o REGISTRO K100: PERÍODO DE APURAÇÃO DO ICMS/IPI
procedure pkb_armaz_reg_k100
is
   --
   vn_fase   number := 0;
   i         pls_integer;
   j         pls_integer;
   k         pls_integer;
   vn_qtde   number;
   --
begin
   --
   vn_fase := 1;
   --
   if nvl(vt_tab_reg_k100.count,0) > 0 then
      --
      vn_fase := 2;
      --
      i := nvl(vt_tab_reg_k100.first,0);
      --
      vn_fase := 3;
      --
      loop
         --
         vn_fase := 4;
         --
         if nvl(i,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 5;
         -- cria a estrutura do registro separado por PIPE "|"
         gl_conteudo := '|';
         --
         gl_conteudo := gl_conteudo || vt_tab_reg_k100(i).reg                        || '|';
         gl_conteudo := gl_conteudo || to_char(vt_tab_reg_k100(i).dt_ini,'ddmmrrrr') || '|';
         gl_conteudo := gl_conteudo || to_char(vt_tab_reg_k100(i).dt_fin,'ddmmrrrr') || '|';
         --
         vn_fase := 6;
         --
         pkb_armaz_estr_arq_efd ( ev_reg_blc  => 'K100'
                                , el_conteudo => gl_conteudo );
         --
         vn_fase := 7;
         -- REGISTRO K200: ESTOQUE ESCRITURADO
         begin
            vn_qtde := vt_bi_tab_reg_k200(i).count;
         exception
            when others then
               vn_qtde := 0;
         end;
         --
         vn_fase := 8;
         --
         if nvl(vn_qtde,0) > 0 then
            --
            vn_fase := 8.1;
            --
            j := vt_bi_tab_reg_k200(i).first;
            --
            vn_fase := 8.2;
            --
            loop
               --
               vn_fase := 8.3;
               --
               if nvl(j,0) = 0 then
                  exit;
               end if;
               --
               vn_fase := 8.4;
               -- cria a estrutura do registro separado por PIPE "|"
               gl_conteudo := '|';
               --
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_k200(i)(j).reg                                       || '|';
               gl_conteudo := gl_conteudo || to_char(vt_bi_tab_reg_k200(i)(j).dt_est,'ddmmrrrr')                || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_k200(i)(j).cod_item                                  || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_k200(i)(j).qtd,'99999999999990D999') || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_k200(i)(j).ind_est                                   || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_k200(i)(j).cod_part                                  || '|';
               --
               vn_fase := 8.5;
               --
               pkb_armaz_estr_arq_efd ( ev_reg_blc  => 'K200'
                                      , el_conteudo => gl_conteudo );
               --
               vn_fase := 8.6;
               --
               if j = vt_bi_tab_reg_k200(i).last then
                  exit;
               else
                  j := vt_bi_tab_reg_k200(i).next(j);
               end if;
               --
            end loop;
            --
         end if;
         --
         vn_fase := 9;
         -- REGISTRO K210: DESMONTAGEM DE MERCADORIAS - ITEM DE ORIGEM
         begin
            vn_qtde := vt_bi_tab_reg_k210(i).count;
         exception
            when others then
               vn_qtde := 0;
         end;
         --
         vn_fase := 10;
         --
         if nvl(vn_qtde,0) > 0 then
            --
            vn_fase := 10.1;
            --
            j := vt_bi_tab_reg_k210(i).first;
            --
            vn_fase := 10.2;
            --
            loop
               --
               vn_fase := 10.3;
               --
               if nvl(j,0) = 0 then
                  exit;
               end if;
               --
               vn_fase := 10.4;
               -- cria a estrutura do registro separado por PIPE "|"
               gl_conteudo := '|';
               --
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_k210(i)(j).reg                                               || '|';
               gl_conteudo := gl_conteudo || to_char(vt_bi_tab_reg_k210(i)(j).dt_ini_os,'ddmmrrrr')                  || '|';
               gl_conteudo := gl_conteudo || to_char(vt_bi_tab_reg_k210(i)(j).dt_fin_os,'ddmmrrrr')                  || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_k210(i)(j).cod_doc_os                                     || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_k210(i)(j).cod_item_ori                                   || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_k210(i)(j).qtd_ori,'99999999999990D999')  || '|';
               --
               vn_fase := 10.5;
               --
               pkb_armaz_estr_arq_efd ( ev_reg_blc  => 'K210'
                                      , el_conteudo => gl_conteudo );
               --
               vn_fase := 10.6;
               --
               -- REGISTRO K215: DESMONTAGEM DE MERCADORIAS ¿ ITENS DE DESTINO
               begin
                  vn_qtde := vt_tri_tab_reg_k215(i)(j).count;
               exception
                  when others then
                     vn_qtde := 0;
               end;
               --
               vn_fase := 10.7;
               --
               if nvl(vn_qtde,0) > 0 then
                  --
                  vn_fase := 10.8;
                  --
                  k := vt_tri_tab_reg_k215(i)(j).first;
                  --
                  vn_fase := 10.9;
                  --
                  loop
                     --
                     vn_fase := 10.10;
                     --
                     if nvl(k,0) = 0 then
                        exit;
                     end if;
                     --
                     vn_fase := 10.11;
                     -- cria a estrutura do registro separado por PIPE "|"
                     gl_conteudo := '|';
                     --
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_k215(i)(j)(k).reg                                           || '|';
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_k215(i)(j)(k).cod_item_des                                  || '|';
                     gl_conteudo := gl_conteudo || fkg_formata_num(vt_tri_tab_reg_k215(i)(j)(k).qtd_des,'99999999999990D999') || '|';
                     --
                     vn_fase := 10.12;
                     --
                     pkb_armaz_estr_arq_efd ( ev_reg_blc  => 'K215'
                                            , el_conteudo => gl_conteudo );
                     --
                     vn_fase := 10.13;
                     --
                     if k = vt_tri_tab_reg_k215(i)(j).last then
                        exit;
                     else
                        k := vt_tri_tab_reg_k215(i)(j).next(k);
                     end if;
                     --
                  end loop;
                  --
               end if;
               --
               if j = vt_bi_tab_reg_k210(i).last then
                  exit;
               else
                  j := vt_bi_tab_reg_k210(i).next(j);
               end if;
               --
            end loop;
            --
         end if;
         --
         vn_fase := 11;
         -- REGISTRO K220: OUTRAS MOVIMENTAÇÕES INTERNAS ENTRE MERCADORIAS
         begin
            vn_qtde := vt_bi_tab_reg_k220(i).count;
         exception
            when others then
               vn_qtde := 0;
         end;
         --
         vn_fase := 11;
         --
         if nvl(vn_qtde,0) > 0 then
            --
            vn_fase := 11.1;
            --
            j := vt_bi_tab_reg_k220(i).first;
            --
            vn_fase := 11.2;
            --
            loop
               --
               vn_fase := 11.3;
               --
               if nvl(j,0) = 0 then
                  exit;
               end if;
               --
               vn_fase := 11.4;
               -- cria a estrutura do registro separado por PIPE "|"
               gl_conteudo := '|';
               --
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_k220(i)(j).reg                                            || '|';
               gl_conteudo := gl_conteudo || to_char(vt_bi_tab_reg_k220(i)(j).dt_mov,'ddmmrrrr')                     || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_k220(i)(j).cod_item_orig                                  || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_k220(i)(j).cod_item_dest                                  || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_k220(i)(j).qtd,'99999999999990D999')      || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_k220(i)(j).qtd_dest,'99999999999990D999') || '|';
               --
               vn_fase := 11.5;
               --
               pkb_armaz_estr_arq_efd ( ev_reg_blc  => 'K220'
                                      , el_conteudo => gl_conteudo );
               --
               vn_fase := 11.6;
               --
               if j = vt_bi_tab_reg_k220(i).last then
                  exit;
               else
                  j := vt_bi_tab_reg_k220(i).next(j);
               end if;
               --
            end loop;
            --
         end if;
         --
         -- REGISTRO K230: ITENS PRODUZIDOS
         begin
            vn_qtde := vt_bi_tab_reg_k230(i).count;
         exception
            when others then
               vn_qtde := 0;
         end;
         --
         vn_fase := 12;
         --
         if nvl(vn_qtde,0) > 0 then
            --
            vn_fase := 12.1;
            --
            j := vt_bi_tab_reg_k230(i).first;
            --
            vn_fase := 12.2;
            --
            loop
               --
               vn_fase := 12.3;
               --
               if nvl(j,0) = 0 then
                  exit;
               end if;
               --
               vn_fase := 12.4;
               -- cria a estrutura do registro separado por PIPE "|"
               gl_conteudo := '|';
               --
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_k230(i)(j).reg                                           || '|';
               gl_conteudo := gl_conteudo || to_char(vt_bi_tab_reg_k230(i)(j).dt_ini_op,'ddmmrrrr')                 || '|';
               gl_conteudo := gl_conteudo || to_char(vt_bi_tab_reg_k230(i)(j).dt_fin_op,'ddmmrrrr')                 || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_k230(i)(j).cod_doc_op                                    || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_k230(i)(j).cod_item                                      || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_k230(i)(j).qtd_enc,'99999999999990D999') || '|';
               --
               vn_fase := 12.5;
               --
               pkb_armaz_estr_arq_efd ( ev_reg_blc  => 'K230'
                                      , el_conteudo => gl_conteudo );
               --
               vn_fase := 12.6;
               -- REGISTRO K235: INSUMOS CONSUMIDOS
               begin
                  vn_qtde := vt_tri_tab_reg_k235(i)(j).count;
               exception
                  when others then
                     vn_qtde := 0;
               end;
               --
               vn_fase := 12.7;
               --
               if nvl(vn_qtde,0) > 0 then
                  --
                  vn_fase := 12.8;
                  --
                  k := vt_tri_tab_reg_k235(i)(j).first;
                  --
                  vn_fase := 12.9;
                  --
                  loop
                     --
                     vn_fase := 12.10;
                     --
                     if nvl(k,0) = 0 then
                        exit;
                     end if;
                     --
                     vn_fase := 12.11;
                     -- cria a estrutura do registro separado por PIPE "|"
                     gl_conteudo := '|';
                     --
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_k235(i)(j)(k).reg                                       || '|';
                     gl_conteudo := gl_conteudo || to_char(vt_tri_tab_reg_k235(i)(j)(k).dt_saida,'ddmmrrrr')              || '|';
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_k235(i)(j)(k).cod_item                                  || '|';
                     gl_conteudo := gl_conteudo || fkg_formata_num(vt_tri_tab_reg_k235(i)(j)(k).qtd,'99999999999990D999') || '|';
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_k235(i)(j)(k).cod_ins_subst                             || '|';
                     --
                     vn_fase := 12.12;
                     --
                     pkb_armaz_estr_arq_efd ( ev_reg_blc  => 'K235'
                                            , el_conteudo => gl_conteudo );
                     --
                     vn_fase := 12.13;
                     --
                     if k = vt_tri_tab_reg_k235(i)(j).last then
                        exit;
                     else
                        k := vt_tri_tab_reg_k235(i)(j).next(k);
                     end if;
                     --
                  end loop;
                  --
               end if;
               --
               vn_fase := 12.14;
               --
               if j = vt_bi_tab_reg_k230(i).last then
                  exit;
               else
                  j := vt_bi_tab_reg_k230(i).next(j);
               end if;
               --
            end loop;
            --
         end if;
         --
         vn_fase := 13;
         -- REGISTRO K250: INDUSTRIALIZAÇÃO EFETUADA POR TERCEIROS ¿ ITENS PRODUZIDOS
         begin
            vn_qtde := vt_bi_tab_reg_k250(i).count;
         exception
            when others then
               vn_qtde := 0;
         end;
         --
         vn_fase := 14;
         --
         if nvl(vn_qtde,0) > 0 then
            --
            vn_fase := 14.1;
            --
            j := vt_bi_tab_reg_k250(i).first;
            --
            vn_fase := 14.2;
            --
            loop
               --
               vn_fase := 14.3;
               --
               if nvl(j,0) = 0 then
                  exit;
               end if;
               --
               vn_fase := 14.4;
               -- cria a estrutura do registro separado por PIPE "|"
               gl_conteudo := '|';
               --
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_k250(i)(j).reg                                       || '|';
               gl_conteudo := gl_conteudo || to_char(vt_bi_tab_reg_k250(i)(j).dt_prod,'ddmmrrrr')               || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_k250(i)(j).cod_item                                  || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_k250(i)(j).qtd,'99999999999990D999') || '|';
               --
               vn_fase := 14.5;
               --
               pkb_armaz_estr_arq_efd ( ev_reg_blc  => 'K250'
                                      , el_conteudo => gl_conteudo );
               --
               vn_fase := 14.6;
               -- REGISTRO K255: INDUSTRIALIZAÇÃO EM TERCEIROS ¿ INSUMOS CONSUMIDOS
               begin
                  vn_qtde := vt_tri_tab_reg_k255(i)(j).count;
               exception
                  when others then
                     vn_qtde := 0;
               end;
               --
               vn_fase := 14.7;
               --
               if nvl(vn_qtde,0) > 0 then
                  --
                  vn_fase := 14.8;
                  --
                  k := vt_tri_tab_reg_k255(i)(j).first;
                  --
                  vn_fase := 14.9;
                  --
                  loop
                     --
                     vn_fase := 14.10;
                     --
                     if nvl(k,0) = 0 then
                        exit;
                     end if;
                     --
                     vn_fase := 14.11;
                     -- cria a estrutura do registro separado por PIPE "|"
                     gl_conteudo := '|';
                     --
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_k255(i)(j)(k).reg                                       || '|';
                     gl_conteudo := gl_conteudo || to_char(vt_tri_tab_reg_k255(i)(j)(k).dt_cons,'ddmmrrrr')               || '|';
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_k255(i)(j)(k).cod_item                                  || '|';
                     gl_conteudo := gl_conteudo || fkg_formata_num(vt_tri_tab_reg_k255(i)(j)(k).qtd,'99999999999990D999') || '|';
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_k255(i)(j)(k).cod_ins_subst                             || '|';
                     --
                     vn_fase := 14.12;
                     --
                     pkb_armaz_estr_arq_efd ( ev_reg_blc  => 'K255'
                                            , el_conteudo => gl_conteudo );
                     --
                     vn_fase := 14.13;
                     --
                     if k = vt_tri_tab_reg_k255(i)(j).last then
                        exit;
                     else
                        k := vt_tri_tab_reg_k255(i)(j).next(k);
                     end if;
                     --
                  end loop;
                  --
               end if;
               --
               vn_fase := 14.14;
               --
               if j = vt_bi_tab_reg_k250(i).last then
                  exit;
               else
                  j := vt_bi_tab_reg_k250(i).next(j);
               end if;
               --
            end loop;
            --
         end if;
         --
         -- REGISTRO K260: REPROCESSAMENTO/REPARO DE PRODUTO/INSUMO
         begin
            vn_qtde := vt_bi_tab_reg_k260(i).count;
         exception
            when others then
               vn_qtde := 0;
         end;
         --
         vn_fase := 15;
         --
         if nvl(vn_qtde,0) > 0 then
            --
            vn_fase := 16.1;
            --
            j := vt_bi_tab_reg_k260(i).first;
            --
            vn_fase := 16.2;
            --
            loop
               --
               vn_fase := 16.3;
               --
               if nvl(j,0) = 0 then
                  exit;
               end if;
               --
               vn_fase := 16.4;
               -- cria a estrutura do registro separado por PIPE "|"
               gl_conteudo := '|';
               --
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_k260(i)(j).reg                                                || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_k260(i)(j).cod_op_os                                       || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_k260(i)(j).cod_item                                        || '|';
               gl_conteudo := gl_conteudo || to_char(vt_bi_tab_reg_k260(i)(j).dt_saida,'ddmmrrrr')                    || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_k260(i)(j).qtd_saida,'99999999999990D999') || '|';
               gl_conteudo := gl_conteudo || to_char(vt_bi_tab_reg_k260(i)(j).dt_ret,'ddmmrrrr')                      || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_k260(i)(j).qtd_ret,'99999999999990D999')   || '|';
               --
               vn_fase := 16.5;
               --
               pkb_armaz_estr_arq_efd ( ev_reg_blc  => 'K260'
                                      , el_conteudo => gl_conteudo );
               --
               vn_fase := 16.6;
               -- REGISTRO K265: REPROCESSAMENTO/REPARO - MERCADORIAS CONSUMIDAS E/OU RETORNADAS
               begin
                  vn_qtde := vt_tri_tab_reg_k265(i)(j).count;
               exception
                  when others then
                     vn_qtde := 0;
               end;
               --
               vn_fase := 16.7;
               --
               if nvl(vn_qtde,0) > 0 then
                  --
                  vn_fase := 16.8;
                  --
                  k := vt_tri_tab_reg_k265(i)(j).first;
                  --
                  vn_fase := 16.9;
                  --
                  loop
                     --
                     vn_fase := 16.10;
                     --
                     if nvl(k,0) = 0 then
                        exit;
                     end if;
                     --
                     vn_fase := 16.11;
                     -- cria a estrutura do registro separado por PIPE "|"
                     gl_conteudo := '|';
                     --
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_k265(i)(j)(k).reg                                             || '|';
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_k265(i)(j)(k).cod_item                                        || '|';
                     gl_conteudo := gl_conteudo || fkg_formata_num(vt_tri_tab_reg_k265(i)(j)(k).qtd_cons,'99999999999990D999')  || '|';
                     gl_conteudo := gl_conteudo || fkg_formata_num(vt_tri_tab_reg_k265(i)(j)(k).qtd_ret,'99999999999990D999')   || '|';
                     --
                     vn_fase := 16.12;
                     --
                     pkb_armaz_estr_arq_efd ( ev_reg_blc  => 'K265'
                                            , el_conteudo => gl_conteudo );
                     --
                     vn_fase := 16.13;
                     --
                     if k = vt_tri_tab_reg_k265(i)(j).last then
                        exit;
                     else
                        k := vt_tri_tab_reg_k265(i)(j).next(k);
                     end if;
                     --
                  end loop;
                  --
               end if;
               --
               if j = vt_bi_tab_reg_k260(i).last then
                  exit;
               else
                  j := vt_bi_tab_reg_k260(i).next(j);
               end if;
               --
            end loop;
            --
         end if;
         -- REGISTRO K270: CORREÇÃO DE APONTAMENTO DOS REGISTROS K210, K220, K230, K250 E K260
         begin
            vn_qtde := vt_bi_tab_reg_k270(i).count;
         exception
            when others then
               vn_qtde := 0;
         end;
         --
         vn_fase := 17;
         --
         if nvl(vn_qtde,0) > 0 then
            --
            vn_fase := 17.1;
            --
            j := vt_bi_tab_reg_k270(i).first;
            --
            vn_fase := 17.2;
            --
            loop
               --
               vn_fase := 17.3;
               --
               if nvl(j,0) = 0 then
                  exit;
               end if;
               --
               vn_fase := 17.4;
               -- cria a estrutura do registro separado por PIPE "|"
               gl_conteudo := '|';
               --
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_k270(i)(j).reg                                                || '|';
               gl_conteudo := gl_conteudo || to_char(vt_bi_tab_reg_k270(i)(j).dt_ini_ap,'ddmmrrrr')                      || '|';
               gl_conteudo := gl_conteudo || to_char(vt_bi_tab_reg_k270(i)(j).dt_fin_ap,'ddmmrrrr')                      || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_k270(i)(j).cod_op_os                                          || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_k270(i)(j).cod_item                                           || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_k270(i)(j).qtd_cor_pos,'99999999999990D999')  || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_k270(i)(j).qtd_cor_neg,'99999999999990D999')  || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_k270(i)(j).origem                                             || '|';
               --
               vn_fase := 17.5;
               --
               pkb_armaz_estr_arq_efd ( ev_reg_blc  => 'K270'
                                      , el_conteudo => gl_conteudo );
               --
               vn_fase := 17.6;
               -- REGISTRO K275: CORREÇÃO DE APONTAMENTO E RETORNO DE INSUMOS DOS REGISTROS K215, K220, K235, K255 E K265
               begin
                  vn_qtde := vt_tri_tab_reg_k275(i)(j).count;
               exception
                  when others then
                     vn_qtde := 0;
               end;
               --
               vn_fase := 17.7;
               --
               if nvl(vn_qtde,0) > 0 then
                  --
                  vn_fase := 17.8;
                  --
                  k := vt_tri_tab_reg_k275(i)(j).first;
                  --
                  vn_fase := 17.9;
                  --
                  loop
                     --
                     vn_fase := 17.10;
                     --
                     if nvl(k,0) = 0 then
                        exit;
                     end if;
                     --
                     vn_fase := 17.11;
                     -- cria a estrutura do registro separado por PIPE "|"
                     gl_conteudo := '|';
                     --
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_k275(i)(j)(k).reg                                               || '|';
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_k275(i)(j)(k).cod_item                                          || '|';
                     gl_conteudo := gl_conteudo || fkg_formata_num(vt_tri_tab_reg_k275(i)(j)(k).qtd_cor_pos,'99999999999990D999') || '|';
                     gl_conteudo := gl_conteudo || fkg_formata_num(vt_tri_tab_reg_k275(i)(j)(k).qtd_cor_neg,'99999999999990D999') || '|';
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_k275(i)(j)(k).cod_ins_subst                                     || '|';
                     --
                     vn_fase := 17.12;
                     --
                     pkb_armaz_estr_arq_efd ( ev_reg_blc  => 'K275'
                                            , el_conteudo => gl_conteudo );
                     --
                     vn_fase := 17.13;
                     --
                     if k = vt_tri_tab_reg_k275(i)(j).last then
                        exit;
                     else
                        k := vt_tri_tab_reg_k275(i)(j).next(k);
                     end if;
                     --
                  end loop;
                  --
               end if;
               --
               if j = vt_bi_tab_reg_k270(i).last then
                  exit;
               else
                  j := vt_bi_tab_reg_k270(i).next(j);
               end if;
               --
            end loop;
            --
         end if;
         --
         -- REGISTRO K280: CORREÇÃO DE APONTAMENTO ¿ ESTOQUE ESCRITURADO
         begin
            vn_qtde := vt_bi_tab_reg_k280(i).count;
         exception
            when others then
               vn_qtde := 0;
         end;
         --
         vn_fase := 18;
         --
         if nvl(vn_qtde,0) > 0 then
            --
            vn_fase := 18.1;
            --
            j := vt_bi_tab_reg_k280(i).first;
            --
            vn_fase := 18.2;
            --
            loop
               --
               vn_fase := 18.3;
               --
               if nvl(j,0) = 0 then
                  exit;
               end if;
               --
               vn_fase := 18.4;
               -- cria a estrutura do registro separado por PIPE "|"
               gl_conteudo := '|';
               --
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_k280(i)(j).reg                                                     || '|';
               gl_conteudo := gl_conteudo || to_char(vt_bi_tab_reg_k280(i)(j).dt_est,'ddmmrrrr')                              || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_k280(i)(j).cod_item                                                || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_k280(i)(j).qtd_cor_pos,'99999999999990D999')       || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_k280(i)(j).qtd_cor_neg,'99999999999990D999')       || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_k280(i)(j).ind_est                                                 || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_k280(i)(j).cod_part                                                || '|';
               --
               vn_fase := 18.5;
               --
               pkb_armaz_estr_arq_efd ( ev_reg_blc  => 'K280'
                                      , el_conteudo => gl_conteudo );
               --
               vn_fase := 18.6;
               --
               if j = vt_bi_tab_reg_k280(i).last then
                  exit;
               else
                  j := vt_bi_tab_reg_k280(i).next(j);
               end if;
               --
            end loop;
            --
         end if;
         --
         -- REGISTRO K290: PRODUÇÃO CONJUNTA ¿ ORDEM DE PRODUÇÃO
         --         
         begin
            vn_qtde := vt_bi_tab_reg_k290(i).count;
         exception
            when others then
               vn_qtde := 0;
         end;
         --
         vn_fase := 19;
         --
         if nvl(vn_qtde,0) > 0 then
            --
            vn_fase := 19.1;
            --
            j := vt_bi_tab_reg_k290(i).first;
            --
            vn_fase := 19.2;
            --
            loop
               --
               vn_fase := 19.3;
               --
               if nvl(j,0) = 0 then
                  exit;
               end if;
               --
               vn_fase := 19.4;
               -- cria a estrutura do registro separado por PIPE "|"
               gl_conteudo := '|';
               --
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_k290(i)(j).reg                                              || '|';
               gl_conteudo := gl_conteudo || to_char(vt_bi_tab_reg_k290(i)(j).dt_ini_op,'ddmmrrrr')                    || '|';
               gl_conteudo := gl_conteudo || to_char(vt_bi_tab_reg_k290(i)(j).dt_fin_op,'ddmmrrrr')                    || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_k290(i)(j).cod_doc_op                                       || '|';
               --
               vn_fase := 19.5;
               --
               pkb_armaz_estr_arq_efd ( ev_reg_blc  => 'K290'
                                      , el_conteudo => gl_conteudo );
               --
               vn_fase := 19.6;
               --               
               -- REGISTRO K291: PRODUÇÃO CONJUNTA ¿ ITENS PRODUZIDOS
               --               
               begin
                  vn_qtde := vt_tri_tab_reg_k291(i)(j).count;
               exception
                  when others then
                     vn_qtde := 0;
               end;
               --
               vn_fase := 19.7;
               --
               if nvl(vn_qtde,0) > 0 then
                  --
                  vn_fase := 19.8;
                  --
                  k := vt_tri_tab_reg_k291(i)(j).first;
                  --
                  vn_fase := 19.9;
                  --
                  loop
                     --
                     vn_fase := 19.10;
                     --
                     if nvl(k,0) = 0 then
                        exit;
                     end if;
                     --
                     vn_fase := 19.11;
                     -- cria a estrutura do registro separado por PIPE "|"
                     gl_conteudo := '|';
                     --
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_k291(i)(j)(k).reg                                             || '|';
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_k291(i)(j)(k).cod_item                                        || '|';
                     gl_conteudo := gl_conteudo || fkg_formata_num(vt_tri_tab_reg_k291(i)(j)(k).qtd,'99999999999990D999999')  || '|';
                     --
                     vn_fase := 19.12;
                     --
                     pkb_armaz_estr_arq_efd ( ev_reg_blc  => 'K291'
                                            , el_conteudo => gl_conteudo );
                     --
                     vn_fase := 19.13;
                     --
                     if k = vt_tri_tab_reg_k291(i)(j).last then
                        exit;
                     else
                        k := vt_tri_tab_reg_k291(i)(j).next(k);
                     end if;
                     --
                  end loop;
                  --
               end if;
               --
               -- REGISTRO K292: PRODUÇÃO CONJUNTA ¿ INSUMOS CONSUMIDOS
               --               
               begin
                  vn_qtde := vt_tri_tab_reg_k292(i)(j).count;
               exception
                  when others then
                     vn_qtde := 0;
               end;
               --
               vn_fase := 19.14;
               --
               if nvl(vn_qtde,0) > 0 then
                  --
                  vn_fase := 19.15;
                  --
                  k := vt_tri_tab_reg_k292(i)(j).first;
                  --
                  vn_fase := 19.16;
                  --
                  loop
                     --
                     vn_fase := 19.17;
                     --
                     if nvl(k,0) = 0 then
                        exit;
                     end if;
                     --
                     vn_fase := 19.18;
                     -- cria a estrutura do registro separado por PIPE "|"
                     gl_conteudo := '|';
                     --
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_k292(i)(j)(k).reg                                             || '|';
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_k292(i)(j)(k).cod_item                                        || '|';
                     gl_conteudo := gl_conteudo || fkg_formata_num(vt_tri_tab_reg_k292(i)(j)(k).qtd,'99999999999990D999999')  || '|';
                     --
                     vn_fase := 19.19;
                     --
                     pkb_armaz_estr_arq_efd ( ev_reg_blc  => 'K292'
                                            , el_conteudo => gl_conteudo );
                     --
                     vn_fase := 19.20;
                     --
                     if k = vt_tri_tab_reg_k292(i)(j).last then
                        exit;
                     else
                        k := vt_tri_tab_reg_k292(i)(j).next(k);
                     end if;
                     --
                  end loop;
                  --
               end if;
               --               
               if j = vt_bi_tab_reg_k290(i).last then
                  exit;
               else
                  j := vt_bi_tab_reg_k290(i).next(j);
               end if;
               --
            end loop;
            --
         end if;
         --  
         -- REGISTRO K300: PRODUÇÃO CONJUNTA ¿ INDUSTRIALIZAÇÃO EFETUADA POR TERCEIROS
         --         
         begin
            vn_qtde := vt_bi_tab_reg_k300(i).count;
         exception
            when others then
               vn_qtde := 0;
         end;
         --
         vn_fase := 20;
         --
         if nvl(vn_qtde,0) > 0 then
            --
            vn_fase := 20.1;
            --
            j := vt_bi_tab_reg_k300(i).first;
            --
            vn_fase := 20.2;
            --
            loop
               --
               vn_fase := 20.3;
               --
               if nvl(j,0) = 0 then
                  exit;
               end if;
               --
               vn_fase := 20.4;
               -- cria a estrutura do registro separado por PIPE "|"
               gl_conteudo := '|';
               --
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_k300(i)(j).reg                                              || '|';
               gl_conteudo := gl_conteudo || to_char(vt_bi_tab_reg_k300(i)(j).dt_prod ,'ddmmrrrr')                     || '|';
               --
               vn_fase := 20.5;
               --
               pkb_armaz_estr_arq_efd ( ev_reg_blc  => 'K300'
                                      , el_conteudo => gl_conteudo );
               --
               vn_fase := 20.6;
               --               
               -- REGISTRO K301: PRODUÇÃO CONJUNTA ¿ INDUSTRIALIZAÇÃO EFETUADA POR TERCEIROS ¿ ITENS PRODUZIDOS
               --               
               begin
                  vn_qtde := vt_tri_tab_reg_k301(i)(j).count;
               exception
                  when others then
                     vn_qtde := 0;
               end;
               --
               vn_fase := 20.7;
               --
               if nvl(vn_qtde,0) > 0 then
                  --
                  vn_fase := 20.8;
                  --
                  k := vt_tri_tab_reg_k301(i)(j).first;
                  --
                  vn_fase := 20.9;
                  --
                  loop
                     --
                     vn_fase := 20.10;
                     --
                     if nvl(k,0) = 0 then
                        exit;
                     end if;
                     --
                     vn_fase := 20.11;
                     -- cria a estrutura do registro separado por PIPE "|"
                     gl_conteudo := '|';
                     --
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_k301(i)(j)(k).reg                                           || '|';
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_k301(i)(j)(k).cod_item                                      || '|';
                     gl_conteudo := gl_conteudo || fkg_formata_num(vt_tri_tab_reg_k301(i)(j)(k).qtd,'99999999999990D999999')  || '|';
                     --
                     vn_fase := 20.12;
                     --
                     pkb_armaz_estr_arq_efd ( ev_reg_blc  => 'K301'
                                            , el_conteudo => gl_conteudo );
                     --
                     vn_fase := 20.13;
                     --
                     if k = vt_tri_tab_reg_k301(i)(j).last then
                        exit;
                     else
                        k := vt_tri_tab_reg_k301(i)(j).next(k);
                     end if;
                     --
                  end loop;
                  --
               end if;
               --
               -- REGISTRO K302: PRODUÇÃO CONJUNTA ¿ INDUSTRIALIZAÇÃO EFETUADA POR TERCEIROS ¿ INSUMOS CONSUMIDOS
               --               
               begin
                  vn_qtde := vt_tri_tab_reg_k302(i)(j).count;
               exception
                  when others then
                     vn_qtde := 0;
               end;
               --
               vn_fase := 20.14;
               --
               if nvl(vn_qtde,0) > 0 then
                  --
                  vn_fase := 20.15;
                  --
                  k := vt_tri_tab_reg_k302(i)(j).first;
                  --
                  vn_fase := 20.16;
                  --
                  loop
                     --
                     vn_fase := 20.17;
                     --
                     if nvl(k,0) = 0 then
                        exit;
                     end if;
                     --
                     vn_fase := 20.18;
                     -- cria a estrutura do registro separado por PIPE "|"
                     gl_conteudo := '|';
                     --
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_k302(i)(j)(k).reg                                           || '|';
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_k302(i)(j)(k).cod_item                                      || '|';
                     gl_conteudo := gl_conteudo || fkg_formata_num(vt_tri_tab_reg_k302(i)(j)(k).qtd,'99999999999990D999999')  || '|';
                     --
                     vn_fase := 20.19;
                     --
                     pkb_armaz_estr_arq_efd ( ev_reg_blc  => 'K302'
                                            , el_conteudo => gl_conteudo );
                     --
                     vn_fase := 20.20;
                     --
                     if k = vt_tri_tab_reg_k302(i)(j).last then
                        exit;
                     else
                        k := vt_tri_tab_reg_k302(i)(j).next(k);
                     end if;
                     --
                  end loop;
                  --
               end if;
               --
               if j = vt_bi_tab_reg_k300(i).last then
                  exit;
               else
                  j := vt_bi_tab_reg_k300(i).next(j);
               end if;
               --
            end loop;
            --
         end if;
         --                
         vn_fase := 21;
         --
         if i = vt_tab_reg_k100.last then
            exit;
         else
            i := vt_tab_reg_k100.next(i);
         end if;
         --
      end loop;
      --
   end if;
   --
exception
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_armaz_reg_k100 fase('||vn_fase||'): '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico.id%type;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id => vn_loggenerico_id
                                          , ev_mensagem       => gv_mensagem_log
                                          , ev_resumo         => null
                                          , en_tipo_log       => erro_de_sistema
                                          , en_referencia_id  => gt_row_abertura_efd.id
                                          , ev_obj_referencia => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end pkb_armaz_reg_k100;

-------------------------------------------------------------------------------------------------------

--  Armazena em arquivo o REGISTRO K001: ABERTURA DO BLOCO K
procedure pkb_armaz_reg_k001
is
   --
   vn_fase  number := 0;
   i        pls_integer;
   --
begin
   --
   vn_fase := 1;
   --
   if nvl(vt_tab_reg_k001.count,0) > 0 then
      --
      vn_fase := 2;
      --
      i := nvl(vt_tab_reg_k001.first,0);
      --
      vn_fase := 3;
      --
      loop
         --
         vn_fase := 4;
         --
         if nvl(i,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 5;
         -- cria a estrutura do registro separado por PIPE "|"
         gl_conteudo := '|';
         --
         gl_conteudo := gl_conteudo || vt_tab_reg_k001(i).reg     || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_k001(i).ind_mov || '|';
         --
         vn_fase := 6;
         --
         pkb_armaz_estr_arq_efd ( ev_reg_blc   => 'K001'
                                , el_conteudo  => gl_conteudo );
         --
         vn_fase := 7;
         --
         if i = vt_tab_reg_k001.last then
            exit;
         else
            i := vt_tab_reg_k001.next(i);
         end if;
         --
      end loop;
      --
   end if;
   --
exception
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_armaz_reg_k001 fase('||vn_fase||'): '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico.id%type;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id => vn_loggenerico_id
                                          , ev_mensagem       => gv_mensagem_log
                                          , ev_resumo         => null
                                          , en_tipo_log       => erro_de_sistema
                                          , en_referencia_id  => gt_row_abertura_efd.id
                                          , ev_obj_referencia => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end pkb_armaz_reg_k001;

-------------------------------------------------------------------------------------------------------

-- Armazena em arquivo dados do BLOCO K: CONTROLE DA PRODUÇÃO E DO ESTOQUE
procedure pkb_armaz_arq_bloco_k
is
   --
   vn_fase  number := 0;
   --
begin
   --
   vn_fase := 1;
   -- Armazena em arquivo o REGISTRO K001: ABERTURA DO BLOCO K
   pkb_armaz_reg_k001;
   --
   vn_fase := 2;
   -- Armazena em arquivo o REGISTRO K100: PERÍODO DE APURAÇÃO DO ICMS/IPI
   pkb_armaz_reg_k100;
   --
   vn_fase := 3;
   -- Armazena em arquivo o REGISTRO K990: ENCERRAMENTO DO BLOCO K
   pkb_armaz_reg_k990;
   --
exception
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_armaz_arq_bloco_k fase('||vn_fase||'): '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico.id%type;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id => vn_loggenerico_id
                                          , ev_mensagem       => gv_mensagem_log
                                          , ev_resumo         => null
                                          , en_tipo_log       => erro_de_sistema
                                          , en_referencia_id  => gt_row_abertura_efd.id
                                          , ev_obj_referencia => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end pkb_armaz_arq_bloco_k;

-------------------------------------------------------------------------------------------------------

-- Armazena em arquivo o REGISTRO H990: ENCERRAMENTO DO BLOCO H
procedure pkb_armaz_reg_h990
is
   --
   vn_fase  number := 0;
   i        pls_integer;
   --
begin
   --
   vn_fase := 1;
   --
   if nvl(vt_tab_reg_h990.count,0) > 0 then
      --
      vn_fase := 2;
      --
      i := nvl(vt_tab_reg_h990.first,0);
      --
      vn_fase := 3;
      --
      loop
         --
         vn_fase := 4;
         --
         if nvl(i,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 5;
         -- cria a estrutura do registro separado por PIPE "|"
         gl_conteudo := '|';
         --
         gl_conteudo := gl_conteudo || vt_tab_reg_h990(i).reg || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_h990(i).qtd_lin_h || '|';
         --
         vn_fase := 6;
         --
         pkb_armaz_estr_arq_efd ( ev_reg_blc   => 'H990'
                                , el_conteudo  => gl_conteudo );
         --
         vn_fase := 7;
         --
         if i = vt_tab_reg_h990.last then
            exit;
         else
            i := vt_tab_reg_h990.next(i);
         end if;
         --
      end loop;
      --
   end if;
   --
exception
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_armaz_reg_h990 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end pkb_armaz_reg_h990;

-------------------------------------------------------------------------------------------------------

-- Armazena em arquivo o REGISTRO H005: TOTAIS DO INVENTÁRIO
procedure pkb_armaz_reg_h005
is
   --
   vn_fase          number := 0;
   i                pls_integer;
   j                pls_integer;
   k                pls_integer;
   vn_qtde_reg_h010 number;
   vn_qtde_reg_h020 number;
   --
begin
   --
   vn_fase := 1;
   --
   if nvl(vt_tab_reg_h005.count,0) > 0 then
      --
      vn_fase := 2;
      --
      i := nvl(vt_tab_reg_h005.first,0);
      --
      vn_fase := 3;
      --
      loop
         --
         vn_fase := 4;
         --
         if nvl(i,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 5;
         -- cria a estrutura do registro separado por PIPE "|"
         gl_conteudo := '|';
         --
         if gn_versao >= 105 then
         --
           gl_conteudo := gl_conteudo || vt_tab_reg_h005(i).reg || '|';
           gl_conteudo := gl_conteudo || to_char(vt_tab_reg_h005(i).dt_inv, 'ddmmrrrr') || '|';
           gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_h005(i).vl_inv, '9999999999990D99') || '|';
           gl_conteudo := gl_conteudo || vt_tab_reg_h005(i).dm_mot_inv || '|';
         --
         else
         --
           gl_conteudo := gl_conteudo || vt_tab_reg_h005(i).reg || '|';
           gl_conteudo := gl_conteudo || to_char(vt_tab_reg_h005(i).dt_inv, 'ddmmrrrr') || '|';
           gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_h005(i).vl_inv, '9999999999990D99') || '|';
         --
         end if;
         --
         vn_fase := 6;
         --
         pkb_armaz_estr_arq_efd ( ev_reg_blc   => 'H005'
                                , el_conteudo  => gl_conteudo );
         --
         vn_fase := 7;
         -- REGISTRO H010: INVENTÁRIO
         begin
            vn_qtde_reg_h010 := vt_bi_tab_reg_h010(i).count;
         exception
            when others then
               vn_qtde_reg_h010 := 0;
         end;
         --
         vn_fase := 8;
         --
         if nvl(vn_qtde_reg_h010,0) > 0 then
            --
            vn_fase := 8.1;
            --
            j := vt_bi_tab_reg_h010(i).first;
            --
            vn_fase := 8.2;
            --
            loop
               --
               vn_fase := 8.3;
               --
               if nvl(j,0) = 0 then
                  exit;
               end if;
               --
               vn_fase := 8.4;

               -- cria a estrutura do registro separado por PIPE "|"
               gl_conteudo := '|';
               --
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_h010(i)(j).reg || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_h010(i)(j).cod_item || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_h010(i)(j).unid || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_h010(i)(j).qtd, '9999999999990D999') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_h010(i)(j).vl_unit, '99999999990D999999') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_h010(i)(j).vl_item, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_h010(i)(j).ind_prop || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_h010(i)(j).cod_part || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_h010(i)(j).txt_compl || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_h010(i)(j).cod_cta || '|';
               --
               if gn_versao >= 108 then
               --   gl_conteudo := gl_conteudo || vt_bi_tab_reg_h010(i)(j).vl_item_ir || '|';
                  gl_conteudo := gl_conteudo ||  trim(to_char(trunc(vt_bi_tab_reg_h010(i)(j).vl_item_ir, 2), '999999999999990d00', 'nls_numeric_characters=,.')) || '|';
               end if;
               --
               vn_fase := 8.5;
               --
               pkb_armaz_estr_arq_efd ( ev_reg_blc   => 'H010'
                                      , el_conteudo  => gl_conteudo );
               --
               vn_fase := 8.6;
               --
               begin
                vn_qtde_reg_h020 := vt_tri_tab_reg_h020(i)(j).count;
               exception
                when others then
                   vn_qtde_reg_h020 := 0;
               end;
               --
               vn_fase := 8.7;
               --
               if gn_versao >= 105 and -- versão válida a partir de julho/2012
                  nvl(vn_qtde_reg_h020,0) > 0 then
                  --
                  vn_fase := 8.8;
                  --
                   k := vt_tri_tab_reg_h020(i)(j).first;
                   --
                   vn_fase := 8.9;
                   --
                   loop
                   --
                     vn_fase := 8.10;
                     --
                     if nvl(k,0) = 0  then
                       exit;
                     end if;
                     --
                     vn_fase := 8.11;
                     -- cria a estrutura do registro separado por PIPE "|"
                     gl_conteudo := '|';
                     --
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_h020(i)(j)(k).reg || '|';
                     gl_conteudo := gl_conteudo || to_char(vt_tri_tab_reg_h020(i)(j)(k).cod_st)  || '|';
                     gl_conteudo := gl_conteudo || fkg_formata_num(vt_tri_tab_reg_h020(i)(j)(k).vl_bc_icms, '9999999999990D99') || '|';
                     gl_conteudo := gl_conteudo || fkg_formata_num(vt_tri_tab_reg_h020(i)(j)(k).vl_icms, '9999999999990D99') || '|';
                     --
                     vn_fase := 8.12;
                     --
                     pkb_armaz_estr_arq_efd ( ev_reg_blc   => 'H020'
                                            , el_conteudo  => gl_conteudo );
                     --
                     vn_fase := 8.13;
                     --
                     if k = vt_tri_tab_reg_h020(i)(j).last then
                      exit;
                     else
                        k := vt_tri_tab_reg_h020(i)(j).next(k);
                     end if;
                     --
                   end loop;
                   --
               end if;
               --
               vn_fase := 9;
               --
               if j = vt_bi_tab_reg_h010(i).last then
                  exit;
               else
                  j := vt_bi_tab_reg_h010(i).next(j);
               end if;
            --
            end loop;
            --
         end if;
         --
         vn_fase := 10;
         --
         if i = vt_tab_reg_h005.last then
            exit;
         else
            i := vt_tab_reg_h005.next(i);
         end if;
         --
      end loop;
      --
   end if;
   --
exception
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_armaz_reg_h005 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end pkb_armaz_reg_h005;

-------------------------------------------------------------------------------------------------------

--  Armazena em arquivo o REGISTRO H001: ABERTURA DO BLOCO H
procedure pkb_armaz_reg_h001
is
   --
   vn_fase  number := 0;
   i        pls_integer;
   --
begin
   --
   vn_fase := 1;
   --
   if nvl(vt_tab_reg_h001.count,0) > 0 then
      --
      vn_fase := 2;
      --
      i := nvl(vt_tab_reg_h001.first,0);
      --
      vn_fase := 3;
      --
      loop
         --
         vn_fase := 4;
         --
         if nvl(i,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 5;
         -- cria a estrutura do registro separado por PIPE "|"
         gl_conteudo := '|';
         --
         gl_conteudo := gl_conteudo || vt_tab_reg_h001(i).reg || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_h001(i).ind_mov || '|';
         --
         vn_fase := 6;
         --
         pkb_armaz_estr_arq_efd ( ev_reg_blc   => 'H001'
                                , el_conteudo  => gl_conteudo );
         --
         vn_fase := 7;
         --
         if i = vt_tab_reg_h001.last then
            exit;
         else
            i := vt_tab_reg_h001.next(i);
         end if;
         --
      end loop;
      --
   end if;
   --
exception
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_armaz_reg_h001 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end pkb_armaz_reg_h001;

-------------------------------------------------------------------------------------------------------

-- Armazena em arquivo dados do BLOCO H: INVENTÁRIO FÍSICO
procedure pkb_armaz_arq_bloco_h
is
   --
   vn_fase  number := 0;
   --
begin
   --
   vn_fase := 1;
   -- Armazena em arquivo o REGISTRO H001: ABERTURA DO BLOCO H
   pkb_armaz_reg_h001;
   --
   vn_fase := 2;
   -- Armazena em arquivo o REGISTRO H005: TOTAIS DO INVENTÁRIO
   pkb_armaz_reg_h005;
   --
   vn_fase := 3;
   -- Armazena em arquivo o REGISTRO H990: ENCERRAMENTO DO BLOCO H
   pkb_armaz_reg_h990;
   --
exception
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_armaz_arq_bloco_h fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end pkb_armaz_arq_bloco_h;

-------------------------------------------------------------------------------------------------------

-- Armazena em arquivo o REGISTRO H990: ENCERRAMENTO DO BLOCO H
procedure pkb_armaz_reg_g990
is
   --
   vn_fase  number := 0;
   i        pls_integer;
   --
begin
   --
   vn_fase := 1;
   --
   if nvl(vt_tab_reg_g990.count,0) > 0 then
      --
      vn_fase := 2;
      --
      i := nvl(vt_tab_reg_g990.first,0);
      --
      vn_fase := 3;
      --
      loop
         --
         vn_fase := 4;
         --
         if nvl(i,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 5;
         -- cria a estrutura do registro separado por PIPE "|"
         gl_conteudo := '|';
         --
         gl_conteudo := gl_conteudo || vt_tab_reg_g990(i).reg || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_g990(i).qtd_lin_g || '|';
         --
         vn_fase := 6;
         --
         pkb_armaz_estr_arq_efd ( ev_reg_blc   => 'G990'
                                , el_conteudo  => gl_conteudo );
         --
         vn_fase := 7;
         --
         if i = vt_tab_reg_g990.last then
            exit;
         else
            i := vt_tab_reg_g990.next(i);
         end if;
         --
      end loop;
      --
   end if;
   --
exception
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_armaz_reg_g990 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end pkb_armaz_reg_g990;

-------------------------------------------------------------------------------------------------------

-- Armazena em arquivo o REGISTRO G110 - ICMS - ATIVO PERMANENTE - CIAP
procedure pkb_armaz_reg_g110
is
   --
   vn_fase          number := 0;
   i                pls_integer;
   j                pls_integer;
   k                pls_integer;
   l                pls_integer;
   vn_qtde_reg_g125 number;
   vn_qtde_reg_g126 number;
   vn_qtde_reg_g130 number;
   vn_qtde_reg_g140 number;
   --
begin
   --
   vn_fase := 1;
   --
   if nvl(vt_tab_reg_g110.count,0) > 0 then
      --
      vn_fase := 2;
      --
      i := nvl(vt_tab_reg_g110.first,0);
      --
      vn_fase := 2.1;
      --
      loop
         --
         vn_fase := 2.2;
         --
         if nvl(i,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 2.3;
         -- cria a estrutura do registro separado por PIPE "|"
         gl_conteudo := '|';
         --
         gl_conteudo := gl_conteudo || vt_tab_reg_g110(i).reg || '|';
         gl_conteudo := gl_conteudo || to_char(vt_tab_reg_g110(i).dt_ini, 'ddmmrrrr') || '|';
         gl_conteudo := gl_conteudo || to_char(vt_tab_reg_g110(i).dt_fin, 'ddmmrrrr') || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_g110(i).saldo_in_icms, '9999999999990D99') || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_g110(i).som_parc, '9999999999990D99') || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_g110(i).vl_trib_exp, '9999999999990D99') || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_g110(i).vl_total, '9999999999990D99') || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_g110(i).ind_per_sai, '9999999999990D99999999') || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_g110(i).icms_aprop, '9999999999990D99') || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_g110(i).som_icms_oc, '9999999999990D99') || '|';
         --
         vn_fase := 2.4;
         --
         pkb_armaz_estr_arq_efd ( ev_reg_blc   => 'G110'
                                , el_conteudo  => gl_conteudo );
         --
         vn_fase := 2.5;
         -- REGISTRO G125 - MOVIMENTAÇÃO DE BEM OU COMPONENTE DO ATIVO IMOBILIZADO
         begin
            vn_qtde_reg_g125 := nvl(vt_bi_tab_reg_g125(i).count,0);
         exception
            when others then
               vn_qtde_reg_g125 := 0;
         end;
         --
         vn_fase := 3;
         --
         if nvl(vn_qtde_reg_g125,0) > 0 then
            --
            vn_fase := 3.1;
            --
            j := nvl(vt_bi_tab_reg_g125(i).first,0);
            --
            vn_fase := 3.2;
            --
            loop
               --
               vn_fase := 3.3;
               --
               if nvl(j,0) = 0 then
                  exit;
               end if;
               --
               vn_fase := 3.4;
               -- cria a estrutura do registro separado por PIPE "|"
               gl_conteudo := '|';
               --
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_g125(i)(j).reg || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_g125(i)(j).cod_ind_bem || '|';
               gl_conteudo := gl_conteudo || to_char(vt_bi_tab_reg_g125(i)(j).dt_mov, 'ddmmrrrr') || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_g125(i)(j).tipo_mov || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_g125(i)(j).vl_imob_icms_op, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_g125(i)(j).vl_imob_icms_st, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_g125(i)(j).vl_imob_icms_frt, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_g125(i)(j).vl_imob_icms_dif, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_g125(i)(j).num_parc || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_g125(i)(j).vl_parc_pass, '9999999999990D99') || '|';
               --
               vn_fase := 3.5;
               --
               pkb_armaz_estr_arq_efd ( ev_reg_blc   => 'G125'
                                      , el_conteudo  => gl_conteudo );
               --
               vn_fase := 3.6;
               -- REGISTRO G126 - OUTROS CRÉDITOS CIAP
               begin
                  vn_qtde_reg_g126 := nvl(vt_tri_tab_reg_g126(i)(j).count,0);
               exception
                  when others then
                     vn_qtde_reg_g126 := 0;
               end;
               --
               vn_fase := 3.7;
               --
               if nvl(vn_qtde_reg_g126,0) > 0 then
                  --
                  vn_fase := 3.8;
                  --
                  k := nvl(vt_tri_tab_reg_g126(i)(j).first,0);
                  --
                  vn_fase := 3.9;
                  --
                  loop
                     --
                     vn_fase := 3.10;
                     --
                     if nvl(k,0) = 0 then
                        exit;
                     end if;
                     --
                     vn_fase := 3.11;
                     -- cria a estrutura do registro separado por PIPE "|"
                     gl_conteudo := '|';
                     --
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_g126(i)(j)(k).reg || '|';
                     gl_conteudo := gl_conteudo || to_char(vt_tri_tab_reg_g126(i)(j)(k).dt_ini, 'ddmmrrrr') || '|';
                     gl_conteudo := gl_conteudo || to_char(vt_tri_tab_reg_g126(i)(j)(k).dt_fim, 'ddmmrrrr') || '|';
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_g126(i)(j)(k).num_parc || '|';
                     gl_conteudo := gl_conteudo || fkg_formata_num(vt_tri_tab_reg_g126(i)(j)(k).vl_parc_pass, '9999999999990D99') || '|';
                     gl_conteudo := gl_conteudo || fkg_formata_num(vt_tri_tab_reg_g126(i)(j)(k).vl_trib_oc, '9999999999990D99') || '|';
                     gl_conteudo := gl_conteudo || fkg_formata_num(vt_tri_tab_reg_g126(i)(j)(k).vl_total, '9999999999990D99') || '|';
                     gl_conteudo := gl_conteudo || fkg_formata_num(vt_tri_tab_reg_g126(i)(j)(k).ind_per_sai, '9999999999990D99999999') || '|';
                     gl_conteudo := gl_conteudo || fkg_formata_num(vt_tri_tab_reg_g126(i)(j)(k).vl_parc_aprop, '9999999999990D99') || '|';
                     --
                     vn_fase := 3.12;
                     --
                     pkb_armaz_estr_arq_efd ( ev_reg_blc   => 'G126'
                                            , el_conteudo  => gl_conteudo );
                     --
                     if k = vt_tri_tab_reg_g126(i)(j).last then
                        exit;
                     else
                        k := nvl(vt_tri_tab_reg_g126(i)(j).next(k),0);
                     end if;
                     --
                  end loop;
                  --
               end if;
               --
               vn_fase := 3.13;
               -- REGISTRO G130 - IDENTIFICAÇÃO DO DOCUMENTO FISCAL
               begin
                  vn_qtde_reg_g130 := nvl(vt_tri_tab_reg_g130(i)(j).count,0);
               exception
                  when others then
                     vn_qtde_reg_g130 := 0;
               end;
               --
               vn_fase := 4;
               --
               if nvl(vn_qtde_reg_g130,0) > 0 then
                  --
                  vn_fase := 4.1;
                  --
                  k := nvl(vt_tri_tab_reg_g130(i)(j).first,0);
                  --
                  vn_fase := 4.2;
                  --
                  loop
                     --
                     vn_fase := 4.3;
                     --
                     if nvl(k,0) = 0 then
                        exit;
                     end if;
                     --
                     vn_fase := 4.4;
                     -- cria a estrutura do registro separado por PIPE "|"
                     gl_conteudo := '|';
                     --
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_g130(i)(j)(k).reg || '|';
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_g130(i)(j)(k).ind_emit || '|';
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_g130(i)(j)(k).cod_part || '|';
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_g130(i)(j)(k).cod_mod || '|';
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_g130(i)(j)(k).serie || '|';
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_g130(i)(j)(k).num_doc || '|';
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_g130(i)(j)(k).chv_nfe_cte || '|';
                     gl_conteudo := gl_conteudo || to_char(vt_tri_tab_reg_g130(i)(j)(k).dt_doc, 'ddmmrrrr') || '|';
                     --           
                     vn_fase := 4.41;
                     --               
                     if gn_versao >= 113 then -- versão válida a partir de 01/janeiro/2020   
                       --           
                       gl_conteudo := gl_conteudo || vt_tri_tab_reg_g130(i)(j)(k).num_da || '|';
                       --
                     end if;             
                     --
                     vn_fase := 4.5;
                     --
                     pkb_armaz_estr_arq_efd ( ev_reg_blc   => 'G130'
                                            , el_conteudo  => gl_conteudo );
                     --
                     vn_fase := 4.6;
                     -- REGISTRO G140 - IDENTIFICAÇÃO DO ITEM DO DOCUMENTO FISCAL
                     begin
                        vn_qtde_reg_g140 := nvl(vt_tetra_tab_reg_g140(i)(j)(k).count,0);
                     exception
                        when others then
                           vn_qtde_reg_g140 := 0;
                     end;
                     --
                     vn_fase := 5;
                     --
                     if nvl(vn_qtde_reg_g140,0) > 0 then
                        --
                        vn_fase := 5.1;
                        --
                        l := nvl(vt_tetra_tab_reg_g140(i)(j)(k).first,0);
                        --
                        vn_fase := 5.2;
                        --
                        loop
                           --
                           vn_fase := 5.3;
                           --
                           if nvl(l,0) = 0 then
                              exit;
                           end if;
                           --
                           vn_fase := 5.4;
                           -- cria a estrutura do registro separado por PIPE "|"
                           gl_conteudo := '|';
                           --
                           gl_conteudo := gl_conteudo || vt_tetra_tab_reg_g140(i)(j)(k)(l).reg || '|';
                           gl_conteudo := gl_conteudo || vt_tetra_tab_reg_g140(i)(j)(k)(l).num_item || '|';
                           gl_conteudo := gl_conteudo || vt_tetra_tab_reg_g140(i)(j)(k)(l).cod_item || '|';
                           --
                           vn_fase := 5.41;
                           --               
                           if gn_versao >= 113 then -- versão válida a partir de 01/janeiro/2020   
                              --
                              gl_conteudo := gl_conteudo || fkg_formata_num(vt_tetra_tab_reg_g140(i)(j)(k)(l).qtde, '9999999990D99999') || '|';                
                              gl_conteudo := gl_conteudo || vt_tetra_tab_reg_g140(i)(j)(k)(l).sigla_unid || '|'; 
                              gl_conteudo := gl_conteudo || fkg_formata_num(vt_tetra_tab_reg_g140(i)(j)(k)(l).vl_icms_op_aplicado, '9999999999990D99') || '|';                
                              gl_conteudo := gl_conteudo || fkg_formata_num(vt_tetra_tab_reg_g140(i)(j)(k)(l).vl_icms_st_aplicado, '9999999999990D99') || '|';                
                              gl_conteudo := gl_conteudo || fkg_formata_num(vt_tetra_tab_reg_g140(i)(j)(k)(l).vl_icms_frt_aplicado, '9999999999990D99') || '|';                
                              gl_conteudo := gl_conteudo || fkg_formata_num(vt_tetra_tab_reg_g140(i)(j)(k)(l).vl_icms_dif_aplicado, '9999999999990D99') || '|';                
                              --         
                           end if; 
                           --                 
                           vn_fase := 5.5;
                           --
                           pkb_armaz_estr_arq_efd ( ev_reg_blc   => 'G140'
                                                  , el_conteudo  => gl_conteudo );
                           --
                           vn_fase := 5.6;
                           --
                           if l = vt_tetra_tab_reg_g140(i)(j)(k).last then
                              exit;
                           else
                              l := vt_tetra_tab_reg_g140(i)(j)(k).next(l);
                           end if;
                           --
                        end loop;
                        --
                     end if;
                     --
                     vn_fase := 6;
                     --
                     if k = vt_tri_tab_reg_g130(i)(j).last then
                        exit;
                     else
                        k := nvl(vt_tri_tab_reg_g130(i)(j).next(k),0);
                     end if;
                     --
                  end loop;
                  --
               end if;
               --
               vn_fase := 7;
               --
               if j = vt_bi_tab_reg_g125(i).last then
                  exit;
               else
                  j := vt_bi_tab_reg_g125(i).next(j);
               end if;
               --
            end loop;
            --
         end if;
         --
         vn_fase := 8;
         --
         if i = vt_tab_reg_g110.last then
            exit;
         else
            i := vt_tab_reg_g110.next(i);
         end if;
         --
      end loop;
      --
   end if;
   --
exception
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_armaz_reg_g110 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end pkb_armaz_reg_g110;

-------------------------------------------------------------------------------------------------------

--  Armazena em arquivo o REGISTRO G001: ABERTURA DO BLOCO G
procedure pkb_armaz_reg_g001
is
   --
   vn_fase  number := 0;
   i        pls_integer;
   --
begin
   --
   vn_fase := 1;
   --
   if nvl(vt_tab_reg_g001.count,0) > 0 then
      --
      vn_fase := 2;
      --
      i := nvl(vt_tab_reg_g001.first,0);
      --
      vn_fase := 3;
      --
      loop
         --
         vn_fase := 4;
         --
         if nvl(i,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 5;
         -- cria a estrutura do registro separado por PIPE "|"
         gl_conteudo := '|';
         --
         gl_conteudo := gl_conteudo || vt_tab_reg_g001(i).reg || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_g001(i).ind_mov || '|';
         --
         vn_fase := 6;
         --
         pkb_armaz_estr_arq_efd ( ev_reg_blc   => 'G001'
                                , el_conteudo  => gl_conteudo );
         --
         vn_fase := 7;
         --
         if i = vt_tab_reg_g001.last then
            exit;
         else
            i := vt_tab_reg_g001.next(i);
         end if;
         --
      end loop;
      --
   end if;
   --
exception
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_armaz_reg_g001 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end pkb_armaz_reg_g001;

-------------------------------------------------------------------------------------------------------

-- Armazena em arquivo dados do BLOCO G - CONTROLE DO CRÉDITO DE ICMS DO ATIVO PERMANENTE - CIAP - modelos -C- e -D-
procedure pkb_armaz_arq_bloco_g
is
   --
   vn_fase  number := 0;
   --
begin
   --
   vn_fase := 1;
   -- Armazena em arquivo o REGISTRO G001: ABERTURA DO BLOCO G
   pkb_armaz_reg_g001;
   --
   vn_fase := 2;
   -- Armazena em arquivo o REGISTRO G110 - ICMS - ATIVO PERMANENTE - CIAP
   pkb_armaz_reg_g110;
   --
   vn_fase := 3;
   -- Armazena em arquivo o REGISTRO H990: ENCERRAMENTO DO BLOCO H
   pkb_armaz_reg_g990;
   --
exception
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_armaz_arq_bloco_g fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end pkb_armaz_arq_bloco_g;

-------------------------------------------------------------------------------------------------------

-- Armazena em arquivo o REGISTRO E990: ENCERRAMENTO DO BLOCO E
procedure pkb_armaz_reg_e990
is
   --
   vn_fase  number := 0;
   i        pls_integer;
   --
begin
   --
   vn_fase := 1;
   --
   if nvl(vt_tab_reg_e990.count,0) > 0 then
      --
      vn_fase := 2;
      --
      i := nvl(vt_tab_reg_e990.first,0);
      --
      vn_fase := 3;
      --
      loop
         --
         vn_fase := 4;
         --
         if nvl(i,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 5;
         -- cria a estrutura do registro separado por PIPE "|"
         gl_conteudo := '|';
         --
         gl_conteudo := gl_conteudo || vt_tab_reg_e990(i).reg || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_e990(i).qtd_lin_e || '|';
         --
         vn_fase := 6;
         --
         pkb_armaz_estr_arq_efd ( ev_reg_blc   => 'E990'
                                , el_conteudo  => gl_conteudo );
         --
         vn_fase := 7;
         --
         if i = vt_tab_reg_e990.last then
            exit;
         else
            i := vt_tab_reg_e990.next(i);
         end if;
         --
      end loop;
      --
   end if;
   --
exception
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_armaz_reg_e990 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end pkb_armaz_reg_e990;

-------------------------------------------------------------------------------------------------------

-- Armazena em arquivo o REGISTRO E500: PERÍODO DE APURAÇÃO DO IPI
procedure pkb_armaz_reg_e500
is
   --
   vn_fase          number := 0;
   i                pls_integer;
   j                pls_integer;
   k                pls_integer;
   vn_qtde_reg_e510 number;
   vn_qtde_reg_e530 number;
   vn_qtde_reg_e531 number;
   --
begin
   --
   vn_fase := 1;
   --
   if nvl(vt_tab_reg_e500.count,0) > 0 then
      --
      vn_fase := 2;
      --
      i := nvl(vt_tab_reg_e500.first,0);
      --
      vn_fase := 3;
      --
      loop
         --
         vn_fase := 4;
         --
         if nvl(i,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 5;
         -- cria a estrutura do registro separado por PIPE "|"
         gl_conteudo := '|';
         --
         gl_conteudo := gl_conteudo || vt_tab_reg_e500(i).reg || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_e500(i).ind_apur || '|';
         gl_conteudo := gl_conteudo || to_char(vt_tab_reg_e500(i).dt_ini, 'ddmmrrrr') || '|';
         gl_conteudo := gl_conteudo || to_char(vt_tab_reg_e500(i).dt_fin, 'ddmmrrrr') || '|';
         --
         vn_fase := 6;
         --
         pkb_armaz_estr_arq_efd ( ev_reg_blc   => 'E500'
                                , el_conteudo  => gl_conteudo );
         --
         vn_fase := 7;
         -- REGISTRO E510: CONSOLIDAÇÃO DOS VALORES DO IPI
         begin
            vn_qtde_reg_e510 := vt_bi_tab_reg_e510(i).count;
         exception
            when others then
               vn_qtde_reg_e510 := 0;
         end;
         --
         vn_fase := 7.1;
         --
         if nvl(vn_qtde_reg_e510,0) > 0 then
            --
            vn_fase := 7.2;
            --
            j := vt_bi_tab_reg_e510(i).first;
            --
            vn_fase := 7.3;
            --
            loop
               --
               vn_fase := 7.4;
               --
               if nvl(j,0) = 0 then
                  exit;
               end if;
               --
               vn_fase := 7.5;
               -- cria a estrutura do registro separado por PIPE "|"
               gl_conteudo := '|';
               --
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_e510(i)(j).reg || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_e510(i)(j).cfop || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_e510(i)(j).cst_ipi || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_e510(i)(j).vl_cont_ipi, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_e510(i)(j).vl_bc_ipi, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_e510(i)(j).vl_ipi, '9999999999990D99') || '|';
               --
               vn_fase := 7.6;
               --
               pkb_armaz_estr_arq_efd ( ev_reg_blc   => 'E510'
                                      , el_conteudo  => gl_conteudo );
               --
               vn_fase := 7.7;
               --
               if j = vt_bi_tab_reg_e510(i).last then
                  exit;
               else
                  j := vt_bi_tab_reg_e510(i).next(j);
               end if;
               --
            end loop; -- fim E510
            --
         end if;
         --
         vn_fase := 8;
         -- REGISTRO E520: APURAÇÃO DO IPI
         -- cria a estrutura do registro separado por PIPE "|"
         gl_conteudo := '|';
         --
         gl_conteudo := gl_conteudo || vt_tab_reg_e520(i).reg || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_e520(i).vl_sd_ant_ipi, '9999999999990D99') || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_e520(i).vl_deb_ipi, '9999999999990D99') || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_e520(i).vl_cred_ipi, '9999999999990D99') || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_e520(i).vl_od_ipi, '9999999999990D99') || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_e520(i).vl_oc_ipi, '9999999999990D99') || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_e520(i).vl_sc_ipi, '9999999999990D99') || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_e520(i).vl_sd_ipi, '9999999999990D99') || '|';
         --
         vn_fase := 9;
         --
         pkb_armaz_estr_arq_efd ( ev_reg_blc   => 'E520'
                                , el_conteudo  => gl_conteudo );
         --
         vn_fase := 10;
         -- REGISTRO E530: AJUSTES DA APURAÇÃO DO IPI
         begin
            vn_qtde_reg_e530 := vt_bi_tab_reg_e530(i).count;
         exception
            when others then
               vn_qtde_reg_e530 := 0;
         end;
         --
         vn_fase := 11;
         --
         if nvl(vn_qtde_reg_e530,0) > 0 then
            --
            vn_fase := 11.1;
            --
            j := vt_bi_tab_reg_e530(i).first;
            --
            vn_fase := 11.2;
            --
            loop
               --
               vn_fase := 11.3;
               --
               if nvl(j,0) = 0 then
                  exit;
               end if;
               --
               vn_fase := 11.4;
               -- cria a estrutura do registro separado por PIPE "|"
               gl_conteudo := '|';
               --
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_e530(i)(j).reg || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_e530(i)(j).ind_aj || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_e530(i)(j).vl_aj, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_e530(i)(j).cod_aj || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_e530(i)(j).ind_doc || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_e530(i)(j).num_doc || '|';
               gl_conteudo := gl_conteudo || ltrim(rtrim(vt_bi_tab_reg_e530(i)(j).descr_aj)) || '|';
               --
               vn_fase := 11.5;
               --
               pkb_armaz_estr_arq_efd ( ev_reg_blc   => 'E530'
                                      , el_conteudo  => gl_conteudo );
               --
               vn_fase := 12;
               --
               -- REGISTRO E531: INFORMAÇÕES ADICIONAIS DOS AJUSTES DA APURAÇÃO DO IPI - IDENTIFICAÇÃO DOS DOCUMENTOS FISCAIS (01 e 55)
               begin
                  vn_qtde_reg_e531 := vt_tri_tab_reg_e531(i)(j).count;
               exception
                   when others then
                      vn_qtde_reg_e531 := 0;
               end;
               --
               vn_fase := 13;
               --
               if nvl(vn_qtde_reg_e531,0) > 0 then
                  --
                  vn_fase := 13.1;
                  --
                  k := vt_tri_tab_reg_e531(i)(j).first;
                  --
                  vn_fase := 13.2;
                  --
                  loop
                     --
                     vn_fase := 13.3;
                     --
                     if nvl(k,0) = 0 then
                        exit;
                     end if;
                     --
                     vn_fase := 13.4;
                     -- cria a estrutura do registro separado por PIPE "|"
                     gl_conteudo := '|';
                     --
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_e531(i)(j)(k).reg || '|';
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_e531(i)(j)(k).cod_part || '|';
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_e531(i)(j)(k).cod_mod || '|';
                     gl_conteudo := gl_conteudo || nvl(vt_tri_tab_reg_e531(i)(j)(k).ser,'000') || '|';
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_e531(i)(j)(k).sub || '|';
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_e531(i)(j)(k).num_doc || '|';
                     gl_conteudo := gl_conteudo || to_char(vt_tri_tab_reg_e531(i)(j)(k).dt_doc, 'ddmmrrrr') || '|';
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_e531(i)(j)(k).cod_item || '|';
                     gl_conteudo := gl_conteudo || fkg_formata_num(vt_tri_tab_reg_e531(i)(j)(k).vl_aj_item, '9999999999990D99') || '|';
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_e531(i)(j)(k).chv_nfe || '|';
                     --
                     vn_fase := 13.5;
                     --
                     pkb_armaz_estr_arq_efd ( ev_reg_blc   => 'E531'
                                            , el_conteudo  => gl_conteudo );
                     --
                     vn_fase := 13.6;
                     --
                     if k = vt_tri_tab_reg_e531(i)(j).last then
                        exit;
                     else
                        k := vt_tri_tab_reg_e531(i)(j).next(k);
                     end if;
                     --
                  end loop; -- fim E531
                  --
               end if;
               --
               vn_fase := 14;
               --
               if j = vt_bi_tab_reg_e530(i).last then
                  exit;
               else
                  j := vt_bi_tab_reg_e530(i).next(j);
               end if;
               --
            end loop; -- fim E530
            --
         end if;
         --
         vn_fase := 15;
         --
         if i = vt_tab_reg_e500.last then
            exit;
         else
            i := vt_tab_reg_e500.next(i);
         end if;
         --
      end loop;
      --
   end if;
   --
exception
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_armaz_reg_e500 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end pkb_armaz_reg_e500;

-------------------------------------------------------------------------------------------------------

-- Armazena em arquivo o REGISTRO E300: PERÍODO DE APURAÇÃO DO ICMS DIFERENCIAL DE ALÍQUOTA - UF ORIGEM/DESTINO EC 87/15
procedure pkb_armaz_reg_e300
is
   --
   vn_fase          number := 0;
   i                pls_integer;
   j                pls_integer;
   k                pls_integer;
   vn_qtde_reg_e311 number;
   vn_qtde_reg_e312 number;
   vn_qtde_reg_e313 number;
   vn_qtde_reg_e316 number;
   --
begin
   --
   vn_fase := 1;
   --
   if nvl(vt_tab_reg_e300.count,0) > 0 then
      --
      vn_fase := 2;
      --
      i := nvl(vt_tab_reg_e300.first,0);
      --
      vn_fase := 3;
      --
      loop
         --
         vn_fase := 4;
         --
         if nvl(i,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 5;
         -- cria a estrutura do registro separado por PIPE "|"
         gl_conteudo := '|';
         --
         gl_conteudo := gl_conteudo || vt_tab_reg_e300(i).reg || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_e300(i).uf || '|';
         gl_conteudo := gl_conteudo || to_char(vt_tab_reg_e300(i).dt_ini, 'ddmmrrrr') || '|';
         gl_conteudo := gl_conteudo || to_char(vt_tab_reg_e300(i).dt_fin, 'ddmmrrrr') || '|';
         --
         vn_fase := 6;
         --
         pkb_armaz_estr_arq_efd ( ev_reg_blc   => 'E300'
                                , el_conteudo  => gl_conteudo );
         --
         vn_fase := 7;
         --
         /*
         if nvl(vt_tab_reg_e310(i).vl_sld_cred_ant_difal,0) <> 0 or
            nvl(vt_tab_reg_e310(i).vl_tot_debitos_difal,0) <> 0 or
            nvl(vt_tab_reg_e310(i).vl_out_deb_difal,0) <> 0 or
            nvl(vt_tab_reg_e310(i).vl_tot_deb_fcp,0) <> 0 or
            nvl(vt_tab_reg_e310(i).vl_tot_creditos_difal,0) <> 0 or
            nvl(vt_tab_reg_e310(i).vl_tot_cred_fcp,0) <> 0 or
            nvl(vt_tab_reg_e310(i).vl_out_cred_difal,0) <> 0 or
            nvl(vt_tab_reg_e310(i).vl_sld_dev_ant_difal,0) <> 0 or
            nvl(vt_tab_reg_e310(i).vl_deducoes_difal,0) <> 0 or
            nvl(vt_tab_reg_e310(i).vl_recol,0) <> 0 or
            nvl(vt_tab_reg_e310(i).vl_sld_cred_transportar,0) <> 0 or
            nvl(vt_tab_reg_e310(i).deb_esp_difal,0) <> 0
            then -- Só exportar o arquivo se houver movimento
            */
            --
            vn_fase := 8;
            -- REGISTRO E310: APURAÇÃO DO ICMS DIFERENCIAL DE ALÍQUOTA - UF ORIGEM/DESTINO EC 87/15
            -- cria a estrutura do registro separado por PIPE "|"
            gl_conteudo := '|';
            gl_conteudo := gl_conteudo || vt_tab_reg_e310(i).reg || '|';
            gl_conteudo := gl_conteudo || vt_tab_reg_e310(i).ind_mov_difal || '|';
            --
            if gt_row_abertura_efd.dt_ini >= to_date('01/01/2017', 'dd/mm/rrrr') then
               --
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_e310(i).vl_sld_cred_ant_difal, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_e310(i).vl_tot_debitos_difal, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_e310(i).vl_out_deb_difal, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_e310(i).vl_tot_creditos_difal, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_e310(i).vl_out_cred_difal, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_e310(i).vl_sld_dev_ant_difal, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_e310(i).vl_deducoes_difal, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_e310(i).vl_recol, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_e310(i).vl_sld_cred_transportar, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_e310(i).deb_esp_difal, '9999999999990D99') || '|';
               --
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_e310(i).vl_sld_cred_ant_fcp, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_e310(i).vl_tot_deb_fcp, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_e310(i).vl_out_deb_fcp, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_e310(i).vl_tot_cred_fcp, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_e310(i).vl_out_cred_fcp, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_e310(i).vl_sld_dev_ant_fcp, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_e310(i).vl_deducoes_fcp, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_e310(i).vl_recol_fcp, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_e310(i).vl_sld_cred_transportar_fcp, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_e310(i).deb_esp_fcp, '9999999999990D99') || '|';
               --
            else
               --
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_e310(i).vl_sld_cred_ant_difal, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_e310(i).vl_tot_debitos_difal, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_e310(i).vl_out_deb_difal, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_e310(i).vl_tot_deb_fcp, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_e310(i).vl_tot_creditos_difal, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_e310(i).vl_tot_cred_fcp, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_e310(i).vl_out_cred_difal, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_e310(i).vl_sld_dev_ant_difal, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_e310(i).vl_deducoes_difal, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_e310(i).vl_recol, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_e310(i).vl_sld_cred_transportar, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_e310(i).deb_esp_difal, '9999999999990D99') || '|';
               --
            end if;
            --
            vn_fase := 9;
            --
            pkb_armaz_estr_arq_efd ( ev_reg_blc   => 'E310'
                                   , el_conteudo  => gl_conteudo );
            --
         --end if;
         --
         vn_fase := 10;
         -- REGISTRO REGISTRO E311: AJUSTE/BENEFÍCIO/INCENTIVO DA APURAÇÃO DO ICMS DIFERENCIAL DE ALÍQUOTA UF ORIGEM/DESTINO EC 87/15
         begin
            vn_qtde_reg_e311 := vt_bi_tab_reg_e311(i).count;
         exception
            when others then
               vn_qtde_reg_e311 := 0;
         end;
         --
         vn_fase := 11;
         --
         if nvl(vn_qtde_reg_e311,0) > 0 then
            --
            vn_fase := 11.1;
            --
            j := vt_bi_tab_reg_e311(i).first;
            --
            vn_fase := 11.2;
            --
            loop
               --
               vn_fase := 11.3;
               --
               if nvl(j,0) = 0 then
                  exit;
               end if;
               --
               vn_fase := 11.4;
               -- cria a estrutura do registro separado por PIPE "|"
               gl_conteudo := '|';
               --
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_e311(i)(j).reg || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_e311(i)(j).cod_aj_apur || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_e311(i)(j).descr_compl_aj || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_e311(i)(j).vl_aj_apur, '9999999999990D99') || '|';
               --
               vn_fase := 11.5;
               --
               pkb_armaz_estr_arq_efd ( ev_reg_blc   => 'E311'
                                      , el_conteudo  => gl_conteudo );
               --
               vn_fase := 11.6;
               -- REGISTRO E312: INFORMAÇÕES ADICIONAIS DOS AJUSTES DA APURAÇÃO DO ICMS DIFERENCIAL DE ALÍQUOTA UF ORIGEM/DESTINO EC 87/15
               begin
                  vn_qtde_reg_e312 := vt_tri_tab_reg_e312(i)(j).count;
               exception
                  when others then
                     vn_qtde_reg_e312 := 0;
               end;
               --
               vn_fase := 11.7;
               --
               if nvl(vn_qtde_reg_e312,0) > 0 then
                  --
                  vn_fase := 11.8;
                  --
                  k := vt_tri_tab_reg_e312(i)(j).first;
                  --
                  vn_fase := 11.9;
                  --
                  loop
                     --
                     vn_fase := 11.10;
                     --
                     if nvl(k,0) = 0 then
                        exit;
                     end if;
                     --
                     vn_fase := 11.11;
                     -- cria a estrutura do registro separado por PIPE "|"
                     gl_conteudo := '|';
                     --
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_e312(i)(j)(k).reg || '|';
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_e312(i)(j)(k).num_da || '|';
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_e312(i)(j)(k).num_proc || '|';
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_e312(i)(j)(k).ind_proc || '|';
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_e312(i)(j)(k).proc || '|';
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_e312(i)(j)(k).txt_compl || '|';
                     --
                     vn_fase := 11.12;
                     --
                     pkb_armaz_estr_arq_efd ( ev_reg_blc   => 'E312'
                                            , el_conteudo  => gl_conteudo );
                     --
                     vn_fase := 11.13;
                     --
                     if k = vt_tri_tab_reg_e312(i)(j).last then
                        exit;
                     else
                        k := vt_tri_tab_reg_e312(i)(j).next(k);
                     end if;
                     --
                  end loop; -- fim E312
                  --
               end if;
               --
               vn_fase := 12;
               -- REGISTRO E313: INFORMAÇÕES ADICIONAIS DOS AJUSTES DA APURAÇÃO DO ICMS DIFERENCIAL DE ALÍQUOTA UF ORIGEM/DESTINO EC 87/15 IDENTIFICAÇÃO DOS DOCUMENTOS FISCAIS
               begin
                  vn_qtde_reg_e313 := vt_tri_tab_reg_e313(i)(j).count;
               exception
                  when others then
                     vn_qtde_reg_e313 := 0;
               end;
               --
               vn_fase := 13;
               --
               if nvl(vn_qtde_reg_e313,0) > 0 then
                  --
                  vn_fase := 13.1;
                  --
                  k := vt_tri_tab_reg_e313(i)(j).first;
                  --
                  vn_fase := 13.2;
                  --
                  loop
                     --
                     vn_fase := 13.3;
                     --
                     if nvl(k,0) = 0 then
                        exit;
                     end if;
                     --
                     vn_fase := 13.4;
                     -- cria a estrutura do registro separado por PIPE "|"
                     gl_conteudo := '|';
                     --
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_e313(i)(j)(k).reg || '|';
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_e313(i)(j)(k).cod_part || '|';
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_e313(i)(j)(k).cod_mod || '|';
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_e313(i)(j)(k).ser || '|';
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_e313(i)(j)(k).sub || '|';
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_e313(i)(j)(k).num_doc || '|';
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_e313(i)(j)(k).chv_doce || '|';
                     gl_conteudo := gl_conteudo || to_char(vt_tri_tab_reg_e313(i)(j)(k).dt_doc, 'ddmmrrrr') || '|';
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_e313(i)(j)(k).cod_item || '|';
                     gl_conteudo := gl_conteudo || fkg_formata_num(vt_tri_tab_reg_e313(i)(j)(k).vl_aj_item, '9999999999990D99') || '|';
                     --
                     vn_fase := 13.5;
                     --
                     pkb_armaz_estr_arq_efd ( ev_reg_blc   => 'E313'
                                            , el_conteudo  => gl_conteudo );
                     --
                     vn_fase := 13.6;
                     --
                     if k = vt_tri_tab_reg_e313(i)(j).last then
                        exit;
                     else
                        k := vt_tri_tab_reg_e313(i)(j).next(k);
                     end if;
                     --
                  end loop; -- fim E313
                  --
               end if;
               --
               vn_fase := 14;
               --
               if j = vt_bi_tab_reg_e311(i).last then
                  exit;
               else
                  j := vt_bi_tab_reg_e311(i).next(j);
               end if;
               --
            end loop; -- fim E311
            --
         end if;
         --
         vn_fase := 15;
         -- REGISTRO E316: OBRIGAÇÕES DO ICMS RECOLHIDO OU A RECOLHER - DIFERENCIAL DE ALÍQUOTA UF ORIGEM/DESTINO EC 87/15
         begin
            vn_qtde_reg_e316 := vt_bi_tab_reg_e316(i).count;
         exception
            when others then
               vn_qtde_reg_e316 := 0;
         end;
         --
         vn_fase := 16;
         --
         if nvl(vn_qtde_reg_e316,0) > 0 then
            --
            vn_fase := 16.1;
            --
            j := vt_bi_tab_reg_e316(i).first;
            --
            vn_fase := 16.2;
            --
            loop
               --
               vn_fase := 16.3;
               --
               if nvl(j,0) = 0 then
                  exit;
               end if;
               --
               vn_fase := 16.4;
               -- cria a estrutura do registro separado por PIPE "|"
               gl_conteudo := '|';
               --
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_e316(i)(j).reg || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_e316(i)(j).cod_or || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_e316(i)(j).vl_or, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || to_char(vt_bi_tab_reg_e316(i)(j).dt_vcto, 'ddmmrrrr') || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_e316(i)(j).cod_rec || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_e316(i)(j).num_proc || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_e316(i)(j).ind_proc || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_e316(i)(j).proc || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_e316(i)(j).txt_compl || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_e316(i)(j).mes_ref || '|';
               --
               vn_fase := 16.5;
               --
               pkb_armaz_estr_arq_efd ( ev_reg_blc   => 'E316'
                                      , el_conteudo  => gl_conteudo );
               --
               if j = vt_bi_tab_reg_e316(i).last then
                  exit;
               else
                  j := vt_bi_tab_reg_e316(i).next(j);
               end if;
               --
            end loop; -- fim E316
            --
         end if;
         --
         vn_fase := 17;
         --
         if i = vt_tab_reg_e300.last then
            exit;
         else
            i := vt_tab_reg_e300.next(i);
         end if;
         --
      end loop;
      --
   end if;
   --
exception
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_armaz_reg_e300 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end pkb_armaz_reg_e300;

-------------------------------------------------------------------------------------------------------

-- Armazena em arquivo o REGISTRO E200: PERÍODO DA APURAÇÃO DO ICMS - SUBSTITUIÇÃO TRIBUTÁRIA
procedure pkb_armaz_reg_e200
is
   --
   vn_fase          number := 0;
   i                pls_integer;
   j                pls_integer;
   k                pls_integer;
   vn_qtde_reg_e220 number;
   vn_qtde_reg_e230 number;
   vn_qtde_reg_e240 number;
   vn_qtde_reg_e250 number;
   --
begin
   --
   vn_fase := 1;
   --
   if nvl(vt_tab_reg_e200.count,0) > 0 then
      --
      vn_fase := 2;
      --
      i := nvl(vt_tab_reg_e200.first,0);
      --
      vn_fase := 3;
      --
      loop
         --
         vn_fase := 4;
         --
         if nvl(i,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 5;
         -- cria a estrutura do registro separado por PIPE "|"
         gl_conteudo := '|';
         --
         gl_conteudo := gl_conteudo || vt_tab_reg_e200(i).reg || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_e200(i).uf || '|';
         gl_conteudo := gl_conteudo || to_char(vt_tab_reg_e200(i).dt_ini, 'ddmmrrrr') || '|';
         gl_conteudo := gl_conteudo || to_char(vt_tab_reg_e200(i).dt_fin, 'ddmmrrrr') || '|';
         --
         vn_fase := 6;
         --
         pkb_armaz_estr_arq_efd ( ev_reg_blc   => 'E200'
                                , el_conteudo  => gl_conteudo );
         --
         vn_fase := 7;
         --
         /*
         if nvl(vt_tab_reg_e210(i).vl_sld_cred_ant_st,0) <> 0 or
            nvl(vt_tab_reg_e210(i).vl_devol_st,0) <> 0 or
            nvl(vt_tab_reg_e210(i).vl_ressarc_st,0) <> 0 or
            nvl(vt_tab_reg_e210(i).vl_out_cred_st,0) <> 0 or
            nvl(vt_tab_reg_e210(i).vl_aj_creditos_st,0) <> 0 or
            nvl(vt_tab_reg_e210(i).vl_retencao_st,0) <> 0 or
            nvl(vt_tab_reg_e210(i).vl_out_deb_st,0) <> 0 or
            nvl(vt_tab_reg_e210(i).vl_aj_debitos_st,0) <> 0 or
            nvl(vt_tab_reg_e210(i).vl_sld_dev_ant_st,0) <> 0 or
            nvl(vt_tab_reg_e210(i).vl_deducoes_st,0) <> 0 or
            nvl(vt_tab_reg_e210(i).vl_icms_recol_st,0) <> 0 or
            nvl(vt_tab_reg_e210(i).vl_sld_cred_st_transportar,0) <> 0 or
            nvl(vt_tab_reg_e210(i).deb_esp_st,0) <> 0
            then -- Só exportar o arquivo se houver movimento
            */
            --
            vn_fase := 8;
            -- REGISTRO E210: APURAÇÃO DO ICMS - SUBSTITUIÇÃO TRIBUTÁRIA
            -- cria a estrutura do registro separado por PIPE "|"
            gl_conteudo := '|';
            --
            gl_conteudo := gl_conteudo || vt_tab_reg_e210(i).reg || '|';
            gl_conteudo := gl_conteudo || vt_tab_reg_e210(i).ind_mov_st || '|';
            gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_e210(i).vl_sld_cred_ant_st, '9999999999990D99') || '|';
            gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_e210(i).vl_devol_st, '9999999999990D99') || '|';
            gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_e210(i).vl_ressarc_st, '9999999999990D99') || '|';
            gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_e210(i).vl_out_cred_st, '9999999999990D99') || '|';
            gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_e210(i).vl_aj_creditos_st, '9999999999990D99') || '|';
            gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_e210(i).vl_retencao_st, '9999999999990D99') || '|';
            gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_e210(i).vl_out_deb_st, '9999999999990D99') || '|';
            gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_e210(i).vl_aj_debitos_st, '9999999999990D99') || '|';
            gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_e210(i).vl_sld_dev_ant_st, '9999999999990D99') || '|';
            gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_e210(i).vl_deducoes_st, '9999999999990D99') || '|';
            gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_e210(i).vl_icms_recol_st, '9999999999990D99') || '|';
            gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_e210(i).vl_sld_cred_st_transportar, '9999999999990D99') || '|';
            gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_e210(i).deb_esp_st, '9999999999990D99') || '|';
            --
            vn_fase := 9;
            --
            pkb_armaz_estr_arq_efd ( ev_reg_blc   => 'E210'
                                   , el_conteudo  => gl_conteudo );
            --
         --end if;
         --
         vn_fase := 10;
         -- REGISTRO E220: AJUSTE/BENEFÍCIO/INCENTIVO DA APURAÇÃO DO ICMS SUBSTITUIÇÃO TRIBUTÁRIA
         begin
            vn_qtde_reg_e220 := vt_bi_tab_reg_e220(i).count;
         exception
            when others then
               vn_qtde_reg_e220 := 0;
         end;
         --
         vn_fase := 11;
         --
         if nvl(vn_qtde_reg_e220,0) > 0 then
            --
            vn_fase := 11.1;
            --
            j := vt_bi_tab_reg_e220(i).first;
            --
            vn_fase := 11.2;
            --
            loop
               --
               vn_fase := 11.3;
               --
               if nvl(j,0) = 0 then
                  exit;
               end if;
               --
               vn_fase := 11.4;
               -- cria a estrutura do registro separado por PIPE "|"
               gl_conteudo := '|';
               --
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_e220(i)(j).reg || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_e220(i)(j).cod_aj_apur || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_e220(i)(j).descr_compl_aj || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_e220(i)(j).vl_aj_apur, '9999999999990D99') || '|';
               --
               vn_fase := 11.5;
               --
               pkb_armaz_estr_arq_efd ( ev_reg_blc   => 'E220'
                                      , el_conteudo  => gl_conteudo );
               --
               vn_fase := 11.6;
               -- REGISTRO E230: INFORMAÇÕES ADICIONAIS DOS AJUSTES DA APURAÇÃO DO ICMS SUBSTITUIÇÃO TRIBUTÁRIA
               begin
                  vn_qtde_reg_e230 := vt_tri_tab_reg_e230(i)(j).count;
               exception
                  when others then
                     vn_qtde_reg_e230 := 0;
               end;
               --
               vn_fase := 11.7;
               --
               if nvl(vn_qtde_reg_e230,0) > 0 then
                  --
                  vn_fase := 11.8;
                  --
                  k := vt_tri_tab_reg_e230(i)(j).first;
                  --
                  vn_fase := 11.9;
                  --
                  loop
                     --
                     vn_fase := 11.10;
                     --
                     if nvl(k,0) = 0 then
                        exit;
                     end if;
                     --
                     vn_fase := 11.11;
                     -- cria a estrutura do registro separado por PIPE "|"
                     gl_conteudo := '|';
                     --
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_e230(i)(j)(k).reg || '|';
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_e230(i)(j)(k).num_da || '|';
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_e230(i)(j)(k).num_proc || '|';
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_e230(i)(j)(k).ind_proc || '|';
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_e230(i)(j)(k).proc || '|';
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_e230(i)(j)(k).txt_compl || '|';
                     --
                     vn_fase := 11.12;
                     --
                     pkb_armaz_estr_arq_efd ( ev_reg_blc   => 'E230'
                                            , el_conteudo  => gl_conteudo );
                     --
                     vn_fase := 11.13;
                     --
                     if k = vt_tri_tab_reg_e230(i)(j).last then
                        exit;
                     else
                        k := vt_tri_tab_reg_e230(i)(j).next(k);
                     end if;
                     --
                  end loop; -- fim E230
                  --
               end if;
               --
               vn_fase := 12;
               -- REGISTRO E240: INFORMAÇÕES ADICIONAIS DOS AJUSTES DA APURAÇÃO DO ICMS SUBSTITUIÇÃO TRIBUTÁRIA - IDENTIFICAÇÃO DOS DOCUMENTOS FISCAIS
               begin
                  vn_qtde_reg_e240 := vt_tri_tab_reg_e240(i)(j).count;
               exception
                  when others then
                     vn_qtde_reg_e240 := 0;
               end;
               --
               vn_fase := 13;
               --
               if nvl(vn_qtde_reg_e240,0) > 0 then
                  --
                  vn_fase := 13.1;
                  --
                  k := vt_tri_tab_reg_e240(i)(j).first;
                  --
                  vn_fase := 13.2;
                  --
                  loop
                     --
                     vn_fase := 13.3;
                     --
                     if nvl(k,0) = 0 then
                        exit;
                     end if;
                     --
                     vn_fase := 13.4;
                     -- cria a estrutura do registro separado por PIPE "|"
                     gl_conteudo := '|';
                     --
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_e240(i)(j)(k).reg || '|';
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_e240(i)(j)(k).cod_part || '|';
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_e240(i)(j)(k).cod_mod || '|';
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_e240(i)(j)(k).ser || '|';
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_e240(i)(j)(k).sub || '|';
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_e240(i)(j)(k).num_doc || '|';
                     gl_conteudo := gl_conteudo || to_char(vt_tri_tab_reg_e240(i)(j)(k).dt_doc, 'ddmmrrrr') || '|';
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_e240(i)(j)(k).cod_item || '|';
                     gl_conteudo := gl_conteudo || fkg_formata_num(vt_tri_tab_reg_e240(i)(j)(k).vl_aj_item, '9999999999990D99') || '|';
                     --
                     if gt_row_abertura_efd.dt_ini >= to_date('01/01/2017', 'dd/mm/rrrr') then
                        --
                        gl_conteudo := gl_conteudo || vt_tri_tab_reg_e240(i)(j)(k).chv_doce || '|';
                        --
                     end if;
                     --
                     vn_fase := 13.5;
                     --
                     pkb_armaz_estr_arq_efd ( ev_reg_blc   => 'E240'
                                            , el_conteudo  => gl_conteudo );
                     --
                     vn_fase := 13.6;
                     --
                     if k = vt_tri_tab_reg_e240(i)(j).last then
                        exit;
                     else
                        k := vt_tri_tab_reg_e240(i)(j).next(k);
                     end if;
                     --
                  end loop; -- fim E240
                  --
               end if;
               --
               vn_fase := 14;
               --
               if j = vt_bi_tab_reg_e220(i).last then
                  exit;
               else
                  j := vt_bi_tab_reg_e220(i).next(j);
               end if;
               --
            end loop; -- fim E220
            --
         end if;
         --
         vn_fase := 15;
         -- REGISTRO E250: OBRIGAÇÕES DO ICMS A RECOLHER - SUBSTITUIÇÃO TRIBUTÁRIA
         begin
            vn_qtde_reg_e250 := vt_bi_tab_reg_e250(i).count;
         exception
            when others then
               vn_qtde_reg_e250 := 0;
         end;
         --
         vn_fase := 16;
         --
         if nvl(vn_qtde_reg_e250,0) > 0 then
            --
            vn_fase := 16.1;
            --
            j := vt_bi_tab_reg_e250(i).first;
            --
            vn_fase := 16.2;
            --
            loop
               --
               vn_fase := 16.3;
               --
               if nvl(j,0) = 0 then
                  exit;
               end if;
               --
               vn_fase := 16.4;
               -- cria a estrutura do registro separado por PIPE "|"
               gl_conteudo := '|';
               --
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_e250(i)(j).reg || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_e250(i)(j).cod_or || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_e250(i)(j).vl_or, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || to_char(vt_bi_tab_reg_e250(i)(j).dt_vcto, 'ddmmrrrr') || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_e250(i)(j).cod_rec || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_e250(i)(j).num_proc || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_e250(i)(j).ind_proc || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_e250(i)(j).proc || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_e250(i)(j).txt_compl || '|';
               --
               if gn_versao >= 103 then -- versão válida a partir de janeiro/2011
                  gl_conteudo := gl_conteudo || vt_bi_tab_reg_e250(i)(j).mes_ref || '|';
               end if;
               --
               vn_fase := 16.5;
               --
               pkb_armaz_estr_arq_efd ( ev_reg_blc   => 'E250'
                                      , el_conteudo  => gl_conteudo );
               --
               if j = vt_bi_tab_reg_e250(i).last then
                  exit;
               else
                  j := vt_bi_tab_reg_e250(i).next(j);
               end if;
               --
            end loop; -- fim E250
            --
         end if;
         --
         vn_fase := 17;
         --
         if i = vt_tab_reg_e200.last then
            exit;
         else
            i := vt_tab_reg_e200.next(i);
         end if;
         --
      end loop;
      --
   end if;
   --
exception
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_armaz_reg_e200 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end pkb_armaz_reg_e200;

-------------------------------------------------------------------------------------------------------

-- Armazena em arquivo o REGISTRO E100: PERÍODO DA APURAÇÃO DO ICMS
procedure pkb_armaz_reg_e100
is
   --
   vn_fase          number := 0;
   i                pls_integer;
   j                pls_integer;
   k                pls_integer;
   vn_qtde_reg_e111 number;
   vn_qtde_reg_e112 number;
   vn_qtde_reg_e113 number;
   vn_qtde_reg_e115 number;
   vn_qtde_reg_e116 number;
   --
begin
   --
   vn_fase := 1;
   --
   if nvl(vt_tab_reg_e100.count,0) > 0 then
      --
      vn_fase := 2;
      --
      i := nvl(vt_tab_reg_e100.first,0);
      --
      vn_fase := 3;
      --
      loop
         --
         vn_fase := 4;
         --
         if nvl(i,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 5;
         -- cria a estrutura do registro separado por PIPE "|"
         gl_conteudo := '|';
         --
         gl_conteudo := gl_conteudo || vt_tab_reg_e100(i).reg || '|';
         gl_conteudo := gl_conteudo || to_char(vt_tab_reg_e100(i).dt_ini, 'ddmmrrrr') || '|';
         gl_conteudo := gl_conteudo || to_char(vt_tab_reg_e100(i).dt_fin, 'ddmmrrrr') || '|';
         --
         vn_fase := 6;
         --
         pkb_armaz_estr_arq_efd ( ev_reg_blc   => 'E100'
                                , el_conteudo  => gl_conteudo );
         --
         vn_fase := 7;
         -- REGISTRO E110: APURAÇÃO DO ICMS - OPERAÇÕES PRÓPRIAS
         gl_conteudo := '|';
         --
         gl_conteudo := gl_conteudo || vt_tab_reg_e110(i).reg || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_e110(i).vl_tot_debitos, '9999999999990D99') || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_e110(i).vl_aj_debitos, '9999999999990D99') || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_e110(i).vl_tot_aj_debitos, '9999999999990D99') || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_e110(i).vl_estornos_cred, '9999999999990D99') || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_e110(i).vl_tot_creditos, '9999999999990D99') || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_e110(i).vl_aj_creditos, '9999999999990D99') || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_e110(i).vl_tot_aj_creditos, '9999999999990D99') || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_e110(i).vl_estornos_deb, '9999999999990D99') || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_e110(i).vl_sld_credor_ant, '9999999999990D99') || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_e110(i).vl_sld_apurado, '9999999999990D99') || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_e110(i).vl_tot_ded, '9999999999990D99') || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_e110(i).vl_icms_recolher, '9999999999990D99') || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_e110(i).vl_sld_credor_transportar, '9999999999990D99') || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_e110(i).deb_esp, '9999999999990D99') || '|';
         --
         vn_fase := 8;
         --
         pkb_armaz_estr_arq_efd ( ev_reg_blc   => 'E110'
                                , el_conteudo  => gl_conteudo );
         --
         vn_fase := 9;
         --REGISTRO E111: AJUSTE/BENEFÍCIO/INCENTIVO DA APURAÇÃO DO ICMS.
         begin
            vn_qtde_reg_e111 := vt_bi_tab_reg_e111(i).count;
         exception
            when others then
               vn_qtde_reg_e111 := 0;
         end;
         --
         vn_fase := 9.1;
         --
         if nvl(vn_qtde_reg_e111,0) > 0 then
            --
            vn_fase := 9.2;
            --
            j := vt_bi_tab_reg_e111(i).first;
            --
            vn_fase := 9.3;
            --
            loop
               --
               vn_fase := 9.4;
               --
               if nvl(j,0) = 0 then
                  exit;
               end if;
               --
               vn_fase := 9.5;
               -- cria a estrutura do registro separado por PIPE "|"
               gl_conteudo := '|';
               --
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_e111(i)(j).reg || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_e111(i)(j).cod_aj_apur || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_e111(i)(j).descr_compl_aj || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_e111(i)(j).vl_aj_apur, '9999999999990D99') || '|';
               --
               vn_fase := 9.6;
               --
               pkb_armaz_estr_arq_efd ( ev_reg_blc   => 'E111'
                                      , el_conteudo  => gl_conteudo );
               --
               vn_fase := 10;
               -- REGISTRO E112: INFORMAÇÕES ADICIONAIS DOS AJUSTES DA APURAÇÃO DO ICMS
               begin
                  vn_qtde_reg_e112 := vt_tri_tab_reg_e112(i)(j).count;
               exception
                  when others then
                     vn_qtde_reg_e112 := 0;
               end;
               --
               vn_fase := 10.1;
               --
               if nvl(vn_qtde_reg_e112,0) > 0 then
                  --
                  vn_fase := 10.2;
                  --
                  k := nvl(vt_tri_tab_reg_e112(i)(j).first,0);
                  --
                  vn_fase := 10.3;
                  --
                  loop
                     --
                     vn_fase := 10.4;
                     --
                     if nvl(k,0) = 0 then
                        exit;
                     end if;
                     --
                     vn_fase := 10.5;
                     --
                     gl_conteudo := '|';
                     --
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_e112(i)(j)(i).reg || '|';
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_e112(i)(j)(i).num_da || '|';
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_e112(i)(j)(i).num_proc || '|';
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_e112(i)(j)(i).ind_proc || '|';
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_e112(i)(j)(i).proc || '|';
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_e112(i)(j)(i).txt_compl || '|';
                     --
                     vn_fase := 10.6;
                     --
                     pkb_armaz_estr_arq_efd ( ev_reg_blc   => 'E112'
                                            , el_conteudo  => gl_conteudo );
                     --
                     vn_fase := 10.7;
                     --
                     if k = vt_tri_tab_reg_e112(i)(j).last then
                        exit;
                     else
                        k := vt_tri_tab_reg_e112(i)(j).next(k);
                     end if;
                     --
                  end loop; -- fim E112
                  --
               end if;
               --
               vn_fase := 11;
               -- REGISTRO E113: INFORMAÇÕES ADICIONAIS DOS AJUSTES DA APURAÇÃO DO ICMS - IDENTIFICAÇÃO DOS DOCUMENTOS FISCAIS
               begin
                  vn_qtde_reg_e113 := vt_tri_tab_reg_e113(i)(j).count;
               exception
                  when others then
                     vn_qtde_reg_e113 := 0;
               end;
               --
               vn_fase := 11.1;
               --
               if nvl(vn_qtde_reg_e113,0) > 0 then
                  --
                  vn_fase := 11.2;
                  --
                  k := nvl(vt_tri_tab_reg_e113(i)(j).first,0);
                  --
                  vn_fase := 11.3;
                  --
                  loop
                     --
                     vn_fase := 11.4;
                     --
                     if nvl(k,0) = 0 then
                        exit;
                     end if;
                     --
                     vn_fase := 11.5;
                     --
                     gl_conteudo := '|';
                     --
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_e113(i)(j)(k).reg || '|';
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_e113(i)(j)(k).cod_part || '|';
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_e113(i)(j)(k).cod_mod || '|';
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_e113(i)(j)(k).ser || '|';
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_e113(i)(j)(k).sub || '|';
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_e113(i)(j)(k).num_doc || '|';
                     gl_conteudo := gl_conteudo || to_char(vt_tri_tab_reg_e113(i)(j)(k).dt_doc, 'ddmmrrrr') || '|';
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_e113(i)(j)(k).cod_item || '|';
                     gl_conteudo := gl_conteudo || fkg_formata_num(vt_tri_tab_reg_e113(i)(j)(k).vl_aj_item, '9999999999990D99') || '|';
                     --
                     if gt_row_abertura_efd.dt_ini >= to_date('01/01/2017', 'dd/mm/rrrr') then
                        --
                        gl_conteudo := gl_conteudo || vt_tri_tab_reg_e113(i)(j)(k).chv_doce || '|';
                        --
                     end if;
                     --
                     vn_fase := 11.6;
                     --
                     pkb_armaz_estr_arq_efd ( ev_reg_blc   => 'E113'
                                            , el_conteudo  => gl_conteudo );
                     --
                     vn_fase := 11.7;
                     --
                     if k = vt_tri_tab_reg_e113(i)(j).last then
                        exit;
                     else
                        k := vt_tri_tab_reg_e113(i)(j).next(k);
                     end if;
                     --
                  end loop; -- fim E113
                  --
               end if;
               --
               vn_fase := 12;
               --
               if j = vt_bi_tab_reg_e111(i).last then
                  exit;
               else
                  j := vt_bi_tab_reg_e111(i).next(j);
               end if;
               --
            end loop; -- fim E111
            --
         end if;
         --
         vn_fase := 13;
         -- REGISTRO E115: INFORMAÇÕES ADICIONAIS DA APURAÇÃO - VALORES DECLARATÓRIOS
         begin
            vn_qtde_reg_e115 := vt_bi_tab_reg_e115(i).count;
         exception
            when others then
               vn_qtde_reg_e115 := 0;
         end;
         --
         vn_fase := 13.1;
         --
         if nvl(vn_qtde_reg_e115,0) > 0 then
            --
            vn_fase := 13.2;
            --
            j := vt_bi_tab_reg_e115(i).first;
            --
            vn_fase := 13.3;
            --
            loop
               --
               vn_fase := 13.4;
               --
               if nvl(j,0) = 0 then
                  exit;
               end if;
               --
               vn_fase := 13.5;
               -- cria a estrutura do registro separado por PIPE "|"
               gl_conteudo := '|';
               --
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_e115(i)(j).reg || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_e115(i)(j).cod_inf_adic || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_e115(i)(j).vl_inf_adic, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_e115(i)(j).descr_compl_aj || '|';
               --
               vn_fase := 13.6;
               --
               pkb_armaz_estr_arq_efd ( ev_reg_blc   => 'E115'
                                      , el_conteudo  => gl_conteudo );
               --
               vn_fase := 13.7;
               --
               if j = vt_bi_tab_reg_e115(i).last then
                  exit;
               else
                  j := vt_bi_tab_reg_e115(i).next(j);
               end if;
               --
            end loop; -- fim E115
            --
         end if;
         --
         vn_fase := 14;
         -- REGISTRO E116: OBRIGAÇÕES DO ICMS A RECOLHER - OPERAÇÕES PRÓPRIAS
         begin
            vn_qtde_reg_e116 := vt_bi_tab_reg_e116(i).count;
         exception
            when others then
               vn_qtde_reg_e116 := 0;
         end;
         --
         vn_fase := 14.1;
         --
         if nvl(vn_qtde_reg_e116,0) > 0 then
            --
            vn_fase := 14.2;
            --
            j := vt_bi_tab_reg_e116(i).first;
            --
            vn_fase := 14.3;
            --
            loop
               --
               vn_fase := 14.4;
               --
               if nvl(j,0) = 0 then
                  exit;
               end if;
               --
               vn_fase := 14.5;
               -- cria a estrutura do registro separado por PIPE "|"
               gl_conteudo := '|';
               --
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_e116(i)(j).reg || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_e116(i)(j).cod_or || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_e116(i)(j).vl_or, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || to_char(vt_bi_tab_reg_e116(i)(j).dt_vcto, 'ddmmrrrr') || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_e116(i)(j).cod_rec || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_e116(i)(j).num_proc || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_e116(i)(j).ind_proc || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_e116(i)(j).proc || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_e116(i)(j).txt_compl || '|';
               --
               if gn_versao >= 103 then -- versão válida a partir de janeiro/2011
                  gl_conteudo := gl_conteudo || vt_bi_tab_reg_e116(i)(j).mes_ref || '|';
               end if;
               --
               vn_fase := 14.6;
               --
               pkb_armaz_estr_arq_efd ( ev_reg_blc   => 'E116'
                                      , el_conteudo  => gl_conteudo );
               --
               vn_fase := 14.7;
               --
               if j = vt_bi_tab_reg_e116(i).last then
                  exit;
               else
                  j := vt_bi_tab_reg_e116(i).next(j);
               end if;
               --
            end loop; -- fim E116
            --
         end if;
         --
         vn_fase := 15;
         --
         if i = vt_tab_reg_e100.last then
            exit;
         else
            i := vt_tab_reg_e100.next(i);
         end if;
         --
      end loop; -- fim E100
      --
   end if;
   --
exception
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_armaz_reg_e100 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end pkb_armaz_reg_e100;

-------------------------------------------------------------------------------------------------------

-- Armazena em arquivo o REGISTRO E001: ABERTURA DO BLOCO E
procedure pkb_armaz_reg_e001
is
   --
   vn_fase  number := 0;
   i        pls_integer;
   --
begin
   --
   vn_fase := 1;
   --
   if nvl(vt_tab_reg_e001.count,0) > 0 then
      --
      vn_fase := 2;
      --
      i := nvl(vt_tab_reg_e001.first,0);
      --
      vn_fase := 3;
      --
      loop
         --
         vn_fase := 4;
         --
         if nvl(i,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 5;
         -- cria a estrutura do registro separado por PIPE "|"
         gl_conteudo := '|';
         --
         gl_conteudo := gl_conteudo || vt_tab_reg_e001(i).reg || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_e001(i).ind_mov || '|';
         --
         vn_fase := 6;
         --
         pkb_armaz_estr_arq_efd ( ev_reg_blc   => 'E001'
                                , el_conteudo  => gl_conteudo );
         --
         vn_fase := 7;
         --
         if i = vt_tab_reg_e001.last then
            exit;
         else
            i := vt_tab_reg_e001.next(i);
         end if;
         --
      end loop;
      --
   end if;
   --
exception
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_armaz_reg_e001 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end pkb_armaz_reg_e001;

-------------------------------------------------------------------------------------------------------

-- Armazena em arquivo dados do BLOCO E: APURAÇÃO DO ICMS E DO IPI
procedure pkb_armaz_arq_bloco_e
is
   --
   vn_fase  number := 0;
   --
begin
   --
   vn_fase := 1;
   -- Armazena em arquivo o REGISTRO E001: ABERTURA DO BLOCO E
   pkb_armaz_reg_e001;
   --
   vn_fase := 2;
   -- Armazena em arquivo o REGISTRO E100: PERÍODO DA APURAÇÃO DO ICMS
   pkb_armaz_reg_e100;
   --
   vn_fase := 3;
   -- Armazena em arquivo o REGISTRO E200: PERÍODO DA APURAÇÃO DO ICMS - SUBSTITUIÇÃO TRIBUTÁRIA
   pkb_armaz_reg_e200;
   --
   vn_fase := 4;
   -- Armazena em arquivo o REGISTRO E300: PERÍODO DE APURAÇÃO DO ICMS DIFERENCIAL DE ALÍQUOTA - UF ORIGEM/DESTINO EC 87/15
   pkb_armaz_reg_e300;
   --
   vn_fase := 5;
   -- Armazena em arquivo o REGISTRO E500: PERÍODO DE APURAÇÃO DO IPI
   pkb_armaz_reg_e500;
   --
   vn_fase := 6;
   -- Armazena em arquivo o REGISTRO E990: ENCERRAMENTO DO BLOCO E
   pkb_armaz_reg_e990;
   --
exception
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_armaz_arq_bloco_e fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end pkb_armaz_arq_bloco_e;

-------------------------------------------------------------------------------------------------------

-- Armazena em arquivo o REGISTRO D990: ENCERRAMENTO DO BLOCO D
procedure pkb_armaz_reg_d990
is
   --
   vn_fase  number := 0;
   i        pls_integer;
   --
begin
   --
   vn_fase := 1;
   --
   if nvl(vt_tab_reg_d990.count,0) > 0 then
      --
      vn_fase := 2;
      --
      i := nvl(vt_tab_reg_d990.first,0);
      --
      vn_fase := 3;
      --
      loop
         --
         vn_fase := 4;
         --
         if nvl(i,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 5;
         -- cria a estrutura do registro separado por PIPE "|"
         gl_conteudo := '|';
         --
         gl_conteudo := gl_conteudo || vt_tab_reg_d990(i).reg || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_d990(i).qtd_lin_d || '|';
         --
         vn_fase := 6;
         --
         pkb_armaz_estr_arq_efd ( ev_reg_blc   => 'D990'
                                , el_conteudo  => gl_conteudo );
         --
         vn_fase := 7;
         --
         if i = vt_tab_reg_d990.last then
            exit;
         else
            i := vt_tab_reg_d990.next(i);
         end if;
         --
      end loop;
      --
   end if;
   --
exception
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_armaz_reg_d990 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end pkb_armaz_reg_d990;

-------------------------------------------------------------------------------------------------------

-- Armazena em arquivo o REGISTRO D695: CONSOLIDAÇÃO DA PRESTAÇÃO DE SERVIÇOS
procedure pkb_armaz_reg_d695
is
   --
   vn_fase          number := 0;
   i                pls_integer;
   j                pls_integer;
   k                pls_integer;
   vn_qtde_reg_d696 number;
   vn_qtde_reg_d697 number;
   --
begin
   --
   vn_fase := 1;
   --
   if nvl(vt_tab_reg_d695.count,0) > 0 then
      --
      vn_fase := 2;
      --
      i := vt_tab_reg_d695.first;
      --
      vn_fase := 3;
      --
      loop
         --
         vn_fase := 4;
         --
         if nvl(i,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 5;
         -- cria a estrutura do registro separado por PIPE "|"
         gl_conteudo := '|';
         --
         gl_conteudo := gl_conteudo || vt_tab_reg_d695(i).reg || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_d695(i).cod_mod || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_d695(i).ser || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_d695(i).nro_ord_ini || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_d695(i).nro_ord_fin || '|';
         gl_conteudo := gl_conteudo || to_char(vt_tab_reg_d695(i).dt_doc_ini, 'ddmmrrrr') || '|';
         gl_conteudo := gl_conteudo || to_char(vt_tab_reg_d695(i).dt_doc_fin, 'ddmmrrrr') || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_d695(i).nom_mest || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_d695(i).chv_cod_dig || '|';
         --
         vn_fase := 6;
         --
         pkb_armaz_estr_arq_efd ( ev_reg_blc   => 'D695'
                                , el_conteudo  => gl_conteudo );
         --
         vn_fase := 7;
         -- REGISTRO D696: REGISTRO ANALÍTICO DOS DOCUMENTOS
         begin
            vn_qtde_reg_d696 := vt_bi_tab_reg_d696(i).count;
         exception
            when others then
               vn_qtde_reg_d696 := 0;
         end;
         --
         vn_fase := 7.1;
         --
         if nvl(vn_qtde_reg_d696,0) > 0 then
            --
            vn_fase := 7.2;
            --
            j := vt_bi_tab_reg_d696(i).first;
            --
            vn_fase := 7.3;
            --
            loop
               --
               vn_fase := 7.4;
               --
               if nvl(j,0) = 0 then
                  exit;
               end if;
               --
               vn_fase := 7.5;
               -- cria a estrutura do registro separado por PIPE "|"
               gl_conteudo := '|';
               --
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_d696(i)(j).reg || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_d696(i)(j).cst_icms || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_d696(i)(j).cfop || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_d696(i)(j).aliq_icms, '990D99') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_d696(i)(j).vl_opr, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_d696(i)(j).vl_bc_icms, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_d696(i)(j).vl_icms, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_d696(i)(j).vl_bc_icms_st, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_d696(i)(j).vl_icms_st, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_d696(i)(j).vl_red_bc, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_d696(i)(j).cod_obs || '|';
               --
               vn_fase := 7.6;
               --
               pkb_armaz_estr_arq_efd ( ev_reg_blc   => 'D696'
                                      , el_conteudo  => gl_conteudo );
               --
               vn_fase := 8;
               -- REGISTRO D697: REGISTRO DE INFORMAÇÕES DE OUTRAS UFs, RELATIVAMENTE AOS SERVIÇOS -NÃO-MEDIDOS- DE TELEVISÃO POR ASSINATURA VIA SATÉLITE.
               begin
                  vn_qtde_reg_d697 := vt_tri_tab_reg_d697(i)(j).count;
               exception
                  when others then
                     vn_qtde_reg_d697 := 0;
               end;
               --
               vn_fase := 8.1;
               --
               if nvl(vn_qtde_reg_d697,0) > 0 then
                  --
                  vn_fase := 8.2;
                  --
                  k := vt_tri_tab_reg_d697(i)(j).first;
                  --
                  vn_fase := 8.3;
                  --
                  loop
                     --
                     vn_fase := 8.4;
                     --
                     if nvl(k,0) = 0 then
                        exit;
                     end if;
                     --
                     vn_fase := 8.5;
                     -- cria a estrutura do registro separado por PIPE "|"
                     gl_conteudo := '|';
                     --
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_d697(i)(j)(k).reg || '|';
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_d697(i)(j)(k).uf || '|';
                     gl_conteudo := gl_conteudo || fkg_formata_num(vt_tri_tab_reg_d697(i)(j)(k).vl_bc_icms_st, '9999999999990D99') || '|';
                     gl_conteudo := gl_conteudo || fkg_formata_num(vt_tri_tab_reg_d697(i)(j)(k).vl_icms_st, '9999999999990D99') || '|';
                     --
                     vn_fase := 8.6;
                     --
                     pkb_armaz_estr_arq_efd ( ev_reg_blc   => 'D697'
                                            , el_conteudo  => gl_conteudo );
                     --
                     vn_fase := 8.7;
                     --
                     if k = vt_tri_tab_reg_d697(i)(j).last then
                        exit;
                     else
                        k := vt_tri_tab_reg_d697(i)(j).next(k);
                     end if;
                     --
                  end loop;
                  --
               end if;
               --
               vn_fase := 9;
               --
               if j = vt_bi_tab_reg_d696(i).last then
                  exit;
               else
                  j := vt_bi_tab_reg_d696(i).next(j);
               end if;
               --
            end loop;
            --
         end if;
         --
         vn_fase := 10;
         --
         if i = vt_tab_reg_d695.last then
            exit;
         else
            i := vt_tab_reg_d695.next(i);
         end if;
         --
      end loop;
      --
   end if;
   --
exception
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_armaz_reg_d695 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end pkb_armaz_reg_d695;

-------------------------------------------------------------------------------------------------------

-- Armazena em arquivo o REGISTRO D600: CONSOLIDAÇÃO DA PRESTAÇÃO DE SERVIÇOS
procedure pkb_armaz_reg_d600
is
   --
   vn_fase          number := 0;
   i                pls_integer;
   j                pls_integer;
   vn_qtde_reg_d610 number;
   vn_qtde_reg_d690 number;
   --
begin
   --
   vn_fase := 1;
   --
   if nvl(vt_tab_reg_d600.count,0) > 0 then
      --
      vn_fase := 2;
      --
      i := vt_tab_reg_d600.first;
      --
      vn_fase := 3;
      --
      loop
         --
         vn_fase := 4;
         --
         if nvl(i,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 5;
         -- cria a estrutura do registro separado por PIPE "|"
         gl_conteudo := '|';
         --
         gl_conteudo := gl_conteudo || vt_tab_reg_d600(i).reg || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_d600(i).cod_mod || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_d600(i).cod_mun || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_d600(i).ser || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_d600(i).sub || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_d600(i).cod_cons || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_d600(i).qtd_cons || '|';
         gl_conteudo := gl_conteudo || to_char(vt_tab_reg_d600(i).dt_doc, 'ddmmrrrr') || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_d600(i).vl_doc, '9999999999990D99') || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_d600(i).vl_desc, '9999999999990D99') || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_d600(i).vl_serv, '9999999999990D99') || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_d600(i).vl_serv_nt, '9999999999990D99') || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_d600(i).vl_terc, '9999999999990D99') || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_d600(i).vl_da, '9999999999990D99') || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_d600(i).vl_bc_icms, '9999999999990D99') || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_d600(i).vl_icms, '9999999999990D99') || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_d600(i).vl_pis, '9999999999990D99') || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_d600(i).vl_cofins, '9999999999990D99') || '|';
         --
         vn_fase := 6;
         --
         pkb_armaz_estr_arq_efd ( ev_reg_blc   => 'D600'
                                , el_conteudo  => gl_conteudo );
         --
         vn_fase := 7;
         -- REGISTRO D610: ITENS DO DOCUMENTO CONSOLIDADO
         begin
            vn_qtde_reg_d610 := vt_bi_tab_reg_d610(i).count;
         exception
            when others then
               vn_qtde_reg_d610 := 0;
         end;
         --
         vn_fase := 7.1;
         --
         if nvl(vn_qtde_reg_d610,0) > 0 then
            --
            vn_fase := 7.2;
            --
            j := vt_bi_tab_reg_d610(i).first;
            --
            vn_fase := 7.3;
            --
            loop
               --
               vn_fase := 7.4;
               --
               if nvl(j,0) = 0 then
                  exit;
               end if;
               --
               vn_fase := 7.5;
               -- cria a estrutura do registro separado por PIPE "|"
               gl_conteudo := '|';
               --
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_d610(i)(j).reg || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_d610(i)(j).cod_class || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_d610(i)(j).cod_item || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_d610(i)(j).qtd, '9999999999990D999') || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_d610(i)(j).unid || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_d610(i)(j).vl_item, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_d610(i)(j).vl_desc, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_d610(i)(j).cst_icms || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_d610(i)(j).cfop || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_d610(i)(j).aliq_icms, '990D99') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_d610(i)(j).vl_bc_icms, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_d610(i)(j).vl_icms, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_d610(i)(j).vl_bc_icms_st, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_d610(i)(j).vl_icms_st, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_d610(i)(j).vl_red_bc, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_d610(i)(j).vl_pis, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_d610(i)(j).vl_cofins, '9999999999990D99')|| '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_d610(i)(j).cod_cta || '|';
               --
               vn_fase := 7.6;
               --
               pkb_armaz_estr_arq_efd ( ev_reg_blc   => 'D610'
                                      , el_conteudo  => gl_conteudo );
               --
               vn_fase := 7.7;
               --
               if j = vt_bi_tab_reg_d610(i).last then
                  exit;
               else
                  j := vt_bi_tab_reg_d610(i).next(j);
               end if;
               --
            end loop;
            --
         end if;
         --
         vn_fase := 8;
         -- REGISTRO D690: REGISTRO ANALÍTICO DOS DOCUMENTOS
         begin
            vn_qtde_reg_d690 := vt_bi_tab_reg_d690(i).count;
         exception
            when others then
               vn_qtde_reg_d690 := 0;
         end;
         --
         vn_fase := 8.1;
         --
         if nvl(vn_qtde_reg_d690,0) > 0 then
            --
            vn_fase := 8.2;
            --
            j := vt_bi_tab_reg_d690(i).first;
            --
            vn_fase := 8.3;
            --
            loop
               --
               vn_fase := 8.4;
               --
               if nvl(j,0) = 0 then
                  exit;
               end if;
               --
               vn_fase := 8.5;
               -- cria a estrutura do registro separado por PIPE "|"
               gl_conteudo := '|';
               --
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_d690(i)(j).reg || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_d690(i)(j).cst_icms || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_d690(i)(j).cfop || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_d690(i)(j).aliq_icms, '990D99') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_d690(i)(j).vl_opr, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_d690(i)(j).vl_bc_icms, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_d690(i)(j).vl_icms, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_d690(i)(j).vl_bc_icms_st, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_d690(i)(j).vl_icms_st, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_d690(i)(j).vl_red_bc, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_d690(i)(j).cod_obs || '|';
               --
               vn_fase := 8.6;
               --
               pkb_armaz_estr_arq_efd ( ev_reg_blc   => 'D690'
                                      , el_conteudo  => gl_conteudo );
               --
               vn_fase := 8.7;
               --
               if j = vt_bi_tab_reg_d690(i).last then
                  exit;
               else
                  j := vt_bi_tab_reg_d690(i).next(j);
               end if;
               --
            end loop;
            --
         end if;
         --
         vn_fase := 9;
         --
         if i = vt_tab_reg_d600.last then
            exit;
         else
            i := vt_tab_reg_d600.next(i);
         end if;
         --
      end loop;
      --
   end if;
   --
exception
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_armaz_reg_d600 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end pkb_armaz_reg_d600;

-------------------------------------------------------------------------------------------------------

-- Armazena em arquivo o REGISTRO D500: NOTA FISCAL DE SERVIÇO DE COMUNICAÇÃO (CÓDIGO 21) E NOTA FISCAL DE SERVIÇO DE TELECOMUNICAÇÃO (CÓDIGO 22)
procedure pkb_armaz_reg_d500
is
   --
   vn_fase          number := 0;
   i                pls_integer;
   j                pls_integer;
   vn_qtde_reg_d510 number;
   vn_qtde_reg_d530 number;
   vn_qtde_reg_d590 number;
   --
begin
   --
   vn_fase := 1;
   --
   if nvl(vt_tab_reg_d500.count,0) > 0 then
      --
      vn_fase := 2;
      --
      i := nvl(vt_tab_reg_d500.first,0);
      --
      vn_fase := 3;
      --
      loop
         --
         vn_fase := 4;
         --
         if nvl(i,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 5;
         -- cria a estrutura do registro separado por PIPE "|"
         gl_conteudo := '|';
         --
         gl_conteudo := gl_conteudo || vt_tab_reg_d500(i).reg || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_d500(i).ind_oper || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_d500(i).ind_emit || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_d500(i).cod_part || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_d500(i).cod_mod || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_d500(i).cod_sit || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_d500(i).ser || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_d500(i).sub || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_d500(i).num_doc || '|';
         gl_conteudo := gl_conteudo || to_char(vt_tab_reg_d500(i).dt_doc, 'ddmmrrrr') || '|';
         gl_conteudo := gl_conteudo || to_char(vt_tab_reg_d500(i).dt_a_p, 'ddmmrrrr') || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_d500(i).vl_doc, '9999999999990D99') || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_d500(i).vl_desc, '9999999999990D99') || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_d500(i).vl_serv, '9999999999990D99') || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_d500(i).vl_serv_nt, '9999999999990D99') || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_d500(i).vl_terc, '9999999999990D99') || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_d500(i).vl_da, '9999999999990D99') || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_d500(i).vl_bc_icms, '9999999999990D99') || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_d500(i).vl_icms, '9999999999990D99') || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_d500(i).cod_inf || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_d500(i).vl_pis, '9999999999990D99') || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_d500(i).vl_cofins, '9999999999990D99') || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_d500(i).cod_cta || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_d500(i).tp_assinante || '|';
         --
         vn_fase := 6;
         --
         pkb_armaz_estr_arq_efd ( ev_reg_blc   => 'D500'
                                , el_conteudo  => gl_conteudo );
         --
         vn_fase := 7;
         -- REGISTRO D510: ITENS DO DOCUMENTO
         begin
            vn_qtde_reg_d510 := vt_bi_tab_reg_d510(i).count;
         exception
            when others then
               vn_qtde_reg_d510 := 0;
         end;
         --
         vn_fase := 7.1;
         --
         if nvl(vn_qtde_reg_d510,0) > 0 then
            --
            vn_fase := 7.2;
            --
            j := vt_bi_tab_reg_d510(i).first;
            --
            vn_fase := 7.3;
            --
            loop
               --
               vn_fase := 7.4;
               --
               j := vt_bi_tab_reg_d510(i).first;
               --
               vn_fase := 7.5;
               -- cria a estrutura do registro separado por PIPE "|"
               gl_conteudo := '|';
               --
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_d510(i)(j).reg || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_d510(i)(j).num_item || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_d510(i)(j).cod_item || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_d510(i)(j).cod_class || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_d510(i)(j).qtd, '9999999999990D999') || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_d510(i)(j).unid || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_d510(i)(j).vl_item, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_d510(i)(j).vl_desc, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_d510(i)(j).cst_icms || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_d510(i)(j).cfop || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_d510(i)(j).vl_bc_icms, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_d510(i)(j).aliq_icms, '990D99') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_d510(i)(j).vl_icms, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_d510(i)(j).vl_bc_icms_st, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_d510(i)(j).vl_icms_st, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_d510(i)(j).ind_rec || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_d510(i)(j).cod_part || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_d510(i)(j).vl_pis, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_d510(i)(j).vl_cofins, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_d510(i)(j).cod_cta || '|';
               --
               vn_fase := 7.6;
               --
               pkb_armaz_estr_arq_efd ( ev_reg_blc   => 'D510'
                                      , el_conteudo  => gl_conteudo );
               --
               vn_fase := 7.7;
               --
               if j = vt_bi_tab_reg_d510(i).last then
                  exit;
               else
                  j := vt_bi_tab_reg_d510(i).next(j);
               end if;
               --
            end loop;
            --
         end if;
         --
         vn_fase := 8;
         --
         begin
            vn_qtde_reg_d530 := vt_bi_tab_reg_d530(i).count;
         exception
            when others then
               vn_qtde_reg_d530 := 0;
         end;
         --
         vn_fase := 8.1;
         --
         if nvl(vn_qtde_reg_d530,0) > 0 then
            --
            vn_fase := 8.2;
            --
            j := vt_bi_tab_reg_d530(i).first;
            --
            vn_fase := 8.3;
            --
            loop
               --
               vn_fase := 8.4;
               --
               if nvl(j,0) = 0 then
                  exit;
               end if;
               --
               vn_fase := 8.5;
               -- cria a estrutura do registro separado por PIPE "|"
               gl_conteudo := '|';
               --
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_d530(i)(j).reg || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_d530(i)(j).ind_serv || '|';
               gl_conteudo := gl_conteudo || to_char(vt_bi_tab_reg_d530(i)(j).dt_ini_serv, 'ddmmrrrr') || '|';
               gl_conteudo := gl_conteudo || to_char(vt_bi_tab_reg_d530(i)(j).dt_fin_serv, 'ddmmrrrr') || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_d530(i)(j).per_fiscal || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_d530(i)(j).cod_area || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_d530(i)(j).terminal || '|';
               --
               vn_fase := 8.6;
               --
               pkb_armaz_estr_arq_efd ( ev_reg_blc   => 'D530'
                                      , el_conteudo  => gl_conteudo );
               --
               vn_fase := 8.7;
               --
               if j = vt_bi_tab_reg_d530(i).last then
                  exit;
               else
                  j := vt_bi_tab_reg_d530(i).next(j);
               end if;
               --
            end loop;
            --
         end if;
         --
         vn_fase := 9;
         --
         begin
            vn_qtde_reg_d590 := vt_bi_tab_reg_d590(i).count;
         exception
            when others then
               vn_qtde_reg_d590 := 0;
         end;
         --
         vn_fase := 9.1;
         --
         if nvl(vn_qtde_reg_d590,0) > 0 then
            --
            vn_fase := 9.2;
            --
            j := vt_bi_tab_reg_d590(i).first;
            --
            vn_fase := 9.3;
            --
            loop
               --
               vn_fase := 9.4;
               --
               if nvl(j,0) = 0 then
                  exit;
               end if;
               --
               vn_fase := 9.5;
               -- cria a estrutura do registro separado por PIPE "|"
               gl_conteudo := '|';
               --
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_d590(i)(j).reg || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_d590(i)(j).cst_icms || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_d590(i)(j).cfop || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_d590(i)(j).aliq_icms, '990D99') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_d590(i)(j).vl_opr, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_d590(i)(j).vl_bc_icms, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_d590(i)(j).vl_icms, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_d590(i)(j).vl_bc_icms_st, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_d590(i)(j).vl_icms_st, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_d590(i)(j).vl_red_bc, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_d590(i)(j).cod_obs || '|';
               --
               vn_fase := 9.6;
               --
               pkb_armaz_estr_arq_efd ( ev_reg_blc   => 'D590'
                                      , el_conteudo  => gl_conteudo );
               --
               vn_fase := 9.7;
               --
               if j = vt_bi_tab_reg_d590(i).last then
                  exit;
               else
                  j := vt_bi_tab_reg_d590(i).next(j);
               end if;
               --
            end loop; -- fim D590
            --
         end if;
         --
         vn_fase := 10;
         --
         if i = vt_tab_reg_d500.last then
            exit;
         else
            i := vt_tab_reg_d500.next(i);
         end if;
         --
      end loop;
      --
   end if;
   --
exception
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_armaz_reg_d500 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end pkb_armaz_reg_d500;

-------------------------------------------------------------------------------------------------------

-- Armazena em arquivo o REGISTRO D400: RESUMO DE MOVIMENTO DIÁRIO - RMD
procedure pkb_armaz_reg_d400
is
   --
   vn_fase           number := 0;
   i                 pls_integer;
   j                 pls_integer;
   k                 pls_integer;
   vn_qtde_reg_d410  number;
   vn_qtde_reg_d411  number;
   vn_qtde_reg_d420  number;
   --
begin
   --
   vn_fase := 1;
   --
   if nvl(vt_tab_reg_d400.count,0) > 0 then
      --
      vn_fase := 2;
      --
      i := vt_tab_reg_d400.first;
      --
      vn_fase := 3;
      --
      loop
         --
         vn_fase := 4;
         --
         if nvl(i,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 5;
         -- cria a estrutura do registro separado por PIPE "|"
         gl_conteudo := '|';
         --
         gl_conteudo := gl_conteudo || vt_tab_reg_d400(i).reg || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_d400(i).cod_part || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_d400(i).cod_mod || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_d400(i).cod_sit || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_d400(i).ser || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_d400(i).sub || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_d400(i).num_doc || '|';
         gl_conteudo := gl_conteudo || to_char(vt_tab_reg_d400(i).dt_doc, 'ddmmrrrr') || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_d400(i).vl_doc, '9999999999990D99') || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_d400(i).vl_desc, '9999999999990D99') || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_d400(i).vl_serv, '9999999999990D99') || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_d400(i).vl_bc_icms, '9999999999990D99') || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_d400(i).vl_icms, '9999999999990D99') || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_d400(i).vl_pis, '9999999999990D99') || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_d400(i).vl_cofins, '9999999999990D99') || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_d400(i).cod_cta || '|';
         --
         vn_fase := 6;
         --
         pkb_armaz_estr_arq_efd ( ev_reg_blc   => 'D400'
                                , el_conteudo  => gl_conteudo );
         --
         vn_fase := 7;
         -- REGISTRO D410: DOCUMENTOS INFORMADOS (CÓDIGOS 13, 14, 15 E 16)
         begin
            vn_qtde_reg_d410 := vt_bi_tab_reg_d410(i).count;
         exception
            when others then
               vn_qtde_reg_d410 := 0;
         end;
         --
         vn_fase := 7.1;
         --
         if nvl(vn_qtde_reg_d410,0) > 0 then
            --
            vn_fase := 7.2;
            --
            j := vt_bi_tab_reg_d410(i).first;
            --
            vn_fase := 7.3;
            --
            loop
               --
               vn_fase := 7.4;
               --
               if nvl(j,0) = 0 then
                  exit;
               end if;
               --
               vn_fase := 7.5;
               -- cria a estrutura do registro separado por PIPE "|"
               gl_conteudo := '|';
               --
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_d410(i)(j).reg || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_d410(i)(j).cod_mod || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_d410(i)(j).ser || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_d410(i)(j).sub || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_d410(i)(j).num_doc_ini || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_d410(i)(j).num_doc_fin || '|';
               gl_conteudo := gl_conteudo || to_char(vt_bi_tab_reg_d410(i)(j).dt_doc, 'ddmmrrrr') || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_d410(i)(j).cst_icms || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_d410(i)(j).cfop || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_d410(i)(j).aliq_icms, '990D99') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_d410(i)(j).vl_opr, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_d410(i)(j).vl_desc, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_d410(i)(j).vl_serv, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_d410(i)(j).vl_bc_icms, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_d410(i)(j).vl_icms, '9999999999990D99') || '|';
               --
               vn_fase := 7.6;
               --
               pkb_armaz_estr_arq_efd ( ev_reg_blc   => 'D410'
                                      , el_conteudo  => gl_conteudo );
               --
               vn_fase := 8;
               -- REGISTRO D411: DOCUMENTOS CANCELADOS DOS DOCUMENTOS INFORMADOS (CÓDIGO 13, 14, 15 e 16)
               begin
                  vn_qtde_reg_d411 := vt_tri_tab_reg_d411(i)(j).count;
               exception
                  when others then
                     vn_qtde_reg_d411 := 0;
               end;
               --
               vn_fase := 8.1;
               --
               if nvl(vn_qtde_reg_d411,0) > 0 then
                  --
                  vn_fase := 8.2;
                  --
                  k := vt_tri_tab_reg_d411(i)(j).first;
                  --
                  vn_fase := 8.3;
                  --
                  loop
                     --
                     vn_fase := 8.4;
                     --
                     if nvl(k,0) = 0 then
                        exit;
                     end if;
                     --
                     vn_fase := 8.5;
                     -- cria a estrutura do registro separado por PIPE "|"
                     gl_conteudo := '|';
                     --
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_d411(i)(j)(k).reg || '|';
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_d411(i)(j)(k).num_doc_canc || '|';
                     --
                     vn_fase := 8.6;
                     --
                     pkb_armaz_estr_arq_efd ( ev_reg_blc   => 'D411'
                                            , el_conteudo  => gl_conteudo );
                     --
                     vn_fase := 8.7;
                     --
                     if k = vt_tri_tab_reg_d411(i)(j).last then
                        exit;
                     else
                        k := vt_tri_tab_reg_d411(i)(j).next(k);
                     end if;
                     --
                  end loop;
                  --
               end if;
               --
               vn_fase := 8.8;
               --
               if j = vt_bi_tab_reg_d410(i).last then
                  exit;
               else
                  j := vt_bi_tab_reg_d410(i).next(j);
               end if;
               --
            end loop;
            --
         end if;
         --
         vn_fase := 9;
         -- RREGISTRO D420: COMPLEMENTO DOS DOCUMENTOS INFORMADOS
         begin
            vn_qtde_reg_d420 := vt_bi_tab_reg_d420(i).count;
         exception
            when others then
               vn_qtde_reg_d420 := 0;
         end;
         --
         vn_fase := 9.1;
         --
         if nvl(vn_qtde_reg_d420,0) > 0 then
            --
            vn_fase := 9.2;
            --
            j := vt_bi_tab_reg_d420(i).first;
            --
            vn_fase := 9.3;
            --
            loop
               --
               vn_fase := 9.4;
               --
               if nvl(j,0) = 0 then
                  exit;
               end if;
               --
               vn_fase := 9.5;
               -- cria a estrutura do registro separado por PIPE "|"
               gl_conteudo := '|';
               --
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_d420(i)(j).reg || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_d420(i)(j).cod_mun_orig || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_d420(i)(j).vl_serv, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_d420(i)(j).vl_bc_icms, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_d420(i)(j).vl_icms, '9999999999990D99') || '|';
               --
               vn_fase := 9.6;
               --
               pkb_armaz_estr_arq_efd ( ev_reg_blc   => 'D420'
                                      , el_conteudo  => gl_conteudo );
               --
               vn_fase := 9.7;
               --
               if j = vt_bi_tab_reg_d420(i).last then
                  exit;
               else
                  j := vt_bi_tab_reg_d420(i).next(j);
               end if;
               --
            end loop;
            --
         end if;
         --
         vn_fase := 10;
         --
         if i = vt_tab_reg_d400.last then
            exit;
         else
            i := vt_tab_reg_d400.next(i);
         end if;
         --
      end loop;
      --
   end if;
   --
exception
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_armaz_reg_d400 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end pkb_armaz_reg_d400;

-------------------------------------------------------------------------------------------------------

-- Armazena em arquivo o REGISTRO D350 EQUIPAMENTO ECF (CÓDIGOS 2E, 13, 14, 15 e 16)
procedure pkb_armaz_reg_d350
is
   --
   vn_fase           number := 0;
   i                 pls_integer;
   j                 pls_integer;
   k                 pls_integer;
   l                 pls_integer;
   vn_qtde_reg_d355  number;
   vn_qtde_reg_d360  number;
   vn_qtde_reg_d365  number;
   vn_qtde_reg_d370  number;
   vn_qtde_reg_d390  number;
   --
begin
   --
   vn_fase := 1;
   --
   if nvl(vt_tab_reg_d350.count,0) > 0 then
      --
      vn_fase := 2;
      --
      i := vt_tab_reg_d350.first;
      --
      vn_fase := 3;
      --
      loop
         --
         vn_fase := 4;
         --
         if nvl(i,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 5;
         -- cria a estrutura do registro separado por PIPE "|"
         gl_conteudo := '|';
         --
         gl_conteudo := gl_conteudo || vt_tab_reg_d350(i).reg || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_d350(i).cod_mod || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_d350(i).ecf_mod || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_d350(i).ecf_fab || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_d350(i).ecf_cx || '|';
         --
         vn_fase := 6;
         --
         pkb_armaz_estr_arq_efd ( ev_reg_blc   => 'D350'
                                , el_conteudo  => gl_conteudo );
         --
         vn_fase := 7;
         -- REGISTRO D355 REDUÇÃO Z (CÓDIGOS 2E, 13, 14, 15 e 16)
         begin
            vn_qtde_reg_d355 := vt_bi_tab_reg_d355(i).count;
         exception
            when others then
               vn_qtde_reg_d355 := 0;
         end;
         --
         vn_fase := 7.1;
         --
         if nvl(vn_qtde_reg_d355,0) > 0 then
            --
            vn_fase := 7.2;
            --
            j := vt_bi_tab_reg_d355(i).first;
            --
            vn_fase := 7.3;
            --
            loop
               --
               vn_fase := 7.4;
               --
               if nvl(j,0) = 0 then
                  exit;
               end if;
               --
               vn_fase := 7.5;
               -- cria a estrutura do registro separado por PIPE "|"
               gl_conteudo := '|';
               --
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_d355(i)(j).reg || '|';
               gl_conteudo := gl_conteudo || to_char(vt_bi_tab_reg_d355(i)(j).dt_doc, 'ddmmrrrr') || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_d355(i)(j).cro || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_d355(i)(j).crz || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_d355(i)(j).num_coo_fin || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_d355(i)(j).gt_fin, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_d355(i)(j).vl_brt, '9999999999990D99') || '|';
               --
               vn_fase := 7.6;
               --
               pkb_armaz_estr_arq_efd ( ev_reg_blc   => 'D355'
                                      , el_conteudo  => gl_conteudo );
               --
               vn_fase := 8;
               -- REGISTRO D360: PIS E COFINS TOTALIZADOS NO DIA (CÓDIGOS 2E, 13, 14, 15 e 16)
               begin
                  vn_qtde_reg_d360 := vt_tri_tab_reg_d360(i)(j).count;
               exception
                  when others then
                     vn_qtde_reg_d360 := 0;
               end;
               --
               vn_fase := 8.1;
               --
               if nvl(vn_qtde_reg_d360,0) > 0 then
                  --
                  vn_fase := 8.2;
                  --
                  k := vt_tri_tab_reg_d360(i)(j).first;
                  --
                  vn_fase := 8.3;
                  --
                  loop
                     --
                     vn_fase := 8.4;
                     --
                     if nvl(k,0) = 0 then
                        exit;
                     end if;
                     --
                     vn_fase := 8.5;
                     -- cria a estrutura do registro separado por PIPE "|"
                     gl_conteudo := '|';
                     --
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_d360(i)(j)(k).reg || '|';
                     gl_conteudo := gl_conteudo || fkg_formata_num(vt_tri_tab_reg_d360(i)(j)(k).vl_pis, '9999999999990D99') || '|';
                     gl_conteudo := gl_conteudo || fkg_formata_num(vt_tri_tab_reg_d360(i)(j)(k).vl_cofins, '9999999999990D99') || '|';
                     --
                     vn_fase := 8.6;
                     --
                     pkb_armaz_estr_arq_efd ( ev_reg_blc   => 'D360'
                                            , el_conteudo  => gl_conteudo );
                     --
                     vn_fase := 8.7;
                     --
                     if k = vt_tri_tab_reg_d360(i)(j).last then
                        exit;
                     else
                        k := vt_tri_tab_reg_d360(i)(j).next(k);
                     end if;
                     --
                  end loop;
                  --
               end if;
               --
               vn_fase := 9;
               -- REGISTRO D365: REGISTRO DOS TOTALIZADORES PARCIAIS DA REDUÇÃO Z (CÓDIGOS 2E, 13, 14, 15 e 16)
               begin
                  vn_qtde_reg_d365 := vt_tri_tab_reg_d365(i)(j).count;
               exception
                  when others then
                     vn_qtde_reg_d365 := 0;
               end;
               --
               vn_fase := 9.1;
               --
               if nvl(vn_qtde_reg_d365,0) > 0 then
                  --
                  vn_fase := 9.2;
                  --
                  k := vt_tri_tab_reg_d365(i)(j).first;
                  --
                  vn_fase := 9.3;
                  --
                  loop
                     --
                     vn_fase := 9.4;
                     --
                     if nvl(k,0) = 0 then
                        exit;
                     end if;
                     --
                     vn_fase := 9.5;
                     -- cria a estrutura do registro separado por PIPE "|"
                     gl_conteudo := '|';
                     --
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_d365(i)(j)(k).reg || '|';
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_d365(i)(j)(k).cod_tot_par || '|';
                     gl_conteudo := gl_conteudo || fkg_formata_num(vt_tri_tab_reg_d365(i)(j)(k).vlr_acum_tot, '9999999999990D99') || '|';
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_d365(i)(j)(k).nr_tot || '|';
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_d365(i)(j)(k).descr_nr_tot || '|';
                     --
                     vn_fase := 9.6;
                     --
                     pkb_armaz_estr_arq_efd ( ev_reg_blc   => 'D365'
                                            , el_conteudo  => gl_conteudo );
                     --
                     vn_fase := 10;
                     -- REGISTRO D370: COMPLEMENTO DOS DOCUMENTOS INFORMADOS (CÓDIGOS 13, 14, 15 e 16 e 2E)
                     begin
                        vn_qtde_reg_d370 := vt_tetra_tab_reg_d370(i)(j)(k).count;
                     exception
                        when others then
                           vn_qtde_reg_d370 := 0;
                     end;
                     --
                     vn_fase := 10.1;
                     --
                     if nvl(vn_qtde_reg_d370,0) > 0 then
                        --
                        vn_fase := 10.2;
                        --
                        l := vt_tetra_tab_reg_d370(i)(j)(k).first;
                        --
                        vn_fase := 10.3;
                        --
                        loop
                           --
                           vn_fase := 10.4;
                           --
                           if nvl(l,0) = 0 then
                              exit;
                           end if;
                           --
                           vn_fase := 10.5;
                           -- cria a estrutura do registro separado por PIPE "|"
                           gl_conteudo := '|';
                           --
                           gl_conteudo := gl_conteudo || vt_tetra_tab_reg_d370(i)(j)(k)(l).reg || '|';
                           gl_conteudo := gl_conteudo || vt_tetra_tab_reg_d370(i)(j)(k)(l).cod_mun_orig || '|';
                           gl_conteudo := gl_conteudo || fkg_formata_num(vt_tetra_tab_reg_d370(i)(j)(k)(l).vl_serv, '9999999999990D99') || '|';
                           gl_conteudo := gl_conteudo || vt_tetra_tab_reg_d370(i)(j)(k)(l).qtd_bilh || '|';
                           gl_conteudo := gl_conteudo || fkg_formata_num(vt_tetra_tab_reg_d370(i)(j)(k)(l).vl_bc_icms, '9999999999990D99') || '|';
                           gl_conteudo := gl_conteudo || fkg_formata_num(vt_tetra_tab_reg_d370(i)(j)(k)(l).vl_icms, '9999999999990D99') || '|';
                           --
                           vn_fase := 10.6;
                           --
                           pkb_armaz_estr_arq_efd ( ev_reg_blc   => 'D370'
                                                  , el_conteudo  => gl_conteudo );
                           --
                           vn_fase := 10.7;
                           --
                           if l = vt_tetra_tab_reg_d370(i)(j)(k).last then
                              exit;
                           else
                              l := vt_tetra_tab_reg_d370(i)(j)(k).next(l);
                           end if;
                           --
                        end loop;
                        --
                     end if;
                     --
                     vn_fase := 10.8;
                     --
                     if k = vt_tri_tab_reg_d365(i)(j).last then
                        exit;
                     else
                        k := vt_tri_tab_reg_d365(i)(j).next(k);
                     end if;
                     --
                  end loop;
                  --
               end if;
               --
               vn_fase := 11;
               -- REGISTRO D390: REGISTRO ANALÍTICO DO MOVIMENTO DIÁRIO
               begin
                  vn_qtde_reg_d390 := vt_tri_tab_reg_d390(i)(j).count;
               exception
                  when others then
                     vn_qtde_reg_d390 := 0;
               end;
               --
               vn_fase := 11.1;
               --
               if nvl(vn_qtde_reg_d390,0) > 0 then
                  --
                  vn_fase := 11.2;
                  --
                  k := vt_tri_tab_reg_d390(i)(j).count;
                  --
                  vn_fase := 11.3;
                  --
                  loop
                     --
                     vn_fase := 11.4;
                     --
                     if nvl(k,0) = 0 then
                        exit;
                     end if;
                     --
                     vn_fase := 11.5;
                     -- cria a estrutura do registro separado por PIPE "|"
                     gl_conteudo := '|';
                     --
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_d390(i)(j)(k).reg || '|';
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_d390(i)(j)(k).cst_icms || '|';
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_d390(i)(j)(k).cfop || '|';
                     gl_conteudo := gl_conteudo || fkg_formata_num(vt_tri_tab_reg_d390(i)(j)(k).aliq_icms, '990D99') || '|';
                     gl_conteudo := gl_conteudo || fkg_formata_num(vt_tri_tab_reg_d390(i)(j)(k).vl_opr, '9999999999990D99') || '|';
                     gl_conteudo := gl_conteudo || fkg_formata_num(vt_tri_tab_reg_d390(i)(j)(k).vl_bc_issqn, '9999999999990D99') || '|';
                     gl_conteudo := gl_conteudo || fkg_formata_num(vt_tri_tab_reg_d390(i)(j)(k).aliq_issqn, '990D99') || '|';
                     gl_conteudo := gl_conteudo || fkg_formata_num(vt_tri_tab_reg_d390(i)(j)(k).vl_issqn, '9999999999990D99') || '|';
                     gl_conteudo := gl_conteudo || fkg_formata_num(vt_tri_tab_reg_d390(i)(j)(k).vl_bc_icms, '9999999999990D99') || '|';
                     gl_conteudo := gl_conteudo || fkg_formata_num(vt_tri_tab_reg_d390(i)(j)(k).vl_icms, '9999999999990D99') || '|';
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_d390(i)(j)(k).cod_obs || '|';
                     --
                     vn_fase := 11.6;
                     --
                     pkb_armaz_estr_arq_efd ( ev_reg_blc   => 'D390'
                                            , el_conteudo  => gl_conteudo );
                     --
                     vn_fase := 11.7;
                     --
                     if k = vt_tri_tab_reg_d390(i)(j).last then
                        exit;
                     else
                        k := vt_tri_tab_reg_d390(i)(j).next(k);
                     end if;
                     --
                  end loop;
                  --
               end if;
               --
               vn_fase := 11.8;
               --
               if j = vt_bi_tab_reg_d355(i).last then
                  exit;
               else
                  j := vt_bi_tab_reg_d355(i).next(i);
               end if;
               --
            end loop;
            --
         end if;
         --
         vn_fase := 12;
         --
         if i = vt_tab_reg_d350.last then
            exit;
         else
            i := vt_tab_reg_d350.next(i);
         end if;
         --
      end loop;
      --
   end if;
   --
exception
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_armaz_reg_d350 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end pkb_armaz_reg_d350;

-------------------------------------------------------------------------------------------------------

-- Armazena em arquivo o REGISTRO D300: REGISTRO ANALÍTICO DOS BILHETES
procedure pkb_armaz_reg_d300
is
   --
   vn_fase           number := 0;
   i                 pls_integer;
   j                 pls_integer;
   vn_qtde_reg_d301  number;
   vn_qtde_reg_d310  number;
   --
begin
   --
   vn_fase := 1;
   --
   if nvl(vt_tab_reg_d300.count,0) > 0 then
      --
      vn_fase := 2;
      --
      i := vt_tab_reg_d300.first;
      --
      vn_fase := 3;
      --
      loop
         --
         vn_fase := 4;
         --
         if nvl(i,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 5;
         -- cria a estrutura do registro separado por PIPE "|"
         gl_conteudo := '|';
         --
         gl_conteudo := gl_conteudo || vt_tab_reg_d300(i).reg || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_d300(i).cod_mod || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_d300(i).ser || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_d300(i).sub || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_d300(i).num_doc_ini || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_d300(i).num_doc_fin || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_d300(i).cst_icms || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_d300(i).cfop || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_d300(i).aliq_icms, '990D99') || '|';
         gl_conteudo := gl_conteudo || to_char(vt_tab_reg_d300(i).dt_doc, 'ddmmrrrr') || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_d300(i).vl_opr, '9999999999990D99') || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_d300(i).vl_desc, '9999999999990D99') || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_d300(i).vl_serv, '9999999999990D99') || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_d300(i).vl_seg, '9999999999990D99') || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_d300(i).vl_out_desp, '9999999999990D99') || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_d300(i).vl_bc_icms, '9999999999990D99') || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_d300(i).vl_icms, '9999999999990D99') || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_d300(i).vl_red_bc, '9999999999990D99') || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_d300(i).cod_obs || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_d300(i).cod_cta || '|';
         --
         vn_fase := 6;
         --
         pkb_armaz_estr_arq_efd ( ev_reg_blc   => 'D300'
                                , el_conteudo  => gl_conteudo );
         --
         vn_fase := 7;
         -- REGISTRO D301: DOCUMENTOS CANCELADOS DOS BILHETES
         begin
            vn_qtde_reg_d301 := vt_bi_tab_reg_d301(i).count;
         exception
            when others then
               vn_qtde_reg_d301 := 0;
         end;
         --
         vn_fase := 7.1;
         --
         if nvl(vn_qtde_reg_d301,0) > 0 then
            --
            vn_fase := 7.2;
            --
            j := vt_bi_tab_reg_d301(i).first;
            --
            vn_fase := 7.3;
            --
            loop
               --
               vn_fase := 7.4;
               --
               if nvl(j,0) = 0 then
                  exit;
               end if;
               --
               vn_fase := 7.5;
               -- cria a estrutura do registro separado por PIPE "|"
               gl_conteudo := '|';
               --
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_d301(i)(j).reg || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_d301(i)(j).num_doc_canc || '|';
               --
               vn_fase := 7.6;
               --
               pkb_armaz_estr_arq_efd ( ev_reg_blc   => 'D301'
                                      , el_conteudo  => gl_conteudo );
               --
               vn_fase := 7.7;
               --
               if j = vt_bi_tab_reg_d301(i).last then
                  exit;
               else
                  j := vt_bi_tab_reg_d301(i).next(j);
               end if;
               --
            end loop;
            --
         end if;
         --
         vn_fase := 8;
         -- REGISTRO D310: COMPLEMENTO DOS BILHETES (CÓDIGO 13, 14, 15 E 16)
         begin
            vn_qtde_reg_d310 := vt_bi_tab_reg_d310(i).count;
         exception
            when others then
               vn_qtde_reg_d310 := 0;
         end;
         --
         vn_fase := 8.1;
         --
         if nvl(vn_qtde_reg_d310,0) > 0 then
            --
            vn_fase := 8.2;
            --
            j := vt_bi_tab_reg_d310(i).first;
            --
            vn_fase := 8.3;
            --
            loop
               --
               vn_fase := 8.4;
               --
               if nvl(j,0) = 0  then
                  exit;
               end if;
               --
               vn_fase := 8.5;
               -- cria a estrutura do registro separado por PIPE "|"
               gl_conteudo := '|';
               --
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_d310(i)(j).reg || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_d310(i)(j).cod_mun_orig || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_d310(i)(j).vl_serv, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_d310(i)(j).vl_bc_icms, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_d310(i)(j).vl_icms, '9999999999990D99') || '|';
               --
               vn_fase := 8.6;
               --
               pkb_armaz_estr_arq_efd ( ev_reg_blc   => 'D310'
                                      , el_conteudo  => gl_conteudo );
               --
               vn_fase := 8.7;
               --
               if j = vt_bi_tab_reg_d310(i).last then
                  exit;
               else
                  j := vt_bi_tab_reg_d310(i).next(j);
               end if;
               --
            end loop;
            --
         end if;
         --
         vn_fase := 9;
         --
         if i = vt_tab_reg_d300.last then
            exit;
         else
            i := vt_tab_reg_d300.next(i);
         end if;
         --
      end loop;
      --
   end if;
   --
exception
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_armaz_reg_d300 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end pkb_armaz_reg_d300;

-------------------------------------------------------------------------------------------------------

-- Armazena em arquivo o REGISTRO D100: NOTA FISCAL DE SERVIÇO DE TRANSPORTE
procedure pkb_armaz_reg_d100
is
   --
   vn_fase           number := 0;
   i                 pls_integer;
   j                 pls_integer;
   k                 pls_integer;
   vn_qtde_reg_d110  number;
   vn_qtde_reg_d120  number;
   vn_qtde_reg_d130  number;
   vn_qtde_reg_d140  number;
   vn_qtde_reg_d150  number;
   vn_qtde_reg_d160  number;
   vn_qtde_reg_d161  number;
   vn_qtde_reg_d162  number;
   vn_qtde_reg_d170  number;
   vn_qtde_reg_d180  number;
   vn_qtde_reg_d190  number;
   vn_qtde_reg_d195  number;
   vn_qtde_reg_d197  number;
   --
begin
   --
   vn_fase := 1;
   --
   if nvl(vt_tab_reg_d100.count,0) > 0 then
      --
      vn_fase := 2;
      --
      i := nvl(vt_tab_reg_d100.first,0);
      --
      vn_fase := 3;
      --
      loop
         --
         vn_fase := 4;
         --
         if nvl(i,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 5;
         -- cria a estrutura do registro separado por PIPE "|"
         gl_conteudo := '|';
         --
         gl_conteudo := gl_conteudo || vt_tab_reg_d100(i).reg || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_d100(i).ind_oper || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_d100(i).ind_emit || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_d100(i).cod_part || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_d100(i).cod_mod || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_d100(i).cod_sit || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_d100(i).ser || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_d100(i).sub || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_d100(i).num_doc || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_d100(i).chv_cte || '|';
         gl_conteudo := gl_conteudo || to_char(vt_tab_reg_d100(i).dt_doc, 'ddmmrrrr') || '|';
         gl_conteudo := gl_conteudo || to_char(vt_tab_reg_d100(i).dt_a_p, 'ddmmrrrr') || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_d100(i).tp_cte || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_d100(i).chv_cte_ref || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_d100(i).vl_doc, '9999999999990D99') || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_d100(i).vl_desc, '9999999999990D99') || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_d100(i).ind_frt || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_d100(i).vl_serv, '9999999999990D99') || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_d100(i).vl_bc_icms, '9999999999990D99') || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_d100(i).vl_icms, '9999999999990D99') || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_d100(i).vl_nt, '9999999999990D99') || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_d100(i).cod_inf || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_d100(i).cod_cta || '|';
         --
         if gt_row_abertura_efd.dt_ini >= to_date('01/01/2018', 'dd/mm/rrrr') then
            --
            gl_conteudo := gl_conteudo || vt_tab_reg_d100(i).cod_mun_orig || '|';
            gl_conteudo := gl_conteudo || vt_tab_reg_d100(i).cod_mun_dest || '|';
            --
         end if;
         --
         vn_fase := 6;
         --
         pkb_armaz_estr_arq_efd ( ev_reg_blc   => 'D100'
                                , el_conteudo  => gl_conteudo );
         --
         vn_fase := 7;
         -- REGISTRO D110: ITENS DO DOCUMENTO - NOTA FISCAL DE SERVIÇOS DE TRANSPORTE (CÓDIGO 07)
         begin
            vn_qtde_reg_d110 := vt_bi_tab_reg_d110(i).count;
         exception
            when others then
               vn_qtde_reg_d110 := 0;
         end;
         --
         vn_fase := 7.1;
         --
         if nvl(vn_qtde_reg_d110,0) > 0 then
            --
            vn_fase := 7.2;
            --
            j := vt_bi_tab_reg_d110(i).first;
            --
            vn_fase := 7.3;
            --
            loop
               --
               vn_fase := 7.4;
               --
               if nvl(j,0) = 0 then
                  exit;
               end if;
               --
               vn_fase := 7.5;
               -- cria a estrutura do registro separado por PIPE "|"
               gl_conteudo := '|';
               --
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_d110(i)(j).reg || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_d110(i)(j).num_item || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_d110(i)(j).cod_item || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_d110(i)(j).vl_serv, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_d110(i)(j).vl_out, '9999999999990D99') || '|';
               --
               vn_fase := 7.6;
               --
               pkb_armaz_estr_arq_efd ( ev_reg_blc   => 'D110'
                                      , el_conteudo  => gl_conteudo );
               --
               vn_fase := 8;
               -- REGISTRO D120: COMPLEMENTO DA NOTA FISCAL DE SERVIÇOS DE TRANSPORTE (CÓDIGO 07).
               begin
                  vn_qtde_reg_d120 := vt_tri_tab_reg_d120(i)(j).count;
               exception
                  when others then
                     vn_qtde_reg_d120 := 0;
               end;
               --
               vn_fase := 8.1;
               --
               if nvl(vn_qtde_reg_d120,0) > 0 then
                  --
                  vn_fase := 8.2;
                  --
                  k := vt_tri_tab_reg_d120(i)(j).first;
                  --
                  vn_fase := 8.3;
                  --
                  loop
                     --
                     vn_fase := 8.4;
                     --
                     if nvl(k,0) = 0 then
                        exit;
                     end if;
                     --
                     vn_fase := 8.5;
                     -- cria a estrutura do registro separado por PIPE "|"
                     gl_conteudo := '|';
                     --
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_d120(i)(j)(k).reg || '|';
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_d120(i)(j)(k).cod_mun_orig || '|';
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_d120(i)(j)(k).cod_mun_dest || '|';
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_d120(i)(j)(k).veic_id || '|';
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_d120(i)(j)(k).uf_id || '|';
                     --
                     vn_fase := 8.6;
                     --
                     pkb_armaz_estr_arq_efd ( ev_reg_blc   => 'D120'
                                            , el_conteudo  => gl_conteudo );
                     --
                     vn_fase := 8.7;
                     --
                     if k = vt_tri_tab_reg_d120(i)(j).last then
                        exit;
                     else
                        k := vt_tri_tab_reg_d120(i)(j).next(k);
                     end if;
                     --
                  end loop;
                  --
               end if;
               --
               vn_fase := 8.8;
               --
               if j = vt_bi_tab_reg_d110(i).last then
                  exit;
               else
                  j := vt_bi_tab_reg_d110(i).next(j);
               end if;
               --
            end loop;
            --
         end if;
         --
         vn_fase := 9;
         -- REGISTRO D130: COMPLEMENTO DO CONHECIMENTO RODOVIÁRIO
         begin
            vn_qtde_reg_d130 := vt_bi_tab_reg_d130(i).count;
         exception
            when others then
               vn_qtde_reg_d130 := 0;
         end;
         --
         vn_fase := 9.1;
         --
         if nvl(vn_qtde_reg_d130,0) > 0 then
            --
            vn_fase := 9.2;
            --
            j := vt_bi_tab_reg_d130(i).first;
            --
            vn_fase := 9.3;
            --
            loop
               --
               vn_fase := 9.4;
               --
               if nvl(j,0) = 0 then
                  exit;
               end if;
               --
               vn_fase := 9.5;
               -- cria a estrutura do registro separado por PIPE "|"
               gl_conteudo := '|';
               --
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_d130(i)(j).reg || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_d130(i)(j).cod_part_consg || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_d130(i)(j).cod_part_red || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_d130(i)(j).ind_frt_red || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_d130(i)(j).cod_mun_orig || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_d130(i)(j).cod_mun_dest || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_d130(i)(j).veic_id || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_d130(i)(j).vl_liq_frt, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_d130(i)(j).vl_sec_cat, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_d130(i)(j).vl_desp, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_d130(i)(j).vl_pedg, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_d130(i)(j).vl_out, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_d130(i)(j).vl_frt, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_d130(i)(j).uf_id || '|';
               --
               vn_fase := 9.6;
               --
               pkb_armaz_estr_arq_efd ( ev_reg_blc   => 'D130'
                                      , el_conteudo  => gl_conteudo );
               --
               vn_fase := 9.7;
               --
               if j = vt_bi_tab_reg_d130(i).last then
                  exit;
               else
                  j := vt_bi_tab_reg_d130(i).next(j);
               end if;
               --
            end loop;
            --
         end if;
         --
         vn_fase := 10;
         -- REGISTRO D140: COMPLEMENTO DO CONHECIMENTO AQUAVIÁRIO DE CARGAS (CÓDIGO 09)
         begin
            vn_qtde_reg_d140 := vt_bi_tab_reg_d140(i).count;
         exception
            when others then
               vn_qtde_reg_d140 := 0;
         end;
         --
         vn_fase := 10.1;
         --
         if nvl(vn_qtde_reg_d140,0) > 0 then
            --
            vn_fase := 10.2;
            --
            j := vt_bi_tab_reg_d140(i).first;
            --
            vn_fase := 10.3;
            --
            loop
               --
               vn_fase := 10.4;
               --
               if nvl(j,0) = 0 then
                  exit;
               end if;
               --
               vn_fase := 10.5;
               -- cria a estrutura do registro separado por PIPE "|"
               gl_conteudo := '|';
               --
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_d140(i)(j).reg || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_d140(i)(j).cod_part_consg || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_d140(i)(j).cod_mun_orig || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_d140(i)(j).cod_mun_dest || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_d140(i)(j).ind_veic || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_d140(i)(j).veic_id || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_d140(i)(j).ind_nav || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_d140(i)(j).viagem || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_d140(i)(j).vl_frt_liq, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_d140(i)(j).vl_desp_port, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_d140(i)(j).vl_desp_car_desc, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_d140(i)(j).vl_out, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_d140(i)(j).vl_frt_brt, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_d140(i)(j).vl_frt_mm, '9999999999990D99') || '|';
               --
               vn_fase := 10.6;
               --
               pkb_armaz_estr_arq_efd ( ev_reg_blc   => 'D140'
                                      , el_conteudo  => gl_conteudo );
               --
               vn_fase := 10.7;
               --
               if j = vt_bi_tab_reg_d140(i).last then
                  exit;
               else
                  j := vt_bi_tab_reg_d140(i).next(j);
               end if;
               --
            end loop;
            --
         end if;
         --
         vn_fase := 11;
         -- REGISTRO D150: COMPLEMENTO DO CONHECIMENTO AÉREO (CÓDIGO 10)
         begin
            vn_qtde_reg_d150 := vt_bi_tab_reg_d150(i).count;
         exception
            when others then
               vn_qtde_reg_d150 := 0;
         end;
         --
         vn_fase := 11.1;
         --
         if nvl(vn_qtde_reg_d150,0) > 0 then
            --
            vn_fase := 11.2;
            --
            j := vt_bi_tab_reg_d150(i).first;
            --
            vn_fase := 11.3;
            --
            loop
               --
               vn_fase := 11.4;
               --
               if nvl(j,0) = 0 then
                  exit;
               end if;
               --
               vn_fase := 11.5;
               -- cria a estrutura do registro separado por PIPE "|"
               gl_conteudo := '|';
               --
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_d150(i)(j).reg || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_d150(i)(j).cod_mun_orig || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_d150(i)(j).cod_mun_dest || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_d150(i)(j).veic_id || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_d150(i)(j).viagem || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_d150(i)(j).ind_tfa || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_d150(i)(j).vl_peso_tx, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_d150(i)(j).vl_tx_terr, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_d150(i)(j).vl_tx_red, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_d150(i)(j).vl_out, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_d150(i)(j).vl_tx_adv, '9999999999990D99') || '|';
               --
               vn_fase := 11.6;
               --
               pkb_armaz_estr_arq_efd ( ev_reg_blc   => 'D150'
                                      , el_conteudo  => gl_conteudo );
               --
               vn_fase := 11.7;
               --
               if j = vt_bi_tab_reg_d150(i).last then
                  exit;
               else
                  j := vt_bi_tab_reg_d150(i).next(j);
               end if;
               --
            end loop;
            --
         end if;
         --
         vn_fase := 12;
         -- REGISTRO D160: CARGA TRANSPORTADA (CÓDIGO 08, 8B, 09, 10, 11, 26 e 27)
         begin
            vn_qtde_reg_d160 := vt_bi_tab_reg_d160(i).count;
         exception
            when others then
               vn_qtde_reg_d160 := 0;
         end;
         --
         vn_fase := 12.1;
         --
         if nvl(vn_qtde_reg_d160,0) > 0 then
            --
            vn_fase := 12.2;
            --
            k := vt_bi_tab_reg_d160(i).first;
            --
            vn_fase := 12.3;
            --
            loop
               --
               vn_fase := 12.4;
               --
               if nvl(j,0) = 0 then
                  exit;
               end if;
               --
               vn_fase := 12.5;
               -- cria a estrutura do registro separado por PIPE "|"
               gl_conteudo := '|';
               --
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_d160(i)(j).reg || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_d160(i)(j).despacho || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_d160(i)(j).cnpj_cpf_rem || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_d160(i)(j).ie_rem || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_d160(i)(j).cod_mun_ori || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_d160(i)(j).cnpj_cfp_dest || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_d160(i)(j).ie_dest || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_d160(i)(j).cod_mun_dest || '|';
               --
               vn_fase := 12.6;
               --
               pkb_armaz_estr_arq_efd ( ev_reg_blc   => 'D160'
                                      , el_conteudo  => gl_conteudo );
               --
               vn_fase := 13;
               -- REGISTRO D161: LOCAL DA COLETA E ENTREGA (CÓDIGO 08, 8B, 09, 10, 11 e 26).
               begin
                  vn_qtde_reg_d161 := vt_tri_tab_reg_d161(i)(j).count;
               exception
                  when others then
                     vn_qtde_reg_d161 := 0;
               end;
               --
               vn_fase := 13.1;
               --
               if nvl(vn_qtde_reg_d161,0) > 0 then
                  --
                  vn_fase := 13.2;
                  --
                  k := vt_tri_tab_reg_d161(i)(j).first;
                  --
                  vn_fase := 13.3;
                  --
                  loop
                     --
                     vn_fase := 13.4;
                     --
                     if nvl(k,0) = 0 then
                        exit;
                     end if;
                     --
                     vn_fase := 13.5;
                     -- cria a estrutura do registro separado por PIPE "|"
                     gl_conteudo := '|';
                     --
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_d161(i)(j)(k).reg || '|';
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_d161(i)(j)(k).ind_carga || '|';
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_d161(i)(j)(k).cnpj_cpf_col || '|';
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_d161(i)(j)(k).ie_col || '|';
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_d161(i)(j)(k).cod_mun_col || '|';
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_d161(i)(j)(k).cnpj_cpf_entg || '|';
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_d161(i)(j)(k).ie_entg || '|';
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_d161(i)(j)(k).cod_mun_entg || '|';
                     --
                     vn_fase := 13.6;
                     --
                     pkb_armaz_estr_arq_efd ( ev_reg_blc   => 'D161'
                                            , el_conteudo  => gl_conteudo );
                     --
                     vn_fase := 13.7;
                     --
                     if k = vt_tri_tab_reg_d161(i)(j).last then
                        exit;
                     else
                        k := vt_tri_tab_reg_d161(i)(j).next(k);
                     end if;
                     --
                  end loop;
                  --
               end if;
               --
               vn_fase := 14;
               -- REGISTRO D162: IDENTIFICAÇÃO DOS DOCUMENTOS FISCAIS (CÓDIGOS 08, 8B, 09, 10, 11, 26 E 27)
               begin
                  vn_qtde_reg_d162 := vt_tri_tab_reg_d162(i)(j).count;
               exception
                  when others then
                     vn_qtde_reg_d162 := 0;
               end;
               --
               vn_fase := 14.1;
               --
               if nvl(vn_qtde_reg_d162,0) > 0 then
                  --
                  vn_fase := 14.2;
                  --
                  k := vt_tri_tab_reg_d162(i)(j).first;
                  --
                  vn_fase := 14.3;
                  --
                  loop
                     --
                     vn_fase := 14.4;
                     --
                     if nvl(k,0) = 0 then
                        exit;
                     end if;
                     --
                     vn_fase := 14.5;
                     --
                     -- cria a estrutura do registro separado por PIPE "|"
                     gl_conteudo := '|';
                     --
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_d162(i)(j)(k).reg || '|';
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_d162(i)(j)(k).cod_mod || '|';
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_d162(i)(j)(k).ser || '|';
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_d162(i)(j)(k).num_doc || '|';
                     gl_conteudo := gl_conteudo || to_char(vt_tri_tab_reg_d162(i)(j)(k).dt_doc, 'ddmmrrrr') || '|';
                     gl_conteudo := gl_conteudo || fkg_formata_num(vt_tri_tab_reg_d162(i)(j)(k).vl_doc, '9999999999990D99') || '|';
                     gl_conteudo := gl_conteudo || fkg_formata_num(vt_tri_tab_reg_d162(i)(j)(k).vl_merc, '9999999999990D99') || '|';
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_d162(i)(j)(k).qtd_vol || '|';
                     gl_conteudo := gl_conteudo || fkg_formata_num(vt_tri_tab_reg_d162(i)(j)(k).peso_btr, '9999999999990D99') || '|';
                     gl_conteudo := gl_conteudo || fkg_formata_num(vt_tri_tab_reg_d162(i)(j)(k).peso_liq, '9999999999990D99') || '|';
                     --
                     vn_fase := 14.6;
                     --
                     pkb_armaz_estr_arq_efd ( ev_reg_blc   => 'D162'
                                            , el_conteudo  => gl_conteudo );
                     --
                     vn_fase := 14.7;
                     --
                     if k = vt_tri_tab_reg_d162(i)(j).last then
                        exit;
                     else
                        k := vt_tri_tab_reg_d162(i)(j).next(k);
                     end if;
                     --
                  end loop;
                  --
               end if;
               --
               vn_fase := 15;
               --
               if j = vt_bi_tab_reg_d160(i).last then
                  exit;
               else
                  j := vt_bi_tab_reg_d160(i).next(j);
               end if;
               --
            end loop;
            --
         end if;
         --
         vn_fase := 16;
         -- REGISTRO D170: COMPLEMENTO DO CONHECIMENTO MULTIMODAL DE CARGAS (CÓDIGO 26)
         begin
            vn_qtde_reg_d170 := vt_bi_tab_reg_d170(i).count;
         exception
            when others then
               vn_qtde_reg_d170 := 0;
         end;
         --
         vn_fase := 16.1;
         --
         if nvl(vn_qtde_reg_d170,0) > 0 then
            --
            vn_fase := 16.2;
            --
            j := vt_bi_tab_reg_d170(i).first;
            --
            vn_fase := 16.3;
            --
            loop
               --
               vn_fase := 16.4;
               --
               if nvl(j,0) = 0 then
                  exit;
               end if;
               --
               vn_fase := 16.5;
               -- cria a estrutura do registro separado por PIPE "|"
               gl_conteudo := '|';
               --
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_d170(i)(j).reg || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_d170(i)(j).cod_part_consg || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_d170(i)(j).cod_part_red || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_d170(i)(j).cod_mun_orig || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_d170(i)(j).cod_mun_dest || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_d170(i)(j).otm || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_d170(i)(j).ind_nat_frt || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_d170(i)(j).vl_liq_frt, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_d170(i)(j).vl_gris, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_d170(i)(j).vl_pdg, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_d170(i)(j).vl_out, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_d170(i)(j).vl_frt, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_d170(i)(j).veic_id || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_d170(i)(j).uf_id || '|';
               --
               vn_fase := 16.6;
               --
               pkb_armaz_estr_arq_efd ( ev_reg_blc   => 'D170'
                                      , el_conteudo  => gl_conteudo );
               --
               vn_fase := 16.7;
               --
               if j = vt_bi_tab_reg_d170(i).last then
                  exit;
               else
                  j := vt_bi_tab_reg_d170(i).next(j);
               end if;
               --
            end loop;
            --
         end if;
         --
         vn_fase := 17;
         -- REGISTRO D180: MODAIS (CÓDIGO 26)
         begin
            vn_qtde_reg_d180 := vt_bi_tab_reg_d180(i).count;
         exception
            when others then
               vn_qtde_reg_d180 := 0;
         end;
         --
         vn_fase := 17.1;
         --
         if nvl(vn_qtde_reg_d180,0) > 0 then
            --
            vn_fase := 17.2;
            --
            j := vt_bi_tab_reg_d180(i).first;
            --
            vn_fase := 17.3;
            --
            loop
               --
               vn_fase := 17.4;
               --
               if nvl(j,0) = 0 then
                  exit;
               end if;
               --
               vn_fase := 17.5;
               -- cria a estrutura do registro separado por PIPE "|"
               gl_conteudo := '|';
               --
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_d180(i)(j).reg || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_d180(i)(j).num_seq || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_d180(i)(j).ind_emit || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_d180(i)(j).cnpj_cpf_emit || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_d180(i)(j).uf_emit || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_d180(i)(j).ie_emit || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_d180(i)(j).cod_mun_orig || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_d180(i)(j).cnpj_cpf_tom || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_d180(i)(j).uf_tom || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_d180(i)(j).ie_tom || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_d180(i)(j).cod_mun_dest || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_d180(i)(j).cod_mod || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_d180(i)(j).ser || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_d180(i)(j).sub || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_d180(i)(j).num_doc || '|';
               gl_conteudo := gl_conteudo || to_char(vt_bi_tab_reg_d180(i)(j).dt_doc, 'ddmmrrrr') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_d180(i)(j).vl_doc, '9999999999990D99') || '|';
               --
               vn_fase := 17.6;
               --
               pkb_armaz_estr_arq_efd ( ev_reg_blc   => 'D180'
                                      , el_conteudo  => gl_conteudo );
               --
               vn_fase := 17.7;
               --
               if j = vt_bi_tab_reg_d180(i).last then
                  exit;
               else
                  j := vt_bi_tab_reg_d180(i).next(j);
               end if;
               --
            end loop;
            --
         end if;
         --
         vn_fase := 18;
         --
         begin
            vn_qtde_reg_d190 := vt_bi_tab_reg_d190(i).count;
         exception
            when others then
               vn_qtde_reg_d190 := 0;
         end;
         --
         vn_fase := 18.1;
         --
         if nvl(vn_qtde_reg_d190,0) > 0 then
            --
            vn_fase := 18.2;
            --
            j := vt_bi_tab_reg_d190(i).first;
            --
            vn_fase := 18.3;
            --
            loop
               --
               vn_fase := 18.4;
               --
               if nvl(j,0) = 0 then
                  exit;
               end if;
               --
               vn_fase := 18.5;
               -- cria a estrutura do registro separado por PIPE "|"
               gl_conteudo := '|';
               --
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_d190(i)(j).reg || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_d190(i)(j).cst_icms || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_d190(i)(j).cfop || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_d190(i)(j).aliq_icms, '990D99') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_d190(i)(j).vl_opr, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_d190(i)(j).vl_bc_icms, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_d190(i)(j).vl_icms, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_d190(i)(j).vl_red_bc, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_d190(i)(j).cod_obs || '|';
               --
               vn_fase := 18.6;
               --
               pkb_armaz_estr_arq_efd ( ev_reg_blc   => 'D190'
                                      , el_conteudo  => gl_conteudo );
               --
               vn_fase := 18.7;
               --
               if j = vt_bi_tab_reg_d190(i).last then
                  exit;
               else
                  j := vt_bi_tab_reg_d190(i).next(j);
               end if;
               --
            end loop; -- fim D190
            --
         end if;
         --
         vn_fase := 19;
         --
         begin
            vn_qtde_reg_d195 := vt_bi_tab_reg_d195(i).count;
         exception
            when others then
               vn_qtde_reg_d195 := 0;
         end;
         --
         vn_fase := 19.1;
         --
         if nvl(vn_qtde_reg_d195,0) > 0 then
            --
            vn_fase := 19.2;
            --
            j := vt_bi_tab_reg_d195(i).first;
            --
            vn_fase := 19.3;
            --
            loop
               --
               vn_fase := 19.4;
               --
               if nvl(j,0) = 0 then
                  exit;
               end if;
               --
               vn_fase := 19.5;
               -- cria a estrutura do registro separado por PIPE "|"
               gl_conteudo := '|';
               --
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_d195(i)(j).reg || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_d195(i)(j).cod_obs || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_d195(i)(j).txt_compl || '|';
               --
               vn_fase := 19.6;
               --
               pkb_armaz_estr_arq_efd ( ev_reg_blc   => 'D195'
                                      , el_conteudo  => gl_conteudo );
               --
               vn_fase := 20;
               --
               -- REGISTRO D197
               --
               begin
                  vn_qtde_reg_d197 := vt_tri_tab_reg_d197(i)(j).count;
               exception
                  when others then
                     vn_qtde_reg_d197 := 0;
               end;
               --
               vn_fase := 20.1;
               --
               if nvl(vn_qtde_reg_d197,0) > 0 then
                  --
                  vn_fase := 20.2;
                  --
                  k := nvl(vt_tri_tab_reg_d197(i)(j).first,0);
                  --
                  vn_fase := 20.3;
                  --
                  loop
                     --
                     vn_fase := 20.4;
                     --
                     if nvl(k,0) = 0 then
                        exit;
                     end if;
                     --
                     dbms_output.put_line('Gravação => K: ' || k || ' J: ' || j || ' I: ' || i);
                     --
                     vn_fase := 20.5;
                     -- Cria a estrutura do registro separado por PIPE "|"
                     gl_conteudo := '|';
                     --
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_d197(i)(j)(k).reg || '|';
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_d197(i)(j)(k).cod_aj || '|';
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_d197(i)(j)(k).descr_compl_aj || '|';
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_d197(i)(j)(k).cod_item  || '|';
                     gl_conteudo := gl_conteudo || fkg_formata_num(vt_tri_tab_reg_d197(i)(j)(k).vl_bc_icms, '9999999999990D99') || '|';
                     gl_conteudo := gl_conteudo || fkg_formata_num(vt_tri_tab_reg_d197(i)(j)(k).aliq_icms, '990D99') || '|';
                     gl_conteudo := gl_conteudo || fkg_formata_num(vt_tri_tab_reg_d197(i)(j)(k).vl_icms, '9999999999990D99') || '|';
                     gl_conteudo := gl_conteudo || fkg_formata_num(vt_tri_tab_reg_d197(i)(j)(k).vl_outros, '9999999999990D99') || '|';
                     --
                     vn_fase := 20.6;
                     --
                     pkb_armaz_estr_arq_efd ( ev_reg_blc   => 'D197'
                                            , el_conteudo  => gl_conteudo );
                     --
                     vn_fase := 20.7;
                     --
                     if k = vt_tri_tab_reg_d197(i)(j).last then
                        exit;
                     else
                        k := vt_tri_tab_reg_d197(i)(j).next(k);
                     end if;
                     --
                  end loop;
                  --
               end if; -- fim D197
               --
               if j = vt_bi_tab_reg_d195(i).last then
                  exit;
               else
                  j := vt_bi_tab_reg_d195(i).next(j);
               end if;
               --
            end loop;
            --
         end if; -- fim D195
         --
         vn_fase := 21;
         --
         if i = vt_tab_reg_d100.last then
            exit;
         else
            i := vt_tab_reg_d100.next(i);
         end if;
         --
      end loop;
      --
   end if;
   --
exception
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_armaz_reg_d100 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end pkb_armaz_reg_d100;

-------------------------------------------------------------------------------------------------------

-- Armazena em arquivo o REGISTRO D001: ABERTURA DO BLOCO D
procedure pkb_armaz_reg_d001
is
   --
   vn_fase  number := 0;
   i        pls_integer;
   --
begin
   --
   vn_fase := 1;
   --
   if nvl(vt_tab_reg_d001.count,0) > 0 then
      --
      vn_fase := 2;
      --
      i := nvl(vt_tab_reg_d001.first,0);
      --
      vn_fase := 3;
      --
      loop
         --
         vn_fase := 4;
         --
         if nvl(i,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 5;
         -- cria a estrutura do registro separado por PIPE "|"
         gl_conteudo := '|';
         --
         gl_conteudo := gl_conteudo || vt_tab_reg_d001(i).reg || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_d001(i).ind_mov || '|';
         --
         vn_fase := 6;
         --
         pkb_armaz_estr_arq_efd ( ev_reg_blc   => 'D001'
                                , el_conteudo  => gl_conteudo );
         --
         vn_fase := 7;
         --
         if i = vt_tab_reg_d001.last then
            exit;
         else
            i := vt_tab_reg_d001.next(i);
         end if;
         --
      end loop;
      --
   end if;
   --
exception
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_armaz_reg_d001 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end pkb_armaz_reg_d001;

-------------------------------------------------------------------------------------------------------

-- Armazena em arquivo dados do BLOCO D: DOCUMENTOS FISCAIS II - SERVIÇOS (ICMS)
procedure pkb_armaz_arq_bloco_d
is
   --
   vn_fase  number := 0;
   --
begin
   --
   vn_fase := 1;
   -- Armazena em arquivo o REGISTRO D001: ABERTURA DO BLOCO D
   pkb_armaz_reg_d001;
   --
   vn_fase := 2;
   -- Armazena em arquivo o REGISTRO D100: NOTA FISCAL DE SERVIÇO DE TRANSPORTE
   pkb_armaz_reg_d100;
   --
   vn_fase := 3;
   -- Armazena em arquivo o REGISTRO D300: REGISTRO ANALÍTICO DOS BILHETES
   pkb_armaz_reg_d300;
   --
   vn_fase := 4;
   -- Armazena em arquivo o REGISTRO D350 EQUIPAMENTO ECF (CÓDIGOS 2E, 13, 14, 15 e 16)
   pkb_armaz_reg_d350;
   --
   vn_fase := 5;
   -- Armazena em arquivo o REGISTRO D400: RESUMO DE MOVIMENTO DIÁRIO - RMD
   pkb_armaz_reg_d400;
   --
   vn_fase := 6;
   -- Armazena em arquivo o REGISTRO D500: NOTA FISCAL DE SERVIÇO DE COMUNICAÇÃO (CÓDIGO 21) E NOTA FISCAL DE SERVIÇO DE TELECOMUNICAÇÃO (CÓDIGO 22)
   pkb_armaz_reg_d500;
   --
   vn_fase := 7;
   -- Armazena em arquivo o REGISTRO D600: CONSOLIDAÇÃO DA PRESTAÇÃO DE SERVIÇOS
   pkb_armaz_reg_d600;
   --
   vn_fase := 8;
   -- Armazena em arquivo o REGISTRO D695: CONSOLIDAÇÃO DA PRESTAÇÃO DE SERVIÇOS
   pkb_armaz_reg_d695;
   --
   vn_fase := 9;
   -- Armazena em arquivo o REGISTRO D990: ENCERRAMENTO DO BLOCO D
   pkb_armaz_reg_d990;
   --
exception
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_armaz_arq_bloco_d fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end pkb_armaz_arq_bloco_d;

-------------------------------------------------------------------------------------------------------

-- Armazena em arquivo o REGISTRO C990: ENCERRAMENTO DO BLOCO C
procedure pkb_armaz_reg_c990
is
   --
   vn_fase  number := 0;
   i        pls_integer;
   --
begin
   --
   vn_fase := 1;
   --
   if nvl(vt_tab_reg_c990.count,0) > 0 then
      --
      vn_fase := 2;
      --
      i := nvl(vt_tab_reg_c990.first,0);
      --
      vn_fase := 3;
      --
      loop
         --
         vn_fase := 4;
         --
         if nvl(i,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 5;
         -- cria a estrutura do registro separado por PIPE "|"
         gl_conteudo := '|';
         --
         gl_conteudo := gl_conteudo || vt_tab_reg_c990(i).reg || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_c990(i).qtd_lin_c || '|';
         --
         vn_fase := 6;
         --
         pkb_armaz_estr_arq_efd ( ev_reg_blc   => 'C990'
                                , el_conteudo  => gl_conteudo );
         --
         vn_fase := 7;
         --
         if i = vt_tab_reg_c990.last then
            exit;
         else
            i := vt_tab_reg_c990.next(i);
         end if;
         --
      end loop;
      --
   end if;
   --
exception
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_armaz_reg_c990 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end pkb_armaz_reg_c990;

-------------------------------------------------------------------------------------------------------

-- Armazena em arquivo o C860: IDENTIFICAÇÃO DO EQUIPAMENTO SAT-CF-E
procedure pkb_armaz_reg_c860
is
   --
   vn_fase           number := 0;
   i                 pls_integer;
   j                 pls_integer;
   vn_qtde_reg_c890  number := 0;
   --
begin
   --
   vn_fase := 1;
   --
   if nvl(vt_tab_reg_c860.count,0) > 0 then
      --
      vn_fase := 2;
      --
      i := vt_tab_reg_c860.first;
      --
      vn_fase := 3;
      --
      loop
         --
         vn_fase := 4;
         --
         if nvl(i,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 5;
         -- cria a estrutura do registro separado por PIPE "|"
         gl_conteudo := '|';
         --
         gl_conteudo := gl_conteudo || vt_tab_reg_c860(i).reg || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_c860(i).cod_mod || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_c860(i).nr_sat || '|';
         gl_conteudo := gl_conteudo || to_char(vt_tab_reg_c860(i).dt_doc, 'ddmmrrrr') || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_c860(i).doc_ini || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_c860(i).doc_fim || '|';
         --
         vn_fase := 6;
         --
         pkb_armaz_estr_arq_efd ( ev_reg_blc   => 'C860'
                                , el_conteudo  => gl_conteudo );
         --
         vn_fase := 7;
         -- REGISTRO C890: RESUMO DIÁRIO DO CF-E-SAT (CÓDIGO 59) POR EQUIPAMENTO SAT-CF-E
         begin
            vn_qtde_reg_c890 := vt_bi_tab_reg_c890(i).count;
         exception
            when others then
               vn_qtde_reg_c890 := 0;
         end;
         --
         vn_fase := 7.1;
         --
         if nvl(vn_qtde_reg_c890,0) > 0 then
            --
            vn_fase := 7.2;
            --
            j := vt_bi_tab_reg_c890(i).first;
            --
            vn_fase := 7.3;
            --
            loop
               --
               vn_fase := 7.4;
               --
               if nvl(j,0) = 0 then
                  exit;
               end if;
               --
               vn_fase := 7.5;
               -- cria a estrutura do registro separado por PIPE "|"
               gl_conteudo := '|';
               --
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_c890(i)(j).reg || '|';
               gl_conteudo := gl_conteudo || lpad(vt_bi_tab_reg_c890(i)(j).cst_icms,3,'0') || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_c890(i)(j).cfop || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_c890(i)(j).aliq_icms, '9990D99') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_c890(i)(j).vl_opr, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_c890(i)(j).vl_bc_icms, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_c890(i)(j).vl_icms, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_c890(i)(j).cod_obs || '|';
               --
               vn_fase := 7.6;
               --
               pkb_armaz_estr_arq_efd ( ev_reg_blc   => 'C890'
                                      , el_conteudo  => gl_conteudo );
               --
               vn_fase := 7.7;
               --
               if j = vt_bi_tab_reg_c890(i).last then
                  exit;
               else
                  j := vt_bi_tab_reg_c890(i).next(j);
               end if;
               --
            end loop;
            --
         end if;
         --
         vn_fase := 8;
         --
         if i = vt_tab_reg_c860.last then
            exit;
         else
            i := vt_tab_reg_c860.next(i);
         end if;
         --
      end loop;
      --
   end if;
   --
exception
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_armaz_reg_c860 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end pkb_armaz_reg_c860;

-------------------------------------------------------------------------------------------------------

-- Armazena em arquivo o REGISTRO C800: CUPOM FISCAL ELETRÔNICO - SAT (CF-E-SAT) (CÓDIGO 59)
procedure pkb_armaz_reg_c800
is
   --
   vn_fase           number := 0;
   i                 pls_integer;
   j                 pls_integer;
   vn_qtde_reg_c850  number := 0;
   --
begin
   --
   vn_fase := 1;
   --
   if nvl(vt_tab_reg_c800.count,0) > 0 then
      --
      vn_fase := 2;
      --
      i := vt_tab_reg_c800.first;
      --
      vn_fase := 3;
      --
      loop
         --
         vn_fase := 4;
         --
         if nvl(i,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 5;
         -- cria a estrutura do registro separado por PIPE "|"
         gl_conteudo := '|';
         --
         gl_conteudo := gl_conteudo || vt_tab_reg_c800(i).reg || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_c800(i).cod_mod || '|';
         gl_conteudo := gl_conteudo || lpad(vt_tab_reg_c800(i).cod_sit,2,'0') || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_c800(i).num_cfe || '|';
         gl_conteudo := gl_conteudo || to_char(vt_tab_reg_c800(i).dt_doc, 'ddmmrrrr') || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_c800(i).vl_cfe, '9999999999990D99') || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_c800(i).vl_pis, '9999999999990D99') || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_c800(i).vl_cofins, '9999999999990D99') || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_c800(i).cnpj_cpf || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_c800(i).nr_sat || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_c800(i).chv_cfe || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_c800(i).vl_desc, '9999999999990D99') || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_c800(i).vl_merc, '9999999999990D99') || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_c800(i).vl_out_da, '9999999999990D99') || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_c800(i).vl_icms, '9999999999990D99') || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_c800(i).vl_pis_st, '9999999999990D99') || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_c800(i).vl_cofins_st, '9999999999990D99') || '|';
         --
         vn_fase := 6;
         --
         pkb_armaz_estr_arq_efd ( ev_reg_blc   => 'C800'
                                , el_conteudo  => gl_conteudo );
         --
         vn_fase := 7;
         -- REGISTRO C850: REGISTRO ANALÍTICO DO CF-E-SAT (CODIGO 59)
         begin
            vn_qtde_reg_c850 := vt_bi_tab_reg_c850(i).count;
         exception
            when others then
               vn_qtde_reg_c850 := 0;
         end;
         --
         vn_fase := 7.1;
         --
         if nvl(vn_qtde_reg_c850,0) > 0 then
            --
            vn_fase := 7.2;
            --
            j := vt_bi_tab_reg_c850(i).first;
            --
            vn_fase := 7.3;
            --
            loop
               --
               vn_fase := 7.4;
               --
               if nvl(j,0) = 0 then
                  exit;
               end if;
               --
               vn_fase := 7.5;
               -- cria a estrutura do registro separado por PIPE "|"
               gl_conteudo := '|';
               --
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_c850(i)(j).reg || '|';
               gl_conteudo := gl_conteudo || lpad(vt_bi_tab_reg_c850(i)(j).cst_icms,3,'0') || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_c850(i)(j).cfop || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_c850(i)(j).aliq_icms, '9990D99') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_c850(i)(j).vl_opr, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_c850(i)(j).vl_bc_icms, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_c850(i)(j).vl_icms, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_c850(i)(j).cod_obs || '|';
               --
               vn_fase := 7.6;
               --
               pkb_armaz_estr_arq_efd ( ev_reg_blc   => 'C850'
                                      , el_conteudo  => gl_conteudo );
               --
               vn_fase := 7.7;
               --
               if j = vt_bi_tab_reg_c850(i).last then
                  exit;
               else
                  j := vt_bi_tab_reg_c850(i).next(j);
               end if;
               --
            end loop;
            --
         end if;
         --
         vn_fase := 8;
         --
         if i = vt_tab_reg_c800.last then
            exit;
         else
            i := vt_tab_reg_c800.next(i);
         end if;
         --
      end loop;
      --
   end if;
   --
exception
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_armaz_reg_c800 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end pkb_armaz_reg_c800;

-------------------------------------------------------------------------------------------------------

-- Armazena em arquivo o REGISTRO C700: CONSOLIDAÇÃO DOS DOCUMENTOS
procedure pkb_armaz_reg_c700
is
   --
   vn_fase           number := 0;
   i                 pls_integer;
   j                 pls_integer;
   k                 pls_integer;
   vn_qtde_reg_c790  number;
   vn_qtde_reg_c791  number;
   --
begin
   --
   vn_fase := 1;
   --
   if nvl(vt_tab_reg_c700.count,0) > 0 then
      --
      vn_fase := 2;
      --
      i := vt_tab_reg_c700.first;
      --
      vn_fase := 3;
      --
      loop
         --
         vn_fase := 4;
         --
         if nvl(i,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 5;
         -- cria a estrutura do registro separado por PIPE "|"
         gl_conteudo := '|';
         --
         gl_conteudo := gl_conteudo || vt_tab_reg_c700(i).reg || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_c700(i).cod_mod || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_c700(i).ser || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_c700(i).nro_ord_ini || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_c700(i).nro_ord_fin || '|';
         gl_conteudo := gl_conteudo || to_char(vt_tab_reg_c700(i).dt_doc_ini, 'ddmmrrrr') || '|';
         gl_conteudo := gl_conteudo || to_char(vt_tab_reg_c700(i).dt_doc_fin, 'ddmmrrrr') || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_c700(i).nom_mest || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_c700(i).chv_cod_dig || '|';
         --
         vn_fase := 6;
         --
         pkb_armaz_estr_arq_efd ( ev_reg_blc   => 'C700'
                                , el_conteudo  => gl_conteudo );
         --
         vn_fase := 7;
         -- REGISTRO C790: REGISTRO ANALÍTICO DOS DOCUMENTOS (CÓDIGO 06)
         begin
            vn_qtde_reg_c790 := vt_bi_tab_reg_c790(i).count;
         exception
            when others then
               vn_qtde_reg_c790 := 0;
         end;
         --
         vn_fase := 7.1;
         --
         if nvl(vn_qtde_reg_c790,0) > 0 then
            --
            vn_fase := 7.2;
            --
            j := vt_bi_tab_reg_c790(i).first;
            --
            vn_fase := 7.3;
            --
            loop
               --
               vn_fase := 7.4;
               --
               if nvl(j,0) = 0 then
                  exit;
               end if;
               --
               vn_fase := 7.5;
               -- cria a estrutura do registro separado por PIPE "|"
               gl_conteudo := '|';
               --
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_c790(i)(j).reg || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_c790(i)(j).cst_icms || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_c790(i)(j).cfop || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_c790(i)(j).aliq_icms, '990D99') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_c790(i)(j).vl_opr, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_c790(i)(j).vl_bc_icms, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_c790(i)(j).vl_icms, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_c790(i)(j).vl_bc_icms_st, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_c790(i)(j).vl_icms_st, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_c790(i)(j).vl_red_bc, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_c790(i)(j).cod_obs || '|';
               --
               vn_fase := 7.6;
               --
               pkb_armaz_estr_arq_efd ( ev_reg_blc   => 'C790'
                                      , el_conteudo  => gl_conteudo );
               --
               vn_fase := 8;
               -- REGISTRO C791: REGISTRO DE INFORMAÇÕES DE ST POR UF (COD 06)
               begin
                  vn_qtde_reg_c791 := vt_tri_tab_reg_c791(i)(j).count;
               exception
                  when others then
                     vn_qtde_reg_c791 := 0;
               end;
               --
               vn_fase := 8.1;
               --
               if nvl(vn_qtde_reg_c791,0) > 0 then
                  --
                  vn_fase := 8.2;
                  --
                  k := vt_tri_tab_reg_c791(i)(j).first;
                  --
                  vn_fase := 8.3;
                  --
                  loop
                     --
                     vn_fase := 8.4;
                     --
                     if nvl(k,0) = 0 then
                        exit;
                     end if;
                     --
                     vn_fase := 8.5;
                     -- cria a estrutura do registro separado por PIPE "|"
                     gl_conteudo := '|';
                     --
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_c791(i)(j)(k).reg || '|';
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_c791(i)(j)(k).uf || '|';
                     gl_conteudo := gl_conteudo || fkg_formata_num(vt_tri_tab_reg_c791(i)(j)(k).vl_bc_icms_st, '9999999999990D99') || '|';
                     gl_conteudo := gl_conteudo || fkg_formata_num(vt_tri_tab_reg_c791(i)(j)(k).vl_icms_st, '9999999999990D99') || '|';
                     --
                     vn_fase := 8.6;
                     --
                     pkb_armaz_estr_arq_efd ( ev_reg_blc   => 'C791'
                                            , el_conteudo  => gl_conteudo );
                     --
                     vn_fase := 8.7;
                     --
                     if k = vt_tri_tab_reg_c791(i)(j).last then
                        exit;
                     else
                        k := vt_tri_tab_reg_c791(i)(j).next(k);
                     end if;
                     --
                  end loop;
                  --
               end if;
               --
               vn_fase := 8.8;
               --
               if j = vt_bi_tab_reg_c790(i).last then
                  exit;
               else
                  j := vt_bi_tab_reg_c790(i).next(j);
               end if;
               --
            end loop;
            --
         end if;
         --
         vn_fase := 9;
         --
         if i = vt_tab_reg_c700.last then
            exit;
         else
            i := vt_tab_reg_c700.next(i);
         end if;
         --
      end loop;
      --
   end if;
   --
exception
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_armaz_reg_c700 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end pkb_armaz_reg_c700;

-------------------------------------------------------------------------------------------------------

-- Armazena em arquivo o  REGISTRO C600: CONSOLIDAÇÃO DIÁRIA DE NOTAS FISCAIS/CONTAS DE ENERGIA ELÉTRICA
procedure pkb_armaz_reg_c600
is
   --
   vn_fase           number := 0;
   i                 pls_integer;
   j                 pls_integer;
   vn_qtde_reg_c601  number;
   vn_qtde_reg_c610  number;
   vn_qtde_reg_c690  number;
   --
begin
   --
   vn_fase := 1;
   --
   if nvl(vt_tab_reg_c600.count,0) > 0 then
      --
      vn_fase := 2;
      --
      i := vt_tab_reg_c600.first;
      --
      vn_fase := 3;
      --
      loop
         --
         vn_fase := 4;
         --
         if nvl(i,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 5;
         -- cria a estrutura do registro separado por PIPE "|"
         gl_conteudo := '|';
         --
         gl_conteudo := gl_conteudo || vt_tab_reg_c600(i).reg || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_c600(i).cod_mod || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_c600(i).cod_mun || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_c600(i).ser || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_c600(i).sub || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_c600(i).cod_cons || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_c600(i).qtd_cons || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_c600(i).qtd_canc || '|';
         gl_conteudo := gl_conteudo || to_char(vt_tab_reg_c600(i).dt_doc, 'ddmmrrrr') || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_c600(i).vl_doc, '9999999999990D99') || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_c600(i).vl_desc, '9999999999990D99') || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_c600(i).cons || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_c600(i).vl_forn, '9999999999990D99') || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_c600(i).vl_serv_nt, '9999999999990D99') || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_c600(i).vl_terc, '9999999999990D99') || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_c600(i).vl_da, '9999999999990D99') || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_c600(i).vl_bc_icms, '9999999999990D99') || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_c600(i).vl_icms, '9999999999990D99') || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_c600(i).vl_bc_icms_st, '9999999999990D99') || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_c600(i).vl_icms_st, '9999999999990D99') || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_c600(i).vl_pis, '9999999999990D99') || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_c600(i).vl_cofins, '9999999999990D99') || '|';
         --
         vn_fase := 6;
         --
         pkb_armaz_estr_arq_efd ( ev_reg_blc   => 'C600'
                                , el_conteudo  => gl_conteudo );
         --
         vn_fase := 7;
         -- REGISTRO C601: DOCUMENTOS CANCELADOS
         begin
            vn_qtde_reg_c601 := vt_bi_tab_reg_c601(i).count;
         exception
            when others then
               vn_qtde_reg_c601 := 0;
         end;
         --
         vn_fase := 7.1;
         --
         if nvl(vn_qtde_reg_c601,0) > 0 then
            --
            vn_fase := 7.2;
            --
            j := vt_bi_tab_reg_c601(i).first;
            --
            vn_fase := 7.3;
            --
            loop
               --
               vn_fase := 7.4;
               --
               if nvl(j,0) = 0 then
                  exit;
               end if;
               --
               vn_fase := 7.5;
               --
               gl_conteudo := '|';
               --
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_c601(i)(j).reg || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_c601(i)(j).num_doc_canc || '|';
               --
               vn_fase := 7.6;
               --
               pkb_armaz_estr_arq_efd ( ev_reg_blc   => 'C601'
                                      , el_conteudo  => gl_conteudo );
               --
               vn_fase := 7.7;
               --
               if j = vt_bi_tab_reg_c601(i).last then
                  exit;
               else
                  j := vt_bi_tab_reg_c601(i).next(j);
               end if;
               --
            end loop;
            --
         end if;
         --
         vn_fase := 8;
         -- REGISTRO C610: ITENS DO DOCUMENTO CONSOLIDADO
         begin
            vn_qtde_reg_c610 := vt_bi_tab_reg_c610(i).count;
         exception
            when others then
               vn_qtde_reg_c610 := 0;
         end;
         --
         vn_fase := 8.1;
         --
         if nvl(vn_qtde_reg_c610,0) > 0 then
            --
            vn_fase := 8.2;
            --
            j := vt_bi_tab_reg_c610(i).first;
            --
            vn_fase := 8.3;
            --
            loop
               --
               vn_fase := 8.4;
               --
               if nvl(j,0) = 0 then
                  exit;
               end if;
               --
               vn_fase := 8.5;
               --
               gl_conteudo := '|';
               --
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_c610(i)(j).reg || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_c610(i)(j).cod_class || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_c610(i)(j).cod_item || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_c610(i)(j).qtd, '9999999999990D999') || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_c610(i)(j).unid || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_c610(i)(j).vl_item, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_c610(i)(j).vl_desc, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_c610(i)(j).cst_icms || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_c610(i)(j).cfop || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_c610(i)(j).aliq_icms, '990D99') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_c610(i)(j).vl_bc_icms, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_c610(i)(j).vl_icms, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_c610(i)(j).vl_bc_icms_st, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_c610(i)(j).vl_icms_st, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_c610(i)(j).vl_pis, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_c610(i)(j).vl_cofins, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_c610(i)(j).cod_cta || '|';
               --
               vn_fase := 8.6;
               --
               pkb_armaz_estr_arq_efd ( ev_reg_blc   => 'C610'
                                      , el_conteudo  => gl_conteudo );
               --
               vn_fase := 8.7;
               --
               if j = vt_bi_tab_reg_c610(i).last then
                  exit;
               else
                  j := vt_bi_tab_reg_c610(i).next(j);
               end if;
               --
            end loop;
            --
         end if;
         --
         vn_fase := 9;
         -- REGISTRO C690: REGISTRO ANALÍTICO DOS DOCUMENTOS
         begin
            vn_qtde_reg_c690 := vt_bi_tab_reg_c690(i).count;
         exception
            when others then
               vn_qtde_reg_c690 := 0;
         end;
         --
         vn_fase := 9.1;
         --
         if nvl(vn_qtde_reg_c690,0) > 0 then
            --
            vn_fase := 9.2;
            --
            j := vt_bi_tab_reg_c690(i).first;
            --
            vn_fase := 9.3;
            --
            loop
               --
               vn_fase := 9.4;
               --
               if nvl(j,0) = 0 then
                  exit;
               end if;
               --
               vn_fase := 9.5;
               --
               gl_conteudo := '|';
               --
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_c690(i)(j).reg || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_c690(i)(j).cst_icms || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_c690(i)(j).cfop || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_c690(i)(j).aliq_icms, '990D99') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_c690(i)(j).vl_opr, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_c690(i)(j).vl_bc_icms, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_c690(i)(j).vl_icms, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_c690(i)(j).vl_red_bc, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_c690(i)(j).vl_bc_icms_st, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_c690(i)(j).vl_icms_st, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_c690(i)(j).cod_obs || '|';
               --
               vn_fase := 9.6;
               --
               pkb_armaz_estr_arq_efd ( ev_reg_blc   => 'C690'
                                      , el_conteudo  => gl_conteudo );
               --
               vn_fase := 9.7;
               --
               if j = vt_bi_tab_reg_c690(i).last then
                  exit;
               else
                  j := vt_bi_tab_reg_c690(i).next(j);
               end if;
               --
            end loop;
            --
         end if;
         --
         vn_fase := 10;
         --
         if i = vt_tab_reg_c600.last then
            exit;
         else
            i := vt_tab_reg_c600.next(i);
         end if;
         --
      end loop;
      --
   end if;
   --
exception
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_armaz_reg_c600 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end pkb_armaz_reg_c600;

-------------------------------------------------------------------------------------------------------

-- NOVO TÍTULO: REGISTRO C500: NOTA FISCAL/CONTA DE ENERGIA ELÉTRICA (CÓDIGO 06), NOTA FISCAL/CONTA DE FORNECIMENTO D'ÁGUA CANALIZADA (CÓDIGO 29) E
-- NOTA FISCAL CONSUMO FORNECIMENTO DE GÁS (CÓDIGO 28)
-- Armazena em arquivo o REGISTRO C500: NOTA FISCAL/CONTA DE ENERGIA ELÉTRICA (CÓDIGO 06) E NOTA FISCAL CONSUMO FORNECIMENTO DE GÁS (CÓDIGO 28)
procedure pkb_armaz_reg_c500
is
   --
   vn_fase          number := 0;
   i                pls_integer;
   j                pls_integer;
   k                pls_integer;
   vn_qtde_reg_c510 number;
   vn_qtde_reg_c590 number;
   vn_qtde_reg_c591 number;
   vn_qtde_reg_c595 number;
   vn_qtde_reg_c597 number;
   --
begin
   --
   vn_fase := 1;
   --
   if nvl(vt_tab_reg_c500.count,0) > 0 then
      --
      vn_fase := 2;
      --
      i := nvl(vt_tab_reg_c500.first,0);
      --
      vn_fase := 3;
      --
      loop
         --
         vn_fase := 4;
         --
         if nvl(i,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 5;
         -- cria a estrutura do registro separado por PIPE "|"
         gl_conteudo := '|';
         --
         gl_conteudo := gl_conteudo || vt_tab_reg_c500(i).reg || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_c500(i).ind_oper || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_c500(i).ind_emit || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_c500(i).cod_part || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_c500(i).cod_mod || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_c500(i).cod_sit || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_c500(i).ser || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_c500(i).sub || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_c500(i).cod_cons || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_c500(i).num_doc || '|';
         gl_conteudo := gl_conteudo || to_char(vt_tab_reg_c500(i).dt_doc, 'ddmmrrrr') || '|';
         gl_conteudo := gl_conteudo || to_char(vt_tab_reg_c500(i).dt_e_s, 'ddmmrrrr') || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_c500(i).vl_doc, '9999999999990D99') || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_c500(i).vl_desc, '9999999999990D99') || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_c500(i).vl_forn, '9999999999990D99') || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_c500(i).vl_serv_nt, '9999999999990D99') || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_c500(i).vl_terc, '9999999999990D99') || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_c500(i).vl_da, '9999999999990D99') || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_c500(i).vl_bc_icms, '9999999999990D99') || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_c500(i).vl_icms, '9999999999990D99') || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_c500(i).vl_bc_icms_st, '9999999999990D99') || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_c500(i).vl_icms_st, '9999999999990D99') || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_c500(i).cod_inf || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_c500(i).vl_pis, '9999999999990D99') || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_c500(i).vl_cofins, '9999999999990D99') || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_c500(i).tp_ligacao || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_c500(i).cod_grupo_tensao || '|';
         --
         if gn_versao >= 113 then -- versão válida a partir de 01/01/2020     
            -- 
            gl_conteudo := gl_conteudo || vt_tab_reg_c500(i).chave_nfe || '|';   
            gl_conteudo := gl_conteudo || vt_tab_reg_c500(i).fin_doc || '|';    
            gl_conteudo := gl_conteudo || vt_tab_reg_c500(i).chave_nfe_ref || '|'; 
            gl_conteudo := gl_conteudo || vt_tab_reg_c500(i).ind_dest || '|';   
            gl_conteudo := gl_conteudo || vt_tab_reg_c500(i).cod_mun_dest || '|'; 
            gl_conteudo := gl_conteudo || vt_tab_reg_c500(i).cod_cta || '|'; 
            --      
         end if;     
         --
         vn_fase := 6;
         --
         pkb_armaz_estr_arq_efd ( ev_reg_blc   => 'C500'
                                , el_conteudo  => gl_conteudo );
         --
         vn_fase := 7;
         -- NOVO TÍTULO: REGISTRO C510: ITENS DO DOCUMENTO - NOTA FISCAL/CONTA DE ENERGIA ELÉTRICA (CÓDIGO 06), NOTA FISCAL/CONTA DE FORNECIMENTO DÁGUA
         -- CANALIZADA (CÓDIGO 29) E NOTA FISCAL/CONTA FORNECIMENTO DE GÁS (CÓDIGO 28)
         -- REGISTRO C510: ITENS DO DOCUMENTO NOTA FISCAL/CONTA ENERGIA ELÉTRICA
         begin
            vn_qtde_reg_c510 := vt_bi_tab_reg_c510(i).count;
         exception
            when others then
               vn_qtde_reg_c510 := 0;
         end;
         --
         vn_fase := 7.1;
         --
         if nvl(vn_qtde_reg_c510,0) > 0 then
            --
            vn_fase := 7.2;
            --
            j := vt_bi_tab_reg_c510(i).first;
            --
            vn_fase := 7.3;
            --
            loop
               --
               vn_fase := 7.4;
               --
               if nvl(j,0) = 0 then
                  exit;
               end if;
               --
               vn_fase := 7.5;
               --
               -- cria a estrutura do registro separado por PIPE "|"
               gl_conteudo := '|';
               --
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_c510(i)(j).reg || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_c510(i)(j).num_item || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_c510(i)(j).cod_item || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_c510(i)(j).cod_class || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_c510(i)(j).qtd, '9999999999990D999') || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_c510(i)(j).unid || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_c510(i)(j).vl_item, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_c510(i)(j).vl_desc, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_c510(i)(j).cst_icms || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_c510(i)(j).cfop || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_c510(i)(j).vl_bc_icms, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_c510(i)(j).aliq_icms, '990D99') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_c510(i)(j).vl_icms, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_c510(i)(j).vl_bc_icms_st, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_c510(i)(j).aliq_st, '990D99') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_c510(i)(j).vl_icms_st, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_c510(i)(j).ind_rec || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_c510(i)(j).cod_part || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_c510(i)(j).vl_pis, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_c510(i)(j).vl_cofins, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_c510(i)(j).cod_cta || '|';
               --
               vn_fase := 7.6;
               --
               pkb_armaz_estr_arq_efd ( ev_reg_blc   => 'C510'
                                      , el_conteudo  => gl_conteudo );
               --
               vn_fase := 7.7;
               --
               if j = vt_bi_tab_reg_c510(i).last then
                  exit;
               else
                  j := vt_bi_tab_reg_c510(i).next(j);
               end if;
               --
            end loop;
            --
         end if;
         --
         vn_fase := 8;
         --
         begin
            vn_qtde_reg_c590 := vt_bi_tab_reg_c590(i).count;
         exception
            when others then
               vn_qtde_reg_c590 := 0;
         end;
         --
         vn_fase := 8.1;
         --
         if nvl(vn_qtde_reg_c590,0) > 0 then
            --
            vn_fase := 8.2;
            --
            j := vt_bi_tab_reg_c590(i).first;
            --
            vn_fase := 8.3;
            --
            loop
               --
               vn_fase := 8.4;
               --
               if nvl(j,0) = 0 then
                  exit;
               end if;
               --
               vn_fase := 8.5;
               -- cria a estrutura do registro separado por PIPE "|"
               gl_conteudo := '|';
               --
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_c590(i)(j).reg || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_c590(i)(j).cst_icms || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_c590(i)(j).cfop || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_c590(i)(j).aliq_icms, '990D99') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_c590(i)(j).vl_opr, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_c590(i)(j).vl_bc_icms, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_c590(i)(j).vl_icms, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_c590(i)(j).vl_bc_icms_st, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_c590(i)(j).vl_icms_st, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_c590(i)(j).vl_red_bc, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_c590(i)(j).cod_obs || '|';
               --
               vn_fase := 8.6;
               --
               pkb_armaz_estr_arq_efd ( ev_reg_blc   => 'C590'
                                      , el_conteudo  => gl_conteudo );
               --
               vn_fase := 9;
               --
               -- REGISTRO c591: INFORMAÇÕES DO FUNDO DE COMBATE À POBREZA - FCP - NA NFe (CÓDIGO 55)
               begin
                  vn_qtde_reg_c591 := vt_tri_tab_reg_c591(i)(j).count;
               exception
                  when others then
                     vn_qtde_reg_c591 := 0;
               end;
               --
               vn_fase := 9.1;
               --
               if nvl(vn_qtde_reg_c591,0) > 0 then
                  --
                  vn_fase := 9.2;
                  --
                  k := nvl(vt_tri_tab_reg_c591(i)(j).first,0);
                  --
                  vn_fase := 9.3;
                  --
                  loop
                     --
                     vn_fase := 9.4;
                     --
                     if nvl(k,0) = 0 then
                        exit;
                     end if;
                     --
                     vn_fase := 9.5;
                     -- cria a estrutura do registro separado por PIPE "|"
                     gl_conteudo := '|';
                     --
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_c591(i)(j)(k).reg || '|';
                     gl_conteudo := gl_conteudo || fkg_formata_num(vt_tri_tab_reg_c591(i)(j)(k).vl_fcp_op, '9999999999990D99') || '|';
                     gl_conteudo := gl_conteudo || fkg_formata_num(vt_tri_tab_reg_c591(i)(j)(k).vl_fcp_st, '9999999999990D99') || '|';
                     --
                     vn_fase := 9.6;
                     --
                     pkb_armaz_estr_arq_efd ( ev_reg_blc   => 'C591'
                                            , el_conteudo  => gl_conteudo );
                     --
                     vn_fase := 9.7;
                     --
                     if k = vt_tri_tab_reg_c591(i)(j).last then
                        exit;
                     else
                        k := vt_tri_tab_reg_c591(i)(j).next(k);
                     end if;
                     --
                  end loop; -- fim c591
                  --
               end if; -- fim c591
               --
         vn_fase := 10;        
         --                
         if j = vt_bi_tab_reg_c590(i).last then
                  exit;
               else
                  j := vt_bi_tab_reg_c590(i).next(j);
               end if;
               --
            end loop; -- fim C590
            --
         end if;
         --
         vn_fase := 11;
         -- NOVO TÍTULO: REGISTRO c595: OBSERVAÇOES DO LANÇAMENTO FISCAL (CÓDIGO 01, 1B, 04 E 55)
         -- REGISTRO c595: OBSERVAÇOES DO LANÇAMENTO FISCAL (CÓDIGO 01, 1B E 55)
         begin
            vn_qtde_reg_c595 := vt_bi_tab_reg_c595(i).count;
         exception
            when others then
               vn_qtde_reg_c595 := 0;
         end;
         --
         vn_fase := 11.1;
         --
         if nvl(vn_qtde_reg_c595,0) > 0 then
            --
            vn_fase := 11.2;
            --
            j := nvl(vt_bi_tab_reg_c595(i).first,0);
            --
            vn_fase := 11.3;
            --
            loop
               --
               vn_fase := 11.4;
               --
               if nvl(j,0) = 0 then
                  exit;
               end if;
               --
               vn_fase := 11.5;
               -- cria a estrutura do registro separado por PIPE "|"
               gl_conteudo := '|';
               --
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_c595(i)(j).reg || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_c595(i)(j).cod_obs || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_c595(i)(j).txt_compl || '|';
               --
               vn_fase := 11.6;
               --
               pkb_armaz_estr_arq_efd ( ev_reg_blc   => 'C595'
                                      , el_conteudo  => gl_conteudo );
               --
               vn_fase := 12;
               -- REGISTRO c597: OUTRAS OBRIGAÇÕES TRIBUTÁRIAS, AJUSTES E INFORMAÇÕES DE VALORES PROVENIENTES DE DOCUMENTO FISCAL
               begin
                  vn_qtde_reg_c597 := vt_tri_tab_reg_c597(i)(j).count;
               exception
                  when others then
                     vn_qtde_reg_c597 := 0;
               end;
               --
               vn_fase := 12.1;
               --
               if nvl(vn_qtde_reg_c597,0) > 0 then
                  --
                  vn_fase := 12.2;
                  --
                  k := nvl(vt_tri_tab_reg_c597(i)(j).first,0);
                  --
                  vn_fase := 12.3;
                  --
                  loop
                     --
                     vn_fase := 12.4;
                     --
                     if nvl(k,0) = 0 then
                        exit;
                     end if;
                     --
                     vn_fase := 12.5;
                     -- cria a estrutura do registro separado por PIPE "|"
                     gl_conteudo := '|';
                     --
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_c597(i)(j)(k).reg || '|';
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_c597(i)(j)(k).cod_aj || '|';
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_c597(i)(j)(k).descr_compl_aj || '|';
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_c597(i)(j)(k).cod_item || '|';
                     gl_conteudo := gl_conteudo || fkg_formata_num(vt_tri_tab_reg_c597(i)(j)(k).vl_bc_icms, '9999999999990D99') || '|';
                     gl_conteudo := gl_conteudo || fkg_formata_num(vt_tri_tab_reg_c597(i)(j)(k).aliq_icms, '990D99') || '|';
                     gl_conteudo := gl_conteudo || fkg_formata_num(vt_tri_tab_reg_c597(i)(j)(k).vl_icms, '9999999999990D99') || '|';
                     gl_conteudo := gl_conteudo || fkg_formata_num(vt_tri_tab_reg_c597(i)(j)(k).vl_outros, '9999999999990D99') || '|';
                     --
                     vn_fase := 12.6;
                     --
                     pkb_armaz_estr_arq_efd ( ev_reg_blc   => 'C597'
                                            , el_conteudo  => gl_conteudo );
                     --
                     vn_fase := 12.7;
                     --
                     if k = vt_tri_tab_reg_c597(i)(j).last then
                        exit;
                     else
                        k := vt_tri_tab_reg_c597(i)(j).next(k);
                     end if;
                     --
                  end loop; -- fim c597
                  --
               end if;
               --
               vn_fase := 12.8;
               --
               if j = vt_bi_tab_reg_c595(i).last then
                  exit;
               else
                  j := vt_bi_tab_reg_c595(i).next(j);
               end if;
               --
            end loop; -- fim c595
            --
         end if;
         --
         vn_fase := 13;
         --
        if i = vt_tab_reg_c500.last then
            exit;
         else
            i := vt_tab_reg_c500.next(i);
         end if;
         --
      end loop;
      --
   end if;
   --
exception
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_armaz_reg_c500 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end pkb_armaz_reg_c500;

-------------------------------------------------------------------------------------------------------

-- Armazena em arquivo o REGISTRO C495: RESUMO MENSAL DE ITENS DO ECF POR ESTABELECIMENTO (CÓDIGO 02 e 2D)
procedure pkb_armaz_reg_c495
is
   --
   vn_fase  number := 0;
   i        pls_integer;
   --
begin
   --
   vn_fase := 1;
   --
   if nvl(vt_tab_reg_c495.count,0) > 0 then
      --
      vn_fase := 2;
      --
      i := vt_tab_reg_c495.first;
      --
      vn_fase := 3;
      --
      loop
         --
         vn_fase := 4;
         --
         if nvl(i,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 5;
         --
         -- cria a estrutura do registro separado por PIPE "|"
         gl_conteudo := '|';
         --
         gl_conteudo := gl_conteudo || vt_tab_reg_c495(i).reg || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_c495(i).aliq_icms, '990D99') || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_c495(i).cod_item || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_c495(i).qtd, '9999999999990D999') || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_c495(i).qtd_canc, '9999999999990D999') || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_c495(i).unid || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_c495(i).vl_item, '9999999999990D99') || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_c495(i).vl_desc, '9999999999990D99') || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_c495(i).vl_canc, '9999999999990D99') || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_c495(i).vl_acmo, '9999999999990D99') || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_c495(i).vl_bc_icms, '9999999999990D99') || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_c495(i).vl_icms, '9999999999990D99') || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_c495(i).vl_isen, '9999999999990D99') || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_c495(i).vl_nt, '9999999999990D99') || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_c495(i).vl_icms_st, '9999999999990D99') || '|';
         --
         vn_fase := 6;
         --
         pkb_armaz_estr_arq_efd ( ev_reg_blc   => 'C495'
                                , el_conteudo  => gl_conteudo );
         --
         vn_fase := 7;
         --
         if i = vt_tab_reg_c495.last then
            exit;
         else
            i := vt_tab_reg_c495.next(i);
         end if;
         --
      end loop;
      --
   end if;
   --
exception
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_armaz_reg_c495 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end pkb_armaz_reg_c495;

-------------------------------------------------------------------------------------------------------

-- Armazena em arquivo o REGISTRO C400 - EQUIPAMENTO ECF (CÓDIGO 02 e 2D)
procedure pkb_armaz_reg_c400
is
   --
   vn_fase           number := 0;
   i                 pls_integer;
   j                 pls_integer;
   k                 pls_integer;
   l                 pls_integer;
   vn_qtde_reg_c405  number;
   vn_qtde_reg_c410  number;
   vn_qtde_reg_c420  number;
   vn_qtde_reg_c425  number;
   vn_qtde_reg_c460  number;
   vn_qtde_reg_c470  number;
   vn_qtde_reg_c490  number;
   --
begin
   --
   vn_fase := 1;
   --
   if nvl(vt_tab_reg_c400.count,0) > 0 then
      --
      vn_fase := 2;
      --
      i := vt_tab_reg_c400.first;
      --
      vn_fase := 3;
      --
      loop
         --
         vn_fase := 4;
         --
         if nvl(i,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 5;
         -- cria a estrutura do registro separado por PIPE "|"
         gl_conteudo := '|';
         --
         gl_conteudo := gl_conteudo || vt_tab_reg_c400(i).reg || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_c400(i).cod_mod || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_c400(i).ecf_mod || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_c400(i).ecf_fab || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_c400(i).ecf_cx || '|';
         --
         vn_fase := 6;
         --
         pkb_armaz_estr_arq_efd ( ev_reg_blc   => 'C400'
                                , el_conteudo  => gl_conteudo );
         --
         vn_fase := 7;
         -- NOVO TÍTULO: REGISTRO C405: REDUÇÃO Z (CÓDIGO 02, 2D e 60)
         -- REGISTRO C405 - REDUÇÃO Z (CÓDIGO 02 e 2D)
         begin
            vn_qtde_reg_c405 := vt_bi_tab_reg_c405(i).count;
         exception
            when others then
               vn_qtde_reg_c405 := 0;
         end;
         --
         vn_fase := 7.1;
         --
         if nvl(vn_qtde_reg_c405,0) > 0 then
            --
            vn_fase := 7.2;
            --
            j := vt_bi_tab_reg_c405(i).first;
            --
            vn_fase := 7.3;
            --
            loop
               --
               vn_fase := 7.4;
               --
               if nvl(j,0) = 0 then
                  exit;
               end if;
               --
               vn_fase := 7.5;
               --
               gl_conteudo := '|';
               --
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_c405(i)(j).reg || '|';
               gl_conteudo := gl_conteudo || to_char(vt_bi_tab_reg_c405(i)(j).dt_doc, 'ddmmrrrr') || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_c405(i)(j).cro || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_c405(i)(j).crz || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_c405(i)(j).num_coo_fin || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_c405(i)(j).gt_fin || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_c405(i)(j).vl_brt, '9999999999990D99') || '|';
               --
               vn_fase := 7.6;
               --
               pkb_armaz_estr_arq_efd ( ev_reg_blc   => 'C405'
                                      , el_conteudo  => gl_conteudo );
               --
               vn_fase := 8;
               -- REGISTRO C410: PIS E COFINS TOTALIZADOS NO DIA (CÓDIGO 02 e 2D).
               begin
                  vn_qtde_reg_c410 := vt_tri_tab_reg_c410(i)(j).count;
               exception
                  when others then
                     vn_qtde_reg_c410 := 0;
               end;
               --
               vn_fase := 8.1;
               --
               if nvl(vn_qtde_reg_c410,0) > 0 then
                  --
                  vn_fase := 8.2;
                  --
                  k := vt_tri_tab_reg_c410(i)(j).first;
                  --
                  vn_fase := 8.3;
                  --
                  loop
                     --
                     vn_fase := 8.4;
                     --
                     if nvl(k,0) = 0 then
                        exit;
                     end if;
                     --
                     vn_fase := 8.5;
                     --
                     gl_conteudo := '|';
                     --
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_c410(i)(j)(k).reg || '|';
                     gl_conteudo := gl_conteudo || fkg_formata_num(vt_tri_tab_reg_c410(i)(j)(k).vl_pis, '9999999999990D99') || '|';
                     gl_conteudo := gl_conteudo || fkg_formata_num(vt_tri_tab_reg_c410(i)(j)(k).vl_cofins, '9999999999990D99') || '|';
                     --
                     vn_fase := 8.6;
                     --
                     pkb_armaz_estr_arq_efd ( ev_reg_blc   => 'C410'
                                            , el_conteudo  => gl_conteudo );
                     --
                     vn_fase := 8.7;
                     --
                     if k = vt_tri_tab_reg_c410(i)(j).last then
                        exit;
                     else
                        k := vt_tri_tab_reg_c410(i)(j).next(k);
                     end if;
                     --
                  end loop;
                  --
               end if;
               --
               vn_fase := 9;
               -- REGISTRO C410: PIS E COFINS TOTALIZADOS NO DIA (CÓDIGO 02 e 2D).
               begin
                  vn_qtde_reg_c420 := vt_tri_tab_reg_c420(i)(j).count;
               exception
                  when others then
                     vn_qtde_reg_c420 := 0;
               end;
               --
               vn_fase := 9.1;
               --
               if nvl(vn_qtde_reg_c420,0) > 0 then
                  --
                  vn_fase := 9.2;
                  --
                  k := vt_tri_tab_reg_c420(i)(j).first;
                  --
                  vn_fase := 9.3;
                  --
                  loop
                     --
                     vn_fase := 9.4;
                     --
                     if nvl(k,0) = 0 then
                        exit;
                     end if;
                     --
                     vn_fase := 9.5;
                     --
                     gl_conteudo := '|';
                     --
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_c420(i)(j)(k).reg || '|';
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_c420(i)(j)(k).cod_tot_par || '|';
                     gl_conteudo := gl_conteudo || fkg_formata_num(vt_tri_tab_reg_c420(i)(j)(k).vlr_acum_tot, '9999999999990D99') || '|';
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_c420(i)(j)(k).nr_tot || '|';
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_c420(i)(j)(k).descr_nr_tot || '|';
                     --
                     vn_fase := 9.6;
                     --
                     pkb_armaz_estr_arq_efd ( ev_reg_blc   => 'C420'
                                            , el_conteudo  => gl_conteudo );
                     --
                     vn_fase := 10;
                     -- REGISTRO C425: RESUMO DE ITENS DO MOVIMENTO DIÁRIO (CÓDIGO 02 e 2D)
                     begin
                        vn_qtde_reg_c425 := vt_tetra_tab_reg_c425(i)(j)(k).count;
                     exception
                        when others then
                           vn_qtde_reg_c425 := 0;
                     end;
                     --
                     vn_fase := 10.1;
                     --
                     if nvl(vn_qtde_reg_c425,0) > 0 then
                        --
                        vn_fase := 10.2;
                        --
                        l := vt_tetra_tab_reg_c425(i)(j)(k).first;
                        --
                        vn_fase := 10.3;
                        --
                        loop
                           --
                           vn_fase := 10.4;
                           --
                           if nvl(l,0) = 0 then
                              exit;
                           end if;
                           --
                           vn_fase := 10.5;
                           --
                           gl_conteudo := '|';
                           --
                           gl_conteudo := gl_conteudo || vt_tetra_tab_reg_c425(i)(j)(k)(l).reg || '|';
                           gl_conteudo := gl_conteudo || vt_tetra_tab_reg_c425(i)(j)(k)(l).cod_item || '|';
                           gl_conteudo := gl_conteudo || fkg_formata_num(vt_tetra_tab_reg_c425(i)(j)(k)(l).qtd, '9999999999990D999') || '|';
                           gl_conteudo := gl_conteudo || vt_tetra_tab_reg_c425(i)(j)(k)(l).unid || '|';
                           gl_conteudo := gl_conteudo || fkg_formata_num(vt_tetra_tab_reg_c425(i)(j)(k)(l).vl_item, '9999999999990D99') || '|';
                           gl_conteudo := gl_conteudo || fkg_formata_num(vt_tetra_tab_reg_c425(i)(j)(k)(l).vl_pis, '9999999999990D99') || '|';
                           gl_conteudo := gl_conteudo || fkg_formata_num(vt_tetra_tab_reg_c425(i)(j)(k)(l).vl_cofins, '9999999999990D99') || '|';
                           --
                           vn_fase := 10.6;
                           --
                           pkb_armaz_estr_arq_efd ( ev_reg_blc   => 'C425'
                                                  , el_conteudo  => gl_conteudo );
                           --
                           vn_fase := 10.7;
                           --
                           if l = vt_tetra_tab_reg_c425(i)(j)(k).last then
                              exit;
                           else
                              l := vt_tetra_tab_reg_c425(i)(j)(k).next(l);
                           end if;
                           --
                        end loop;
                        --
                     end if;
                     --
                     vn_fase := 10.8;
                     --
                     if k = vt_tri_tab_reg_c420(i)(j).last then
                        exit;
                     else
                        k := vt_tri_tab_reg_c420(i)(j).next(k);
                     end if;
                     --
                  end loop;
                  --
               end if;
               --
               vn_fase := 11;
               -- REGISTRO C460: DOCUMENTO FISCAL EMITIDO POR ECF (CÓDIGO 02 e 2D)
               begin
                  vn_qtde_reg_c460 := vt_tri_tab_reg_c460(i)(j).count;
               exception
                  when others then
                     vn_qtde_reg_c460 := 0;
               end;
               --
               vn_fase := 11.1;
               --
               if nvl(vn_qtde_reg_c460,0) > 0 then
                  --
                  vn_fase := 11.2;
                  --
                  k := vt_tri_tab_reg_c460(i)(j).first;
                  --
                  vn_fase := 11.3;
                  --
                  loop
                     --
                     vn_fase := 11.4;
                     --
                     if nvl(k,0) = 0 then
                        exit;
                     end if;
                     --
                     vn_fase := 11.5;
                     --
                     gl_conteudo := '|';
                     --
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_c460(i)(j)(k).reg || '|';
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_c460(i)(j)(k).cod_mod || '|';
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_c460(i)(j)(k).cod_sit || '|';
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_c460(i)(j)(k).num_doc || '|';
                     gl_conteudo := gl_conteudo || to_char(vt_tri_tab_reg_c460(i)(j)(k).dt_doc, 'ddmmrrrr') || '|';
                     gl_conteudo := gl_conteudo || fkg_formata_num(vt_tri_tab_reg_c460(i)(j)(k).vl_doc, '9999999999990D99') || '|';
                     gl_conteudo := gl_conteudo || fkg_formata_num(vt_tri_tab_reg_c460(i)(j)(k).vl_pis, '9999999999990D99') || '|';
                     gl_conteudo := gl_conteudo || fkg_formata_num(vt_tri_tab_reg_c460(i)(j)(k).vl_cofins, '9999999999990D99') || '|';
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_c460(i)(j)(k).cpf_cnpj || '|';
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_c460(i)(j)(k).nom_adq || '|';
                     --
                     vn_fase := 11.6;
                     --
                     pkb_armaz_estr_arq_efd ( ev_reg_blc   => 'C460'
                                            , el_conteudo  => gl_conteudo );
                     --
                     vn_fase := 12;
                     -- REGISTRO C470: ITENS DO DOCUMENTO FISCAL EMITIDO POR ECF (CÓDIGO 02 e 2D)
                     begin
                        vn_qtde_reg_c470 := vt_tetra_tab_reg_c470(i)(j)(k).count;
                     exception
                        when others then
                           vn_qtde_reg_c470 := 0;
                     end;
                     --
                     vn_fase := 12.1;
                     --
                     if nvl(vn_qtde_reg_c470,0) > 0 then
                        --
                        vn_fase := 12.2;
                        --
                        l := vt_tetra_tab_reg_c470(i)(j)(k).first;
                        --
                        vn_fase := 12.3;
                        --
                        loop
                           --
                           vn_fase := 12.4;
                           --
                           if nvl(l,0) = 0 then
                              exit;
                           end if;
                           --
                           vn_fase := 12.5;
                           --
                           gl_conteudo := '|';
                           --
                           gl_conteudo := gl_conteudo || vt_tetra_tab_reg_c470(i)(j)(k)(l).reg || '|';
                           gl_conteudo := gl_conteudo || vt_tetra_tab_reg_c470(i)(j)(k)(l).cod_item || '|';
                           gl_conteudo := gl_conteudo || fkg_formata_num(vt_tetra_tab_reg_c470(i)(j)(k)(l).qtd, '9999999999990D999') || '|';
                           gl_conteudo := gl_conteudo || fkg_formata_num(vt_tetra_tab_reg_c470(i)(j)(k)(l).qtd_canc, '9999999999990D999') || '|';
                           gl_conteudo := gl_conteudo || vt_tetra_tab_reg_c470(i)(j)(k)(l).unid || '|';
                           gl_conteudo := gl_conteudo || fkg_formata_num(vt_tetra_tab_reg_c470(i)(j)(k)(l).vl_item, '9999999999990D99') || '|';
                           gl_conteudo := gl_conteudo || '0' || vt_tetra_tab_reg_c470(i)(j)(k)(l).cst_icms || '|';
                           gl_conteudo := gl_conteudo || vt_tetra_tab_reg_c470(i)(j)(k)(l).cfop || '|';
                           gl_conteudo := gl_conteudo || fkg_formata_num(vt_tetra_tab_reg_c470(i)(j)(k)(l).aliq_icms, '990D99') || '|';
                           gl_conteudo := gl_conteudo || fkg_formata_num(vt_tetra_tab_reg_c470(i)(j)(k)(l).vl_pis, '9999999999990D99') || '|';
                           gl_conteudo := gl_conteudo || fkg_formata_num(vt_tetra_tab_reg_c470(i)(j)(k)(l).vl_cofins, '9999999999990D99') || '|';
                           --
                           vn_fase := 12.6;
                           --
                           pkb_armaz_estr_arq_efd ( ev_reg_blc   => 'C470'
                                                  , el_conteudo  => gl_conteudo );
                           --
                           vn_fase := 12.7;
                           --
                           if l = vt_tetra_tab_reg_c470(i)(j)(k).last then
                              exit;
                           else
                              l := vt_tetra_tab_reg_c470(i)(j)(k).next(l);
                           end if;
                           --
                           --
                        end loop;
                        --
                     end if;
                     --
                     vn_fase := 12.8;
                     --
                     if k = vt_tri_tab_reg_c460(i)(j).last then
                        exit;
                     else
                        k := vt_tri_tab_reg_c460(i)(j).next(k);
                     end if;
                     --
                  end loop;
                  --
               end if;
               --
               vn_fase := 13;
               -- REGISTRO C490: REGISTRO ANALÍTICO DO MOVIMENTO DIÁRIO (CÓDIGO 02 e 2D)
               begin
                  vn_qtde_reg_c490 := vt_tri_tab_reg_c490(i)(j).count;
               exception
                  when others then
                     vn_qtde_reg_c490 := 0;
               end;
               --
               vn_fase := 13.1;
               --
               if nvl(vn_qtde_reg_c490,0) > 0 then
                  --
                  vn_fase := 13.2;
                  --
                  k := vt_tri_tab_reg_c490(i)(j).first;
                  --
                  vn_fase := 13.3;
                  --
                  loop
                     --
                     vn_fase := 13.4;
                     --
                     if nvl(k,0) = 0 then
                        exit;
                     end if;
                     --
                     vn_fase := 13.5;
                     gl_conteudo := '|';
                     --
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_c490(i)(j)(k).reg || '|';
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_c490(i)(j)(k).cst_icms || '|';
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_c490(i)(j)(k).cfop || '|';
                     gl_conteudo := gl_conteudo || fkg_formata_num(vt_tri_tab_reg_c490(i)(j)(k).aliq_icms, '990D99') || '|';
                     gl_conteudo := gl_conteudo || fkg_formata_num(vt_tri_tab_reg_c490(i)(j)(k).vl_opr, '9999999999990D99') || '|';
                     gl_conteudo := gl_conteudo || fkg_formata_num(vt_tri_tab_reg_c490(i)(j)(k).vl_bc_icms, '9999999999990D99') || '|';
                     gl_conteudo := gl_conteudo || fkg_formata_num(vt_tri_tab_reg_c490(i)(j)(k).vl_icms, '9999999999990D99') || '|';
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_c490(i)(j)(k).cod_obs || '|';
                     --
                     vn_fase := 13.6;
                     --
                     pkb_armaz_estr_arq_efd ( ev_reg_blc   => 'C490'
                                            , el_conteudo  => gl_conteudo );
                     --
                     vn_fase := 13.7;
                     --
                     if k = vt_tri_tab_reg_c490(i)(j).last then
                        exit;
                     else
                        k := vt_tri_tab_reg_c490(i)(j).next(k);
                     end if;
                     --
                  end loop;
                  --
               end if;
               --
               vn_fase := 14;
               --
               if j = vt_bi_tab_reg_c405(i).last then
                  exit;
               else
                  j := vt_bi_tab_reg_c405(i).next(j);
               end if;
               --
            end loop;
            --
         end if;
         --
         vn_fase := 15;
         --
         if i = vt_tab_reg_c400.last then
            exit;
         else
            i := vt_tab_reg_c400.next(i);
         end if;
         --
      end loop;
      --
   end if;
   --
exception
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_armaz_reg_c400 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end pkb_armaz_reg_c400;

-------------------------------------------------------------------------------------------------------

-- Armazena em arquivo o REGISTRO C350: NOTA FISCAL DE VENDA A CONSUMIDOR (CÓDIGO 02)
procedure pkb_armaz_reg_c350
is
   --
   vn_fase           number := 0;
   i                 pls_integer;
   j                 pls_integer;
   vn_qtde_reg_c370  number;
   vn_qtde_reg_c390  number;
   --
begin
   --
   vn_fase := 1;
   --
   if nvl(vt_tab_reg_c350.count,0) > 0 then
      --
      vn_fase := 2;
      --
      i := vt_tab_reg_c350.first;
      --
      vn_fase := 3;
      --
      loop
         --
         vn_fase := 4;
         --
         if nvl(i,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 5;
         -- cria a estrutura do registro separado por PIPE "|"
         gl_conteudo := '|';
         --
         gl_conteudo := gl_conteudo || vt_tab_reg_c350(i).reg || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_c350(i).ser || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_c350(i).sub_ser || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_c350(i).num_doc || '|';
         gl_conteudo := gl_conteudo || to_char(vt_tab_reg_c350(i).dt_doc, 'ddmmrrrr') || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_c350(i).cnpj_cpf || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_c350(i).vl_merc, '9999999999990D99') || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_c350(i).vl_doc, '9999999999990D99') || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_c350(i).vl_desc, '9999999999990D99') || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_c350(i).vl_pis, '9999999999990D99') || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_c350(i).vl_cofins, '9999999999990D99') || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_c350(i).cod_cta || '|';
         --
         vn_fase := 6;
         --
         pkb_armaz_estr_arq_efd ( ev_reg_blc   => 'C350'
                                , el_conteudo  => gl_conteudo );
         --
         vn_fase := 7;
         -- REGISTRO C370: ITENS DO DOCUMENTO (CÓDIGO 02)
         begin
            vn_qtde_reg_c370 := vt_bi_tab_reg_c370(i).count;
         exception
            when others then
               vn_qtde_reg_c370 := 0;
         end;
         --
         vn_fase := 7.1;
         --
         if nvl(vn_qtde_reg_c370,0) > 0 then
            --
            vn_fase := 7.2;
            --
            j := vt_bi_tab_reg_c370(i).first;
            --
            vn_fase := 7.3;
            --
            loop
               --
               vn_fase := 7.4;
               --
               if nvl(j,0) = 0 then
                  exit;
               end if;
               --
               vn_fase := 7.5;
               --
               gl_conteudo := '|';
               --
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_c370(i)(j).reg || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_c370(i)(j).num_item || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_c370(i)(j).cod_item || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_c370(i)(j).qtd, '9999999999990D999') || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_c370(i)(j).unid || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_c370(i)(j).vl_item, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_c370(i)(j).vl_desc, '9999999999990D99') || '|';
               --
               vn_fase := 7.6;
               --
               pkb_armaz_estr_arq_efd ( ev_reg_blc   => 'C370'
                                      , el_conteudo  => gl_conteudo );
               --
               vn_fase := 7.7;
               --
               if j = vt_bi_tab_reg_c370(i).last then
                  exit;
               else
                  j := vt_bi_tab_reg_c370(i).next(j);
               end if;
               --
            end loop;
            --
         end if;
         --
         vn_fase := 8;
         -- REGISTRO C390 - REGISTRO ANALÍTICO DAS NOTAS FISCAIS DE VENDA A CONSUMIDOR (CÓDIGO 02)
         begin
            vn_qtde_reg_c390 := vt_bi_tab_reg_c390(i).count;
         exception
            when others then
               vn_qtde_reg_c390 := 0;
         end;
         --
         vn_fase := 8.1;
         --
         if nvl(vn_qtde_reg_c390,0) > 0 then
            --
            vn_fase := 8.2;
            --
            j := vt_bi_tab_reg_c390(i).first;
            --
            vn_fase := 8.3;
            --
            loop
               --
               vn_fase := 8.4;
               --
               if nvl(j,0) = 0 then
                  exit;
               end if;
               --
               vn_fase := 8.5;
               --
               gl_conteudo := '|';
               --
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_c390(i)(j).reg || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_c390(i)(j).cst_icms || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_c390(i)(j).cfop || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_c390(i)(j).aliq_icms, '990D99') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_c390(i)(j).vl_opr, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_c390(i)(j).vl_bc_icms, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_c390(i)(j).vl_icms, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_c390(i)(j).vl_red_bc, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_c390(i)(j).cod_obs || '|';
               --
               vn_fase := 8.6;
               --
               pkb_armaz_estr_arq_efd ( ev_reg_blc   => 'C390'
                                      , el_conteudo  => gl_conteudo );
               --
               vn_fase := 8.7;
               --
               if j = vt_bi_tab_reg_c390(i).last then
                  exit;
               else
                  j := vt_bi_tab_reg_c390(i).next(j);
               end if;
               --
            end loop;
            --
         end if;
         --
         vn_fase := 9;
         --
         if i = vt_tab_reg_c350.last then
            exit;
         else
            i := vt_tab_reg_c350.next(i);
         end if;
         --
      end loop;
      --
   end if;
   --
exception
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_armaz_reg_c350 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end pkb_armaz_reg_c350;

-------------------------------------------------------------------------------------------------------

-- Armazena em arquivo o REGISTRO C300: RESUMO DIÁRIO DAS NOTAS FISCAIS DE VENDA A CONSUMIDOR (CÓDIGO 02)
procedure pkb_armaz_reg_c300
is
   --
   vn_fase          number := 0;
   i                pls_integer;
   j                pls_integer;
   k                pls_integer;
   vn_qtde_reg_c310 number;
   vn_qtde_reg_c320 number;
   vn_qtde_reg_c321 number;
   --
begin
   --
   vn_fase := 1;
   --
   if nvl(vt_tab_reg_c300.count,0) > 0 then
      --
      vn_fase := 2;
      --
      i := nvl(vt_tab_reg_c300.first,0);
      --
      vn_fase := 3;
      --
      loop
         --
         vn_fase := 4;
         --
         if nvl(i,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 5;
         -- cria a estrutura do registro separado por PIPE "|"
         gl_conteudo := '|';
         --
         gl_conteudo := gl_conteudo || vt_tab_reg_c300(i).reg || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_c300(i).cod_mod || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_c300(i).ser || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_c300(i).sub || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_c300(i).num_doc_ini || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_c300(i).num_doc_fin || '|';
         gl_conteudo := gl_conteudo || to_char(vt_tab_reg_c300(i).dt_doc, 'ddmmrrrr') || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_c300(i).vl_doc, '9999999999990D99') || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_c300(i).vl_pis, '9999999999990D99') || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_c300(i).vl_cofins, '9999999999990D99') || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_c300(i).cod_cta || '|';
         --
         vn_fase := 6;
         --
         pkb_armaz_estr_arq_efd ( ev_reg_blc   => 'C300'
                                , el_conteudo  => gl_conteudo );
         --
         vn_fase := 7;
         --
         -- REGISTRO C310: DOCUMENTOS CANCELADOS DE NOTAS FISCAIS DE VENDA A CONSUMIDOR (CÓDIGO 02)
         begin
            vn_qtde_reg_c310 := vt_bi_tab_reg_c310(i).count;
         exception
            when others then
               vn_qtde_reg_c310 := 0;
         end;
         --
         vn_fase := 7.1;
         --
         if nvl(vn_qtde_reg_c310,0) > 0 then
            --
            vn_fase := 7.2;
            --
            j := nvl(vt_bi_tab_reg_c310(i).first,0);
            --
            vn_fase := 7.3;
            --
            loop
               --
               vn_fase := 7.4;
               --
               if nvl(j,0) = 0 then
                  exit;
               end if;
               --
               vn_fase := 7.5;
               -- cria a estrutura do registro separado por PIPE "|"
               gl_conteudo := '|';
               --
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_c310(i)(j).reg || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_c310(i)(j).num_doc_canc || '|';
               --
               vn_fase := 7.6;
               --
               pkb_armaz_estr_arq_efd ( ev_reg_blc   => 'C310'
                                      , el_conteudo  => gl_conteudo );
               --
               vn_fase := 7.7;
               --
               if j = vt_bi_tab_reg_c310(i).last then
                  exit;
               else
                  j := vt_bi_tab_reg_c310(i).next(j);
               end if;
               --
            end loop;
            --
         end if;
         --
         vn_fase := 8;
         --
         -- REGISTRO C320: REGISTRO ANALÍTICO DO RESUMO DIÁRIO DAS NOTAS FISCAIS DE VENDA A CONSUMIDOR (CÓDIGO 02)
         begin
            vn_qtde_reg_c320 := vt_bi_tab_reg_c320(i).count;
         exception
            when others then
               vn_qtde_reg_c320 := 0;
         end;
         --
         vn_fase := 8.1;
         --
         if nvl(vn_qtde_reg_c320,0) > 0 then
            --
            vn_fase := 8.2;
            --
            j := vt_bi_tab_reg_c320(i).first;
            --
            vn_fase := 8.3;
            --
            loop
               --
               vn_fase := 8.4;
               --
               if nvl(j,0) = 0 then
                  exit;
               end if;
               --
               vn_fase := 8.5;
               -- cria a estrutura do registro separado por PIPE "|"
               gl_conteudo := '|';
               --
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_c320(i)(j).reg || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_c320(i)(j).cst_icms || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_c320(i)(j).cfop || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_c320(i)(j).aliq_icms, '990D99') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_c320(i)(j).vl_opr, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_c320(i)(j).vl_bc_icms, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_c320(i)(j).vl_icms, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_c320(i)(j).vl_red_bc, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_c320(i)(j).cod_obs || '|';
               --
               vn_fase := 8.6;
               --
               pkb_armaz_estr_arq_efd ( ev_reg_blc   => 'C320'
                                      , el_conteudo  => gl_conteudo );
               --
               vn_fase := 8.7;
               --
               -- REGISTRO C321: ITENS DO RESUMO DIÁRIO DOS DOCUMENTOS (CÓDIGO 02)
               begin
                  vn_qtde_reg_c321 := vt_tri_tab_reg_c321(i)(j).count;
               exception
                  when others then
                     vn_qtde_reg_c321 := 0;
               end;
               --
               vn_fase := 8.8;
               --
               if nvl(vn_qtde_reg_c321,0) > 0 then
                  --
                  vn_fase := 8.9;
                  --
                  k := vt_tri_tab_reg_c321(i)(j).first;
                  --
                  vn_fase := 8.10;
                  --
                  loop
                     --
                     vn_fase := 8.11;
                     --
                     if nvl(k,0) = 0 then
                        exit;
                     end if;
                     --
                     vn_fase := 8.12;
                     -- cria a estrutura do registro separado por PIPE "|"
                     gl_conteudo := '|';
                     --
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_c321(i)(j)(k).reg || '|';
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_c321(i)(j)(k).cod_item || '|';
                     gl_conteudo := gl_conteudo || fkg_formata_num(vt_tri_tab_reg_c321(i)(j)(k).qtd, '9999999999990D999') || '|';
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_c321(i)(j)(k).unid || '|';
                     gl_conteudo := gl_conteudo || fkg_formata_num(vt_tri_tab_reg_c321(i)(j)(k).vl_item, '9999999999990D99') || '|';
                     gl_conteudo := gl_conteudo || fkg_formata_num(vt_tri_tab_reg_c321(i)(j)(k).vl_desc, '9999999999990D99') || '|';
                     gl_conteudo := gl_conteudo || fkg_formata_num(vt_tri_tab_reg_c321(i)(j)(k).vl_bc_icms, '9999999999990D99') || '|';
                     gl_conteudo := gl_conteudo || fkg_formata_num(vt_tri_tab_reg_c321(i)(j)(k).vl_icms, '9999999999990D99') || '|';
                     gl_conteudo := gl_conteudo || fkg_formata_num(vt_tri_tab_reg_c321(i)(j)(k).vl_pis, '9999999999990D99') || '|';
                     gl_conteudo := gl_conteudo || fkg_formata_num(vt_tri_tab_reg_c321(i)(j)(k).vl_cofins, '9999999999990D99') || '|';
                     --
                     vn_fase := 8.13;
                     --
                     pkb_armaz_estr_arq_efd ( ev_reg_blc   => 'C321'
                                            , el_conteudo  => gl_conteudo );
                     --
                     vn_fase := 8.14;
                     --
                     if j = vt_tri_tab_reg_c321(i)(j).last then
                        exit;
                     else
                        j := vt_tri_tab_reg_c321(i)(j).next(k);
                     end if;
                     --
                  end loop;
                  --
               end if;
               --
               vn_fase := 8.15;
               --
               if j = vt_bi_tab_reg_c320(i).last then
                  exit;
               else
                  j := vt_bi_tab_reg_c320(i).next(j);
               end if;
               --
            end loop;
            --
         end if;
         --
         vn_fase := 9;
         --
         if i = vt_tab_reg_c300.last then
            exit;
         else
            i := vt_tab_reg_c300.next(i);
         end if;
         --
      end loop;
      --
   end if;
   --
exception
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_armaz_reg_c300 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end pkb_armaz_reg_c300;

-------------------------------------------------------------------------------------------------------

-- Armazena em arquivo o REGISTRO C100: NOTA FISCAL (CÓDIGO 01), NOTA FISCAL AVULSA (CÓDIGO 1B), NOTA FISCAL DE PRODUTOR (CÓDIGO 04) E NFE (CÓDIGO 55).
procedure pkb_armaz_reg_c100
is
   --
   vn_fase          number := 0;
   i                pls_integer;
   j                pls_integer;
   k                pls_integer;
   vn_qtde_reg_c101 number;
   vn_qtde_reg_c105 number;
   vn_qtde_reg_c110 number;
   vn_qtde_reg_c111 number;
   vn_qtde_reg_c112 number;
   vn_qtde_reg_c113 number;
   vn_qtde_reg_c114 number;
   vn_qtde_reg_c115 number;
   vn_qtde_reg_c116 number;
   vn_qtde_reg_c120 number;
   vn_qtde_reg_c130 number;
   vn_qtde_reg_c140 number;
   vn_qtde_reg_c141 number;
   vn_qtde_reg_c160 number;
   vn_qtde_reg_c165 number;
   vn_qtde_reg_c170 number;
   vn_qtde_reg_c171 number;
   vn_qtde_reg_c172 number;
   vn_qtde_reg_c173 number;
   vn_qtde_reg_c174 number;
   vn_qtde_reg_c175 number;
   vn_qtde_reg_c176 number;
   vn_qtde_reg_c177 number;
   vn_qtde_reg_c178 number;
   vn_qtde_reg_c179 number;
   vn_qtde_reg_c190 number;
   vn_qtde_reg_c191 number;
   vn_qtde_reg_c195 number;
   vn_qtde_reg_c197 number;
   --
begin
   --
   vn_fase := 1;
   --
   if nvl(vt_tab_reg_c100.count,0) > 0 then
      --
      vn_fase := 2;
      --
      i := nvl(vt_tab_reg_c100.first,0);
      --
      vn_fase := 3;
      --
      loop
         --
         vn_fase := 4;
         --
         if nvl(i,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 5;
         -- cria a estrutura do registro separado por PIPE "|"
         gl_conteudo := '|';
         --
         gl_conteudo := gl_conteudo || vt_tab_reg_c100(i).reg || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_c100(i).ind_oper || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_c100(i).ind_emit || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_c100(i).cod_part || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_c100(i).cod_mod || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_c100(i).cod_sit || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_c100(i).ser || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_c100(i).num_doc || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_c100(i).chv_nfe || '|';
         gl_conteudo := gl_conteudo || to_char(vt_tab_reg_c100(i).dt_doc, 'ddmmrrrr') || '|';
         gl_conteudo := gl_conteudo || to_char(vt_tab_reg_c100(i).dt_e_s, 'ddmmrrrr') || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_c100(i).vl_doc, '9999999999990D99') || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_c100(i).ind_pgto || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_c100(i).vl_desc, '9999999999990D99') || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_c100(i).vl_abat_nt, '9999999999990D99') || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_c100(i).vl_merc, '9999999999990D99') || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_c100(i).ind_frt || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_c100(i).vl_frt, '9999999999990D99') || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_c100(i).vl_seg, '9999999999990D99') || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_c100(i).vl_out_da, '9999999999990D99') || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_c100(i).vl_bc_icms, '9999999999990D99') || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_c100(i).vl_icms, '9999999999990D99') || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_c100(i).vl_bc_icms_st, '9999999999990D99') || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_c100(i).vl_icms_st, '9999999999990D99') || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_c100(i).vl_ipi, '9999999999990D99') || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_c100(i).vl_pis, '9999999999990D99') || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_c100(i).vl_cofins, '9999999999990D99') || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_c100(i).vl_pis_st, '9999999999990D99') || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_c100(i).vl_cofins_st, '9999999999990D99') || '|';
         --
         vn_fase := 6;
         --
         pkb_armaz_estr_arq_efd ( ev_reg_blc   => 'C100'
                                , el_conteudo  => gl_conteudo );
         --
         vn_fase := 6.01;
         -- REGISTRO C101: INFORMAÇÃO COMPLEMENTAR DOS DOCUMENTOS FISCAIS QUANDO DAS OPERAÇÕES INTERESTADUAIS DESTINADAS A CONSUMIDOR FINAL NÃO CONTRIBUINTE EC 87/15 (CÓDIGO 55)
         --
         begin
            --
            vn_fase := 6.02;
            -- cria a estrutura do registro separado por PIPE "|"
            gl_conteudo := '|';
            --
            gl_conteudo := gl_conteudo || vt_tab_reg_c101(i).reg || '|';
            gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_c101(i).vl_fcp_uf_dest, '9999999999990D99') || '|';
            gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_c101(i).vl_icms_uf_dest, '9999999999990D99') || '|';
            gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_c101(i).vl_icms_uf_rem, '9999999999990D99') || '|';
            --
            vn_fase := 6.03;
            --
            pkb_armaz_estr_arq_efd ( ev_reg_blc   => 'C101'
                                   , el_conteudo  => gl_conteudo );
            --
            --
         exception
            when others then
               vn_qtde_reg_c101 := 0;
         end;
         --
         vn_fase := 6.1;
         -- REGISTRO C105 - OPERAÇÕES COM ICMS ST RECOLHIDO PARA UF DIVERSA DO DESTINATÁRIO DO DOCUMENTO FISCAL (CÓDIGO 55).
         begin
            vn_qtde_reg_c105 := vt_bi_tab_reg_c105(i).count;
         exception
            when others then
               vn_qtde_reg_c105 := 0;
         end;
         --
         vn_fase := 6.2;
         --
         if nvl(vn_qtde_reg_c105,0) > 0 then
            --
            j := nvl(vt_bi_tab_reg_c105(i).first,0);
            --
            vn_fase := 6.3;
            --
            loop
               --
               vn_fase := 6.4;
               --
               if nvl(j,0) = 0 then
                  exit;
               end if;
               --
               vn_fase := 6.5;
               -- cria a estrutura do registro separado por PIPE "|"
               gl_conteudo := '|';
               --
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_c105(i)(j).reg || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_c105(i)(j).oper || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_c105(i)(j).uf || '|';
               --
               vn_fase := 6.6;
               --
               pkb_armaz_estr_arq_efd ( ev_reg_blc   => 'C105'
                                      , el_conteudo  => gl_conteudo );
               --
               vn_fase := 6.7;
               --
               if j = vt_bi_tab_reg_c105(i).last then
                  exit;
               else
                  j := vt_bi_tab_reg_c105(i).next(j);
               end if;
               --
            end loop;
            --
         end if; -- C105
         --
         vn_fase := 7;
         -- REGISTRO C110: INFORMAÇÃO COMPLEMENTAR DA NOTA FISCAL (CÓDIGO 01, 1B, 04 e 55)
         begin
            vn_qtde_reg_c110 := vt_bi_tab_reg_c110(i).count;
         exception
            when others then
               vn_qtde_reg_c110 := 0;
         end;
         --
         vn_fase := 7.1;
         --
         if nvl(vn_qtde_reg_c110,0) > 0 then
            --
            vn_fase := 7.2;
            --
            j := nvl(vt_bi_tab_reg_c110(i).first,0);
            --
            vn_fase := 7.3;
            --
            loop
               --
               vn_fase := 7.4;
               --
               if nvl(j,0) = 0 then
                  exit;
               end if;
               --
               vn_fase := 7.5;
               -- cria a estrutura do registro separado por PIPE "|"
               gl_conteudo := '|';
               --
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_c110(i)(j).reg || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_c110(i)(j).cod_inf || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_c110(i)(j).txt_compl || '|';
               --
               vn_fase := 7.6;
               --
               pkb_armaz_estr_arq_efd ( ev_reg_blc   => 'C110'
                                      , el_conteudo  => gl_conteudo );
               --
               vn_fase := 8;
               -- REGISTRO C111: PROCESSO REFERENCIADO
               begin
                  vn_qtde_reg_c111 := vt_tri_tab_reg_c111(i)(j).count;
               exception
                  when others then
                     vn_qtde_reg_c111 := 0;
               end;
               --
               vn_fase := 8.1;
               --
               if nvl(vn_qtde_reg_c111,0) > 0 then
                  --
                  vn_fase := 8.2;
                  --
                  k := nvl(vt_tri_tab_reg_c111(i)(j).first,0);
                  --
                  vn_fase := 8.3;
                  --
                  loop
                     --
                     vn_fase := 8.4;
                     --
                     if nvl(k,0) = 0 then
                        exit;
                     end if;
                     --
                     vn_fase := 8.5;
                     -- cria a estrutura do registro separado por PIPE "|"
                     gl_conteudo := '|';
                     --
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_c111(i)(j)(k).reg || '|';
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_c111(i)(j)(k).num_proc || '|';
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_c111(i)(j)(k).ind_proc || '|';
                     --
                     vn_fase := 8.6;
                     --
                     pkb_armaz_estr_arq_efd ( ev_reg_blc   => 'C111'
                                            , el_conteudo  => gl_conteudo );
                     --
                     vn_fase := 8.7;
                     --
                     if k = vt_tri_tab_reg_c111(i)(j).last then
                        exit;
                     else
                        k := vt_tri_tab_reg_c111(i)(j).next(k);
                     end if;
                     --
                  end loop; -- fim C111
                  --
               end if;
               -- REGISTRO C112: DOCUMENTO DE ARRECADAÇÃO REFERENCIADO
               vn_fase := 9;
               --
               begin
                  vn_qtde_reg_c112 := vt_tri_tab_reg_c112(i)(j).count;
               exception
                  when others then
                     vn_qtde_reg_c112 := 0;
               end;
               --
               vn_fase := 9.1;
               --
               if nvl(vn_qtde_reg_c112,0) > 0 then
                  --
                  vn_fase := 9.2;
                  --
                  k := nvl(vt_tri_tab_reg_c112(i)(j).first,0);
                  --
                  vn_fase := 9.3;
                  --
                  loop
                     --
                     vn_fase := 9.4;
                     --
                     if nvl(k,0) = 0 then
                        exit;
                     end if;
                     --
                     vn_fase := 9.5;
                     -- cria a estrutura do registro separado por PIPE "|"
                     gl_conteudo := '|';
                     --
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_c112(i)(j)(k).reg || '|';
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_c112(i)(j)(k).cod_da || '|';
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_c112(i)(j)(k).uf || '|';
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_c112(i)(j)(k).num_da || '|';
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_c112(i)(j)(k).cod_aut || '|';
                     gl_conteudo := gl_conteudo || fkg_formata_num(vt_tri_tab_reg_c112(i)(j)(k).vl_da, '9999999999990D99') || '|';
                     gl_conteudo := gl_conteudo || to_char(vt_tri_tab_reg_c112(i)(j)(k).dt_vcto, 'ddmmrrrr') || '|';
                     gl_conteudo := gl_conteudo || to_char(vt_tri_tab_reg_c112(i)(j)(k).dt_pgto, 'ddmmrrrr') || '|';
                     --
                     vn_fase := 9.6;
                     --
                     pkb_armaz_estr_arq_efd ( ev_reg_blc   => 'C112'
                                            , el_conteudo  => gl_conteudo );
                     --
                     vn_fase := 9.7;
                     --
                     if k = vt_tri_tab_reg_c112(i)(j).last then
                        exit;
                     else
                        k := vt_tri_tab_reg_c112(i)(j).next(k);
                     end if;
                     --
                  end loop; -- fim C112
                  --
               end if;
               -- REGISTRO C113: DOCUMENTO FISCAL REFERENCIADO
               vn_fase := 10;
               --
               begin
                  vn_qtde_reg_c113 := vt_tri_tab_reg_c113(i)(j).count;
               exception
                  when others then
                     vn_qtde_reg_c113 := 0;
               end;
               --
               vn_fase := 10.1;
               --
               if nvl(vn_qtde_reg_c113,0) > 0 then
                  --
                  vn_fase := 10.2;
                  --
                  k := nvl(vt_tri_tab_reg_c113(i)(j).first,0);
                  --
                  vn_fase := 10.3;
                  --
                  loop
                     --
                     vn_fase := 10.4;
                     --
                     if nvl(k,0) = 0 then
                        exit;
                     end if;
                     --
                     vn_fase := 10.5;
                     -- cria a estrutura do registro separado por PIPE "|"
                     gl_conteudo := '|';
                     --
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_c113(i)(j)(k).reg || '|';
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_c113(i)(j)(k).ind_oper || '|';
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_c113(i)(j)(k).ind_emit || '|';
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_c113(i)(j)(k).cod_part || '|';
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_c113(i)(j)(k).cod_mod || '|';
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_c113(i)(j)(k).ser || '|';
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_c113(i)(j)(k).sub || '|';
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_c113(i)(j)(k).num_doc || '|';
                     gl_conteudo := gl_conteudo || to_char(vt_tri_tab_reg_c113(i)(j)(k).dt_doc, 'ddmmrrrr') || '|';
                     --
                     if gt_row_abertura_efd.dt_ini >= to_date('01/01/2017', 'dd/mm/rrrr') then
                        --
                        gl_conteudo := gl_conteudo || vt_tri_tab_reg_c113(i)(j)(k).chv_doce || '|';
                        --
                     end if;
                     --
                     vn_fase := 10.6;
                     --
                     pkb_armaz_estr_arq_efd ( ev_reg_blc   => 'C113'
                                            , el_conteudo  => gl_conteudo );
                     --
                     vn_fase := 10.7;
                     --
                     if k = vt_tri_tab_reg_c113(i)(j).last then
                        exit;
                     else
                        k := vt_tri_tab_reg_c113(i)(j).next(k);
                     end if;
                     --
                  end loop; -- fim C113
                  --
               end if;
               -- REGISTRO C114: CUPOM FISCAL REFERENCIADO
               vn_fase := 11;
               --
               begin
                  vn_qtde_reg_c114 := vt_tri_tab_reg_c114(i)(j).count;
               exception
                  when others then
                     vn_qtde_reg_c114 := 0;
               end;
               --
               vn_fase := 11.1;
               --
               if nvl(vn_qtde_reg_c114,0) > 0 then
                  --
                  vn_fase := 11.2;
                  --
                  k := nvl(vt_tri_tab_reg_c114(i)(j).first,0);
                  --
                  vn_fase := 11.3;
                  --
                  loop
                     --
                     vn_fase := 11.4;
                     --
                     if nvl(k,0) = 0 then
                        exit;
                     end if;
                     --
                     vn_fase := 11.5;
                     -- cria a estrutura do registro separado por PIPE "|"
                     gl_conteudo := '|';
                     --
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_c114(i)(j)(k).reg || '|';
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_c114(i)(j)(k).cod_mod || '|';
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_c114(i)(j)(k).ecf_fab || '|';
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_c114(i)(j)(k).ecf_cx || '|';
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_c114(i)(j)(k).num_doc || '|';
                     gl_conteudo := gl_conteudo || to_char(vt_tri_tab_reg_c114(i)(j)(k).dt_doc, 'ddmmrrrr') || '|';
                     --
                     vn_fase := 11.6;
                     --
                     pkb_armaz_estr_arq_efd ( ev_reg_blc   => 'C114'
                                            , el_conteudo  => gl_conteudo );
                     --
                     vn_fase := 11.7;
                     --
                     if k = vt_tri_tab_reg_c114(i)(j).last then
                        exit;
                     else
                        k := vt_tri_tab_reg_c114(i)(j).next(k);
                     end if;
                     --
                  end loop; -- fim C114
                  --
               end if;
               -- REGISTRO C115: LOCAL DA COLETA E/OU ENTREGA (CÓDIGO 01, 1B E 04).
               vn_fase := 12;
               --
               begin
                  vn_qtde_reg_c115 := vt_tri_tab_reg_c115(i)(j).count;
               exception
                  when others then
                     vn_qtde_reg_c115 := 0;
               end;
               --
               vn_fase := 12.1;
               --
               if nvl(vn_qtde_reg_c115,0) > 0 then
                  --
                  vn_fase := 12.2;
                  --
                  k := nvl(vt_tri_tab_reg_c115(i)(j).first,0);
                  --
                  vn_fase := 12.3;
                  --
                  loop
                     --
                     vn_fase := 12.4;
                     --
                     if nvl(k,0) = 0 then
                        exit;
                     end if;
                     --
                     vn_fase := 12.5;
                     -- cria a estrutura do registro separado por PIPE "|"
                     gl_conteudo := '|';
                     --
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_c115(i)(j)(k).reg || '|';
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_c115(i)(j)(k).ind_carga || '|';
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_c115(i)(j)(k).cnpj_col || '|';
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_c115(i)(j)(k).ie_col || '|';
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_c115(i)(j)(k).cpf_col || '|';
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_c115(i)(j)(k).cod_mun_col || '|';
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_c115(i)(j)(k).cnpj_entg || '|';
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_c115(i)(j)(k).ie_entg || '|';
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_c115(i)(j)(k).cpf_entg || '|';
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_c115(i)(j)(k).cod_mun_entg || '|';
                     --
                     vn_fase := 12.6;
                     --
                     pkb_armaz_estr_arq_efd ( ev_reg_blc   => 'C115'
                                            , el_conteudo  => gl_conteudo );
                     --
                     vn_fase := 12.7;
                     --
                     if k = vt_tri_tab_reg_c115(i)(j).last then
                        exit;
                     else
                        k := vt_tri_tab_reg_c115(i)(j).next(k);
                     end if;
                     --
                  end loop; -- fim C115
                  --
               end if;
               --
               -- REGISTRO C116: CUPOM FISCAL ELETRONICO REFERENCIADO
               vn_fase := 13;
               --
               begin
                  vn_qtde_reg_c116 := vt_tri_tab_reg_c116(i)(j).count;
               exception
                  when others then
                     vn_qtde_reg_c116 := 0;
               end;
               --
               vn_fase := 13.1;
               --
               if nvl(vn_qtde_reg_c116,0) > 0 then
                  --
                  vn_fase := 13.2;
                  --
                  k := nvl(vt_tri_tab_reg_c116(i)(j).first,0);
                  --
                  vn_fase := 13.3;
                  --
                  loop
                     --
                     vn_fase := 13.4;
                     --
                     if nvl(k,0) = 0 then
                        exit;
                     end if;
                     --
                     vn_fase := 13.5;
                     -- cria a estrutura do registro separado por PIPE "|"
                     gl_conteudo := '|';
                     --
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_c116(i)(j)(k).reg || '|';
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_c116(i)(j)(k).cod_mod || '|';
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_c116(i)(j)(k).nr_sat || '|';
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_c116(i)(j)(k).chv_cfe || '|';
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_c116(i)(j)(k).num_cfe || '|';
                     gl_conteudo := gl_conteudo || to_char(vt_tri_tab_reg_c116(i)(j)(k).dt_doc, 'ddmmrrrr') || '|';
                     --
                     vn_fase := 13.6;
                     --
                     pkb_armaz_estr_arq_efd ( ev_reg_blc   => 'C116'
                                            , el_conteudo  => gl_conteudo );
                     --
                     vn_fase := 13.7;
                     --
                     if k = vt_tri_tab_reg_c116(i)(j).last then
                        exit;
                     else
                        k := vt_tri_tab_reg_c116(i)(j).next(k);
                     end if;
                     --
                  end loop; -- fim C116
                  --
               end if;
               --
               vn_fase := 13.8;
               --
               if j = vt_bi_tab_reg_c110(i).last then
                  exit;
               else
                  j := vt_bi_tab_reg_c110(i).next(j);
               end if;
               --
            end loop; -- fim C110
            --
         end if;
         --
         vn_fase := 14;
         -- REGISTRO C120: COMPLEMENTO DE DOCUMENTO - OPERAÇÕES DE IMPORTAÇÃO (CÓDIGOS 01 e 55)
         begin
            vn_qtde_reg_c120 := vt_bi_tab_reg_c120(i).count;
         exception
            when others then
               vn_qtde_reg_c120 := 0;
         end;
         --
         vn_fase := 14.1;
         --
         if nvl(vn_qtde_reg_c120,0) > 0 then
            --
            vn_fase := 14.2;
            --
            j := nvl(vt_bi_tab_reg_c120(i).first,0);
            --
            vn_fase := 14.3;
            --
            loop
               --
               vn_fase := 14.4;
               --
               if nvl(j,0) = 0 then
                  exit;
               end if;
               --
               vn_fase := 14.5;
               -- cria a estrutura do registro separado por PIPE "|"
               gl_conteudo := '|';
               --
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_c120(i)(j).reg || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_c120(i)(j).cod_doc_imp || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_c120(i)(j).num_doc_imp || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_c120(i)(j).pis_imp, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_c120(i)(j).cofins_imp, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_c120(i)(j).num_acdraw || '|';
               --
               vn_fase := 14.6;
               --
               pkb_armaz_estr_arq_efd ( ev_reg_blc   => 'C120'
                                      , el_conteudo  => gl_conteudo );
               --
               vn_fase := 14.7;
               --
               if j = vt_bi_tab_reg_c120(i).last then
                  exit;
               else
                  j := vt_bi_tab_reg_c120(i).next(j);
               end if;
               --
            end loop; -- fim C120
            --
         end if;
         --
         vn_fase := 15;
         -- REGISTRO C130: ISSQN, IRRF E PREVIDÊNCIA SOCIAL
         begin
            vn_qtde_reg_c130 := vt_bi_tab_reg_c130(i).count;
         exception
            when others then
               vn_qtde_reg_c130 := 0;
         end;
         --
         vn_fase := 15.1;
         --
         if nvl(vn_qtde_reg_c130,0) > 0 then
            --
            vn_fase := 15.2;
            --
            j := nvl(vt_bi_tab_reg_c130(i).first,0);
            --
            vn_fase := 15.3;
            --
            loop
               --
               vn_fase := 15.4;
               --
               if nvl(j,0) = 0 then
                  exit;
               end if;
               --
               vn_fase := 15.5;
               -- cria a estrutura do registro separado por PIPE "|"
               gl_conteudo := '|';
               --
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_c130(i)(j).reg || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_c130(i)(j).vl_serv_nt, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_c130(i)(j).vl_bc_issqn, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_c130(i)(j).vl_issqn, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_c130(i)(j).vl_bc_irrf, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_c130(i)(j).vl_irrf, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_c130(i)(j).vl_bc_prev, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_c130(i)(j).vl_prev, '9999999999990D99') || '|';
               --
               vn_fase := 15.6;
               --
               pkb_armaz_estr_arq_efd ( ev_reg_blc   => 'C130'
                                      , el_conteudo  => gl_conteudo );
               --
               vn_fase := 15.7;
               --
               if j = vt_bi_tab_reg_c130(i).last then
                  exit;
               else
                  j := vt_bi_tab_reg_c130(i).next(j);
               end if;
               --
            end loop; -- fim C130
            --
         end if;
         --
         vn_fase := 16;
         -- REGISTRO REGISTRO C140: FATURA (CÓDIGO 01)
         begin
            vn_qtde_reg_c140 := vt_bi_tab_reg_c140(i).count;
         exception
            when others then
               vn_qtde_reg_c140 := 0;
         end;
         --
         vn_fase := 16.1;
         --
         if nvl(vn_qtde_reg_c140,0) > 0 then
            --
            vn_fase := 16.2;
            --
            j := nvl(vt_bi_tab_reg_c140(i).first,0);
            --
            vn_fase := 16.3;
            --
            loop
               --
               vn_fase := 16.4;
               --
               if nvl(j,0) = 0 then
                  exit;
               end if;
               --
               vn_fase := 16.5;
               -- cria a estrutura do registro separado por PIPE "|"
               gl_conteudo := '|';
               --
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_c140(i)(j).reg || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_c140(i)(j).ind_emit || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_c140(i)(j).ind_tit || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_c140(i)(j).desc_tit || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_c140(i)(j).num_tit || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_c140(i)(j).qtd_parc || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_c140(i)(j).vl_tit, '9999999999990D99') || '|';
               --
               vn_fase := 16.6;
               --
               pkb_armaz_estr_arq_efd ( ev_reg_blc   => 'C140'
                                      , el_conteudo  => gl_conteudo );
               --
               vn_fase := 17;
               -- REGISTRO REGISTRO C140: FATURA (CÓDIGO 01)
               begin
                  vn_qtde_reg_c141 := vt_tri_tab_reg_c141(i)(j).count;
               exception
                  when others then
                     vn_qtde_reg_c141 := 0;
               end;
               --
               vn_fase := 17.1;
               --
               if nvl(vn_qtde_reg_c141,0) > 0 then
                  --
                  vn_fase := 17.2;
                  --
                  k := nvl(vt_tri_tab_reg_c141(i)(j).first,0);
                  --
                  vn_fase := 17.3;
                  --
                  loop
                     --
                     vn_fase := 17.4;
                     --
                     if nvl(k,0) = 0 then
                        exit;
                     end if;
                     --
                     vn_fase := 17.5;
                     -- cria a estrutura do registro separado por PIPE "|"
                     gl_conteudo := '|';
                     --
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_c141(i)(j)(k).reg || '|';
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_c141(i)(j)(k).num_parc || '|';
                     gl_conteudo := gl_conteudo || to_char(vt_tri_tab_reg_c141(i)(j)(k).dt_vcto, 'ddmmrrrr') || '|';
                     gl_conteudo := gl_conteudo || fkg_formata_num(vt_tri_tab_reg_c141(i)(j)(k).vl_parc, '9999999999990D99') || '|';
                     --
                     vn_fase := 17.6;
                     --
                     pkb_armaz_estr_arq_efd ( ev_reg_blc   => 'C141'
                                            , el_conteudo  => gl_conteudo );
                     --
                     vn_fase := 17.7;
                     --
                     if k = vt_tri_tab_reg_c141(i)(j).last then
                        exit;
                     else
                        k := vt_tri_tab_reg_c141(i)(j).next(k);
                     end if;
                     --
                  end loop; -- fim C141
                  --
               end if;
               --
               vn_fase := 17.8;
               --
               if j = vt_bi_tab_reg_c140(i).last then
                  exit;
               else
                  j := vt_bi_tab_reg_c140(i).next(j);
               end if;
               --
            end loop; -- fim C140
            --
         end if;
         --
         vn_fase := 18;
         -- REGISTRO C160: VOLUMES TRANSPORTADOS (CÓDIGO 01 E 04) - EXCETO COMBUSTÍVEIS
         begin
            vn_qtde_reg_c160 := vt_bi_tab_reg_c160(i).count;
         exception
            when others then
               vn_qtde_reg_c160 := 0;
         end;
         --
         vn_fase := 18.1;
         --
         if nvl(vn_qtde_reg_c160,0) > 0 then
            --
            vn_fase := 18.2;
            --
            j := nvl(vt_bi_tab_reg_c160(i).first,0);
            --
            vn_fase := 18.3;
            --
            loop
               --
               vn_fase := 18.4;
               --
               if nvl(j,0) = 0 then
                  exit;
               end if;
               --
               vn_fase := 18.5;
               -- cria a estrutura do registro separado por PIPE "|"
               gl_conteudo := '|';
               --
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_c160(i)(j).reg || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_c160(i)(j).cod_part || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_c160(i)(j).veic_id || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_c160(i)(j).qtd_vol || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_c160(i)(j).peso_brt, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_c160(i)(j).peso_liq, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_c160(i)(j).uf_id || '|';
               --
               vn_fase := 18.6;
               --
               pkb_armaz_estr_arq_efd ( ev_reg_blc   => 'C160'
                                      , el_conteudo  => gl_conteudo );
               --
               vn_fase := 18.7;
               --
               if j = vt_bi_tab_reg_c160(i).last then
                  exit;
               else
                  j := vt_bi_tab_reg_c160(i).next(j);
               end if;
               --
            end loop; -- fim C160
            --
         end if;
         --
         vn_fase := 19;
         -- REGISTRO C165: OPERAÇÕES COM COMBUSTÍVEIS (CÓDIGO 01)
         begin
            vn_qtde_reg_c165 := vt_bi_tab_reg_c165(i).count;
         exception
            when others then
               vn_qtde_reg_c165 := 0;
         end;
         --
         vn_fase := 19.1;
         --
         if nvl(vn_qtde_reg_c165,0) > 0 then
            --
            vn_fase := 19.2;
            --
            j := nvl(vt_bi_tab_reg_c165(i).first,0);
            --
            vn_fase := 19.3;
            --
            loop
               --
               vn_fase := 19.4;
               --
               if nvl(j,0) = 0 then
                  exit;
               end if;
               --
               vn_fase := 19.5;
               -- cria a estrutura do registro separado por PIPE "|"
               gl_conteudo := '|';
               --
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_c165(i)(j).reg || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_c165(i)(j).cod_part || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_c165(i)(j).veic_id || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_c165(i)(j).cod_aut || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_c165(i)(j).nr_passe || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_c165(i)(j).hora || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_c165(i)(j).temper, '9999999999990D9') || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_c165(i)(j).qtd_vol || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_c165(i)(j).peso_brt, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_c165(i)(j).peso_liq, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_c165(i)(j).nom_mot || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_c165(i)(j).cpf || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_c165(i)(j).uf_id || '|';
               --
               vn_fase := 19.6;
               --
               pkb_armaz_estr_arq_efd ( ev_reg_blc   => 'C165'
                                      , el_conteudo  => gl_conteudo );
               --
               vn_fase := 19.7;
               --
               if j = vt_bi_tab_reg_c165(i).last then
                  exit;
               else
                  j := vt_bi_tab_reg_c165(i).next(j);
               end if;
               --
            end loop; -- fim C165
            --
         end if;
         --
         vn_fase := 20;
         -- REGISTRO C170: ITENS DO DOCUMENTO (CÓDIGO 01, 1B, 04 e 55).
         begin
            vn_qtde_reg_c170 := vt_bi_tab_reg_c170(i).count;
         exception
            when others then
               vn_qtde_reg_c170 := 0;
         end;
         --
         vn_fase := 20.1;
         --
         if nvl(vn_qtde_reg_c170,0) > 0 then
            --
            vn_fase := 20.2;
            --
            j := nvl(vt_bi_tab_reg_c170(i).first,0);
            --
            vn_fase := 20.3;
            --
            loop
               --
               vn_fase := 20.4;
               --
               if nvl(j,0) = 0 then
                  exit;
               end if;
               --
               vn_fase := 20.5;
               -- cria a estrutura do registro separado por PIPE "|"
               gl_conteudo := '|';
               --
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_c170(i)(j).reg || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_c170(i)(j).num_item || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_c170(i)(j).cod_item || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_c170(i)(j).descr_compl || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_c170(i)(j).qtd, '9999999999990D99999') || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_c170(i)(j).unid || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_c170(i)(j).vl_item, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_c170(i)(j).vl_desc, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_c170(i)(j).ind_mov || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_c170(i)(j).cst_icms || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_c170(i)(j).cfop || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_c170(i)(j).cod_nat || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_c170(i)(j).vl_bc_icms, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_c170(i)(j).aliq_icms, '990D99') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_c170(i)(j).vl_icms, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_c170(i)(j).vl_bc_icms_st, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_c170(i)(j).aliq_st, '990D99') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_c170(i)(j).vl_icms_st, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_c170(i)(j).ind_apur || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_c170(i)(j).cst_ipi || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_c170(i)(j).cod_enq || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_c170(i)(j).vl_bc_ipi, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_c170(i)(j).aliq_ipi, '990D99') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_c170(i)(j).vl_ipi, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_c170(i)(j).cst_pis || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_c170(i)(j).vl_bc_pis, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_c170(i)(j).aliq_pis, '990D99') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_c170(i)(j).quant_bc_pis, '9999999999990D999') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_c170(i)(j).vl_aliq_pis, '9999999999990D99')  || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_c170(i)(j).vl_pis, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_c170(i)(j).cst_cofins || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_c170(i)(j).vl_bc_cofins, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_c170(i)(j).aliq_cofins, '990D99') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_c170(i)(j).quant_bc_cofins, '9999999999990D999') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_c170(i)(j).vl_aliq_cofins, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_c170(i)(j).vl_cofins, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_c170(i)(j).cod_cta || '|';
               ----
               if gt_row_abertura_efd.dt_ini >= to_date('01/01/2019', 'dd/mm/rrrr') then
                  gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_c170(i)(j).vl_abat_nt, '9999999999990D99') || '|';
               end if;
               ----
               --
               vn_fase := 20.6;
               --
               pkb_armaz_estr_arq_efd ( ev_reg_blc   => 'C170'
                                      , el_conteudo  => gl_conteudo );
               --
               vn_fase := 21;
               -- REGISTRO C171: ARMAZENAMENTO DE COMBUSTIVEIS (código 01, 55)
               begin
                  vn_qtde_reg_c171 := vt_tri_tab_reg_c171(i)(j).count;
               exception
                  when others then
                     vn_qtde_reg_c171 := 0;
               end;
               --
               vn_fase := 21.1;
               --
               if nvl(vn_qtde_reg_c171,0) > 0 then
                  --
                  vn_fase := 21.2;
                  --
                  k := nvl(vt_tri_tab_reg_c171(i)(j).first,0);
                  --
                  vn_fase := 21.3;
                  --
                  loop
                     --
                     vn_fase := 21.4;
                     --
                     if nvl(k,0) = 0 then
                        exit;
                     end if;
                     --
                     vn_fase := 21.5;
                     -- cria a estrutura do registro separado por PIPE "|"
                     gl_conteudo := '|';
                     --
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_c171(i)(j)(k).reg || '|';
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_c171(i)(j)(k).num_tanque || '|';
                     gl_conteudo := gl_conteudo || fkg_formata_num(vt_tri_tab_reg_c171(i)(j)(k).qtde, '9999999999990D999') || '|';
                     --
                     vn_fase := 21.6;
                     --
                     pkb_armaz_estr_arq_efd ( ev_reg_blc   => 'C171'
                                            , el_conteudo  => gl_conteudo );
                     --
                     vn_fase := 21.7;
                     --
                     if k = vt_tri_tab_reg_c171(i)(j).last then
                        exit;
                     else
                        k := vt_tri_tab_reg_c171(i)(j).next(k);
                     end if;
                     --
                  end loop; -- fim C171
                  --
               end if;
               --
               vn_fase := 22;
               -- REGISTRO C172: OPERAÇÕES COM ISSQN (CÓDIGO 01)
               begin
                  vn_qtde_reg_c172 := vt_tri_tab_reg_c172(i)(j).count;
               exception
                  when others then
                     vn_qtde_reg_c172 := 0;
               end;
               --
               vn_fase := 22.1;
               --
               if nvl(vn_qtde_reg_c172,0) > 0 then
                  --
                  vn_fase := 22.2;
                  --
                  k := nvl(vt_tri_tab_reg_c172(i)(j).first,0);
                  --
                  vn_fase := 22.3;
                  --
                  loop
                     --
                     vn_fase := 22.4;
                     --
                     if nvl(k,0) = 0 then
                        exit;
                     end if;
                     --
                     vn_fase := 22.5;
                     -- cria a estrutura do registro separado por PIPE "|"
                     gl_conteudo := '|';
                     --
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_c172(i)(j)(k).reg || '|';
                     gl_conteudo := gl_conteudo || fkg_formata_num(vt_tri_tab_reg_c172(i)(j)(k).vl_bc_issqn, '9999999999990D99') || '|';
                     gl_conteudo := gl_conteudo || fkg_formata_num(vt_tri_tab_reg_c172(i)(j)(k).aliq_issqn, '990D99') || '|';
                     gl_conteudo := gl_conteudo || fkg_formata_num(vt_tri_tab_reg_c172(i)(j)(k).vl_issqn, '9999999999990D99') || '|';
                     --
                     vn_fase := 22.6;
                     --
                     pkb_armaz_estr_arq_efd ( ev_reg_blc   => 'C172'
                                            , el_conteudo  => gl_conteudo );
                     --
                     vn_fase := 22.7;
                     --
                     if k = vt_tri_tab_reg_c172(i)(j).last then
                        exit;
                     else
                        k := vt_tri_tab_reg_c172(i)(j).next(k);
                     end if;
                     --
                  end loop; -- fim C172
                  --
               end if;
               --
               vn_fase := 23;
               -- REGISTRO C173: OPERAÇÕES COM MEDICAMENTOS (CÓDIGO 01 e 55)
               begin
                  vn_qtde_reg_c173 := vt_tri_tab_reg_c173(i)(j).count;
               exception
                  when others then
                     vn_qtde_reg_c173 := 0;
               end;
               --
               vn_fase := 23.1;
               --
               if nvl(vn_qtde_reg_c173,0) > 0 then
                  --
                  vn_fase := 23.2;
                  --
                  k := nvl(vt_tri_tab_reg_c173(i)(j).first,0);
                  --
                  vn_fase := 23.3;
                  --
                  loop
                     --
                     vn_fase := 23.4;
                     --
                     if nvl(k,0) = 0 then
                        exit;
                     end if;
                     --
                     vn_fase := 23.5;
                     -- cria a estrutura do registro separado por PIPE "|"
                     gl_conteudo := '|';
                     --
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_c173(i)(j)(k).reg || '|';
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_c173(i)(j)(k).lote_med || '|';
                     gl_conteudo := gl_conteudo || fkg_formata_num(vt_tri_tab_reg_c173(i)(j)(k).qtd_item, '9999999999990D999') || '|';
                     gl_conteudo := gl_conteudo || to_char(vt_tri_tab_reg_c173(i)(j)(k).dt_fab, 'ddmmrrrr') || '|';
                     gl_conteudo := gl_conteudo || to_char(vt_tri_tab_reg_c173(i)(j)(k).dt_val, 'ddmmrrrr') || '|';
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_c173(i)(j)(k).ind_med || '|';
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_c173(i)(j)(k).tp_prod || '|';
                     gl_conteudo := gl_conteudo || fkg_formata_num(vt_tri_tab_reg_c173(i)(j)(k).vl_tab_max, '9999999999990D99') || '|';
                     --
                     vn_fase := 23.6;
                     --
                     pkb_armaz_estr_arq_efd ( ev_reg_blc   => 'C173'
                                            , el_conteudo  => gl_conteudo );
                     --
                     vn_fase := 23.7;
                     --
                     if k = vt_tri_tab_reg_c173(i)(j).last then
                        exit;
                     else
                        k := vt_tri_tab_reg_c173(i)(j).next(k);
                     end if;
                     --
                  end loop; -- fim C173
                  --
               end if;
               --
               vn_fase := 24;
               -- REGISTRO C174: OPERAÇÕES COM ARMAS DE FOGO (CÓDIGO 01)
               begin
                  vn_qtde_reg_c174 := vt_tri_tab_reg_c174(i)(j).count;
               exception
                  when others then
                     vn_qtde_reg_c174 := 0;
               end;
               --
               vn_fase := 24.1;
               --
               if nvl(vn_qtde_reg_c174,0) > 0 then
                  --
                  vn_fase := 24.2;
                  --
                  k := nvl(vt_tri_tab_reg_c174(i)(j).first,0);
                  --
                  vn_fase := 24.3;
                  --
                  loop
                     --
                     vn_fase := 24.4;
                     --
                     if nvl(k,0) = 0 then
                        exit;
                     end if;
                     --
                     vn_fase := 24.5;
                     -- cria a estrutura do registro separado por PIPE "|"
                     gl_conteudo := '|';
                     --
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_c174(i)(j)(k).reg || '|';
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_c174(i)(j)(k).ind_arm || '|';
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_c174(i)(j)(k).num_arm || '|';
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_c174(i)(j)(k).descr_compl || '|';
                     --
                     vn_fase := 24.6;
                     --
                     pkb_armaz_estr_arq_efd ( ev_reg_blc   => 'C174'
                                            , el_conteudo  => gl_conteudo );
                     --
                     vn_fase := 24.7;
                     --
                     if k = vt_tri_tab_reg_c174(i)(j).last then
                        exit;
                     else
                        k := vt_tri_tab_reg_c174(i)(j).next(k);
                     end if;
                     --
                  end loop; -- fim C174
                  --
               end if;
               --
               vn_fase := 25;
               -- REGISTRO C175: OPERAÇÕES COM VEÍCULOS NOVOS (CÓDIGO 01 e 55)
               begin
                  vn_qtde_reg_c175 := vt_tri_tab_reg_c175(i)(j).count;
               exception
                  when others then
                     vn_qtde_reg_c175 := 0;
               end;
               --
               vn_fase := 25.1;
               --
               if nvl(vn_qtde_reg_c175,0) > 0 then
                  --
                  vn_fase := 25.2;
                  --
                  k := nvl(vt_tri_tab_reg_c175(i)(j).first,0);
                  --
                  vn_fase := 25.3;
                  --
                  loop
                     --
                     vn_fase := 25.4;
                     --
                     if nvl(k,0) = 0 then
                        exit;
                     end if;
                     --
                     vn_fase := 25.5;
                     -- cria a estrutura do registro separado por PIPE "|"
                     gl_conteudo := '|';
                     --
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_c175(i)(j)(k).reg || '|';
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_c175(i)(j)(k).ind_veic_oper || '|';
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_c175(i)(j)(k).cnpj || '|';
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_c175(i)(j)(k).uf || '|';
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_c175(i)(j)(k).chassi_veic || '|';
                     --
                     vn_fase := 25.6;
                     --
                     pkb_armaz_estr_arq_efd ( ev_reg_blc   => 'C175'
                                            , el_conteudo  => gl_conteudo );
                     --
                     vn_fase := 25.7;
                     --
                     if k = vt_tri_tab_reg_c175(i)(j).last then
                        exit;
                     else
                        k := vt_tri_tab_reg_c175(i)(j).next(k);
                     end if;
                     --
                  end loop; -- fim C175
                  --
               end if;
               --
               vn_fase := 26;
               -- REGISTRO C176: RESSARCIMENTO DE ICMS EM OPERAÇÕES COM SUBSTITUIÇÃO TRIBUTÁRIA (CÓDIGO 01, 55)
               begin
                  vn_qtde_reg_c176 := vt_tri_tab_reg_c176(i)(j).count;
               exception
                  when others then
                     vn_qtde_reg_c176 := 0;
               end;
               --
               vn_fase := 26.1;
               --
               if nvl(vn_qtde_reg_c176,0) > 0 then
                  --
                  vn_fase := 26.2;
                  --
                  k := nvl(vt_tri_tab_reg_c176(i)(j).first,0);
                  --
                  vn_fase := 26.3;
                  --
                  loop
                     --
                     vn_fase := 26.4;
                     --
                     if nvl(k,0) = 0 then
                        exit;
                     end if;
                     --
                     vn_fase := 26.5;
                     -- cria a estrutura do registro separado por PIPE "|"
                     gl_conteudo := '|';
                     --
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_c176(i)(j)(k).reg || '|';
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_c176(i)(j)(k).cod_mod_ult_e || '|';
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_c176(i)(j)(k).num_doc_ult_e || '|';
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_c176(i)(j)(k).ser_ult_e || '|';
                     gl_conteudo := gl_conteudo || to_char(vt_tri_tab_reg_c176(i)(j)(k).dt_ult_e, 'ddmmrrrr') || '|';
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_c176(i)(j)(k).cod_part_ult_e || '|';
                     gl_conteudo := gl_conteudo || fkg_formata_num(vt_tri_tab_reg_c176(i)(j)(k).quant_ult_e, '9999999999990D999') || '|';
                     gl_conteudo := gl_conteudo || fkg_formata_num(vt_tri_tab_reg_c176(i)(j)(k).vl_unit_ult_e, '9999999999990D999') || '|';
                     gl_conteudo := gl_conteudo || fkg_formata_num(vt_tri_tab_reg_c176(i)(j)(k).vl_unit_bc_st, '9999999999990D999') || '|';
                     --
                     if gt_row_abertura_efd.dt_ini >= to_date('01/01/2017', 'dd/mm/rrrr') then
                        --
                        gl_conteudo := gl_conteudo || vt_tri_tab_reg_c176(i)(j)(k).chave_nfe_ult_e || '|';
                        gl_conteudo := gl_conteudo || vt_tri_tab_reg_c176(i)(j)(k).num_item_ult_e || '|';
                        gl_conteudo := gl_conteudo || fkg_formata_num(vt_tri_tab_reg_c176(i)(j)(k).vl_unit_bc_icms_ult_e, '9999999999990D99') || '|';
                        gl_conteudo := gl_conteudo || fkg_formata_num(vt_tri_tab_reg_c176(i)(j)(k).aliq_icms_ult_e, '990D99') || '|';
                        gl_conteudo := gl_conteudo || fkg_formata_num(vt_tri_tab_reg_c176(i)(j)(k).vl_unit_limite_bc_icms_ult_e, '9999999999990D99') || '|';
                        gl_conteudo := gl_conteudo || fkg_formata_num(vt_tri_tab_reg_c176(i)(j)(k).vl_unit_icms_ult_e, '9999999999990D999') || '|';
                        gl_conteudo := gl_conteudo || fkg_formata_num(vt_tri_tab_reg_c176(i)(j)(k).aliq_st_ult_e, '990D99') || '|';
                        gl_conteudo := gl_conteudo || fkg_formata_num(vt_tri_tab_reg_c176(i)(j)(k).vl_unit_res, '9999999999990D999') || '|';
                        gl_conteudo := gl_conteudo || vt_tri_tab_reg_c176(i)(j)(k).dm_cod_resp_ret || '|';
                        gl_conteudo := gl_conteudo || vt_tri_tab_reg_c176(i)(j)(k).dm_cod_mot_res || '|';
                        gl_conteudo := gl_conteudo || vt_tri_tab_reg_c176(i)(j)(k).chave_nfe_ret || '|';
                        gl_conteudo := gl_conteudo || vt_tri_tab_reg_c176(i)(j)(k).cod_part_nfe_ret || '|';
                        gl_conteudo := gl_conteudo || vt_tri_tab_reg_c176(i)(j)(k).ser_nfe_ret || '|';
                        gl_conteudo := gl_conteudo || vt_tri_tab_reg_c176(i)(j)(k).num_nfe_ret || '|';
                        gl_conteudo := gl_conteudo || vt_tri_tab_reg_c176(i)(j)(k).item_nfe_ret || '|';
                        gl_conteudo := gl_conteudo || vt_tri_tab_reg_c176(i)(j)(k).dm_cod_da || '|';
                        gl_conteudo := gl_conteudo || vt_tri_tab_reg_c176(i)(j)(k).num_da || '|';
                        --
                        if gt_row_abertura_efd.dt_ini >= to_date('01/01/2019', 'dd/mm/rrrr') then
                          ---
                          gl_conteudo := gl_conteudo || fkg_formata_num(vt_tri_tab_reg_c176(i)(j)(k).vl_unit_res_fcp_st, '9999999999990D999') || '|';
                          ---
                        end if;
                        --
                     end if;
                     --
                     vn_fase := 26.6;
                     --
                     pkb_armaz_estr_arq_efd ( ev_reg_blc   => 'C176'
                                            , el_conteudo  => gl_conteudo );
                     --
                     vn_fase := 26.7;
                     --
                     if k = vt_tri_tab_reg_c176(i)(j).last then
                        exit;
                     else
                        k := vt_tri_tab_reg_c176(i)(j).next(k);
                     end if;
                     --
                  end loop; -- fim C176
                  --
               end if;
               --
               vn_fase := 27;
               -- REGISTRO C177: OPERAÇÕES COM PRODUTOS SUJEITOS A SELO DE CONTROLE IPI
               begin
                  vn_qtde_reg_c177 := vt_tri_tab_reg_c177(i)(j).count;
               exception
                  when others then
                     vn_qtde_reg_c177 := 0;
               end;
               --
               vn_fase := 27.1;
               --
               if nvl(vn_qtde_reg_c177,0) > 0 then
                  --
                  vn_fase := 27.2;
                  --
                  k := nvl(vt_tri_tab_reg_c177(i)(j).first,0);
                  --
                  vn_fase := 27.3;
                  --
                  loop
                     --
                     vn_fase := 27.4;
                     --
                     if nvl(k,0) = 0 then
                        exit;
                     end if;
                     --
                     vn_fase := 27.5;
                     -- cria a estrutura do registro separado por PIPE "|"
                     gl_conteudo := '|';
                     --
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_c177(i)(j)(k).reg || '|';
                     -- Até 31/12/2018, será utilizado o registro C177 com Selo de controle IPI
                     if gt_row_abertura_efd.dt_ini <= to_date('31/12/2018', 'dd/mm/rrrr') then
                       ---
                       gl_conteudo := gl_conteudo || vt_tri_tab_reg_c177(i)(j)(k).cod_selo_ipi || '|';
                       gl_conteudo := gl_conteudo || vt_tri_tab_reg_c177(i)(j)(k).qt_selo_ipi || '|';
                       ---
                     else
                       /*A partir de 01/01/2019, será utilizada C177 com Tabela de Informações
                       Adicionais dos Itens do Documento Fiscal*/
                       ---
                       gl_conteudo := gl_conteudo || vt_tri_tab_reg_c177(i)(j)(k).cod_inf_item || '|';
                       ---
                     end if;
                     --
                     vn_fase := 27.6;
                     --
                     pkb_armaz_estr_arq_efd ( ev_reg_blc   => 'C177'
                                            , el_conteudo  => gl_conteudo );
                     --
                     vn_fase := 27.7;
                     --
                     if k = vt_tri_tab_reg_c177(i)(j).last then
                        exit;
                     else
                        k := vt_tri_tab_reg_c177(i)(j).next(k);
                     end if;
                     --
                  end loop; -- fim C177
                  --
               end if;
               --
               vn_fase := 28;
               -- REGISTRO C178: OPERAÇÕES COM PRODUTOS SUJEITOS À TRIBUTAÇÀO DE IPI POR UNIDADE OU QUANTIDADE DE PRODUTO
               begin
                  vn_qtde_reg_c178 := vt_tri_tab_reg_c178(i)(j).count;
               exception
                  when others then
                     vn_qtde_reg_c178 := 0;
               end;
               --
               vn_fase := 28.1;
               --
               if nvl(vn_qtde_reg_c178,0) > 0 then
                  --
                  vn_fase := 28.2;
                  --
                  k := nvl(vt_tri_tab_reg_c178(i)(j).first,0);
                  --
                  vn_fase := 28.3;
                  --
                  loop
                     --
                     vn_fase := 28.4;
                     --
                     if nvl(k,0) = 0 then
                        exit;
                     end if;
                     --
                     vn_fase := 28.5;
                     -- cria a estrutura do registro separado por PIPE "|"
                     gl_conteudo := '|';
                     --
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_c178(i)(j)(k).reg || '|';
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_c178(i)(j)(k).cl_enq || '|';
                     gl_conteudo := gl_conteudo || fkg_formata_num(vt_tri_tab_reg_c178(i)(j)(k).vl_unid, '9999999999990D99') || '|';
                     gl_conteudo := gl_conteudo || fkg_formata_num(vt_tri_tab_reg_c178(i)(j)(k).quant_pad, '9999999999990D999') || '|';
                     --
                     vn_fase := 28.6;
                     --
                     pkb_armaz_estr_arq_efd ( ev_reg_blc   => 'C178'
                                            , el_conteudo  => gl_conteudo );
                     --
                     vn_fase := 28.7;
                     --
                     if k = vt_tri_tab_reg_c178(i)(j).last then
                        exit;
                     else
                        k := vt_tri_tab_reg_c178(i)(j).next(k);
                     end if;
                     --
                  end loop; -- fim C178
                  --
               end if;
               --
               vn_fase := 29;
               -- REGISTRO C179: INFORMAÇÕES COMPLEMENTARES ST (CÓDIGO 01)
               begin
                  vn_qtde_reg_c179 := vt_tri_tab_reg_c179(i)(j).count;
               exception
                  when others then
                     vn_qtde_reg_c179 := 0;
               end;
               --
               vn_fase := 29.1;
               --
               if nvl(vn_qtde_reg_c179,0) > 0 then
                  --
                  vn_fase := 29.2;
                  --
                  k := nvl(vt_tri_tab_reg_c179(i)(j).first,0);
                  --
                  vn_fase := 29.3;
                  --
                  loop
                     --
                     vn_fase := 29.4;
                     --
                     if nvl(k,0) = 0 then
                        exit;
                     end if;
                     --
                     vn_fase := 29.5;
                     -- cria a estrutura do registro separado por PIPE "|"
                     gl_conteudo := '|';
                     --
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_c179(i)(j)(k).reg || '|';
                     gl_conteudo := gl_conteudo || fkg_formata_num(vt_tri_tab_reg_c179(i)(j)(k).bc_st_orig_dest, '9999999999990D99') || '|';
                     gl_conteudo := gl_conteudo || fkg_formata_num(vt_tri_tab_reg_c179(i)(j)(k).icms_st_rep, '9999999999990D99') || '|';
                     gl_conteudo := gl_conteudo || fkg_formata_num(vt_tri_tab_reg_c179(i)(j)(k).icms_st_compl, '9999999999990D99') || '|';
                     gl_conteudo := gl_conteudo || fkg_formata_num(vt_tri_tab_reg_c179(i)(j)(k).bc_ret, '9999999999990D99') || '|';
                     gl_conteudo := gl_conteudo || fkg_formata_num(vt_tri_tab_reg_c179(i)(j)(k).icms_ret, '9999999999990D99') || '|';
                     --
                     vn_fase := 29.6;
                     --
                     pkb_armaz_estr_arq_efd ( ev_reg_blc   => 'C179'
                                            , el_conteudo  => gl_conteudo );
                     --
                     vn_fase := 29.7;
                     --
                     if k = vt_tri_tab_reg_c179(i)(j).last then
                        exit;
                     else
                        k := vt_tri_tab_reg_c179(i)(j).next(k);
                     end if;
                     --
                  end loop; -- fim C179
                  --
               end if;
               --
               vn_fase := 29.8;
               --
               if j = vt_bi_tab_reg_c170(i).last then
                  exit;
               else
                  j := vt_bi_tab_reg_c170(i).next(j);
               end if;
               --
            end loop; -- fim C170
            --
         end if;
         --
         vn_fase := 30;
         -- REGISTRO C190: REGISTRO ANALÍTICO DO DOCUMENTO (CÓDIGO 01, 1B, 04 E 55).
         begin
            vn_qtde_reg_c190 := vt_bi_tab_reg_c190(i).count;
         exception
            when others then
               vn_qtde_reg_c190 := 0;
         end;
         --
         vn_fase := 30.1;
         --
         if nvl(vn_qtde_reg_c190,0) > 0 then
            --
            vn_fase := 30.2;
            --
            j := nvl(vt_bi_tab_reg_c190(i).first,0);
            --
            vn_fase := 30.3;
            --
            loop
               --
               vn_fase := 30.4;
               --
               if nvl(j,0) = 0 then
                  exit;
               end if;
               --
               vn_fase := 30.5;
               -- cria a estrutura do registro separado por PIPE "|"
               gl_conteudo := '|';
               --
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_c190(i)(j).reg || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_c190(i)(j).cst_icms || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_c190(i)(j).cfop || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_c190(i)(j).aliq_icms, '990D99') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_c190(i)(j).vl_opr, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_c190(i)(j).vl_bc_icms, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_c190(i)(j).vl_icms, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_c190(i)(j).vl_bc_icms_st, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_c190(i)(j).vl_icms_st, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_c190(i)(j).vl_red_bc, '9999999999990D99') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_c190(i)(j).vl_ipi, '9999999999990D99') || '|';
               --
               if gn_versao >= 102 then -- versão válida a partir de janeiro/2010
                  gl_conteudo := gl_conteudo || vt_bi_tab_reg_c190(i)(j).cod_obs || '|';
               end if;
               --
               vn_fase := 30.6;
               --
               pkb_armaz_estr_arq_efd ( ev_reg_blc   => 'C190'
                                      , el_conteudo  => gl_conteudo );
               --
               vn_fase := 30.7;
               --
               -- REGISTRO C191: INFORMAÇÕES DO FUNDO DE COMBATE À POBREZA - FCP - NA NFe (CÓDIGO 55)
               begin
                  vn_qtde_reg_c191 := vt_tri_tab_reg_c191(i)(j).count;
               exception
                  when others then
                     vn_qtde_reg_c191 := 0;
               end;
               --
               vn_fase := 30.8;
               --
               if nvl(vn_qtde_reg_c191,0) > 0 then
                  --
                  vn_fase := 30.9;
                  --
                  k := nvl(vt_tri_tab_reg_c191(i)(j).first,0);
                  --
                  vn_fase := 30.10;
                  --
                  loop
                     --
                     vn_fase := 30.11;
                     --
                     if nvl(k,0) = 0 then
                        exit;
                     end if;
                     --
                     vn_fase := 30.12;
                     -- cria a estrutura do registro separado por PIPE "|"
                     gl_conteudo := '|';
                     --
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_c191(i)(j)(k).reg || '|';
                     gl_conteudo := gl_conteudo || fkg_formata_num(vt_tri_tab_reg_c191(i)(j)(k).vl_fcp_op, '9999999999990D99') || '|';
                     gl_conteudo := gl_conteudo || fkg_formata_num(vt_tri_tab_reg_c191(i)(j)(k).vl_fcp_st, '9999999999990D99') || '|';
                     gl_conteudo := gl_conteudo || fkg_formata_num(vt_tri_tab_reg_c191(i)(j)(k).vl_fcp_ret, '9999999999990D99') || '|';
                     --
                     vn_fase := 30.13;
                     --
                     pkb_armaz_estr_arq_efd ( ev_reg_blc   => 'C191'
                                            , el_conteudo  => gl_conteudo );
                     --
                     vn_fase := 30.14;
                     --
                     if k = vt_tri_tab_reg_c191(i)(j).last then
                        exit;
                     else
                        k := vt_tri_tab_reg_c191(i)(j).next(k);
                     end if;
                     --
                  end loop; -- fim C191
                  --
               end if; -- fim C191
               --
               vn_fase := 30.15;
               --
               if j = vt_bi_tab_reg_c190(i).last then
                  exit;
               else
                  j := vt_bi_tab_reg_c190(i).next(j);
               end if;
               --
            end loop; -- fim C190
            --
         end if;
         --
         vn_fase := 31;
         /* O processo deve estar no nível abaixo do registro C190, e os valores recuperados dos impostos através do registro analítico
         -- REGISTRO C191: INFORMAÇÕES DO FUNDO DE COMBATE À POBREZA - FCP - NA NFe (CÓDIGO 55)
         if gt_row_abertura_efd.dt_ini >= to_date('01/01/2019', 'dd/mm/rrrr') then
           ----
           begin
              vn_qtde_reg_c191 := vt_bi_tab_reg_c191(i).count;
           exception
              when others then
                 vn_qtde_reg_c191 := 0;
           end;
           --
           vn_fase := 31.1;
           --
           if nvl(vn_qtde_reg_c191,0) > 0 then
              --
              vn_fase := 31.2;
              --
              j := nvl(vt_bi_tab_reg_c191(i).first,0);
              --
              vn_fase := 31.3;
              --
              loop
                 --
                 vn_fase := 31.4;
                 --
                 if nvl(j,0) = 0 then
                    exit;
                 end if;
                 --
                 vn_fase := 31.5;
                 -- cria a estrutura do registro separado por PIPE "|"
                 gl_conteudo := '|';
                 --
                 gl_conteudo := gl_conteudo || vt_bi_tab_reg_c191(i)(j).reg || '|';
                 gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_c191(i)(j).vl_fcp_op, '9999999999990D99') || '|';
                 gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_c191(i)(j).vl_fcp_st, '9999999999990D99') || '|';
                 gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_c191(i)(j).vl_fcp_ret, '9999999999990D99') || '|';
                 --
                 vn_fase := 31.6;
                 --
                 pkb_armaz_estr_arq_efd ( ev_reg_blc   => 'C191'
                                        , el_conteudo  => gl_conteudo );
                 --
                 vn_fase := 31.7;
                 --
                 if j = vt_bi_tab_reg_c191(i).last then
                    exit;
                 else
                    j := vt_bi_tab_reg_c191(i).next(j);
                 end if;
                 --
              end loop; -- fim C191
              --
           end if;

         end if;
         */
         -------
         vn_fase := 32;
         -- NOVO TÍTULO: REGISTRO C195: OBSERVAÇOES DO LANÇAMENTO FISCAL (CÓDIGO 01, 1B, 04 E 55)
         -- REGISTRO C195: OBSERVAÇOES DO LANÇAMENTO FISCAL (CÓDIGO 01, 1B E 55)
         begin
            vn_qtde_reg_c195 := vt_bi_tab_reg_c195(i).count;
         exception
            when others then
               vn_qtde_reg_c195 := 0;
         end;
         --
         vn_fase := 32.1;
         --
         if nvl(vn_qtde_reg_c195,0) > 0 then
            --
            vn_fase := 32.2;
            --
            j := nvl(vt_bi_tab_reg_c195(i).first,0);
            --
            vn_fase := 32.3;
            --
            loop
               --
               vn_fase := 32.4;
               --
               if nvl(j,0) = 0 then
                  exit;
               end if;
               --
               vn_fase := 32.5;
               -- cria a estrutura do registro separado por PIPE "|"
               gl_conteudo := '|';
               --
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_c195(i)(j).reg || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_c195(i)(j).cod_obs || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_c195(i)(j).txt_compl || '|';
               --
               vn_fase := 32.6;
               --
               pkb_armaz_estr_arq_efd ( ev_reg_blc   => 'C195'
                                      , el_conteudo  => gl_conteudo );
               --
               vn_fase := 33;
               -- REGISTRO C197: OUTRAS OBRIGAÇÕES TRIBUTÁRIAS, AJUSTES E INFORMAÇÕES DE VALORES PROVENIENTES DE DOCUMENTO FISCAL
               begin
                  vn_qtde_reg_c197 := vt_tri_tab_reg_c197(i)(j).count;
               exception
                  when others then
                     vn_qtde_reg_c197 := 0;
               end;
               --
               vn_fase := 33.1;
               --
               if nvl(vn_qtde_reg_c197,0) > 0 then
                  --
                  vn_fase := 33.2;
                  --
                  k := nvl(vt_tri_tab_reg_c197(i)(j).first,0);
                  --
                  vn_fase := 33.3;
                  --
                  loop
                     --
                     vn_fase := 33.4;
                     --
                     if nvl(k,0) = 0 then
                        exit;
                     end if;
                     --
                     vn_fase := 33.5;
                     -- cria a estrutura do registro separado por PIPE "|"
                     gl_conteudo := '|';
                     --
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_c197(i)(j)(k).reg || '|';
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_c197(i)(j)(k).cod_aj || '|';
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_c197(i)(j)(k).descr_compl_aj || '|';
                     gl_conteudo := gl_conteudo || vt_tri_tab_reg_c197(i)(j)(k).cod_item || '|';
                     gl_conteudo := gl_conteudo || fkg_formata_num(vt_tri_tab_reg_c197(i)(j)(k).vl_bc_icms, '9999999999990D99') || '|';
                     gl_conteudo := gl_conteudo || fkg_formata_num(vt_tri_tab_reg_c197(i)(j)(k).aliq_icms, '990D99') || '|';
                     gl_conteudo := gl_conteudo || fkg_formata_num(vt_tri_tab_reg_c197(i)(j)(k).vl_icms, '9999999999990D99') || '|';
                     gl_conteudo := gl_conteudo || fkg_formata_num(vt_tri_tab_reg_c197(i)(j)(k).vl_outros, '9999999999990D99') || '|';
                     --
                     vn_fase := 33.6;
                     --
                     pkb_armaz_estr_arq_efd ( ev_reg_blc   => 'C197'
                                            , el_conteudo  => gl_conteudo );
                     --
                     vn_fase := 33.7;
                     --
                     if k = vt_tri_tab_reg_c197(i)(j).last then
                        exit;
                     else
                        k := vt_tri_tab_reg_c197(i)(j).next(k);
                     end if;
                     --
                  end loop; -- fim C197
                  --
               end if;
               --
               vn_fase := 33.8;
               --
               if j = vt_bi_tab_reg_c195(i).last then
                  exit;
               else
                  j := vt_bi_tab_reg_c195(i).next(j);
               end if;
               --
            end loop; -- fim C195
            --
         end if;
         --
         vn_fase := 34;
         --
         if i = vt_tab_reg_c100.last then
            exit;
         else
            i := vt_tab_reg_c100.next(i);
         end if;
         --
      end loop;
      --
   end if;
   --
exception
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_armaz_reg_c100 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end pkb_armaz_reg_c100;

-------------------------------------------------------------------------------------------------------

-- Armazena em arquivo o REGISTRO C001: ABERTURA DO BLOCO C
procedure pkb_armaz_reg_c001
is
   --
   vn_fase  number := 0;
   i        pls_integer;
   --
begin
   --
   vn_fase := 1;
   --
   if nvl(vt_tab_reg_c001.count,0) > 0 then
      --
      vn_fase := 2;
      --
      i := nvl(vt_tab_reg_c001.first,0);
      --
      vn_fase := 3;
      --
      loop
         --
         vn_fase := 4;
         --
         if nvl(i,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 5;
         -- cria a estrutura do registro separado por PIPE "|"
         gl_conteudo := '|';
         --
         gl_conteudo := gl_conteudo || vt_tab_reg_c001(i).reg || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_c001(i).ind_mov || '|';
         --
         vn_fase := 6;
         --
         pkb_armaz_estr_arq_efd ( ev_reg_blc   => 'C001'
                                , el_conteudo  => gl_conteudo );
         --
         vn_fase := 7;
         --
         if i = vt_tab_reg_c001.last then
            exit;
         else
            i := vt_tab_reg_c001.next(i);
         end if;
         --
      end loop;
      --
   end if;
   --
exception
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_armaz_reg_c001 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end pkb_armaz_reg_c001;

-------------------------------------------------------------------------------------------------------

-- BLOCO C: DOCUMENTOS FISCAIS I - MERCADORIAS (ICMS/IPI)
procedure pkb_armaz_arq_bloco_c
is
   --
   vn_fase  number := 0;
   --
begin
   --
   vn_fase := 1;
   -- Armazena em arquivo o REGISTRO C001: ABERTURA DO BLOCO C
   pkb_armaz_reg_c001;
   --
   vn_fase := 2;
   -- Armazena em arquivo o REGISTRO C100: NOTA FISCAL (CÓDIGO 01), NOTA FISCAL AVULSA (CÓDIGO 1B), NOTA FISCAL DE PRODUTOR (CÓDIGO 04) E NFE (CÓDIGO 55).
   pkb_armaz_reg_c100;
   --
   vn_fase := 3;
   -- Armazena em arquivo o REGISTRO C300: RESUMO DIÁRIO DAS NOTAS FISCAIS DE VENDA A CONSUMIDOR (CÓDIGO 02)
   pkb_armaz_reg_c300;
   --
   vn_fase := 4;
   -- Armazena em arquivo o REGISTRO C350: NOTA FISCAL DE VENDA A CONSUMIDOR (CÓDIGO 02)
   pkb_armaz_reg_c350;
   --
   vn_fase := 5;
   -- Armazena em arquivo o REGISTRO C400 - EQUIPAMENTO ECF (CÓDIGO 02 e 2D)
   pkb_armaz_reg_c400;
   --
   vn_fase := 6;
   -- Armazena em arquivo o REGISTRO C495: RESUMO MENSAL DE ITENS DO ECF POR ESTABELECIMENTO (CÓDIGO 02 e 2D)
   pkb_armaz_reg_c495;
   --
   vn_fase := 7;
   -- NOVO TÍTULO: REGISTRO C500: NOTA FISCAL/CONTA DE ENERGIA ELÉTRICA (CÓDIGO 06), NOTA FISCAL/CONTA DE FORNECIMENTO D'ÁGUA CANALIZADA (CÓDIGO 29) E
   -- NOTA FISCAL CONSUMO FORNECIMENTO DE GÁS (CÓDIGO 28)
   -- Armazena em arquivo o REGISTRO C500: NOTA FISCAL/CONTA DE ENERGIA ELÉTRICA (CÓDIGO 06) E NOTA FISCAL CONSUMO FORNECIMENTO DE GÁS (CÓDIGO 28)
   pkb_armaz_reg_c500;
   --
   vn_fase := 8;
   -- Armazena em arquivo o REGISTRO C600: CONSOLIDAÇÃO DIÁRIA DE NOTAS FISCAIS/CONTAS DE ENERGIA ELÉTRICA
   pkb_armaz_reg_c600;
   --
   vn_fase := 9;
   -- Armazena em arquivo o REGISTRO C700: CONSOLIDAÇÃO DOS DOCUMENTOS
   pkb_armaz_reg_c700;
   --
   vn_fase := 10;
   -- Armazena em arquivo o REGISTRO C800: CUPOM FISCAL ELETRÔNICO - SAT (CF-E-SAT) (CÓDIGO 59)
   pkb_armaz_reg_c800;
   --
   vn_fase := 11;
   -- Armazena em arquivo o REGISTRO C860: IDENTIFICAÇÃO DO EQUIPAMENTO SAT-CF-E
   pkb_armaz_reg_c860;
   --
   vn_fase := 12;
   -- Armazena em arquivo o REGISTRO C990: ENCERRAMENTO DO BLOCO C
   pkb_armaz_reg_c990;
   --
exception
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_armaz_arq_bloco_c fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end pkb_armaz_arq_bloco_c;

-------------------------------------------------------------------------------------------------------

-- Armazena em arquivo o REGISTRO B990: ENCERRAMENTO DO BLOCO B
procedure pkb_armaz_reg_b990
is
   --
   vn_fase  number := 0;
   i        pls_integer;
   --
begin
   --
   vn_fase := 1;
   --
   if nvl(vt_tab_reg_b990.count,0) > 0 then
      --
      vn_fase := 2;
      --
      i := nvl(vt_tab_reg_b990.first,0);
      --
      vn_fase := 3;
      --
      loop
         --
         vn_fase := 4;
         --
         if nvl(i,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 5;
         -- cria a estrutura do registro separado por PIPE "|"
         gl_conteudo := '|';
         --
         gl_conteudo := gl_conteudo || vt_tab_reg_b990(i).reg || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_b990(i).qtd_lin_b || '|';
         --
         vn_fase := 6;
         --
         pkb_armaz_estr_arq_efd ( ev_reg_blc   => 'B990'
                                , el_conteudo  => gl_conteudo );
         --
         vn_fase := 7;
         --
         if i = vt_tab_reg_b990.last then
            exit;
         else
            i := vt_tab_reg_b990.next(i);
         end if;
         --
      end loop;
      --
   end if;
   --
exception
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_armaz_reg_b990 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end pkb_armaz_reg_b990;

-------------------------------------------------------------------------------------------------------
procedure pkb_armaz_reg_b470
is
   --
   vn_fase          number := 0;
   i                pls_integer;
   j                pls_integer;
   vn_qtde_reg_b470 number;
   --
begin
   --
   vn_fase := 1;
   --
   /*B470 - APURAÇÃO DO ISS*/
   if nvl(vt_tab_reg_b470.count,0) > 0 then
      --
      vn_fase := 2;
      --
      i := nvl(vt_tab_reg_b470.first,0);
      --
      vn_fase := 3;
      --
      loop
         --
         vn_fase := 4;
         --
         if nvl(i,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 5;
         -- cria a estrutura do registro separado por PIPE "|"
         gl_conteudo := '|';
         --
         gl_conteudo := gl_conteudo || vt_tab_reg_b470(i).REG|| '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_b470(i).VL_CONT, '9999999999990D99')|| '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_b470(i).VL_MAT_TERC, '9999999999990D99')|| '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_b470(i).VL_MAT_PROP, '9999999999990D99')|| '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_b470(i).VL_SUB, '9999999999990D99')|| '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_b470(i).VL_ISNT, '9999999999990D99')|| '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_b470(i).VL_DED_BC, '9999999999990D99')|| '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_b470(i).VL_BC_ISS, '9999999999990D99')|| '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_b470(i).VL_BC_ISS_RT, '9999999999990D99')|| '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_b470(i).VL_ISS, '9999999999990D99')|| '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_b470(i).VL_ISS_RT, '9999999999990D99')|| '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_b470(i).VL_DED, '9999999999990D99')|| '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_b470(i).VL_ISS_REC, '9999999999990D99')|| '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_b470(i).VL_ISS_ST, '9999999999990D99')|| '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_b470(i).VL_ISS_REC_UNI, '9999999999990D99')|| '|';
         --
         vn_fase := 6;
         --
         pkb_armaz_estr_arq_efd ( ev_reg_blc   => 'B470'
                                , el_conteudo  => gl_conteudo );
         --
         vn_fase := 7;
         --
         if i = vt_tab_reg_b470.last then
            exit;
         else
            i := vt_tab_reg_b470.next(i);
         end if;
         --
      end loop;
      --
   end if;
   --
exception
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_armaz_reg_b470 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end pkb_armaz_reg_b470;

-------------------------------------------------------------------------------------------------------
procedure pkb_armaz_reg_b460
is
   --
   vn_fase          number := 0;
   i                pls_integer;
   j                pls_integer;
   vn_qtde_reg_b460 number;
   --
begin
   --
   vn_fase := 1;
   --
   /*B460 - DEDUÇÕES DO ISS*/
   if nvl(vt_tab_reg_b460.count,0) > 0 then
      --
      vn_fase := 2;
      --
      i := nvl(vt_tab_reg_b460.first,0);
      --
      vn_fase := 3;
      --
      loop
         --
         vn_fase := 4;
         --
         if nvl(i,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 5;
         -- cria a estrutura do registro separado por PIPE "|"
         gl_conteudo := '|';
         --
         gl_conteudo := gl_conteudo || vt_tab_reg_b460(i).REG|| '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_b460(i).IND_DED|| '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_b460(i).vl_ded, '9999999999990D99')|| '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_b460(i).num_proc|| '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_b460(i).dm_ind_proc|| '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_b460(i).proc|| '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_b460(i).cod_inf_obs|| '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_b460(i).dm_ind_obr|| '|';
         --
         vn_fase := 6;
         --
         pkb_armaz_estr_arq_efd ( ev_reg_blc   => 'B460'
                                , el_conteudo  => gl_conteudo );
         --
         vn_fase := 7;
         --
         if i = vt_tab_reg_b460.last then
            exit;
         else
            i := vt_tab_reg_b460.next(i);
         end if;
         --
      end loop;
      --
   end if;
   --
exception
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_armaz_reg_b460 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end pkb_armaz_reg_b460;

-------------------------------------------------------------------------------------------------------
procedure pkb_armaz_reg_b440
is
   --
   vn_fase          number := 0;
   i                pls_integer;
   j                pls_integer;
   vn_qtde_reg_b440 number;
   --
begin
   --
   vn_fase := 1;
   --
   /*B440 - TOTALIZAÇÃO DOS VALORES RETIDOS*/
   if nvl(vt_tab_reg_b440.count,0) > 0 then
      --
      vn_fase := 2;
      --
      i := nvl(vt_tab_reg_b440.first,0);
      --
      vn_fase := 3;
      --
      loop
         --
         vn_fase := 4;
         --
         if nvl(i,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 5;
         -- cria a estrutura do registro separado por PIPE "|"
         gl_conteudo := '|';
         --
         gl_conteudo := gl_conteudo || vt_tab_reg_b440(i).reg|| '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_b440(i).ind_oper|| '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_b440(i).cod_part|| '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_b440(i).VL_CONT_RT, '9999999999990D99')|| '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_b440(i).VL_BC_ISS_RT, '9999999999990D99')|| '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_b440(i).VL_ISS_RT, '9999999999990D99')|| '|';
         --
         vn_fase := 6;
         --
         pkb_armaz_estr_arq_efd ( ev_reg_blc   => 'B440'
                                , el_conteudo  => gl_conteudo );
         --
         vn_fase := 7;
         --
         if i = vt_tab_reg_b440.last then
            exit;
         else
            i := vt_tab_reg_b440.next(i);
         end if;
         --
      end loop;
      --
   end if;
   --
exception
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_armaz_reg_b440 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end pkb_armaz_reg_b440;

-------------------------------------------------------------------------------------------------------
procedure pkb_armaz_reg_b420
is
   --
   vn_fase          number := 0;
   i                pls_integer;
   j                pls_integer;
   vn_qtde_reg_b420 number;
   --
begin
   --
   vn_fase := 1;
   --
   /*B420 - TOTALIZAÇÃO DOS VALORES DE SERVIÇOS PRESTADOS POR COMBINAÇÃO DE ALÍQUOTA E ITEM DA LISTA DE SERVIÇOS DA LC 116/2003*/
   if nvl(vt_tab_reg_b420.count,0) > 0 then
      --
      vn_fase := 2;
      --
      i := nvl(vt_tab_reg_b420.first,0);
      --
      vn_fase := 3;
      --
      loop
         --
         vn_fase := 4;
         --
         if nvl(i,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 5;
         -- cria a estrutura do registro separado por PIPE "|"
         gl_conteudo := '|';
         --
         gl_conteudo := gl_conteudo || vt_tab_reg_b420(i).reg|| '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_b420(i).vl_cont_p, '9999999999990D99')|| '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_b420(i).vl_bc_iss_p, '9999999999990D99')|| '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_b420(i).aliq_iss, '990D99')|| '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_b420(i).vl_isnt_iss_p, '9999999999990D99')|| '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_b420(i).vl_iss_p, '9999999999990D99')|| '|';
         --gl_conteudo := gl_conteudo || vt_tab_reg_b420(i).cod_serv|| '|';
         gl_conteudo := gl_conteudo || lpad(vt_tab_reg_b420(i).cod_serv, 4, 0)|| '|';
         --
         vn_fase := 6;
         --
         pkb_armaz_estr_arq_efd ( ev_reg_blc   => 'B420'
                                , el_conteudo  => gl_conteudo );
         --
         vn_fase := 7;
         --
         if i = vt_tab_reg_b420.last then
            exit;
         else
            i := vt_tab_reg_b420.next(i);
         end if;
         --
      end loop;
      --
   end if;
   --
exception
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_armaz_reg_b420 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end pkb_armaz_reg_b420;


-------------------------------------------------------------------------------------------------------
procedure pkb_armaz_reg_b020
is
   --
   vn_fase          number := 0;
   i                pls_integer;
   j                pls_integer;
   vn_qtde_reg_b025 number;
   --
begin
   --
   vn_fase := 1;
   --
   /*B020 - NOTA FISCAL (CÓDIGO 01), NOTA FISCAL DE SERVIÇOS (CÓDIGO 03), NOTA FISCAL DE SERVIÇOS AVULSA (CÓDIGO 3B), NOTA FISCAL DE PRODUTOR (CÓDIGO 04), CONHECIMENTO DE TRANSPORTE RODOVIÁRIO DE CARGAS (CÓDIGO 08), NF-e (CÓDIGO 55) e NFC-e (CÓDIGO 65).*/
   if nvl(vt_tab_reg_b020.count,0) > 0 then
      --
      vn_fase := 2;
      --
      i := nvl(vt_tab_reg_b020.first,0);
      --
      vn_fase := 3;
      --
      loop
         --
         vn_fase := 4;
         --
         if nvl(i,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 5;
         -- cria a estrutura do registro separado por PIPE "|"
         gl_conteudo := '|';
         --
         gl_conteudo := gl_conteudo || vt_tab_reg_b020(i).reg|| '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_b020(i).ind_oper|| '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_b020(i).ind_emit|| '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_b020(i).cod_part|| '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_b020(i).cod_mod|| '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_b020(i).cod_sit|| '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_b020(i).ser|| '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_b020(i).num_doc|| '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_b020(i).chv_nfe|| '|';
         gl_conteudo := gl_conteudo || to_char(vt_tab_reg_b020(i).dt_doc, 'ddmmrrrr')|| '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_b020(i).cod_mun_serv|| '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_b020(i).vl_cont, '9999999999990D99')|| '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_b020(i).vl_mat_terc, '9999999999990D99')|| '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_b020(i).vl_sub, '9999999999990D99')|| '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_b020(i).vl_isnt_iss, '9999999999990D99')|| '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_b020(i).vl_ded_bc, '9999999999990D99')|| '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_b020(i).vl_bc_iss, '9999999999990D99')|| '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_b020(i).vl_bc_iss_rt, '9999999999990D99')|| '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_b020(i).vl_iss_rt, '9999999999990D99')|| '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_b020(i).vl_iss, '9999999999990D99')|| '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_b020(i).cod_inf_obs|| '|';
         --
         vn_fase := 6;
         --
         pkb_armaz_estr_arq_efd ( ev_reg_blc   => 'B020'
                                , el_conteudo  => gl_conteudo );
         --
         vn_fase := 6.1;
         -- B025 - DETALHAMENTO POR COMBINAÇÃO DE ALÍQUOTA E ITEM DA LISTA DE SERVIÇOS DA LC 116/2003)
         begin
            vn_qtde_reg_b025 := vt_bi_tab_reg_b025(i).count;
         exception
            when others then
               vn_qtde_reg_b025 := 0;
         end;
         --
         vn_fase := 6.2;
         --
         if nvl(vn_qtde_reg_b025,0) > 0 then
            --
            j := nvl(vt_bi_tab_reg_b025(i).first,0);
            --
            vn_fase := 6.3;
            --
            loop
               --
               vn_fase := 6.4;
               --
               if nvl(j,0) = 0 then
                  exit;
               end if;
               --
               vn_fase := 6.5;
               -- cria a estrutura do registro separado por PIPE "|"
               gl_conteudo := '|';
               --
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_b025(i)(j).reg|| '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(nvl(vt_bi_tab_reg_b025(i)(j).vl_cont_p,0),'9999999999990D99')|| '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(nvl(vt_bi_tab_reg_b025(i)(j).vl_bc_iss_p,0),'9999999999990D99')|| '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(nvl(vt_bi_tab_reg_b025(i)(j).aliq_iss,0),'990D99')|| '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(nvl(vt_bi_tab_reg_b025(i)(j).vl_iss_p,0),'9999999999990D99')|| '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(nvl(vt_bi_tab_reg_b025(i)(j).vl_isnt_iss_p,0),'9999999999990D99')|| '|';
               --gl_conteudo := gl_conteudo || vt_bi_tab_reg_b025(i)(j).cod_serv|| '|';
               gl_conteudo := gl_conteudo || lpad(vt_bi_tab_reg_b025(i)(j).cod_serv, 4, 0)|| '|';
               --
               vn_fase := 6.6;
               --
               pkb_armaz_estr_arq_efd ( ev_reg_blc   => 'B025'
                                      , el_conteudo  => gl_conteudo );
               --
               vn_fase := 6.7;
               --
               if j = vt_bi_tab_reg_b025(i).last then
                  exit;
               else
                  j := vt_bi_tab_reg_b025(i).next(j);
               end if;
               --
            end loop;
            --
         end if; -- b025
         --
         vn_fase := 7;
         --
         if i = vt_tab_reg_b020.last then
            exit;
         else
            i := vt_tab_reg_b020.next(i);
         end if;
         --
      end loop;
      --
   end if;
   --
exception
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_armaz_reg_b020 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end pkb_armaz_reg_b020;

-------------------------------------------------------------------------------------------------------

-- Armazena em arquivo o REGISTRO b001: ABERTURA DO BLOCO B
procedure pkb_armaz_reg_b001
is
   --
   vn_fase  number := 0;
   i        pls_integer;
   --
begin
   --
   vn_fase := 1;
   --
   if nvl(vt_tab_reg_b001.count,0) > 0 then
      --
      vn_fase := 2;
      --
      i := nvl(vt_tab_reg_b001.first,0);
      --
      vn_fase := 3;
      --
      loop
         --
         vn_fase := 4;
         --
         if nvl(i,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 5;
         -- cria a estrutura do registro separado por PIPE "|"
         gl_conteudo := '|';
         --
         gl_conteudo := gl_conteudo || vt_tab_reg_b001(i).reg || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_b001(i).ind_mov || '|';
         --
         vn_fase := 6;
         --
         pkb_armaz_estr_arq_efd ( ev_reg_blc   => 'B001'
                                , el_conteudo  => gl_conteudo );
         --
         vn_fase := 7;
         --
         if i = vt_tab_reg_b001.last then
            exit;
         else
            i := vt_tab_reg_b001.next(i);
         end if;
         --
      end loop;
      --
   end if;
   --
exception
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_armaz_reg_b001 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end pkb_armaz_reg_b001;

-------------------------------------------------------------------------------------------------------

-- BLOCO B: ESCRITURAÇÃO E APURAÇÃO DO ISS
procedure pkb_armaz_arq_bloco_b
is
   --
   vn_fase  number := 0;
   --
begin
   --
   vn_fase := 1;
   /*B001 - ABERTURA DO BLOCO B*/
   pkb_armaz_reg_b001;
   --
   vn_fase := 2;
   /*B020 - NOTA FISCAL (CÓDIGO 01), NOTA FISCAL DE SERVIÇOS (CÓDIGO 03), NOTA FISCAL DE SERVIÇOS AVULSA (CÓDIGO 3B), NOTA FISCAL DE PRODUTOR (CÓDIGO 04), CONHECIMENTO DE TRANSPORTE RODOVIÁRIO DE CARGAS (CÓDIGO 08), NF-e (CÓDIGO 55) e NFC-e (CÓDIGO 65).*/
   /*B025 - DETALHAMENTO POR COMBINAÇÃO DE ALÍQUOTA E ITEM DA LISTA DE SERVIÇOS DA LC 116/2003)*/
   pkb_armaz_reg_b020;
   --
   vn_fase := 3;
   /*B420 - TOTALIZAÇÃO DOS VALORES DE SERVIÇOS PRESTADOS POR COMBINAÇÃO DE ALÍQUOTA E ITEM DA LISTA DE SERVIÇOS DA LC 116/2003*/
   pkb_armaz_reg_b420;
   --
   vn_fase := 4;
   /*B440 - TOTALIZAÇÃO DOS VALORES RETIDOS*/
   pkb_armaz_reg_b440;
   --
   vn_fase := 5;
   /*B460 - DEDUÇÕES DO ISS*/
   pkb_armaz_reg_b460;
   --
   vn_fase := 6;
   /*B470 - APURAÇÃO DO ISS*/
   pkb_armaz_reg_b470;
   --
   vn_fase := 7;
   /*B990*/
   pkb_armaz_reg_b990;
   --
exception
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_armaz_arq_bloco_b fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end pkb_armaz_arq_bloco_b;

-------------------------------------------------------------------------------------------------------
--
-- Armazena em arquivo o REGISTRO 0990: ENCERRAMENTO DO BLOCO 0
procedure pkb_armaz_reg_0990
is
   --
   vn_fase  number := 0;
   i        pls_integer;
   --
begin
   --
   vn_fase := 1;
   --
   if nvl(vt_tab_reg_0990.count,0) > 0 then
      --
      vn_fase := 2;
      --
      i := nvl(vt_tab_reg_0990.first,0);
      --
      vn_fase := 3;
      --
      loop
         --
         vn_fase := 4;
         --
         if nvl(i,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 5;
         -- cria a estrutura do registro separado por PIPE "|"
         gl_conteudo := '|';
         --
         gl_conteudo := gl_conteudo || vt_tab_reg_0990(i).reg || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_0990(i).qtd_lin_0 || '|';
         --
         vn_fase := 6;
         --
         pkb_armaz_estr_arq_efd ( ev_reg_blc   => '0990'
                                , el_conteudo  => gl_conteudo );
         --
         vn_fase := 7;
         --
         if i = vt_tab_reg_0990.last then
            exit;
         else
            i := vt_tab_reg_0990.next(i);
         end if;
         --
      end loop;
      --
   end if;
   --
exception
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_armaz_reg_0990 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end pkb_armaz_reg_0990;

-------------------------------------------------------------------------------------------------------

-- Armazena em arquivo o REGISTRO 0600: CENTRO DE CUSTOS
procedure pkb_armaz_reg_0600
is
   --
   vn_fase  number := 0;
   i        pls_integer;
   --
begin
   --
   vn_fase := 1;
   --
   if nvl(vt_tab_reg_0600.count,0) > 0 then
      --
      vn_fase := 2;
      --
      i := nvl(vt_tab_reg_0600.first,0);
      --
      vn_fase := 3;
      --
      loop
         --
         vn_fase := 4;
         --
         if nvl(i,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 5;
         -- cria a estrutura do registro separado por PIPE "|"
         gl_conteudo := '|';
         --
         gl_conteudo := gl_conteudo || vt_tab_reg_0600(i).reg || '|';
         gl_conteudo := gl_conteudo || to_char(vt_tab_reg_0600(i).dt_alt, 'ddmmrrrr') || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_0600(i).cod_ccus || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_0600(i).ccus || '|';
         --
         vn_fase := 6;
         --
         pkb_armaz_estr_arq_efd ( ev_reg_blc   => '0600'
                                , el_conteudo  => gl_conteudo );
         --
         vn_fase := 7;
         --
         if i = vt_tab_reg_0600.last then
            exit;
         else
            i := vt_tab_reg_0600.next(i);
         end if;
         --
      end loop;
      --
   end if;
   --
exception
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_armaz_reg_0600 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end pkb_armaz_reg_0600;

-------------------------------------------------------------------------------------------------------

-- Armazena em arquivo o REGISTRO 0500: PLANO DE CONTAS CONTÁBEIS
procedure pkb_armaz_reg_0500
is
   --
   vn_fase  number := 0;
   i        pls_integer;
   --
begin
   --
   vn_fase := 1;
   --
   if nvl(vt_tab_reg_0500.count,0) > 0 then
      --
      vn_fase := 2;
      --
      i := nvl(vt_tab_reg_0500.first,0);
      --
      vn_fase := 3;
      --
      loop
         --
         vn_fase := 4;
         --
         if nvl(i,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 5;
         -- cria a estrutura do registro separado por PIPE "|"
         gl_conteudo := '|';
         --
         gl_conteudo := gl_conteudo || vt_tab_reg_0500(i).reg || '|';
         gl_conteudo := gl_conteudo || to_char(vt_tab_reg_0500(i).dt_alt, 'ddmmrrrr') || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_0500(i).cod_nat_cc || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_0500(i).ind_cta || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_0500(i).nivel || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_0500(i).cod_cta || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_0500(i).nome_cta || '|';
         --
         vn_fase := 6;
         --
         pkb_armaz_estr_arq_efd ( ev_reg_blc   => '0500'
                                , el_conteudo  => gl_conteudo );
         --
         vn_fase := 7;
         --
         if i = vt_tab_reg_0500.last then
            exit;
         else
            i := vt_tab_reg_0500.next(i);
         end if;
         --
      end loop;
      --
   end if;
   --
exception
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_armaz_reg_0500 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end pkb_armaz_reg_0500;

-------------------------------------------------------------------------------------------------------

-- Armazena em arquivo o REGISTRO 0460: TABELA DE OBSERVAÇÕES DO LANÇAMENTO FISCAL
procedure pkb_armaz_reg_0460
is
   --
   vn_fase  number := 0;
   i        pls_integer;
   --
begin
   --
   vn_fase := 1;
   --
   if nvl(vt_tab_reg_0460.count,0) > 0 then
      --
      vn_fase := 2;
      --
      i := nvl(vt_tab_reg_0460.first,0);
      --
      vn_fase := 3;
      --
      loop
         --
         vn_fase := 4;
         --
         if nvl(i,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 5;
         -- cria a estrutura do registro separado por PIPE "|"
         gl_conteudo := '|';
         --
         gl_conteudo := gl_conteudo || vt_tab_reg_0460(i).reg || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_0460(i).cod_obs || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_0460(i).txt || '|';
         --
         vn_fase := 6;
         --
         pkb_armaz_estr_arq_efd ( ev_reg_blc   => '0460'
                                , el_conteudo  => gl_conteudo );
         --
         vn_fase := 7;
         --
         if i = vt_tab_reg_0460.last then
            exit;
         else
            i := vt_tab_reg_0460.next(i);
         end if;
         --
      end loop;
      --
   end if;
   --
exception
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_armaz_reg_0460 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end pkb_armaz_reg_0460;

-------------------------------------------------------------------------------------------------------

-- Armazena em arquivo o REGISTRO 0450: TABELA DE INFORMAÇÃO COMPLEMENTAR DO DOCUMENTO FISCAL
procedure pkb_armaz_reg_0450
is
   --
   vn_fase  number := 0;
   i        pls_integer;
   --
begin
   --
   vn_fase := 1;
   --
   if nvl(vt_tab_reg_0450.count,0) > 0 then
      --
      vn_fase := 2;
      --
      i := nvl(vt_tab_reg_0450.first,0);
      --
      vn_fase := 3;
      --
      loop
         --
         vn_fase := 4;
         --
         if nvl(i,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 5;
         -- cria a estrutura do registro separado por PIPE "|"
         gl_conteudo := '|';
         --
         gl_conteudo := gl_conteudo || vt_tab_reg_0450(i).reg || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_0450(i).cod_inf || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_0450(i).txt || '|';
         --
         vn_fase := 6;
         --
         pkb_armaz_estr_arq_efd ( ev_reg_blc   => '0450'
                                , el_conteudo  => gl_conteudo );
         --
         vn_fase := 7;
         --
         if i = vt_tab_reg_0450.last then
            exit;
         else
            i := vt_tab_reg_0450.next(i);
         end if;
         --
      end loop;
      --
   end if;
   --
exception
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_armaz_reg_0450 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end pkb_armaz_reg_0450;

-------------------------------------------------------------------------------------------------------

-- Armazena em arquivo o REGISTRO 0400: TABELA DE NATUREZA DA OPERAÇÃO/PRESTAÇÃO
procedure pkb_armaz_reg_0400
is
   --
   vn_fase  number := 0;
   i        pls_integer;
   --
begin
   --
   vn_fase := 1;
   --
   if nvl(vt_tab_reg_0400.count,0) > 0 then
      --
      vn_fase := 2;
      --
      i := nvl(vt_tab_reg_0400.first,0);
      --
      vn_fase := 3;
      --
      loop
         --
         vn_fase := 4;
         --
         if nvl(i,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 5;
         -- cria a estrutura do registro separado por PIPE "|"
         gl_conteudo := '|';
         --
         gl_conteudo := gl_conteudo || vt_tab_reg_0400(i).reg || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_0400(i).cod_nat || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_0400(i).descr_nat || '|';
         --
         vn_fase := 6;
         --
         pkb_armaz_estr_arq_efd ( ev_reg_blc   => '0400'
                                , el_conteudo  => gl_conteudo );
         --
         vn_fase := 7;
         --
         if i = vt_tab_reg_0400.last then
            exit;
         else
            i := vt_tab_reg_0400.next(i);
         end if;
         --
      end loop;
      --
   end if;
   --
exception
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_armaz_reg_0400 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end pkb_armaz_reg_0400;

-------------------------------------------------------------------------------------------------------

-- Armazena em arquivo o REGISTRO 0300: CADASTRO DE BENS OU COMPONENTES DO ATIVO IMOBILIZADO
procedure pkb_armaz_reg_0300
is
   --
   vn_fase          number := 0;
   i                pls_integer;
   j                pls_integer;
   vn_qtde_reg_0305 number;
   --
begin
   --
   vn_fase := 1;
   --
   if nvl(vt_tab_reg_0300.count,0) > 0 then
      --
      vn_fase := 2;
      --
      i := nvl(vt_tab_reg_0300.first,0);
      --
      vn_fase := 2.1;
      --
      loop
         --
         vn_fase := 2.2;
         --
         if nvl(i,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 2.3;
         -- cria a estrutura do registro separado por PIPE "|"
         gl_conteudo := '|';
         --
         gl_conteudo := gl_conteudo || vt_tab_reg_0300(i).reg || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_0300(i).cod_ind_bem || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_0300(i).ident_merc || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_0300(i).descr_item || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_0300(i).cod_prnc || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_0300(i).cod_cta || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_0300(i).nr_parc || '|';
         --
         vn_fase := 2.4;
         --
         pkb_armaz_estr_arq_efd ( ev_reg_blc   => '0300'
                                , el_conteudo  => gl_conteudo );
         --
         vn_fase := 3;
         --
         vn_qtde_reg_0305 := 0;
         --
         vn_fase := 3.1;
         --
         begin
            --
            vn_qtde_reg_0305 := vt_bi_tab_reg_0305(i).count;
            --
         exception
            when others then
               vn_qtde_reg_0305 := 0;
         end;
         --
         vn_fase := 3.2;
         --
         if nvl(vn_qtde_reg_0305,0) > 0 then
            --
            vn_fase := 3.3;
            --
            j := vt_bi_tab_reg_0305(i).first;
            --
            vn_fase := 3.4;
            --
            loop
               --
               vn_fase := 3.5;
               --
               if nvl(j,0) = 0 then
                  exit;
               end if;
               --
               vn_fase := 3.6;
               -- cria a estrutura do registro separado por PIPE "|"
               gl_conteudo := '|';
               --
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_0305(i)(j).reg || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_0305(i)(j).cod_ccus || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_0305(i)(j).func || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_0305(i)(j).vida_util || '|';
               --
               vn_fase := 3.7;
               --
               pkb_armaz_estr_arq_efd ( ev_reg_blc   => '0305'
                                      , el_conteudo  => gl_conteudo );
               --
               vn_fase := 3.8;
               --
               if j = vt_bi_tab_reg_0305(i).last then
                  exit;
               else
                  j := vt_bi_tab_reg_0305(i).next(j);
               end if;
               --
            end loop;
            --
         end if;
         --
         vn_fase := 4;
         --
         if i = vt_tab_reg_0300.last then
            exit;
         else
            i := vt_tab_reg_0300.next(i);
         end if;
         --
      end loop;
      --
   end if;
   --
exception
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_armaz_reg_0300 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end pkb_armaz_reg_0300;

-------------------------------------------------------------------------------------------------------

-- Armazena em arquivo o REGISTRO 0200: TABELA DE IDENTIFICAÇÃO DO ITEM (PRODUTO E SERVIÇOS)
procedure pkb_armaz_reg_0200
is
   --
   vn_fase          number := 0;
   i                pls_integer;
   j                pls_integer;
   vn_qtde_reg_0205 number;
   vn_qtde_reg_0206 number;
   vn_qtde_reg_0210 number;
   vn_qtde_reg_0220 number;
   --
begin
   --
   vn_fase := 1;
   --
   if nvl(vt_tab_reg_0200.count,0) > 0 then
      --
      vn_fase := 2;
      --
      i := nvl(vt_tab_reg_0200.first,0);
      --
      vn_fase := 3;
      --
      loop
         --
         vn_fase := 4;
         --
         if nvl(i,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 5;
         -- cria a estrutura do registro separado por PIPE "|"
         gl_conteudo := '|';
         --
         gl_conteudo := gl_conteudo || vt_tab_reg_0200(i).reg || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_0200(i).cod_item || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_0200(i).descr_item || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_0200(i).cod_barra || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_0200(i).cod_ant_item || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_0200(i).unid_inv || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_0200(i).tipo_item || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_0200(i).cod_ncm || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_0200(i).ex_ipi || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_0200(i).cod_gen || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_0200(i).cod_lst || '|';
         gl_conteudo := gl_conteudo || fkg_formata_num(vt_tab_reg_0200(i).aliq_icms, '990D99') || '|';
         --
         if gt_row_abertura_efd.dt_ini >= to_date('01/01/2017', 'dd/mm/rrrr') then
            --
            gl_conteudo := gl_conteudo || vt_tab_reg_0200(i).cest || '|';
            --
         end if;
         --
         vn_fase := 6;
         --
         pkb_armaz_estr_arq_efd ( ev_reg_blc   => '0200'
                                , el_conteudo  => gl_conteudo );
         --
         vn_fase := 7;
         --
         vn_qtde_reg_0205 := 0;
         --
         vn_fase := 8;
         --
         begin
            --
            vn_qtde_reg_0205 := vt_bi_tab_reg_0205(i).count;
            --
         exception
            when others then
               vn_qtde_reg_0205 := 0;
         end;
         --
         vn_fase := 9;
         -- Armazena em arquivo o REGISTRO 0205: ALTERAÇÃO DO ITEM
         if nvl(vn_qtde_reg_0205,0) > 0 then
            --
            vn_fase := 9.1;
            --
            j := nvl(vt_bi_tab_reg_0205(i).first,0);
            --
            vn_fase := 9.2;
            --
            loop
               --
               vn_fase := 9.3;
               --
               if nvl(j,0) = 0 then
                  exit;
               end if;
               --
               vn_fase := 9.4;
               -- cria a estrutura do registro separado por PIPE "|"
               gl_conteudo := '|';
               --
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_0205(i)(j).reg || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_0205(i)(j).descr_ant_item || '|';
               gl_conteudo := gl_conteudo || to_char(vt_bi_tab_reg_0205(i)(j).dt_ini, 'ddmmrrrr') || '|';
               gl_conteudo := gl_conteudo || to_char(vt_bi_tab_reg_0205(i)(j).dt_fim, 'ddmmrrrr') || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_0205(i)(j).cod_ant_item || '|';
               --
               vn_fase := 9.5;
               --
               pkb_armaz_estr_arq_efd ( ev_reg_blc   => '0205'
                                      , el_conteudo  => gl_conteudo );
               --
               vn_fase := 9.6;
               --
               if j = vt_bi_tab_reg_0205(i).last then
                  exit;
               else
                  j := vt_bi_tab_reg_0205(i).next(j);
               end if;
               --
            end loop;
            --
         end if; -- nvl(vn_qtde_reg_0205,0) > 0
         --
         vn_fase := 10;
         --
         vn_qtde_reg_0206 := 0;
         --
         vn_fase := 11;
         --
         begin
            --
            vn_qtde_reg_0206 := vt_bi_tab_reg_0206(i).count;
            --
         exception
            when others then
               vn_qtde_reg_0206 := 0;
         end;
         --
         vn_fase := 12;
         -- Armazena em arquivo o REGISTRO 0206: CÓDIGO DE PRODUTO CONFORME TABELA PUBLICADA PELA ANP (COMBUSTÍVEIS)
         if nvl(vn_qtde_reg_0206,0) > 0 then
            --
            vn_fase := 12.1;
            --
            j := nvl(vt_bi_tab_reg_0206(i).first,0);
            --
            vn_fase := 12.2;
            --
            loop
               --
               vn_fase := 12.3;
               --
               if nvl(j,0) = 0 then
                  exit;
               end if;
               --
               vn_fase := 12.4;
               -- cria a estrutura do registro separado por PIPE "|"
               gl_conteudo := '|';
               --
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_0206(i)(j).reg || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_0206(i)(j).cod_comb || '|';
               --
               vn_fase := 12.5;
               --
               pkb_armaz_estr_arq_efd ( ev_reg_blc   => '0206'
                                      , el_conteudo  => gl_conteudo );
               --
               vn_fase := 12.6;
               --
               if j = vt_bi_tab_reg_0206(i).last then
                  exit;
               else
                  j := vt_bi_tab_reg_0206(i).next(j);
               end if;
               --
            end loop;
            --
         end if; -- nvl(vn_qtde_reg_0206,0) > 0
         --
         vn_fase := 13;
         --
         vn_qtde_reg_0210 := 0;
         --
         vn_fase := 14;
         --
         begin
            --
            vn_qtde_reg_0210 := vt_bi_tab_reg_0210(i).count;
            --
         exception
            when others then
               vn_qtde_reg_0210 := 0;
         end;
         --
         vn_fase := 15;
         -- Armazena em arquivo o REGISTRO 0210 - CONSUMO ESPECÍFICO PADRONIZADO
         if nvl(vn_qtde_reg_0210,0) > 0 then
            --
            vn_fase := 15.1;
            --
            j := nvl(vt_bi_tab_reg_0210(i).first,0);
            --
            vn_fase := 15.2;
            --
            loop
               --
               vn_fase := 15.3;
               --
               if nvl(j,0) = 0 then
                  exit;
               end if;
               --
               vn_fase := 15.4;
               -- cria a estrutura do registro separado por PIPE "|"
               gl_conteudo := '|';
               --
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_0210(i)(j).reg                                                  || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_0210(i)(j).cod_item_comp                                        || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(nvl(vt_bi_tab_reg_0210(i)(j).qtd_comp,0),'9999999990D999999') || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(nvl(vt_bi_tab_reg_0210(i)(j).perda,0),'990D0000')             || '|';
               --
               vn_fase := 15.5;
               --
               pkb_armaz_estr_arq_efd ( ev_reg_blc   => '0210'
                                      , el_conteudo  => gl_conteudo );
               --
               vn_fase := 15.6;
               --
               if j = vt_bi_tab_reg_0210(i).last then
                  exit;
               else
                  j := vt_bi_tab_reg_0210(i).next(j);
               end if;
               --
            end loop;
            --
         end if; -- nvl(vn_qtde_reg_0210,0) > 0
         --
         vn_fase := 16;
         --
         vn_qtde_reg_0220 := 0;
         --
         vn_fase := 17;
         --
         begin
            --
            vn_qtde_reg_0220 := vt_bi_tab_reg_0220(i).count;
            --
         exception
            when others then
               vn_qtde_reg_0220 := 0;
         end;
         --
         vn_fase := 18;
         -- Armazena em arquivo o REGISTRO 0220: FATORES DE CONVERSÃO DE UNIDADES
         if nvl(vn_qtde_reg_0220,0) > 0 then
            --
            vn_fase := 18.1;
            --
            j := nvl(vt_bi_tab_reg_0220(i).first,0);
            --
            vn_fase := 18.2;
            --
            loop
               --
               vn_fase := 18.3;
               --
               if nvl(j,0) = 0 then
                  exit;
               end if;
               --
               vn_fase := 18.4;
               -- cria a estrutura do registro separado por PIPE "|"
               gl_conteudo := '|';
               --
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_0220(i)(j).reg || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_0220(i)(j).unid_conv || '|';
               gl_conteudo := gl_conteudo || fkg_formata_num(vt_bi_tab_reg_0220(i)(j).fat_conv, '9999990D999999') || '|';
               --
               vn_fase := 18.5;
               --
               pkb_armaz_estr_arq_efd ( ev_reg_blc   => '0220'
                                      , el_conteudo  => gl_conteudo );
               --
               vn_fase := 18.6;
               --
               if j = vt_bi_tab_reg_0220(i).last then
                  exit;
               else
                  j := vt_bi_tab_reg_0220(i).next(j);
               end if;
               --
            end loop;
            --
         end if; -- nvl(vn_qtde_reg_0220,0) > 0
         --
         vn_fase := 19;
         --
         if i = vt_tab_reg_0200.last then
            exit;
         else
            i := vt_tab_reg_0200.next(i);
         end if;
         --
      end loop;
      --
   end if; -- nvl(vn_qtde_reg_0200,0) > 0
   --
exception
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_armaz_reg_0200 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end pkb_armaz_reg_0200;

-------------------------------------------------------------------------------------------------------

-- Armazena em arquivo o REGISTRO 0190: IDENTIFICAÇÃO DAS UNIDADES DE MEDIDA
procedure pkb_armaz_reg_0190
is
   --
   vn_fase  number := 0;
   i        varchar2(6); -- pls_integer; -- não é possível repetir a sigla, por isso o índice passou a ser a sigla da unidade
   --
begin
   --
   vn_fase := 1;
   --
   if nvl(vt_tab_reg_0190.count,0) > 0 then
      --
      vn_fase := 2;
      --
      i := nvl(vt_tab_reg_0190.first,0);
      --
      vn_fase := 3;
      --
      loop
         --
         vn_fase := 4;
         --
         if nvl(i,'0') = '0' then -- não é possível repetir a sigla, por isso o índice passou a ser a sigla da unidade
            exit;
         end if;
         --
         vn_fase := 5;
         -- cria a estrutura do registro separado por PIPE "|"
         gl_conteudo := '|';
         --
         gl_conteudo := gl_conteudo || vt_tab_reg_0190(i).reg || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_0190(i).unid || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_0190(i).descr || '|';
         --
         vn_fase := 6;
         --
         pkb_armaz_estr_arq_efd ( ev_reg_blc   => '0190'
                                , el_conteudo  => gl_conteudo );
         --
         vn_fase := 7;
         --
         if i = vt_tab_reg_0190.last then
            exit;
         else
            i := vt_tab_reg_0190.next(i);
         end if;
         --
      end loop;
      --
   end if;
   --
exception
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_armaz_reg_0190 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end pkb_armaz_reg_0190;

-------------------------------------------------------------------------------------------------------

-- Armazena em arquivo o REGISTRO 0150: TABELA DE CADASTRO DO PARTICIPANTE
procedure pkb_armaz_reg_0150
is
   --
   vn_fase          number := 0;
   i                pls_integer;
   j                pls_integer;
   vn_qtde_reg_0175 number;
   --
begin
   --
   vn_fase := 1;
   --
   if nvl(vt_tab_reg_0150.count,0) > 0 then
      --
      vn_fase := 2;
      --
      i := nvl(vt_tab_reg_0150.first,0);
      --
      vn_fase := 3;
      --
      loop
         --
         vn_fase := 4;
         --
         if nvl(i,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 5;
         -- cria a estrutura do registro separado por PIPE "|"
         gl_conteudo := '|';
         --
         gl_conteudo := gl_conteudo || vt_tab_reg_0150(i).reg || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_0150(i).cod_part || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_0150(i).nome || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_0150(i).cod_pais || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_0150(i).cnpj || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_0150(i).cpf || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_0150(i).ie || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_0150(i).cod_mun || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_0150(i).suframa || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_0150(i).lograd || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_0150(i).num || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_0150(i).compl || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_0150(i).bairro || '|';
         --
         vn_fase := 6;
         --
         pkb_armaz_estr_arq_efd ( ev_reg_blc   => '0150'
                                , el_conteudo  => gl_conteudo );
         --
         vn_fase := 7;
         --
         vn_qtde_reg_0175 := 0;
         --
         vn_fase := 7.1;
         --
         begin
            --
            vn_qtde_reg_0175 := vt_bi_tab_reg_0175(i).count;
            --
         exception
            when others then
               vn_qtde_reg_0175 := 0;
         end;
         --
         vn_fase := 7.2;
         -- Armazena em arquivo o REGISTRO 0175: ALTERAÇÃO DA TABELA DE CADASTRO DE PARTICIPANTE
         if nvl(vn_qtde_reg_0175,0) > 0 then
            --
            vn_fase := 7.3;
            --
            j := nvl(vt_bi_tab_reg_0175(i).first,0);
            --
            vn_fase := 8;
            --
            loop
               --
               vn_fase := 8.1;
               --
               if nvl(j,0) = 0 then
                  exit;
               end if;
               --
               vn_fase := 8.2;
               -- cria a estrutura do registro separado por PIPE "|"
               gl_conteudo := '|';
               --
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_0175(i)(j).reg || '|';
               gl_conteudo := gl_conteudo || to_char(vt_bi_tab_reg_0175(i)(j).dt_alt, 'ddmmrrrr') || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_0175(i)(j).nr_campo || '|';
               gl_conteudo := gl_conteudo || vt_bi_tab_reg_0175(i)(j).cont_ant || '|';
               --
               vn_fase := 8.3;
               --
               pkb_armaz_estr_arq_efd ( ev_reg_blc   => '0175'
                                      , el_conteudo  => gl_conteudo );
               --
               vn_fase := 8.4;
               --
               if j = vt_bi_tab_reg_0175(i).last then
                  exit;
               else
                  j := vt_bi_tab_reg_0175(i).next(j);
               end if;
               --
            end loop;
            --
         end if;
         --
         vn_fase := 9;
         --
         if i = vt_tab_reg_0150.last then
            exit;
         else
            i := vt_tab_reg_0150.next(i);
         end if;
         --
      end loop;
      --
   end if;
   --
exception
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_armaz_reg_0150 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end pkb_armaz_reg_0150;

-------------------------------------------------------------------------------------------------------

-- Armazena em arquivo o REGISTRO 0100: DADOS DO CONTABILISTA
procedure pkb_armaz_reg_0100
is
   --
   vn_fase  number := 0;
   i        pls_integer;
   --
begin
   --
   vn_fase := 1;
   --
   if nvl(vt_tab_reg_0100.count,0) > 0 then
      --
      vn_fase := 2;
      --
      i := nvl(vt_tab_reg_0100.first,0);
      --
      vn_fase := 3;
      --
      loop
         --
         vn_fase := 4;
         --
         if nvl(i,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 5;
         -- cria a estrutura do registro separado por PIPE "|"
         gl_conteudo := '|';
         --
         gl_conteudo := gl_conteudo || vt_tab_reg_0100(i).reg || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_0100(i).nome || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_0100(i).cpf || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_0100(i).crc || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_0100(i).cnpj || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_0100(i).cep || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_0100(i).lograd || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_0100(i).num || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_0100(i).compl || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_0100(i).bairro || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_0100(i).fone || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_0100(i).fax || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_0100(i).email || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_0100(i).cod_mun || '|';
         --
         vn_fase := 6;
         --
         pkb_armaz_estr_arq_efd ( ev_reg_blc   => '0100'
                                , el_conteudo  => gl_conteudo );
         --
         vn_fase := 7;
         --
         if i = vt_tab_reg_0100.last then
            exit;
         else
            i := vt_tab_reg_0100.next(i);
         end if;
         --
      end loop;
      --
   end if;
   --
exception
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_armaz_reg_0100 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end pkb_armaz_reg_0100;

-------------------------------------------------------------------------------------------------------

-- Armazena em arquivo o REGISTRO 0015: DADOS DO CONTRIBUINTE SUBSTITUTO
procedure pkb_armaz_reg_0015
is
   --
   vn_fase  number := 0;
   i        pls_integer;
   --
begin
   --
   vn_fase := 1;
   --
   if nvl(vt_tab_reg_0015.count,0) > 0 then
      --
      vn_fase := 2;
      --
      i := nvl(vt_tab_reg_0015.first,0);
      --
      vn_fase := 3;
      --
      loop
         --
         vn_fase := 4;
         --
         if nvl(i,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 5;
         -- cria a estrutura do registro separado por PIPE "|"
         gl_conteudo := '|';
         --
         gl_conteudo := gl_conteudo || vt_tab_reg_0015(i).reg || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_0015(i).uf_st || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_0015(i).ie_st || '|';
         --
         vn_fase := 6;
         --
         pkb_armaz_estr_arq_efd ( ev_reg_blc   => '0015'
                                , el_conteudo  => gl_conteudo );
         --
         vn_fase := 7;
         --
         if i = vt_tab_reg_0015.last then
            exit;
         else
            i := vt_tab_reg_0015.next(i);
         end if;
         --
      end loop;
      --
   end if;
   --
exception
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_armaz_reg_0015 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end pkb_armaz_reg_0015;

-------------------------------------------------------------------------------------------------------

-- Armazena em arquivo o REGISTRO 0005: DADOS COMPLEMENTARES DA ENTIDADE
procedure pkb_armaz_reg_0005
is
   --
   vn_fase  number := 0;
   i        pls_integer;
   --
begin
   --
   vn_fase := 1;
   --
   if nvl(vt_tab_reg_0005.count,0) > 0 then
      --
      vn_fase := 2;
      --
      i := nvl(vt_tab_reg_0005.first,0);
      --
      vn_fase := 3;
      --
      loop
         --
         vn_fase := 4;
         --
         if nvl(i,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 5;
         -- cria a estrutura do registro separado por PIPE "|"
         gl_conteudo := '|';
         --
         gl_conteudo := gl_conteudo || vt_tab_reg_0005(i).reg || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_0005(i).fantasia || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_0005(i).cep || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_0005(i).lograd || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_0005(i).num || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_0005(i).compl || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_0005(i).bairro || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_0005(i).fone || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_0005(i).fax || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_0005(i).email || '|';
         --
         vn_fase := 6;
         --
         pkb_armaz_estr_arq_efd ( ev_reg_blc   => '0005'
                                , el_conteudo  => gl_conteudo );
         --
         vn_fase := 7;
         --
         if i = vt_tab_reg_0005.last then
            exit;
         else
            i := vt_tab_reg_0005.next(i);
         end if;
         --
      end loop;
      --
   end if;
   --
exception
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_armaz_reg_0005 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end pkb_armaz_reg_0005;

-------------------------------------------------------------------------------------------------------
-- Armazena em arquivo o REGISTRO 0002: ABERTURA DO BLOCO 0
procedure pkb_armaz_reg_0002
is
   --
   vn_fase  number := 0;
   i        pls_integer;
   --
begin
   --
   vn_fase := 1;
   --
   if (nvl(vt_tab_reg_0002.count,0) > 0 and TO_DATE(gt_row_abertura_efd.dt_ini,'DD/MM/RRRR') >= TO_DATE('01/01/2020','DD/MM/RRRR') ) 
       and gt_row_abertura_efd.dm_ind_ativ <> 1  then --Para o indicador ¿outros¿ não deve ser gerado o registro 0002 do Sped.
      --
      vn_fase := 2;
      --
      i := nvl(vt_tab_reg_0002.first,0);
      --
      vn_fase := 3;
      --
      loop
         --
         vn_fase := 4;
         --
         if nvl(i,0) = 0 then
            exit;
         end if;
         --            
         --
         vn_fase := 5;
         -- cria a estrutura do registro separado por PIPE "|"
         gl_conteudo := '|';
         -- 
         gl_conteudo := gl_conteudo || vt_tab_reg_0002(i).reg || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_0002(i).contrb || '|';                     
         --
         vn_fase := 6;
         --
         pkb_armaz_estr_arq_efd ( ev_reg_blc   => '0002'
                                , el_conteudo  => gl_conteudo );
         --
         vn_fase := 7;
         --
         if i = vt_tab_reg_0002.last then
            exit;
         else
            i := vt_tab_reg_0002.next(i);
         end if;
         --
      end loop;
      --
   end if;
   --
exception
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_armaz_reg_0002 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end pkb_armaz_reg_0002;

-------------------------------------------------------------------------------------------------------

-- Armazena em arquivo o REGISTRO 0001: ABERTURA DO BLOCO 0
procedure pkb_armaz_reg_0001
is
   --
   vn_fase  number := 0;
   i        pls_integer;
   --
begin
   --
   vn_fase := 1;
   --
   if nvl(vt_tab_reg_0001.count,0) > 0 then
      --
      vn_fase := 2;
      --
      i := nvl(vt_tab_reg_0001.first,0);
      --
      vn_fase := 3;
      --
      loop
         --
         vn_fase := 4;
         --
         if nvl(i,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 5;
         -- cria a estrutura do registro separado por PIPE "|"
         gl_conteudo := '|';
         --
         gl_conteudo := gl_conteudo || vt_tab_reg_0001(i).reg || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_0001(i).ind_mov || '|';
         --
         vn_fase := 6;
         --
         pkb_armaz_estr_arq_efd ( ev_reg_blc   => '0001'
                                , el_conteudo  => gl_conteudo );
         --
         vn_fase := 7;
         --
         if i = vt_tab_reg_0001.last then
            exit;
         else
            i := vt_tab_reg_0001.next(i);
         end if;
         --
      end loop;
      --
   end if;
   --
exception
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_armaz_reg_0001 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end pkb_armaz_reg_0001;

-------------------------------------------------------------------------------------------------------

-- Armazena em arquivo o REGISTRO 0000: ABERTURA DO ARQUIVO DIGITAL E IDENTIFICAÇÃO DA ENTIDADE
procedure pkb_armaz_reg_0000
is
   --
   vn_fase  number := 0;
   i        pls_integer;
   --
begin
   --
   vn_fase := 1;
   --
   if nvl(vt_tab_reg_0000.count,0) > 0 then
      --
      vn_fase := 2;
      --
      i := nvl(vt_tab_reg_0000.first,0);
      --
      vn_fase := 3;
      --
      loop
         --
         vn_fase := 4;
         --
         if nvl(i,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 5;
         -- cria a estrutura do registro separado por PIPE "|"
         gl_conteudo := '|';
         --
         gl_conteudo := gl_conteudo || vt_tab_reg_0000(i).reg || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_0000(i).cod_ver || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_0000(i).cod_fin || '|';
         gl_conteudo := gl_conteudo || to_char(vt_tab_reg_0000(i).dt_ini, 'ddmmrrrr') || '|';
         gl_conteudo := gl_conteudo || to_char(vt_tab_reg_0000(i).dt_fin, 'ddmmrrrr') || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_0000(i).nome || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_0000(i).cnpj || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_0000(i).cpf || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_0000(i).uf || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_0000(i).ie || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_0000(i).cod_mun || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_0000(i).im || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_0000(i).suframa || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_0000(i).ind_perfil || '|';
         gl_conteudo := gl_conteudo || vt_tab_reg_0000(i).ind_ativ || '|';
         --
         vn_fase := 6;
         --
         pkb_armaz_estr_arq_efd ( ev_reg_blc   => '0000'
                                , el_conteudo  => gl_conteudo );
         --
         vn_fase := 7;
         --
         if i = vt_tab_reg_0000.last then
            exit;
         else
            i := vt_tab_reg_0000.next(i);
         end if;
         --
      end loop;
      --
   end if;
   --
exception
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_armaz_reg_0000 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end pkb_armaz_reg_0000;

-------------------------------------------------------------------------------------------------------

-- Armazena em arquivo dados do BLOCO 0: ABERTURA, IDENTIFICAÇÃO E REFERÊNCIAS
procedure pkb_armaz_arq_bloco_0
is
   --
   vn_fase  number := 0;
   --
begin
   --
   vn_fase := 1;
   -- Armazena em arquivo o REGISTRO 0000: ABERTURA DO ARQUIVO DIGITAL E IDENTIFICAÇÃO DA ENTIDADE
   pkb_armaz_reg_0000;
   --
   vn_fase := 2;
   -- Armazena em arquivo o REGISTRO 0001: ABERTURA DO BLOCO 0
   pkb_armaz_reg_0001;
   --
   vn_fase := 2.1;
   -- Armazena em arquivo o REGISTRO 0002: DADOS COMPLEMENTARES DA ENTIDADE
   pkb_armaz_reg_0002;
   --
   vn_fase := 3;
   -- Armazena em arquivo o REGISTRO 0005: DADOS COMPLEMENTARES DA ENTIDADE
   pkb_armaz_reg_0005;
   --
   vn_fase := 4;
   -- Armazena em arquivo o REGISTRO 0015: DADOS DO CONTRIBUINTE SUBSTITUTO
   pkb_armaz_reg_0015;
   --
   vn_fase := 5;
   -- Armazena em arquivo o REGISTRO 0100: DADOS DO CONTABILISTA
   pkb_armaz_reg_0100;
   --
   vn_fase := 6;
   -- Armazena em arquivo o REGISTRO 0150: TABELA DE CADASTRO DO PARTICIPANTE
   pkb_armaz_reg_0150;
   --
   vn_fase := 7;
   -- Armazena em arquivo o REGISTRO 0190: IDENTIFICAÇÃO DAS UNIDADES DE MEDIDA
   pkb_armaz_reg_0190;
   --
   vn_fase := 8;
   -- Armazena em arquivo o REGISTRO 0200: TABELA DE IDENTIFICAÇÃO DO ITEM (PRODUTO E SERVIÇOS)
   pkb_armaz_reg_0200;
   --
   vn_fase := 9;
   -- Armazena em arquivo o REGISTRO 0300: CADASTRO DE BENS OU COMPONENTES DO ATIVO IMOBILIZADO
   pkb_armaz_reg_0300;
   --
   vn_fase := 10;
   -- Armazena em arquivo o REGISTRO 0400: TABELA DE NATUREZA DA OPERAÇÃO/PRESTAÇÃO
   pkb_armaz_reg_0400;
   --
   vn_fase := 11;
   -- Armazena em arquivo o REGISTRO 0450: TABELA DE INFORMAÇÃO COMPLEMENTAR DO DOCUMENTO FISCAL
   pkb_armaz_reg_0450;
   --
   vn_fase := 12;
   -- Armazena em arquivo o REGISTRO 0460: TABELA DE OBSERVAÇÕES DO LANÇAMENTO FISCAL
   pkb_armaz_reg_0460;
   --
   vn_fase := 13;
   -- Armazena em arquivo o REGISTRO 0500: PLANO DE CONTAS CONTÁBEIS
   pkb_armaz_reg_0500;
   --
   vn_fase := 14;
   -- Armazena em arquivo o REGISTRO 0600: CENTRO DE CUSTOS
   pkb_armaz_reg_0600;
   --
   vn_fase := 15;
   -- Armazena em arquivo o REGISTRO 0990: ENCERRAMENTO DO BLOCO 0
   pkb_armaz_reg_0990;
   --
exception
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_armaz_arq_bloco_0 fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end pkb_armaz_arq_bloco_0;

-------------------------------------------------------------------------------------------------------

-- procedimento monta estrutura do arquivo do Sped Fiscal
procedure pkb_monta_estr_arq_efd
is
   --
   vn_fase  number := 0;
   --
begin
   --
   vn_fase := 1;
   -- Armazena em arquivo dados do BLOCO 0: ABERTURA, IDENTIFICAÇÃO E REFERÊNCIAS
   pkb_armaz_arq_bloco_0;
   --
   vn_fase := 2;
   -- Armazena em arquivo dados doBLOCO B: ESCRITURAÇÃO E APURAÇÃO DO ISS
   pkb_armaz_arq_bloco_b;
   --
   vn_fase := 3;
   -- Armazena em arquivo dados do BLOCO C: DOCUMENTOS FISCAIS I - MERCADORIAS (ICMS/IPI)
   pkb_armaz_arq_bloco_c;
   --
   vn_fase := 4;
   -- Armazena em arquivo dados do BLOCO D: DOCUMENTOS FISCAIS II - SERVIÇOS (ICMS)
   pkb_armaz_arq_bloco_d;
   --
   vn_fase := 5;
   -- Armazena em arquivo dados do BLOCO E: APURAÇÃO DO ICMS E DO IPI
   pkb_armaz_arq_bloco_e;
   --
   vn_fase := 6;
   -- Armazena em arquivo dados do BLOCO G - CONTROLE DO CRÉDITO DE ICMS DO ATIVO PERMANENTE CIAP
   pkb_armaz_arq_bloco_g;
   --
   vn_fase := 7;
   -- Armazena em arquivo dados do BLOCO H: INVENTÁRIO FÍSICO
   pkb_armaz_arq_bloco_h;
   --
   vn_fase := 8;
   -- Armazena em arquivo dados do BLOCO K: CONTROLE DA PRODUÇÃO E DO ESTOQUE
   pkb_armaz_arq_bloco_k;
   --
   vn_fase := 9;
   -- Armazena em arquivo dados do BLOCO 1: OUTRAS INFORMAÇÕES
   pkb_armaz_arq_bloco_1;
   --
   vn_fase := 10;
   -- Armazena em arquivo dados do BLOCO 9: CONTROLE E ENCERRAMENTO DO ARQUIVO DIGITAL
   pkb_armaz_arq_bloco_9;
   --
   vn_fase := 11;
   -- grava as informações da estrutura do arquivo do Sped Fiscal
   pkb_grava_estr_arq_efd;
   --
exception
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_monta_estr_arq_efd fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end pkb_monta_estr_arq_efd;

-------------------------------------------------------------------------------------------------------

-- excluir os registros anteriores
procedure pkb_excluir_arq_efd
is
   --
   vn_fase  number := 0;
   --
begin
   --
   vn_fase := 1;
   --
   delete from estr_arq_efd
    where aberturaefd_id = gt_row_abertura_efd.id;
   --
   vn_fase := 2;
   --
   commit;
   --
exception
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_excluir_arq_efd fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         --
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gt_row_abertura_efd.id
                                          , ev_obj_referencia  => 'ABERTURA_EFD' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end pkb_excluir_arq_efd;

-------------------------------------------------------------------------------------------------------
procedure pkb_insert_tabela_tmp is
  --
begin
  --
  -- Nota Fiscal
  insert 
  into tmp_nota_fiscal 
  (ID,
EMPRESA_ID,
PESSOA_ID,
SITDOCTO_ID,
NATOPER_ID,
LOTE_ID,
INUTILIZANF_ID,
VERSAO,
ID_TAG_NFE,
PK_NITEM,
NAT_OPER,
DM_IND_PAG,
MODFISCAL_ID,
DM_IND_EMIT,
DM_IND_OPER,
DT_SAI_ENT,
DT_EMISS,
NRO_NF,
SERIE,
UF_EMBARQ,
LOCAL_EMBARQ,
NF_EMPENHO,
PEDIDO_COMPRA,
CONTRATO_COMPRA,
DM_ST_PROC,
DT_ST_PROC,
DM_FORMA_EMISS,
DM_IMPRESSA,
DM_TP_IMPR,
DM_TP_AMB,
DM_FIN_NFE,
DM_PROC_EMISS,
VERS_PROC,
DT_AUT_SEFAZ,
DM_AUT_SEFAZ,
CIDADE_IBGE_EMIT,
UF_IBGE_EMIT,
DT_HR_ENT_SIST,
NRO_CHAVE_NFE,
CNF_NFE,
DIG_VERIF_CHAVE,
VERS_APL,
DT_HR_RECBTO,
NRO_PROTOCOLO,
DIGEST_VALUE,
MSGWEBSERV_ID,
COD_MSG,
MOTIVO_RESP,
NFE_PROC_XML,
DM_ST_EMAIL,
ID_USUARIO_ERP,
IMPRESSORA_ID,
USUARIO_ID,
DM_ST_INTEGRA,
VIAS_DANFE_CUSTOM,
NRO_CHAVE_NFE_ADIC,
NRO_TENTATIVAS_IMPR,
DT_ULT_TENTA_IMPR,
SUB_SERIE,
CODCONSITEMCONT_ID,
INFORCOMPDCTOFISCAL_ID,
COD_CTA,
DM_TP_LIGACAO,
DM_COD_GRUPO_TENSAO,
DM_TP_ASSINANTE,
SISTORIG_ID,
UNIDORG_ID,
SERIE_SCAN,
NRO_NF_SCAN,
HORA_SAI_ENT,
NRO_CHAVE_CTE_REF,
DT_CONT,
JUST_CONT,
DM_RET_NF_ERP,
XML_WSSINAL_SUFRAMA,
DM_ST_WSSINAL_SUFRAMA,
DM_ARM_NFE_TERC,
DM_REC_XML,
DM_DANFE_REC,
NRO_EMAIL_ENV_FORN,
DM_FIN_EMAIL_FORN,
SEQ_NRO_ORD_EMB,
DT_HR_REG_DPEC,
NRO_REG_DPEC,
DT_EMAIL_ENV_FORN,
NRO_ORD_EMB,
DM_ID_DEST,
DM_IND_FINAL,
DM_IND_PRES,
LOCAL_DESPACHO,
EMPRESAINTEGRBANCO_ID,
INF_CPL_IMP,
HASH,
QR_CODE,
DM_LEGADO,
DM_IND_ATIV_PART,
DM_MOT_DES_ICMS_PART,
DM_CALC_ICMSST_PART,
VERSION,
DM_DOWNLOAD_XML_SIC,
URL_CHAVE,
DM_ENVIO_REINF,
COD_MENSAGEM,
MSG_SEFAZ,
QR_CODE_NFCE,
CSC_NFCE,
DM_NRO_CHAVE_NFE_ORIG,
MODELODANFE_ID)
    select ID,
EMPRESA_ID,
PESSOA_ID,
SITDOCTO_ID,
NATOPER_ID,
LOTE_ID,
INUTILIZANF_ID,
VERSAO,
ID_TAG_NFE,
PK_NITEM,
NAT_OPER,
DM_IND_PAG,
MODFISCAL_ID,
DM_IND_EMIT,
DM_IND_OPER,
DT_SAI_ENT,
DT_EMISS,
NRO_NF,
SERIE,
UF_EMBARQ,
LOCAL_EMBARQ,
NF_EMPENHO,
PEDIDO_COMPRA,
CONTRATO_COMPRA,
DM_ST_PROC,
DT_ST_PROC,
DM_FORMA_EMISS,
DM_IMPRESSA,
DM_TP_IMPR,
DM_TP_AMB,
DM_FIN_NFE,
DM_PROC_EMISS,
VERS_PROC,
DT_AUT_SEFAZ,
DM_AUT_SEFAZ,
CIDADE_IBGE_EMIT,
UF_IBGE_EMIT,
DT_HR_ENT_SIST,
NRO_CHAVE_NFE,
CNF_NFE,
DIG_VERIF_CHAVE,
VERS_APL,
DT_HR_RECBTO,
NRO_PROTOCOLO,
DIGEST_VALUE,
MSGWEBSERV_ID,
COD_MSG,
MOTIVO_RESP,
NFE_PROC_XML,
DM_ST_EMAIL,
ID_USUARIO_ERP,
IMPRESSORA_ID,
USUARIO_ID,
DM_ST_INTEGRA,
VIAS_DANFE_CUSTOM,
NRO_CHAVE_NFE_ADIC,
NRO_TENTATIVAS_IMPR,
DT_ULT_TENTA_IMPR,
SUB_SERIE,
CODCONSITEMCONT_ID,
INFORCOMPDCTOFISCAL_ID,
COD_CTA,
DM_TP_LIGACAO,
DM_COD_GRUPO_TENSAO,
DM_TP_ASSINANTE,
SISTORIG_ID,
UNIDORG_ID,
SERIE_SCAN,
NRO_NF_SCAN,
HORA_SAI_ENT,
NRO_CHAVE_CTE_REF,
DT_CONT,
JUST_CONT,
DM_RET_NF_ERP,
XML_WSSINAL_SUFRAMA,
DM_ST_WSSINAL_SUFRAMA,
DM_ARM_NFE_TERC,
DM_REC_XML,
DM_DANFE_REC,
NRO_EMAIL_ENV_FORN,
DM_FIN_EMAIL_FORN,
SEQ_NRO_ORD_EMB,
DT_HR_REG_DPEC,
NRO_REG_DPEC,
DT_EMAIL_ENV_FORN,
NRO_ORD_EMB,
DM_ID_DEST,
DM_IND_FINAL,
DM_IND_PRES,
LOCAL_DESPACHO,
EMPRESAINTEGRBANCO_ID,
INF_CPL_IMP,
HASH,
QR_CODE,
DM_LEGADO,
DM_IND_ATIV_PART,
DM_MOT_DES_ICMS_PART,
DM_CALC_ICMSST_PART,
VERSION,
DM_DOWNLOAD_XML_SIC,
URL_CHAVE,
DM_ENVIO_REINF,
COD_MENSAGEM,
MSG_SEFAZ,
QR_CODE_NFCE,
CSC_NFCE,
DM_NRO_CHAVE_NFE_ORIG,
MODELODANFE_ID -- menção da tabela nota fiscal somente no insert da temporária.
      from nota_fiscal nf
     where nf.dm_st_proc      in (4, 6, 7, 8) -- 4-Autorizada, 6-Denegada, 7-Cancelada, 8-Inutilizada
       and nf.empresa_id      = gt_row_abertura_efd.empresa_id
       and nf.dm_arm_nfe_terc = 0
       and nf.dm_ind_emit     = 1 -- Emissão Terceiro
/*       and decode(gn_dm_dt_escr_dfepoe,
                  0,
                  nvl(nf.dt_sai_ent, nf.dt_emiss),
                  nf.dt_emiss) between gt_row_abertura_efd.dt_ini and gt_row_abertura_efd.dt_fim*/
       and ((nf.dm_ind_emit = 1 and trunc(nvl(nf.dt_sai_ent, nf.dt_emiss)) between trunc(gt_row_abertura_efd.dt_ini) and trunc(gt_row_abertura_efd.dt_fim)) 
             or
            (nf.dm_ind_emit = 0 and nf.dm_ind_oper = 1 and trunc(nf.dt_emiss) between trunc(gt_row_abertura_efd.dt_ini) and trunc(gt_row_abertura_efd.dt_fim)) 
             or
            (nf.dm_ind_emit = 0 and nf.dm_ind_oper = 0 and gn_dm_dt_escr_dfepoe = 0 and trunc(nf.dt_emiss) between trunc(gt_row_abertura_efd.dt_ini) and trunc(gt_row_abertura_efd.dt_fim)) 
             or
            (nf.dm_ind_emit = 0 and nf.dm_ind_oper = 0 and gn_dm_dt_escr_dfepoe = 1 and trunc(nvl(nf.dt_sai_ent, nf.dt_emiss)) between trunc(gt_row_abertura_efd.dt_ini) and trunc(gt_row_abertura_efd.dt_fim)))
    union all
    select ID,
EMPRESA_ID,
PESSOA_ID,
SITDOCTO_ID,
NATOPER_ID,
LOTE_ID,
INUTILIZANF_ID,
VERSAO,
ID_TAG_NFE,
PK_NITEM,
NAT_OPER,
DM_IND_PAG,
MODFISCAL_ID,
DM_IND_EMIT,
DM_IND_OPER,
DT_SAI_ENT,
DT_EMISS,
NRO_NF,
SERIE,
UF_EMBARQ,
LOCAL_EMBARQ,
NF_EMPENHO,
PEDIDO_COMPRA,
CONTRATO_COMPRA,
DM_ST_PROC,
DT_ST_PROC,
DM_FORMA_EMISS,
DM_IMPRESSA,
DM_TP_IMPR,
DM_TP_AMB,
DM_FIN_NFE,
DM_PROC_EMISS,
VERS_PROC,
DT_AUT_SEFAZ,
DM_AUT_SEFAZ,
CIDADE_IBGE_EMIT,
UF_IBGE_EMIT,
DT_HR_ENT_SIST,
NRO_CHAVE_NFE,
CNF_NFE,
DIG_VERIF_CHAVE,
VERS_APL,
DT_HR_RECBTO,
NRO_PROTOCOLO,
DIGEST_VALUE,
MSGWEBSERV_ID,
COD_MSG,
MOTIVO_RESP,
NFE_PROC_XML,
DM_ST_EMAIL,
ID_USUARIO_ERP,
IMPRESSORA_ID,
USUARIO_ID,
DM_ST_INTEGRA,
VIAS_DANFE_CUSTOM,
NRO_CHAVE_NFE_ADIC,
NRO_TENTATIVAS_IMPR,
DT_ULT_TENTA_IMPR,
SUB_SERIE,
CODCONSITEMCONT_ID,
INFORCOMPDCTOFISCAL_ID,
COD_CTA,
DM_TP_LIGACAO,
DM_COD_GRUPO_TENSAO,
DM_TP_ASSINANTE,
SISTORIG_ID,
UNIDORG_ID,
SERIE_SCAN,
NRO_NF_SCAN,
HORA_SAI_ENT,
NRO_CHAVE_CTE_REF,
DT_CONT,
JUST_CONT,
DM_RET_NF_ERP,
XML_WSSINAL_SUFRAMA,
DM_ST_WSSINAL_SUFRAMA,
DM_ARM_NFE_TERC,
DM_REC_XML,
DM_DANFE_REC,
NRO_EMAIL_ENV_FORN,
DM_FIN_EMAIL_FORN,
SEQ_NRO_ORD_EMB,
DT_HR_REG_DPEC,
NRO_REG_DPEC,
DT_EMAIL_ENV_FORN,
NRO_ORD_EMB,
DM_ID_DEST,
DM_IND_FINAL,
DM_IND_PRES,
LOCAL_DESPACHO,
EMPRESAINTEGRBANCO_ID,
INF_CPL_IMP,
HASH,
QR_CODE,
DM_LEGADO,
DM_IND_ATIV_PART,
DM_MOT_DES_ICMS_PART,
DM_CALC_ICMSST_PART,
VERSION,
DM_DOWNLOAD_XML_SIC,
URL_CHAVE,
DM_ENVIO_REINF,
COD_MENSAGEM,
MSG_SEFAZ,
QR_CODE_NFCE,
CSC_NFCE,
DM_NRO_CHAVE_NFE_ORIG,
MODELODANFE_ID -- menção da tabela nota fiscal somente no insert da temporária.
      from nota_fiscal nf
     where nf.dm_st_proc      in (4, 6, 7, 8) -- 4-Autorizada, 6-Denegada, 7-Cancelada, 8-Inutilizada
       and nf.empresa_id      = gt_row_abertura_efd.empresa_id
       and nf.dm_arm_nfe_terc = 0
       and nf.dm_ind_emit     = 0 -- Emisão Prórpia
      -- and to_date(nf.dt_emiss, 'DD/MM/RRRR') between gt_row_abertura_efd.dt_ini and gt_row_abertura_efd.dt_fim;
            and ((nf.dm_ind_emit = 1 and trunc(nvl(nf.dt_sai_ent, nf.dt_emiss)) between trunc(gt_row_abertura_efd.dt_ini) and trunc(gt_row_abertura_efd.dt_fim)) 
             or
            (nf.dm_ind_emit = 0 and nf.dm_ind_oper = 1 and trunc(nf.dt_emiss) between trunc(gt_row_abertura_efd.dt_ini) and trunc(gt_row_abertura_efd.dt_fim)) 
             or
            (nf.dm_ind_emit = 0 and nf.dm_ind_oper = 0 and gn_dm_dt_escr_dfepoe = 0 and trunc(nf.dt_emiss) between trunc(gt_row_abertura_efd.dt_ini) and trunc(gt_row_abertura_efd.dt_fim)) 
             or
            (nf.dm_ind_emit = 0 and nf.dm_ind_oper = 0 and gn_dm_dt_escr_dfepoe = 1 and trunc(nvl(nf.dt_sai_ent, nf.dt_emiss)) between trunc(gt_row_abertura_efd.dt_ini) and trunc(gt_row_abertura_efd.dt_fim)));

  commit;
  --
  --
  -- Total Nota Fiscal
  insert /*+ APPEND */
  into tmp_nota_fiscal_total
    select nft.*
      from nota_fiscal_total nft
     where nft.notafiscal_id in (select id from tmp_nota_fiscal);
  commit;
  --
  -- Item Nota Fiscal
  insert /*+ APPEND */
  into tmp_item_nota_fiscal
    select inf.*
      from item_nota_fiscal inf
     where inf.notafiscal_id in (select id from tmp_nota_fiscal);
  commit;
  --
  -- Imposto Item Nota Fiscal
  insert /*+ APPEND */
  into tmp_imp_itemnf
    select impnf.*
      from imp_itemnf impnf
     where impnf.itemnf_id in (select id from tmp_item_nota_fiscal);
  commit;
  --
  -- Nota Fiscal Registro Analítico
  insert /*+ APPEND */
  into tmp_nfregist_analit
    select nfreg.*
      from nfregist_analit nfreg
     where nfreg.notafiscal_id in (select id from tmp_nota_fiscal);
  commit;
  --
  -- Conhecimento de Transporte
  insert /*+ APPEND */
  into tmp_conhec_transp
    select ct.*
      from conhec_transp ct, 
           mod_fiscal mf
     where ct.empresa_id      = gt_row_abertura_efd.empresa_id --en_empresa_id
       and ct.dm_st_proc      = 4 -- Autorizado
       and ct.dm_arm_cte_terc = 0 -- 0 - Não, 1 - Sim
       --and ct.dm_ind_emit   = 0 -- 0 - Emissão Própria, 1 - Terceiro
       --and ct.dm_ind_oper   = 1 -- 0 - Entrada, 1 - Saída
       and mf.id              = ct.modfiscal_id
       and mf.cod_mod         in ('07', '08', '8B', '09', '10', '11', '26', '27', '57', '63', '67')
       and ((ct.dm_ind_emit = 1 and nvl(ct.dt_sai_ent, ct.dt_hr_emissao) between gt_row_abertura_efd.dt_ini and gt_row_abertura_efd.dt_fim) 
             or
            (ct.dm_ind_emit = 0 and ct.dm_ind_oper = 0 and gn_dm_dt_escr_dfepoe = 0 and ct.dt_hr_emissao between gt_row_abertura_efd.dt_ini and gt_row_abertura_efd.dt_fim) 
             or
            (ct.dm_ind_emit = 0 and ct.dm_ind_oper = 0 and gn_dm_dt_escr_dfepoe = 1 and nvl(ct.dt_sai_ent, ct.dt_hr_emissao) between gt_row_abertura_efd.dt_ini and gt_row_abertura_efd.dt_fim) 
             or
            (ct.dm_ind_emit = 0 and ct.dm_ind_oper = 1 and trunc(ct.dt_hr_emissao) between gt_row_abertura_efd.dt_ini and gt_row_abertura_efd.dt_fim));
  commit;
  --
  -- Conhecimento de Transporte Registro Analítico
  insert /*+ APPEND */
  into tmp_ct_reg_anal
    select cra.*
      from ct_reg_anal cra
     where cra.conhectransp_id in (select id from tmp_conhec_transp);
  commit;
  --
  -- Conhecimento de Transporte Valores da Prestação de Serviço
  insert /*+ APPEND */
  into tmp_conhec_transp_vlprest
    select ctv.*
      from conhec_transp_vlprest ctv
     where conhectransp_id in (select id from tmp_conhec_transp);
  commit;
  --
  -- Redução Z ECF
  insert /*+ APPEND */
  into tmp_reducao_z_ecf
    select rze.*
      from reducao_z_ecf rze
     where to_date( rze.dt_doc, 'DD/MM/RRRR') between gt_row_abertura_efd.dt_ini and gt_row_abertura_efd.dt_fim
       and equipecf_id in (select id
                             from equip_ecf e
                            where e.empresa_id = gt_row_abertura_efd.empresa_id);
  commit;
  --
  -- Total Parcial Redução Z EFC
  insert /*+ APPEND */
  into tmp_tot_parc_red_z_ecf
    select tprz.*
      from tot_parc_red_z_ecf tprz
     where reducaozecf_id in (select id from tmp_reducao_z_ecf);
  commit;
  --
                          -- Documento Fiscal Emitido por ECF C460
  insert /*+ APPEND */
  into tmp_doc_fiscal_emit_ecf
    select dfee.*
      from doc_fiscal_emit_ecf dfee
     where reducaozecf_id in (select id from tmp_reducao_z_ecf);
  commit;
  --
  -- Itens Documento Fiscal Emitido por ECF C470
  insert /*+ APPEND */
  into tmp_it_doc_fiscal_emit_ecf
    select idfe.*
      from it_doc_fiscal_emit_ecf idfe
     where docfiscalemitecf_id in (select id from tmp_doc_fiscal_emit_ecf);
  commit;
  --
end pkb_insert_tabela_tmp;
-------------------------------------------------------------------------------------------------------
-- Procedimento inicia montagem da estrutura do arquivo texto do SPED Fiscal
procedure pkb_gera_arquivo_efd(en_aberturaefd_id in abertura_efd.id%type) is
  --
  vn_fase number := 0;
  --
  vv_param_value  varchar2(1) := '0';
  vn_multorg_id   mult_org.id%type;
  vn_empresa_id   empresa.id%type;
  vv_erro         varchar2(4000);
  MODULO_SISTEMA  constant number := pk_csf.fkg_ret_id_modulo_sistema('EFD_ICMS_IPI');
  GRUPO_SISTEMA   constant number := pk_csf.fkg_ret_id_grupo_sistema(MODULO_SISTEMA, 'SESSION_OPTIMIZER_SPED');
  --
begin
  --
  --inicio #70048
  --
  begin
    -- Recupera empresa_id e multorg_id
   select e.id empresa_id
         ,e.multorg_id
     into vn_empresa_id
         ,vn_multorg_id
     from abertura_efd aefd
         ,empresa e
    where 1=1
      and aefd.empresa_id = e.id
      and aefd.id = en_aberturaefd_id;
   exception
     when others then
       vn_empresa_id := null;
       vn_multorg_id := null;
   end;
   --
   -- Busca o Parametro para checar se 
   if not PK_CSF.fkg_ret_vl_param_geral_sistema (en_multorg_id => vn_multorg_id,
                                                 en_empresa_id => vn_empresa_id,
                                                 en_modulo_id  => MODULO_SISTEMA,
                                                 en_grupo_id   => GRUPO_SISTEMA,
                                                 ev_param_name => 'SESSION_OPTIMIZER',
                                                 sv_vlr_param  => vv_param_value,
                                                 sv_erro       => vv_erro) then
      --
      vv_param_value := '0';
      --
   end if;
   if vv_param_value = '1' then
	   BEGIN
		 EXECUTE IMMEDIATE 'ALTER SESSION SET OPTIMIZER_FEATURES_ENABLE=''11.2.0.3'' ';
	   END;
	   BEGIN
		 EXECUTE IMMEDIATE 'ALTER SESSION SET OPTIMIZER_INDEX_COST_ADJ=80';
	   END;
	   BEGIN
		 EXECUTE IMMEDIATE 'ALTER SESSION SET OPTIMIZER_INDEX_CACHING=20';
	   END;
     --#70570 adicionando nova condição de sessão
     BEGIN
     EXECUTE IMMEDIATE 'ALTER SESSION SET DB_FILE_MULTIBLOCK_READ_COUNT=8';
     END;
     --
   end if;
  -- fim #70048
  --
  vn_fase := 1;
  --
  pkb_inicia_dados;
  --
  vn_fase := 2;
  --
  pkb_inicia_param(en_aberturaefd_id => en_aberturaefd_id);
  --
  vn_fase := 3;
  --
  if nvl(gt_row_abertura_efd.id, 0) > 0 then
    --
    /* disparar procedimentos de carga em tabelas TMPs */
    --
    gn_dm_dt_escr_dfepoe := pk_csf.fkg_dmdtescrdfepoe_empresa(en_empresa_id => gt_row_abertura_efd.empresa_id);  
    --  
    vn_fase := 4;
    --
    if nvl(gt_row_abertura_efd.dm_situacao, 0) = 2 then -- Validado
      --
      --
      vn_fase := 5;
      --
      -- Indica para o registro que o arquivo está "Em Geração", assim NÃO sofre alteração ou interrupção
      update abertura_efd ae
         set ae.dm_situacao = 5 -- Em Geração
       where ae.id          = gt_row_abertura_efd.id;
	  --
	  vn_fase := 6;
      --
      commit;
      --
	  pkb_insert_tabela_tmp;
	  --
      vn_fase := 7;
      --
      -- Excluir os registros anteriores
      pkb_excluir_arq_efd;
      --
      vn_fase := 8;
      --
      gn_versao := pk_csf_efd.fkg_versao_layout_efd(en_id => gt_row_abertura_efd.verslayoutefd_id);
      --
      gv_dm_ind_perfil := gt_row_abertura_efd.dm_ind_perfil;
      --
      gn_dm_dt_escr_dfepoe := pk_csf.fkg_dmdtescrdfepoe_empresa(en_empresa_id => gt_row_abertura_efd.empresa_id);
    --
      gn_origem_dado_pessoa := pk_csf_api_efd.fkg_origem_dado_pessoa(en_empresa_id => gt_row_abertura_efd.empresa_id);    
      --
      vn_fase := 9;
      --
      -- Procedimento alimenta os arrays do Sped Fiscal
      pkb_monta_array_efd;
      --
      vn_fase := 10;
      --
      -- Verifica se foi apresentado erro em algum bloco em 
      -- meio ao procedimento de alimentar os arrays do Sped Fiscal
      if gn_error_block = 0 then
        --
        vn_fase := 11;
        --
        -- Procedimento monta estrutura do arquivo do Sped Fiscal
        pkb_monta_estr_arq_efd;
        --
        vn_fase := 13;
        --
        -- Indica para o registro que o arquivo está "Em Geração", assim NÃO sofre alteração ou interrupção
        update abertura_efd ae
           set ae.dm_situacao = 3 -- Gerado Arquivo
         where ae.id          = gt_row_abertura_efd.id;
        --
      else
        --
        vn_fase := 12;
        --
        -- Indica para o registro que o arquivo não está "Validado", mantendo a situação com "Erro na geração do arquivo"
        update abertura_efd ae
           set ae.dm_situacao = 4 -- Erro na geração do arquivo
         where ae.id          = gt_row_abertura_efd.id;
        --
      end if;
      --
    else
      --
      vn_fase := 14;
      --
      -- Indica para o registro que o arquivo não está "Validado", mantendo a situação com "Erro na geração do arquivo"
      update abertura_efd ae
         set ae.dm_situacao = 4 -- Erro na geração do arquivo
       where ae.id          = gt_row_abertura_efd.id;
      --
    end if;
    --
  end if;
  --
  vn_fase := 15;
  --
  commit;
  --
exception
  when others then
    --
    -- Indica para o registro que o arquivo que ocorreu algum erro na geração
    begin
      update abertura_efd ae
         set ae.dm_situacao = 4 -- Erro na geração do arquivo
       where ae.id          = gt_row_abertura_efd.id;
    end;
    --
    gv_mensagem_log := 'Erro na pkb_gera_arquivo_efd fase(' || vn_fase || '): ' || sqlerrm;
    --
    declare
      vn_loggenerico_id log_generico.id%type;
    begin
      --
      pk_log_generico.pkb_log_generico(sn_loggenerico_id => vn_loggenerico_id,
                                       ev_mensagem       => gv_mensagem_log,
                                       ev_resumo         => gv_mensagem_log,
                                       en_tipo_log       => erro_de_sistema,
                                       en_referencia_id  => gt_row_abertura_efd.id,
                                       ev_obj_referencia => 'ABERTURA_EFD');
      --
    exception
      when others then
        null;
    end;
    --
    raise_application_error(-20101, gv_mensagem_log);
    --
end pkb_gera_arquivo_efd;
------------------------------------------------------------------------------------------
end pk_gera_arq_efd;
/
